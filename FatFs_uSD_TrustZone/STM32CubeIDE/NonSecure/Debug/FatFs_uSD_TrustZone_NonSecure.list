
FatFs_uSD_TrustZone_NonSecure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08040000  08040000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002118  080401f8  080401f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08042310  08042310  00012310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08042360  08042360  00018018  2**0
                  CONTENTS
  4 .ARM          00000000  08042360  08042360  00018018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08042360  08042360  00018018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08042360  08042360  00012360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08042368  08042368  00012368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20018000  08042370  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  20018018  08042388  00018018  2**2
                  ALLOC
 10 ._user_heap_stack 00003000  20018088  08042388  00018088  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00018018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d05a  00000000  00000000  0001804e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bda  00000000  00000000  000250a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c90  00000000  00000000  00026c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bc8  00000000  00000000  00027918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b8fa  00000000  00000000  000284e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dec4  00000000  00000000  00053dda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00127164  00000000  00000000  00061c9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00188e02  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033f0  00000000  00000000  00188e54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080401f8 <__do_global_dtors_aux>:
 80401f8:	b510      	push	{r4, lr}
 80401fa:	4c05      	ldr	r4, [pc, #20]	; (8040210 <__do_global_dtors_aux+0x18>)
 80401fc:	7823      	ldrb	r3, [r4, #0]
 80401fe:	b933      	cbnz	r3, 804020e <__do_global_dtors_aux+0x16>
 8040200:	4b04      	ldr	r3, [pc, #16]	; (8040214 <__do_global_dtors_aux+0x1c>)
 8040202:	b113      	cbz	r3, 804020a <__do_global_dtors_aux+0x12>
 8040204:	4804      	ldr	r0, [pc, #16]	; (8040218 <__do_global_dtors_aux+0x20>)
 8040206:	e000      	b.n	804020a <__do_global_dtors_aux+0x12>
 8040208:	bf00      	nop
 804020a:	2301      	movs	r3, #1
 804020c:	7023      	strb	r3, [r4, #0]
 804020e:	bd10      	pop	{r4, pc}
 8040210:	20018018 	.word	0x20018018
 8040214:	00000000 	.word	0x00000000
 8040218:	080422c4 	.word	0x080422c4

0804021c <frame_dummy>:
 804021c:	b508      	push	{r3, lr}
 804021e:	4b03      	ldr	r3, [pc, #12]	; (804022c <frame_dummy+0x10>)
 8040220:	b11b      	cbz	r3, 804022a <frame_dummy+0xe>
 8040222:	4903      	ldr	r1, [pc, #12]	; (8040230 <frame_dummy+0x14>)
 8040224:	4803      	ldr	r0, [pc, #12]	; (8040234 <frame_dummy+0x18>)
 8040226:	e000      	b.n	804022a <frame_dummy+0xe>
 8040228:	bf00      	nop
 804022a:	bd08      	pop	{r3, pc}
 804022c:	00000000 	.word	0x00000000
 8040230:	2001801c 	.word	0x2001801c
 8040234:	080422c4 	.word	0x080422c4

08040238 <BSP_LED_Init>:
  *     @arg  LED9
  *     @arg  LED10
  * @retval BSP error code
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8040238:	b580      	push	{r7, lr}
 804023a:	b08c      	sub	sp, #48	; 0x30
 804023c:	af00      	add	r7, sp, #0
 804023e:	4603      	mov	r3, r0
 8040240:	71fb      	strb	r3, [r7, #7]
  int32_t          status = BSP_ERROR_NONE;
 8040242:	2300      	movs	r3, #0
 8040244:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitTypeDef GPIO_Init;

  /* Enable the GPIO_LED Clock */
  if (Led == LED9)
 8040246:	79fb      	ldrb	r3, [r7, #7]
 8040248:	2b00      	cmp	r3, #0
 804024a:	d10c      	bne.n	8040266 <BSP_LED_Init+0x2e>
  {
    LED9_GPIO_CLK_ENABLE();
 804024c:	4b26      	ldr	r3, [pc, #152]	; (80402e8 <BSP_LED_Init+0xb0>)
 804024e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040250:	4a25      	ldr	r2, [pc, #148]	; (80402e8 <BSP_LED_Init+0xb0>)
 8040252:	f043 0308 	orr.w	r3, r3, #8
 8040256:	64d3      	str	r3, [r2, #76]	; 0x4c
 8040258:	4b23      	ldr	r3, [pc, #140]	; (80402e8 <BSP_LED_Init+0xb0>)
 804025a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804025c:	f003 0308 	and.w	r3, r3, #8
 8040260:	617b      	str	r3, [r7, #20]
 8040262:	697b      	ldr	r3, [r7, #20]
 8040264:	e019      	b.n	804029a <BSP_LED_Init+0x62>
  }
  else /* Led = LED10 */
  {
    /* Enable VddIO2 for GPIOG */
    __HAL_RCC_PWR_CLK_ENABLE();
 8040266:	4b20      	ldr	r3, [pc, #128]	; (80402e8 <BSP_LED_Init+0xb0>)
 8040268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804026a:	4a1f      	ldr	r2, [pc, #124]	; (80402e8 <BSP_LED_Init+0xb0>)
 804026c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8040270:	6593      	str	r3, [r2, #88]	; 0x58
 8040272:	4b1d      	ldr	r3, [pc, #116]	; (80402e8 <BSP_LED_Init+0xb0>)
 8040274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8040276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 804027a:	613b      	str	r3, [r7, #16]
 804027c:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 804027e:	f000 fc13 	bl	8040aa8 <HAL_PWREx_EnableVddIO2>
    LED10_GPIO_CLK_ENABLE();
 8040282:	4b19      	ldr	r3, [pc, #100]	; (80402e8 <BSP_LED_Init+0xb0>)
 8040284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040286:	4a18      	ldr	r2, [pc, #96]	; (80402e8 <BSP_LED_Init+0xb0>)
 8040288:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 804028c:	64d3      	str	r3, [r2, #76]	; 0x4c
 804028e:	4b16      	ldr	r3, [pc, #88]	; (80402e8 <BSP_LED_Init+0xb0>)
 8040290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8040296:	60fb      	str	r3, [r7, #12]
 8040298:	68fb      	ldr	r3, [r7, #12]
  }

  /* configure the GPIO_LED pin */
  GPIO_Init.Pin   = LED_PIN[Led];
 804029a:	79fb      	ldrb	r3, [r7, #7]
 804029c:	4a13      	ldr	r2, [pc, #76]	; (80402ec <BSP_LED_Init+0xb4>)
 804029e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80402a2:	61bb      	str	r3, [r7, #24]
  GPIO_Init.Mode  = GPIO_MODE_OUTPUT_PP;
 80402a4:	2301      	movs	r3, #1
 80402a6:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Pull  = GPIO_PULLUP;
 80402a8:	2301      	movs	r3, #1
 80402aa:	623b      	str	r3, [r7, #32]
  GPIO_Init.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80402ac:	2303      	movs	r3, #3
 80402ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_Init);
 80402b0:	79fb      	ldrb	r3, [r7, #7]
 80402b2:	4a0f      	ldr	r2, [pc, #60]	; (80402f0 <BSP_LED_Init+0xb8>)
 80402b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80402b8:	f107 0218 	add.w	r2, r7, #24
 80402bc:	4611      	mov	r1, r2
 80402be:	4618      	mov	r0, r3
 80402c0:	f000 f9d6 	bl	8040670 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 80402c4:	79fb      	ldrb	r3, [r7, #7]
 80402c6:	4a0a      	ldr	r2, [pc, #40]	; (80402f0 <BSP_LED_Init+0xb8>)
 80402c8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80402cc:	79fb      	ldrb	r3, [r7, #7]
 80402ce:	4a07      	ldr	r2, [pc, #28]	; (80402ec <BSP_LED_Init+0xb4>)
 80402d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80402d4:	2201      	movs	r2, #1
 80402d6:	4619      	mov	r1, r3
 80402d8:	f000 fb4a 	bl	8040970 <HAL_GPIO_WritePin>

  return status;
 80402dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80402de:	4618      	mov	r0, r3
 80402e0:	3730      	adds	r7, #48	; 0x30
 80402e2:	46bd      	mov	sp, r7
 80402e4:	bd80      	pop	{r7, pc}
 80402e6:	bf00      	nop
 80402e8:	40021000 	.word	0x40021000
 80402ec:	20018000 	.word	0x20018000
 80402f0:	20018004 	.word	0x20018004

080402f4 <BSP_LED_On>:
  *     @arg  LED9
  *     @arg  LED10
  * @retval BSP error code
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 80402f4:	b580      	push	{r7, lr}
 80402f6:	b084      	sub	sp, #16
 80402f8:	af00      	add	r7, sp, #0
 80402fa:	4603      	mov	r3, r0
 80402fc:	71fb      	strb	r3, [r7, #7]
  int32_t status = BSP_ERROR_NONE;
 80402fe:	2300      	movs	r3, #0
 8040300:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8040302:	79fb      	ldrb	r3, [r7, #7]
 8040304:	4a07      	ldr	r2, [pc, #28]	; (8040324 <BSP_LED_On+0x30>)
 8040306:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 804030a:	79fb      	ldrb	r3, [r7, #7]
 804030c:	4a06      	ldr	r2, [pc, #24]	; (8040328 <BSP_LED_On+0x34>)
 804030e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8040312:	2200      	movs	r2, #0
 8040314:	4619      	mov	r1, r3
 8040316:	f000 fb2b 	bl	8040970 <HAL_GPIO_WritePin>

  return status;
 804031a:	68fb      	ldr	r3, [r7, #12]
}
 804031c:	4618      	mov	r0, r3
 804031e:	3710      	adds	r7, #16
 8040320:	46bd      	mov	sp, r7
 8040322:	bd80      	pop	{r7, pc}
 8040324:	20018004 	.word	0x20018004
 8040328:	20018000 	.word	0x20018000

0804032c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 804032c:	b480      	push	{r7}
 804032e:	af00      	add	r7, sp, #0
#endif

  /* Non-secure main application shall call SystemCoreClockUpdate() to update */
  /* the SystemCoreClock variable to insure non-secure application relies on  */
  /* the initial clock reference set by secure application.                   */
}
 8040330:	bf00      	nop
 8040332:	46bd      	mov	sp, r7
 8040334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040338:	4770      	bx	lr
	...

0804033c <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 804033c:	b580      	push	{r7, lr}
 804033e:	af00      	add	r7, sp, #0
  /* Get the SystemCoreClock value from the secure domain */
  SystemCoreClock = SECURE_SystemCoreClockUpdate();
 8040340:	f001 ffde 	bl	8042300 <__SECURE_SystemCoreClockUpdate_veneer>
 8040344:	4603      	mov	r3, r0
 8040346:	4a02      	ldr	r2, [pc, #8]	; (8040350 <SystemCoreClockUpdate+0x14>)
 8040348:	6013      	str	r3, [r2, #0]
}
 804034a:	bf00      	nop
 804034c:	bd80      	pop	{r7, pc}
 804034e:	bf00      	nop
 8040350:	2001800c 	.word	0x2001800c

08040354 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8040354:	b580      	push	{r7, lr}
 8040356:	b082      	sub	sp, #8
 8040358:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 804035a:	2300      	movs	r3, #0
 804035c:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 804035e:	2004      	movs	r0, #4
 8040360:	f000 f946 	bl	80405f0 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8040364:	f7ff ffea 	bl	804033c <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8040368:	2007      	movs	r0, #7
 804036a:	f000 f815 	bl	8040398 <HAL_InitTick>
 804036e:	4603      	mov	r3, r0
 8040370:	2b00      	cmp	r3, #0
 8040372:	d002      	beq.n	804037a <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8040374:	2301      	movs	r3, #1
 8040376:	71fb      	strb	r3, [r7, #7]
 8040378:	e001      	b.n	804037e <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 804037a:	f000 f805 	bl	8040388 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 804037e:	79fb      	ldrb	r3, [r7, #7]
}
 8040380:	4618      	mov	r0, r3
 8040382:	3708      	adds	r7, #8
 8040384:	46bd      	mov	sp, r7
 8040386:	bd80      	pop	{r7, pc}

08040388 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8040388:	b480      	push	{r7}
 804038a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 804038c:	bf00      	nop
 804038e:	46bd      	mov	sp, r7
 8040390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040394:	4770      	bx	lr
	...

08040398 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8040398:	b580      	push	{r7, lr}
 804039a:	b084      	sub	sp, #16
 804039c:	af00      	add	r7, sp, #0
 804039e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80403a0:	2300      	movs	r3, #0
 80403a2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80403a4:	4b17      	ldr	r3, [pc, #92]	; (8040404 <HAL_InitTick+0x6c>)
 80403a6:	781b      	ldrb	r3, [r3, #0]
 80403a8:	2b00      	cmp	r3, #0
 80403aa:	d023      	beq.n	80403f4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80403ac:	4b16      	ldr	r3, [pc, #88]	; (8040408 <HAL_InitTick+0x70>)
 80403ae:	681a      	ldr	r2, [r3, #0]
 80403b0:	4b14      	ldr	r3, [pc, #80]	; (8040404 <HAL_InitTick+0x6c>)
 80403b2:	781b      	ldrb	r3, [r3, #0]
 80403b4:	4619      	mov	r1, r3
 80403b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80403ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80403be:	fbb2 f3f3 	udiv	r3, r2, r3
 80403c2:	4618      	mov	r0, r3
 80403c4:	f000 f947 	bl	8040656 <HAL_SYSTICK_Config>
 80403c8:	4603      	mov	r3, r0
 80403ca:	2b00      	cmp	r3, #0
 80403cc:	d10f      	bne.n	80403ee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80403ce:	687b      	ldr	r3, [r7, #4]
 80403d0:	2b07      	cmp	r3, #7
 80403d2:	d809      	bhi.n	80403e8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80403d4:	2200      	movs	r2, #0
 80403d6:	6879      	ldr	r1, [r7, #4]
 80403d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80403dc:	f000 f913 	bl	8040606 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80403e0:	4a0a      	ldr	r2, [pc, #40]	; (804040c <HAL_InitTick+0x74>)
 80403e2:	687b      	ldr	r3, [r7, #4]
 80403e4:	6013      	str	r3, [r2, #0]
 80403e6:	e007      	b.n	80403f8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80403e8:	2301      	movs	r3, #1
 80403ea:	73fb      	strb	r3, [r7, #15]
 80403ec:	e004      	b.n	80403f8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80403ee:	2301      	movs	r3, #1
 80403f0:	73fb      	strb	r3, [r7, #15]
 80403f2:	e001      	b.n	80403f8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80403f4:	2301      	movs	r3, #1
 80403f6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80403f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80403fa:	4618      	mov	r0, r3
 80403fc:	3710      	adds	r7, #16
 80403fe:	46bd      	mov	sp, r7
 8040400:	bd80      	pop	{r7, pc}
 8040402:	bf00      	nop
 8040404:	20018014 	.word	0x20018014
 8040408:	2001800c 	.word	0x2001800c
 804040c:	20018010 	.word	0x20018010

08040410 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8040410:	b480      	push	{r7}
 8040412:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8040414:	4b06      	ldr	r3, [pc, #24]	; (8040430 <HAL_IncTick+0x20>)
 8040416:	781b      	ldrb	r3, [r3, #0]
 8040418:	461a      	mov	r2, r3
 804041a:	4b06      	ldr	r3, [pc, #24]	; (8040434 <HAL_IncTick+0x24>)
 804041c:	681b      	ldr	r3, [r3, #0]
 804041e:	4413      	add	r3, r2
 8040420:	4a04      	ldr	r2, [pc, #16]	; (8040434 <HAL_IncTick+0x24>)
 8040422:	6013      	str	r3, [r2, #0]
}
 8040424:	bf00      	nop
 8040426:	46bd      	mov	sp, r7
 8040428:	f85d 7b04 	ldr.w	r7, [sp], #4
 804042c:	4770      	bx	lr
 804042e:	bf00      	nop
 8040430:	20018014 	.word	0x20018014
 8040434:	20018034 	.word	0x20018034

08040438 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8040438:	b480      	push	{r7}
 804043a:	af00      	add	r7, sp, #0
  return uwTick;
 804043c:	4b03      	ldr	r3, [pc, #12]	; (804044c <HAL_GetTick+0x14>)
 804043e:	681b      	ldr	r3, [r3, #0]
}
 8040440:	4618      	mov	r0, r3
 8040442:	46bd      	mov	sp, r7
 8040444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040448:	4770      	bx	lr
 804044a:	bf00      	nop
 804044c:	20018034 	.word	0x20018034

08040450 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8040450:	b480      	push	{r7}
 8040452:	b085      	sub	sp, #20
 8040454:	af00      	add	r7, sp, #0
 8040456:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8040458:	687b      	ldr	r3, [r7, #4]
 804045a:	f003 0307 	and.w	r3, r3, #7
 804045e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8040460:	4b0c      	ldr	r3, [pc, #48]	; (8040494 <__NVIC_SetPriorityGrouping+0x44>)
 8040462:	68db      	ldr	r3, [r3, #12]
 8040464:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8040466:	68ba      	ldr	r2, [r7, #8]
 8040468:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 804046c:	4013      	ands	r3, r2
 804046e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8040470:	68fb      	ldr	r3, [r7, #12]
 8040472:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8040474:	68bb      	ldr	r3, [r7, #8]
 8040476:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8040478:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 804047c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8040480:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8040482:	4a04      	ldr	r2, [pc, #16]	; (8040494 <__NVIC_SetPriorityGrouping+0x44>)
 8040484:	68bb      	ldr	r3, [r7, #8]
 8040486:	60d3      	str	r3, [r2, #12]
}
 8040488:	bf00      	nop
 804048a:	3714      	adds	r7, #20
 804048c:	46bd      	mov	sp, r7
 804048e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040492:	4770      	bx	lr
 8040494:	e000ed00 	.word	0xe000ed00

08040498 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8040498:	b480      	push	{r7}
 804049a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 804049c:	4b04      	ldr	r3, [pc, #16]	; (80404b0 <__NVIC_GetPriorityGrouping+0x18>)
 804049e:	68db      	ldr	r3, [r3, #12]
 80404a0:	0a1b      	lsrs	r3, r3, #8
 80404a2:	f003 0307 	and.w	r3, r3, #7
}
 80404a6:	4618      	mov	r0, r3
 80404a8:	46bd      	mov	sp, r7
 80404aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80404ae:	4770      	bx	lr
 80404b0:	e000ed00 	.word	0xe000ed00

080404b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80404b4:	b480      	push	{r7}
 80404b6:	b083      	sub	sp, #12
 80404b8:	af00      	add	r7, sp, #0
 80404ba:	4603      	mov	r3, r0
 80404bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80404be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80404c2:	2b00      	cmp	r3, #0
 80404c4:	db0b      	blt.n	80404de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80404c6:	79fb      	ldrb	r3, [r7, #7]
 80404c8:	f003 021f 	and.w	r2, r3, #31
 80404cc:	4907      	ldr	r1, [pc, #28]	; (80404ec <__NVIC_EnableIRQ+0x38>)
 80404ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80404d2:	095b      	lsrs	r3, r3, #5
 80404d4:	2001      	movs	r0, #1
 80404d6:	fa00 f202 	lsl.w	r2, r0, r2
 80404da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80404de:	bf00      	nop
 80404e0:	370c      	adds	r7, #12
 80404e2:	46bd      	mov	sp, r7
 80404e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80404e8:	4770      	bx	lr
 80404ea:	bf00      	nop
 80404ec:	e000e100 	.word	0xe000e100

080404f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80404f0:	b480      	push	{r7}
 80404f2:	b083      	sub	sp, #12
 80404f4:	af00      	add	r7, sp, #0
 80404f6:	4603      	mov	r3, r0
 80404f8:	6039      	str	r1, [r7, #0]
 80404fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80404fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040500:	2b00      	cmp	r3, #0
 8040502:	db0a      	blt.n	804051a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8040504:	683b      	ldr	r3, [r7, #0]
 8040506:	b2da      	uxtb	r2, r3
 8040508:	490c      	ldr	r1, [pc, #48]	; (804053c <__NVIC_SetPriority+0x4c>)
 804050a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 804050e:	0152      	lsls	r2, r2, #5
 8040510:	b2d2      	uxtb	r2, r2
 8040512:	440b      	add	r3, r1
 8040514:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8040518:	e00a      	b.n	8040530 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 804051a:	683b      	ldr	r3, [r7, #0]
 804051c:	b2da      	uxtb	r2, r3
 804051e:	4908      	ldr	r1, [pc, #32]	; (8040540 <__NVIC_SetPriority+0x50>)
 8040520:	79fb      	ldrb	r3, [r7, #7]
 8040522:	f003 030f 	and.w	r3, r3, #15
 8040526:	3b04      	subs	r3, #4
 8040528:	0152      	lsls	r2, r2, #5
 804052a:	b2d2      	uxtb	r2, r2
 804052c:	440b      	add	r3, r1
 804052e:	761a      	strb	r2, [r3, #24]
}
 8040530:	bf00      	nop
 8040532:	370c      	adds	r7, #12
 8040534:	46bd      	mov	sp, r7
 8040536:	f85d 7b04 	ldr.w	r7, [sp], #4
 804053a:	4770      	bx	lr
 804053c:	e000e100 	.word	0xe000e100
 8040540:	e000ed00 	.word	0xe000ed00

08040544 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8040544:	b480      	push	{r7}
 8040546:	b089      	sub	sp, #36	; 0x24
 8040548:	af00      	add	r7, sp, #0
 804054a:	60f8      	str	r0, [r7, #12]
 804054c:	60b9      	str	r1, [r7, #8]
 804054e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8040550:	68fb      	ldr	r3, [r7, #12]
 8040552:	f003 0307 	and.w	r3, r3, #7
 8040556:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8040558:	69fb      	ldr	r3, [r7, #28]
 804055a:	f1c3 0307 	rsb	r3, r3, #7
 804055e:	2b03      	cmp	r3, #3
 8040560:	bf28      	it	cs
 8040562:	2303      	movcs	r3, #3
 8040564:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8040566:	69fb      	ldr	r3, [r7, #28]
 8040568:	3303      	adds	r3, #3
 804056a:	2b06      	cmp	r3, #6
 804056c:	d902      	bls.n	8040574 <NVIC_EncodePriority+0x30>
 804056e:	69fb      	ldr	r3, [r7, #28]
 8040570:	3b04      	subs	r3, #4
 8040572:	e000      	b.n	8040576 <NVIC_EncodePriority+0x32>
 8040574:	2300      	movs	r3, #0
 8040576:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8040578:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 804057c:	69bb      	ldr	r3, [r7, #24]
 804057e:	fa02 f303 	lsl.w	r3, r2, r3
 8040582:	43da      	mvns	r2, r3
 8040584:	68bb      	ldr	r3, [r7, #8]
 8040586:	401a      	ands	r2, r3
 8040588:	697b      	ldr	r3, [r7, #20]
 804058a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 804058c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8040590:	697b      	ldr	r3, [r7, #20]
 8040592:	fa01 f303 	lsl.w	r3, r1, r3
 8040596:	43d9      	mvns	r1, r3
 8040598:	687b      	ldr	r3, [r7, #4]
 804059a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 804059c:	4313      	orrs	r3, r2
         );
}
 804059e:	4618      	mov	r0, r3
 80405a0:	3724      	adds	r7, #36	; 0x24
 80405a2:	46bd      	mov	sp, r7
 80405a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80405a8:	4770      	bx	lr
	...

080405ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80405ac:	b580      	push	{r7, lr}
 80405ae:	b082      	sub	sp, #8
 80405b0:	af00      	add	r7, sp, #0
 80405b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80405b4:	687b      	ldr	r3, [r7, #4]
 80405b6:	3b01      	subs	r3, #1
 80405b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80405bc:	d301      	bcc.n	80405c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80405be:	2301      	movs	r3, #1
 80405c0:	e00f      	b.n	80405e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80405c2:	4a0a      	ldr	r2, [pc, #40]	; (80405ec <SysTick_Config+0x40>)
 80405c4:	687b      	ldr	r3, [r7, #4]
 80405c6:	3b01      	subs	r3, #1
 80405c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80405ca:	2107      	movs	r1, #7
 80405cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80405d0:	f7ff ff8e 	bl	80404f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80405d4:	4b05      	ldr	r3, [pc, #20]	; (80405ec <SysTick_Config+0x40>)
 80405d6:	2200      	movs	r2, #0
 80405d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80405da:	4b04      	ldr	r3, [pc, #16]	; (80405ec <SysTick_Config+0x40>)
 80405dc:	2207      	movs	r2, #7
 80405de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80405e0:	2300      	movs	r3, #0
}
 80405e2:	4618      	mov	r0, r3
 80405e4:	3708      	adds	r7, #8
 80405e6:	46bd      	mov	sp, r7
 80405e8:	bd80      	pop	{r7, pc}
 80405ea:	bf00      	nop
 80405ec:	e000e010 	.word	0xe000e010

080405f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80405f0:	b580      	push	{r7, lr}
 80405f2:	b082      	sub	sp, #8
 80405f4:	af00      	add	r7, sp, #0
 80405f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80405f8:	6878      	ldr	r0, [r7, #4]
 80405fa:	f7ff ff29 	bl	8040450 <__NVIC_SetPriorityGrouping>
}
 80405fe:	bf00      	nop
 8040600:	3708      	adds	r7, #8
 8040602:	46bd      	mov	sp, r7
 8040604:	bd80      	pop	{r7, pc}

08040606 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8040606:	b580      	push	{r7, lr}
 8040608:	b086      	sub	sp, #24
 804060a:	af00      	add	r7, sp, #0
 804060c:	4603      	mov	r3, r0
 804060e:	60b9      	str	r1, [r7, #8]
 8040610:	607a      	str	r2, [r7, #4]
 8040612:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8040614:	f7ff ff40 	bl	8040498 <__NVIC_GetPriorityGrouping>
 8040618:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 804061a:	687a      	ldr	r2, [r7, #4]
 804061c:	68b9      	ldr	r1, [r7, #8]
 804061e:	6978      	ldr	r0, [r7, #20]
 8040620:	f7ff ff90 	bl	8040544 <NVIC_EncodePriority>
 8040624:	4602      	mov	r2, r0
 8040626:	f997 300f 	ldrsb.w	r3, [r7, #15]
 804062a:	4611      	mov	r1, r2
 804062c:	4618      	mov	r0, r3
 804062e:	f7ff ff5f 	bl	80404f0 <__NVIC_SetPriority>
}
 8040632:	bf00      	nop
 8040634:	3718      	adds	r7, #24
 8040636:	46bd      	mov	sp, r7
 8040638:	bd80      	pop	{r7, pc}

0804063a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 804063a:	b580      	push	{r7, lr}
 804063c:	b082      	sub	sp, #8
 804063e:	af00      	add	r7, sp, #0
 8040640:	4603      	mov	r3, r0
 8040642:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8040644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040648:	4618      	mov	r0, r3
 804064a:	f7ff ff33 	bl	80404b4 <__NVIC_EnableIRQ>
}
 804064e:	bf00      	nop
 8040650:	3708      	adds	r7, #8
 8040652:	46bd      	mov	sp, r7
 8040654:	bd80      	pop	{r7, pc}

08040656 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8040656:	b580      	push	{r7, lr}
 8040658:	b082      	sub	sp, #8
 804065a:	af00      	add	r7, sp, #0
 804065c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 804065e:	6878      	ldr	r0, [r7, #4]
 8040660:	f7ff ffa4 	bl	80405ac <SysTick_Config>
 8040664:	4603      	mov	r3, r0
}
 8040666:	4618      	mov	r0, r3
 8040668:	3708      	adds	r7, #8
 804066a:	46bd      	mov	sp, r7
 804066c:	bd80      	pop	{r7, pc}
	...

08040670 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8040670:	b480      	push	{r7}
 8040672:	b087      	sub	sp, #28
 8040674:	af00      	add	r7, sp, #0
 8040676:	6078      	str	r0, [r7, #4]
 8040678:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 804067a:	2300      	movs	r3, #0
 804067c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 804067e:	e158      	b.n	8040932 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8040680:	683b      	ldr	r3, [r7, #0]
 8040682:	681a      	ldr	r2, [r3, #0]
 8040684:	2101      	movs	r1, #1
 8040686:	697b      	ldr	r3, [r7, #20]
 8040688:	fa01 f303 	lsl.w	r3, r1, r3
 804068c:	4013      	ands	r3, r2
 804068e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8040690:	68fb      	ldr	r3, [r7, #12]
 8040692:	2b00      	cmp	r3, #0
 8040694:	f000 814a 	beq.w	804092c <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8040698:	683b      	ldr	r3, [r7, #0]
 804069a:	685b      	ldr	r3, [r3, #4]
 804069c:	f003 0303 	and.w	r3, r3, #3
 80406a0:	2b01      	cmp	r3, #1
 80406a2:	d005      	beq.n	80406b0 <HAL_GPIO_Init+0x40>
 80406a4:	683b      	ldr	r3, [r7, #0]
 80406a6:	685b      	ldr	r3, [r3, #4]
 80406a8:	f003 0303 	and.w	r3, r3, #3
 80406ac:	2b02      	cmp	r3, #2
 80406ae:	d130      	bne.n	8040712 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80406b0:	687b      	ldr	r3, [r7, #4]
 80406b2:	689b      	ldr	r3, [r3, #8]
 80406b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80406b6:	697b      	ldr	r3, [r7, #20]
 80406b8:	005b      	lsls	r3, r3, #1
 80406ba:	2203      	movs	r2, #3
 80406bc:	fa02 f303 	lsl.w	r3, r2, r3
 80406c0:	43db      	mvns	r3, r3
 80406c2:	693a      	ldr	r2, [r7, #16]
 80406c4:	4013      	ands	r3, r2
 80406c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80406c8:	683b      	ldr	r3, [r7, #0]
 80406ca:	68da      	ldr	r2, [r3, #12]
 80406cc:	697b      	ldr	r3, [r7, #20]
 80406ce:	005b      	lsls	r3, r3, #1
 80406d0:	fa02 f303 	lsl.w	r3, r2, r3
 80406d4:	693a      	ldr	r2, [r7, #16]
 80406d6:	4313      	orrs	r3, r2
 80406d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80406da:	687b      	ldr	r3, [r7, #4]
 80406dc:	693a      	ldr	r2, [r7, #16]
 80406de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80406e0:	687b      	ldr	r3, [r7, #4]
 80406e2:	685b      	ldr	r3, [r3, #4]
 80406e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80406e6:	2201      	movs	r2, #1
 80406e8:	697b      	ldr	r3, [r7, #20]
 80406ea:	fa02 f303 	lsl.w	r3, r2, r3
 80406ee:	43db      	mvns	r3, r3
 80406f0:	693a      	ldr	r2, [r7, #16]
 80406f2:	4013      	ands	r3, r2
 80406f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80406f6:	683b      	ldr	r3, [r7, #0]
 80406f8:	685b      	ldr	r3, [r3, #4]
 80406fa:	091b      	lsrs	r3, r3, #4
 80406fc:	f003 0201 	and.w	r2, r3, #1
 8040700:	697b      	ldr	r3, [r7, #20]
 8040702:	fa02 f303 	lsl.w	r3, r2, r3
 8040706:	693a      	ldr	r2, [r7, #16]
 8040708:	4313      	orrs	r3, r2
 804070a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 804070c:	687b      	ldr	r3, [r7, #4]
 804070e:	693a      	ldr	r2, [r7, #16]
 8040710:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8040712:	683b      	ldr	r3, [r7, #0]
 8040714:	685b      	ldr	r3, [r3, #4]
 8040716:	f003 0303 	and.w	r3, r3, #3
 804071a:	2b03      	cmp	r3, #3
 804071c:	d017      	beq.n	804074e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 804071e:	687b      	ldr	r3, [r7, #4]
 8040720:	68db      	ldr	r3, [r3, #12]
 8040722:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8040724:	697b      	ldr	r3, [r7, #20]
 8040726:	005b      	lsls	r3, r3, #1
 8040728:	2203      	movs	r2, #3
 804072a:	fa02 f303 	lsl.w	r3, r2, r3
 804072e:	43db      	mvns	r3, r3
 8040730:	693a      	ldr	r2, [r7, #16]
 8040732:	4013      	ands	r3, r2
 8040734:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8040736:	683b      	ldr	r3, [r7, #0]
 8040738:	689a      	ldr	r2, [r3, #8]
 804073a:	697b      	ldr	r3, [r7, #20]
 804073c:	005b      	lsls	r3, r3, #1
 804073e:	fa02 f303 	lsl.w	r3, r2, r3
 8040742:	693a      	ldr	r2, [r7, #16]
 8040744:	4313      	orrs	r3, r2
 8040746:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8040748:	687b      	ldr	r3, [r7, #4]
 804074a:	693a      	ldr	r2, [r7, #16]
 804074c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 804074e:	683b      	ldr	r3, [r7, #0]
 8040750:	685b      	ldr	r3, [r3, #4]
 8040752:	f003 0303 	and.w	r3, r3, #3
 8040756:	2b02      	cmp	r3, #2
 8040758:	d123      	bne.n	80407a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 804075a:	697b      	ldr	r3, [r7, #20]
 804075c:	08da      	lsrs	r2, r3, #3
 804075e:	687b      	ldr	r3, [r7, #4]
 8040760:	3208      	adds	r2, #8
 8040762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8040766:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8040768:	697b      	ldr	r3, [r7, #20]
 804076a:	f003 0307 	and.w	r3, r3, #7
 804076e:	009b      	lsls	r3, r3, #2
 8040770:	220f      	movs	r2, #15
 8040772:	fa02 f303 	lsl.w	r3, r2, r3
 8040776:	43db      	mvns	r3, r3
 8040778:	693a      	ldr	r2, [r7, #16]
 804077a:	4013      	ands	r3, r2
 804077c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 804077e:	683b      	ldr	r3, [r7, #0]
 8040780:	691a      	ldr	r2, [r3, #16]
 8040782:	697b      	ldr	r3, [r7, #20]
 8040784:	f003 0307 	and.w	r3, r3, #7
 8040788:	009b      	lsls	r3, r3, #2
 804078a:	fa02 f303 	lsl.w	r3, r2, r3
 804078e:	693a      	ldr	r2, [r7, #16]
 8040790:	4313      	orrs	r3, r2
 8040792:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8040794:	697b      	ldr	r3, [r7, #20]
 8040796:	08da      	lsrs	r2, r3, #3
 8040798:	687b      	ldr	r3, [r7, #4]
 804079a:	3208      	adds	r2, #8
 804079c:	6939      	ldr	r1, [r7, #16]
 804079e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80407a2:	687b      	ldr	r3, [r7, #4]
 80407a4:	681b      	ldr	r3, [r3, #0]
 80407a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80407a8:	697b      	ldr	r3, [r7, #20]
 80407aa:	005b      	lsls	r3, r3, #1
 80407ac:	2203      	movs	r2, #3
 80407ae:	fa02 f303 	lsl.w	r3, r2, r3
 80407b2:	43db      	mvns	r3, r3
 80407b4:	693a      	ldr	r2, [r7, #16]
 80407b6:	4013      	ands	r3, r2
 80407b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80407ba:	683b      	ldr	r3, [r7, #0]
 80407bc:	685b      	ldr	r3, [r3, #4]
 80407be:	f003 0203 	and.w	r2, r3, #3
 80407c2:	697b      	ldr	r3, [r7, #20]
 80407c4:	005b      	lsls	r3, r3, #1
 80407c6:	fa02 f303 	lsl.w	r3, r2, r3
 80407ca:	693a      	ldr	r2, [r7, #16]
 80407cc:	4313      	orrs	r3, r2
 80407ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80407d0:	687b      	ldr	r3, [r7, #4]
 80407d2:	693a      	ldr	r2, [r7, #16]
 80407d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80407d6:	683b      	ldr	r3, [r7, #0]
 80407d8:	685b      	ldr	r3, [r3, #4]
 80407da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80407de:	2b00      	cmp	r3, #0
 80407e0:	f000 80a4 	beq.w	804092c <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 80407e4:	4a5a      	ldr	r2, [pc, #360]	; (8040950 <HAL_GPIO_Init+0x2e0>)
 80407e6:	697b      	ldr	r3, [r7, #20]
 80407e8:	089b      	lsrs	r3, r3, #2
 80407ea:	3318      	adds	r3, #24
 80407ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80407f0:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 80407f2:	697b      	ldr	r3, [r7, #20]
 80407f4:	f003 0303 	and.w	r3, r3, #3
 80407f8:	00db      	lsls	r3, r3, #3
 80407fa:	220f      	movs	r2, #15
 80407fc:	fa02 f303 	lsl.w	r3, r2, r3
 8040800:	43db      	mvns	r3, r3
 8040802:	693a      	ldr	r2, [r7, #16]
 8040804:	4013      	ands	r3, r2
 8040806:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8040808:	687b      	ldr	r3, [r7, #4]
 804080a:	4a52      	ldr	r2, [pc, #328]	; (8040954 <HAL_GPIO_Init+0x2e4>)
 804080c:	4293      	cmp	r3, r2
 804080e:	d025      	beq.n	804085c <HAL_GPIO_Init+0x1ec>
 8040810:	687b      	ldr	r3, [r7, #4]
 8040812:	4a51      	ldr	r2, [pc, #324]	; (8040958 <HAL_GPIO_Init+0x2e8>)
 8040814:	4293      	cmp	r3, r2
 8040816:	d01f      	beq.n	8040858 <HAL_GPIO_Init+0x1e8>
 8040818:	687b      	ldr	r3, [r7, #4]
 804081a:	4a50      	ldr	r2, [pc, #320]	; (804095c <HAL_GPIO_Init+0x2ec>)
 804081c:	4293      	cmp	r3, r2
 804081e:	d019      	beq.n	8040854 <HAL_GPIO_Init+0x1e4>
 8040820:	687b      	ldr	r3, [r7, #4]
 8040822:	4a4f      	ldr	r2, [pc, #316]	; (8040960 <HAL_GPIO_Init+0x2f0>)
 8040824:	4293      	cmp	r3, r2
 8040826:	d013      	beq.n	8040850 <HAL_GPIO_Init+0x1e0>
 8040828:	687b      	ldr	r3, [r7, #4]
 804082a:	4a4e      	ldr	r2, [pc, #312]	; (8040964 <HAL_GPIO_Init+0x2f4>)
 804082c:	4293      	cmp	r3, r2
 804082e:	d00d      	beq.n	804084c <HAL_GPIO_Init+0x1dc>
 8040830:	687b      	ldr	r3, [r7, #4]
 8040832:	4a4d      	ldr	r2, [pc, #308]	; (8040968 <HAL_GPIO_Init+0x2f8>)
 8040834:	4293      	cmp	r3, r2
 8040836:	d007      	beq.n	8040848 <HAL_GPIO_Init+0x1d8>
 8040838:	687b      	ldr	r3, [r7, #4]
 804083a:	4a4c      	ldr	r2, [pc, #304]	; (804096c <HAL_GPIO_Init+0x2fc>)
 804083c:	4293      	cmp	r3, r2
 804083e:	d101      	bne.n	8040844 <HAL_GPIO_Init+0x1d4>
 8040840:	2306      	movs	r3, #6
 8040842:	e00c      	b.n	804085e <HAL_GPIO_Init+0x1ee>
 8040844:	2307      	movs	r3, #7
 8040846:	e00a      	b.n	804085e <HAL_GPIO_Init+0x1ee>
 8040848:	2305      	movs	r3, #5
 804084a:	e008      	b.n	804085e <HAL_GPIO_Init+0x1ee>
 804084c:	2304      	movs	r3, #4
 804084e:	e006      	b.n	804085e <HAL_GPIO_Init+0x1ee>
 8040850:	2303      	movs	r3, #3
 8040852:	e004      	b.n	804085e <HAL_GPIO_Init+0x1ee>
 8040854:	2302      	movs	r3, #2
 8040856:	e002      	b.n	804085e <HAL_GPIO_Init+0x1ee>
 8040858:	2301      	movs	r3, #1
 804085a:	e000      	b.n	804085e <HAL_GPIO_Init+0x1ee>
 804085c:	2300      	movs	r3, #0
 804085e:	697a      	ldr	r2, [r7, #20]
 8040860:	f002 0203 	and.w	r2, r2, #3
 8040864:	00d2      	lsls	r2, r2, #3
 8040866:	4093      	lsls	r3, r2
 8040868:	693a      	ldr	r2, [r7, #16]
 804086a:	4313      	orrs	r3, r2
 804086c:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 804086e:	4938      	ldr	r1, [pc, #224]	; (8040950 <HAL_GPIO_Init+0x2e0>)
 8040870:	697b      	ldr	r3, [r7, #20]
 8040872:	089b      	lsrs	r3, r3, #2
 8040874:	3318      	adds	r3, #24
 8040876:	693a      	ldr	r2, [r7, #16]
 8040878:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 804087c:	4b34      	ldr	r3, [pc, #208]	; (8040950 <HAL_GPIO_Init+0x2e0>)
 804087e:	681b      	ldr	r3, [r3, #0]
 8040880:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8040882:	68fb      	ldr	r3, [r7, #12]
 8040884:	43db      	mvns	r3, r3
 8040886:	693a      	ldr	r2, [r7, #16]
 8040888:	4013      	ands	r3, r2
 804088a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 804088c:	683b      	ldr	r3, [r7, #0]
 804088e:	685b      	ldr	r3, [r3, #4]
 8040890:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8040894:	2b00      	cmp	r3, #0
 8040896:	d003      	beq.n	80408a0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8040898:	693a      	ldr	r2, [r7, #16]
 804089a:	68fb      	ldr	r3, [r7, #12]
 804089c:	4313      	orrs	r3, r2
 804089e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80408a0:	4a2b      	ldr	r2, [pc, #172]	; (8040950 <HAL_GPIO_Init+0x2e0>)
 80408a2:	693b      	ldr	r3, [r7, #16]
 80408a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80408a6:	4b2a      	ldr	r3, [pc, #168]	; (8040950 <HAL_GPIO_Init+0x2e0>)
 80408a8:	685b      	ldr	r3, [r3, #4]
 80408aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80408ac:	68fb      	ldr	r3, [r7, #12]
 80408ae:	43db      	mvns	r3, r3
 80408b0:	693a      	ldr	r2, [r7, #16]
 80408b2:	4013      	ands	r3, r2
 80408b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80408b6:	683b      	ldr	r3, [r7, #0]
 80408b8:	685b      	ldr	r3, [r3, #4]
 80408ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80408be:	2b00      	cmp	r3, #0
 80408c0:	d003      	beq.n	80408ca <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80408c2:	693a      	ldr	r2, [r7, #16]
 80408c4:	68fb      	ldr	r3, [r7, #12]
 80408c6:	4313      	orrs	r3, r2
 80408c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80408ca:	4a21      	ldr	r2, [pc, #132]	; (8040950 <HAL_GPIO_Init+0x2e0>)
 80408cc:	693b      	ldr	r3, [r7, #16]
 80408ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80408d0:	4b1f      	ldr	r3, [pc, #124]	; (8040950 <HAL_GPIO_Init+0x2e0>)
 80408d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80408d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80408d8:	68fb      	ldr	r3, [r7, #12]
 80408da:	43db      	mvns	r3, r3
 80408dc:	693a      	ldr	r2, [r7, #16]
 80408de:	4013      	ands	r3, r2
 80408e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80408e2:	683b      	ldr	r3, [r7, #0]
 80408e4:	685b      	ldr	r3, [r3, #4]
 80408e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80408ea:	2b00      	cmp	r3, #0
 80408ec:	d003      	beq.n	80408f6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80408ee:	693a      	ldr	r2, [r7, #16]
 80408f0:	68fb      	ldr	r3, [r7, #12]
 80408f2:	4313      	orrs	r3, r2
 80408f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80408f6:	4a16      	ldr	r2, [pc, #88]	; (8040950 <HAL_GPIO_Init+0x2e0>)
 80408f8:	693b      	ldr	r3, [r7, #16]
 80408fa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 80408fe:	4b14      	ldr	r3, [pc, #80]	; (8040950 <HAL_GPIO_Init+0x2e0>)
 8040900:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8040904:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8040906:	68fb      	ldr	r3, [r7, #12]
 8040908:	43db      	mvns	r3, r3
 804090a:	693a      	ldr	r2, [r7, #16]
 804090c:	4013      	ands	r3, r2
 804090e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8040910:	683b      	ldr	r3, [r7, #0]
 8040912:	685b      	ldr	r3, [r3, #4]
 8040914:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8040918:	2b00      	cmp	r3, #0
 804091a:	d003      	beq.n	8040924 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 804091c:	693a      	ldr	r2, [r7, #16]
 804091e:	68fb      	ldr	r3, [r7, #12]
 8040920:	4313      	orrs	r3, r2
 8040922:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8040924:	4a0a      	ldr	r2, [pc, #40]	; (8040950 <HAL_GPIO_Init+0x2e0>)
 8040926:	693b      	ldr	r3, [r7, #16]
 8040928:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 804092c:	697b      	ldr	r3, [r7, #20]
 804092e:	3301      	adds	r3, #1
 8040930:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8040932:	683b      	ldr	r3, [r7, #0]
 8040934:	681a      	ldr	r2, [r3, #0]
 8040936:	697b      	ldr	r3, [r7, #20]
 8040938:	fa22 f303 	lsr.w	r3, r2, r3
 804093c:	2b00      	cmp	r3, #0
 804093e:	f47f ae9f 	bne.w	8040680 <HAL_GPIO_Init+0x10>
  }
}
 8040942:	bf00      	nop
 8040944:	bf00      	nop
 8040946:	371c      	adds	r7, #28
 8040948:	46bd      	mov	sp, r7
 804094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804094e:	4770      	bx	lr
 8040950:	4002f400 	.word	0x4002f400
 8040954:	42020000 	.word	0x42020000
 8040958:	42020400 	.word	0x42020400
 804095c:	42020800 	.word	0x42020800
 8040960:	42020c00 	.word	0x42020c00
 8040964:	42021000 	.word	0x42021000
 8040968:	42021400 	.word	0x42021400
 804096c:	42021800 	.word	0x42021800

08040970 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8040970:	b480      	push	{r7}
 8040972:	b083      	sub	sp, #12
 8040974:	af00      	add	r7, sp, #0
 8040976:	6078      	str	r0, [r7, #4]
 8040978:	460b      	mov	r3, r1
 804097a:	807b      	strh	r3, [r7, #2]
 804097c:	4613      	mov	r3, r2
 804097e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8040980:	787b      	ldrb	r3, [r7, #1]
 8040982:	2b00      	cmp	r3, #0
 8040984:	d003      	beq.n	804098e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8040986:	887a      	ldrh	r2, [r7, #2]
 8040988:	687b      	ldr	r3, [r7, #4]
 804098a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 804098c:	e002      	b.n	8040994 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 804098e:	887a      	ldrh	r2, [r7, #2]
 8040990:	687b      	ldr	r3, [r7, #4]
 8040992:	629a      	str	r2, [r3, #40]	; 0x28
}
 8040994:	bf00      	nop
 8040996:	370c      	adds	r7, #12
 8040998:	46bd      	mov	sp, r7
 804099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804099e:	4770      	bx	lr

080409a0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80409a0:	b480      	push	{r7}
 80409a2:	b085      	sub	sp, #20
 80409a4:	af00      	add	r7, sp, #0
 80409a6:	6078      	str	r0, [r7, #4]
 80409a8:	460b      	mov	r3, r1
 80409aa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80409ac:	687b      	ldr	r3, [r7, #4]
 80409ae:	695b      	ldr	r3, [r3, #20]
 80409b0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80409b2:	887a      	ldrh	r2, [r7, #2]
 80409b4:	68fb      	ldr	r3, [r7, #12]
 80409b6:	4013      	ands	r3, r2
 80409b8:	041a      	lsls	r2, r3, #16
 80409ba:	68fb      	ldr	r3, [r7, #12]
 80409bc:	43d9      	mvns	r1, r3
 80409be:	887b      	ldrh	r3, [r7, #2]
 80409c0:	400b      	ands	r3, r1
 80409c2:	431a      	orrs	r2, r3
 80409c4:	687b      	ldr	r3, [r7, #4]
 80409c6:	619a      	str	r2, [r3, #24]
}
 80409c8:	bf00      	nop
 80409ca:	3714      	adds	r7, #20
 80409cc:	46bd      	mov	sp, r7
 80409ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80409d2:	4770      	bx	lr

080409d4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80409d4:	b480      	push	{r7}
 80409d6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80409d8:	4b04      	ldr	r3, [pc, #16]	; (80409ec <HAL_PWREx_GetVoltageRange+0x18>)
 80409da:	681b      	ldr	r3, [r3, #0]
 80409dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80409e0:	4618      	mov	r0, r3
 80409e2:	46bd      	mov	sp, r7
 80409e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80409e8:	4770      	bx	lr
 80409ea:	bf00      	nop
 80409ec:	40007000 	.word	0x40007000

080409f0 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80409f0:	b580      	push	{r7, lr}
 80409f2:	b084      	sub	sp, #16
 80409f4:	af00      	add	r7, sp, #0
 80409f6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 80409f8:	4b27      	ldr	r3, [pc, #156]	; (8040a98 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80409fa:	681b      	ldr	r3, [r3, #0]
 80409fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8040a00:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8040a02:	f000 f861 	bl	8040ac8 <HAL_PWREx_SMPS_GetEffectiveMode>
 8040a06:	4603      	mov	r3, r0
 8040a08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8040a0c:	d101      	bne.n	8040a12 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8040a0e:	2301      	movs	r3, #1
 8040a10:	e03e      	b.n	8040a90 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8040a12:	4b21      	ldr	r3, [pc, #132]	; (8040a98 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8040a14:	68db      	ldr	r3, [r3, #12]
 8040a16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8040a1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8040a1e:	d101      	bne.n	8040a24 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8040a20:	2301      	movs	r3, #1
 8040a22:	e035      	b.n	8040a90 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8040a24:	68ba      	ldr	r2, [r7, #8]
 8040a26:	687b      	ldr	r3, [r7, #4]
 8040a28:	429a      	cmp	r2, r3
 8040a2a:	d101      	bne.n	8040a30 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8040a2c:	2300      	movs	r3, #0
 8040a2e:	e02f      	b.n	8040a90 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8040a30:	4b19      	ldr	r3, [pc, #100]	; (8040a98 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8040a32:	681b      	ldr	r3, [r3, #0]
 8040a34:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8040a38:	4917      	ldr	r1, [pc, #92]	; (8040a98 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8040a3a:	687b      	ldr	r3, [r7, #4]
 8040a3c:	4313      	orrs	r3, r2
 8040a3e:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8040a40:	4b16      	ldr	r3, [pc, #88]	; (8040a9c <HAL_PWREx_ControlVoltageScaling+0xac>)
 8040a42:	681b      	ldr	r3, [r3, #0]
 8040a44:	095b      	lsrs	r3, r3, #5
 8040a46:	4a16      	ldr	r2, [pc, #88]	; (8040aa0 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8040a48:	fba2 2303 	umull	r2, r3, r2, r3
 8040a4c:	09db      	lsrs	r3, r3, #7
 8040a4e:	2232      	movs	r2, #50	; 0x32
 8040a50:	fb02 f303 	mul.w	r3, r2, r3
 8040a54:	4a13      	ldr	r2, [pc, #76]	; (8040aa4 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8040a56:	fba2 2303 	umull	r2, r3, r2, r3
 8040a5a:	08db      	lsrs	r3, r3, #3
 8040a5c:	3301      	adds	r3, #1
 8040a5e:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8040a60:	e002      	b.n	8040a68 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8040a62:	68fb      	ldr	r3, [r7, #12]
 8040a64:	3b01      	subs	r3, #1
 8040a66:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8040a68:	4b0b      	ldr	r3, [pc, #44]	; (8040a98 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8040a6a:	695b      	ldr	r3, [r3, #20]
 8040a6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8040a70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8040a74:	d102      	bne.n	8040a7c <HAL_PWREx_ControlVoltageScaling+0x8c>
 8040a76:	68fb      	ldr	r3, [r7, #12]
 8040a78:	2b00      	cmp	r3, #0
 8040a7a:	d1f2      	bne.n	8040a62 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8040a7c:	4b06      	ldr	r3, [pc, #24]	; (8040a98 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8040a7e:	695b      	ldr	r3, [r3, #20]
 8040a80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8040a84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8040a88:	d101      	bne.n	8040a8e <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8040a8a:	2303      	movs	r3, #3
 8040a8c:	e000      	b.n	8040a90 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8040a8e:	2300      	movs	r3, #0
}
 8040a90:	4618      	mov	r0, r3
 8040a92:	3710      	adds	r7, #16
 8040a94:	46bd      	mov	sp, r7
 8040a96:	bd80      	pop	{r7, pc}
 8040a98:	40007000 	.word	0x40007000
 8040a9c:	2001800c 	.word	0x2001800c
 8040aa0:	0a7c5ac5 	.word	0x0a7c5ac5
 8040aa4:	cccccccd 	.word	0xcccccccd

08040aa8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8040aa8:	b480      	push	{r7}
 8040aaa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8040aac:	4b05      	ldr	r3, [pc, #20]	; (8040ac4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8040aae:	685b      	ldr	r3, [r3, #4]
 8040ab0:	4a04      	ldr	r2, [pc, #16]	; (8040ac4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8040ab2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8040ab6:	6053      	str	r3, [r2, #4]
}
 8040ab8:	bf00      	nop
 8040aba:	46bd      	mov	sp, r7
 8040abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040ac0:	4770      	bx	lr
 8040ac2:	bf00      	nop
 8040ac4:	40007000 	.word	0x40007000

08040ac8 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8040ac8:	b480      	push	{r7}
 8040aca:	b083      	sub	sp, #12
 8040acc:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8040ace:	4b0f      	ldr	r3, [pc, #60]	; (8040b0c <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8040ad0:	691b      	ldr	r3, [r3, #16]
 8040ad2:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8040ad4:	683b      	ldr	r3, [r7, #0]
 8040ad6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8040ada:	2b00      	cmp	r3, #0
 8040adc:	d003      	beq.n	8040ae6 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8040ade:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8040ae2:	607b      	str	r3, [r7, #4]
 8040ae4:	e00a      	b.n	8040afc <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8040ae6:	683b      	ldr	r3, [r7, #0]
 8040ae8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8040aec:	2b00      	cmp	r3, #0
 8040aee:	d103      	bne.n	8040af8 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8040af0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8040af4:	607b      	str	r3, [r7, #4]
 8040af6:	e001      	b.n	8040afc <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8040af8:	2300      	movs	r3, #0
 8040afa:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8040afc:	687b      	ldr	r3, [r7, #4]
}
 8040afe:	4618      	mov	r0, r3
 8040b00:	370c      	adds	r7, #12
 8040b02:	46bd      	mov	sp, r7
 8040b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040b08:	4770      	bx	lr
 8040b0a:	bf00      	nop
 8040b0c:	40007000 	.word	0x40007000

08040b10 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8040b10:	b580      	push	{r7, lr}
 8040b12:	b088      	sub	sp, #32
 8040b14:	af00      	add	r7, sp, #0
 8040b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8040b18:	687b      	ldr	r3, [r7, #4]
 8040b1a:	2b00      	cmp	r3, #0
 8040b1c:	d102      	bne.n	8040b24 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8040b1e:	2301      	movs	r3, #1
 8040b20:	f000 bcc2 	b.w	80414a8 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8040b24:	4b99      	ldr	r3, [pc, #612]	; (8040d8c <HAL_RCC_OscConfig+0x27c>)
 8040b26:	689b      	ldr	r3, [r3, #8]
 8040b28:	f003 030c 	and.w	r3, r3, #12
 8040b2c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8040b2e:	4b97      	ldr	r3, [pc, #604]	; (8040d8c <HAL_RCC_OscConfig+0x27c>)
 8040b30:	68db      	ldr	r3, [r3, #12]
 8040b32:	f003 0303 	and.w	r3, r3, #3
 8040b36:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8040b38:	687b      	ldr	r3, [r7, #4]
 8040b3a:	681b      	ldr	r3, [r3, #0]
 8040b3c:	f003 0310 	and.w	r3, r3, #16
 8040b40:	2b00      	cmp	r3, #0
 8040b42:	f000 80e9 	beq.w	8040d18 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8040b46:	69bb      	ldr	r3, [r7, #24]
 8040b48:	2b00      	cmp	r3, #0
 8040b4a:	d006      	beq.n	8040b5a <HAL_RCC_OscConfig+0x4a>
 8040b4c:	69bb      	ldr	r3, [r7, #24]
 8040b4e:	2b0c      	cmp	r3, #12
 8040b50:	f040 8083 	bne.w	8040c5a <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8040b54:	697b      	ldr	r3, [r7, #20]
 8040b56:	2b01      	cmp	r3, #1
 8040b58:	d17f      	bne.n	8040c5a <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8040b5a:	4b8c      	ldr	r3, [pc, #560]	; (8040d8c <HAL_RCC_OscConfig+0x27c>)
 8040b5c:	681b      	ldr	r3, [r3, #0]
 8040b5e:	f003 0302 	and.w	r3, r3, #2
 8040b62:	2b00      	cmp	r3, #0
 8040b64:	d006      	beq.n	8040b74 <HAL_RCC_OscConfig+0x64>
 8040b66:	687b      	ldr	r3, [r7, #4]
 8040b68:	69db      	ldr	r3, [r3, #28]
 8040b6a:	2b00      	cmp	r3, #0
 8040b6c:	d102      	bne.n	8040b74 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8040b6e:	2301      	movs	r3, #1
 8040b70:	f000 bc9a 	b.w	80414a8 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8040b74:	687b      	ldr	r3, [r7, #4]
 8040b76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8040b78:	4b84      	ldr	r3, [pc, #528]	; (8040d8c <HAL_RCC_OscConfig+0x27c>)
 8040b7a:	681b      	ldr	r3, [r3, #0]
 8040b7c:	f003 0308 	and.w	r3, r3, #8
 8040b80:	2b00      	cmp	r3, #0
 8040b82:	d004      	beq.n	8040b8e <HAL_RCC_OscConfig+0x7e>
 8040b84:	4b81      	ldr	r3, [pc, #516]	; (8040d8c <HAL_RCC_OscConfig+0x27c>)
 8040b86:	681b      	ldr	r3, [r3, #0]
 8040b88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8040b8c:	e005      	b.n	8040b9a <HAL_RCC_OscConfig+0x8a>
 8040b8e:	4b7f      	ldr	r3, [pc, #508]	; (8040d8c <HAL_RCC_OscConfig+0x27c>)
 8040b90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8040b94:	091b      	lsrs	r3, r3, #4
 8040b96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8040b9a:	4293      	cmp	r3, r2
 8040b9c:	d224      	bcs.n	8040be8 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8040b9e:	687b      	ldr	r3, [r7, #4]
 8040ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8040ba2:	4618      	mov	r0, r3
 8040ba4:	f000 fe72 	bl	804188c <RCC_SetFlashLatencyFromMSIRange>
 8040ba8:	4603      	mov	r3, r0
 8040baa:	2b00      	cmp	r3, #0
 8040bac:	d002      	beq.n	8040bb4 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8040bae:	2301      	movs	r3, #1
 8040bb0:	f000 bc7a 	b.w	80414a8 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8040bb4:	4b75      	ldr	r3, [pc, #468]	; (8040d8c <HAL_RCC_OscConfig+0x27c>)
 8040bb6:	681b      	ldr	r3, [r3, #0]
 8040bb8:	4a74      	ldr	r2, [pc, #464]	; (8040d8c <HAL_RCC_OscConfig+0x27c>)
 8040bba:	f043 0308 	orr.w	r3, r3, #8
 8040bbe:	6013      	str	r3, [r2, #0]
 8040bc0:	4b72      	ldr	r3, [pc, #456]	; (8040d8c <HAL_RCC_OscConfig+0x27c>)
 8040bc2:	681b      	ldr	r3, [r3, #0]
 8040bc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8040bc8:	687b      	ldr	r3, [r7, #4]
 8040bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8040bcc:	496f      	ldr	r1, [pc, #444]	; (8040d8c <HAL_RCC_OscConfig+0x27c>)
 8040bce:	4313      	orrs	r3, r2
 8040bd0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8040bd2:	4b6e      	ldr	r3, [pc, #440]	; (8040d8c <HAL_RCC_OscConfig+0x27c>)
 8040bd4:	685b      	ldr	r3, [r3, #4]
 8040bd6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8040bda:	687b      	ldr	r3, [r7, #4]
 8040bdc:	6a1b      	ldr	r3, [r3, #32]
 8040bde:	021b      	lsls	r3, r3, #8
 8040be0:	496a      	ldr	r1, [pc, #424]	; (8040d8c <HAL_RCC_OscConfig+0x27c>)
 8040be2:	4313      	orrs	r3, r2
 8040be4:	604b      	str	r3, [r1, #4]
 8040be6:	e026      	b.n	8040c36 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8040be8:	4b68      	ldr	r3, [pc, #416]	; (8040d8c <HAL_RCC_OscConfig+0x27c>)
 8040bea:	681b      	ldr	r3, [r3, #0]
 8040bec:	4a67      	ldr	r2, [pc, #412]	; (8040d8c <HAL_RCC_OscConfig+0x27c>)
 8040bee:	f043 0308 	orr.w	r3, r3, #8
 8040bf2:	6013      	str	r3, [r2, #0]
 8040bf4:	4b65      	ldr	r3, [pc, #404]	; (8040d8c <HAL_RCC_OscConfig+0x27c>)
 8040bf6:	681b      	ldr	r3, [r3, #0]
 8040bf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8040bfc:	687b      	ldr	r3, [r7, #4]
 8040bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8040c00:	4962      	ldr	r1, [pc, #392]	; (8040d8c <HAL_RCC_OscConfig+0x27c>)
 8040c02:	4313      	orrs	r3, r2
 8040c04:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8040c06:	4b61      	ldr	r3, [pc, #388]	; (8040d8c <HAL_RCC_OscConfig+0x27c>)
 8040c08:	685b      	ldr	r3, [r3, #4]
 8040c0a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8040c0e:	687b      	ldr	r3, [r7, #4]
 8040c10:	6a1b      	ldr	r3, [r3, #32]
 8040c12:	021b      	lsls	r3, r3, #8
 8040c14:	495d      	ldr	r1, [pc, #372]	; (8040d8c <HAL_RCC_OscConfig+0x27c>)
 8040c16:	4313      	orrs	r3, r2
 8040c18:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8040c1a:	69bb      	ldr	r3, [r7, #24]
 8040c1c:	2b00      	cmp	r3, #0
 8040c1e:	d10a      	bne.n	8040c36 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8040c20:	687b      	ldr	r3, [r7, #4]
 8040c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8040c24:	4618      	mov	r0, r3
 8040c26:	f000 fe31 	bl	804188c <RCC_SetFlashLatencyFromMSIRange>
 8040c2a:	4603      	mov	r3, r0
 8040c2c:	2b00      	cmp	r3, #0
 8040c2e:	d002      	beq.n	8040c36 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8040c30:	2301      	movs	r3, #1
 8040c32:	f000 bc39 	b.w	80414a8 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8040c36:	f000 fe15 	bl	8041864 <HAL_RCC_GetHCLKFreq>
 8040c3a:	4603      	mov	r3, r0
 8040c3c:	4a54      	ldr	r2, [pc, #336]	; (8040d90 <HAL_RCC_OscConfig+0x280>)
 8040c3e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8040c40:	4b54      	ldr	r3, [pc, #336]	; (8040d94 <HAL_RCC_OscConfig+0x284>)
 8040c42:	681b      	ldr	r3, [r3, #0]
 8040c44:	4618      	mov	r0, r3
 8040c46:	f7ff fba7 	bl	8040398 <HAL_InitTick>
 8040c4a:	4603      	mov	r3, r0
 8040c4c:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8040c4e:	7bfb      	ldrb	r3, [r7, #15]
 8040c50:	2b00      	cmp	r3, #0
 8040c52:	d060      	beq.n	8040d16 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8040c54:	7bfb      	ldrb	r3, [r7, #15]
 8040c56:	f000 bc27 	b.w	80414a8 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8040c5a:	687b      	ldr	r3, [r7, #4]
 8040c5c:	69db      	ldr	r3, [r3, #28]
 8040c5e:	2b00      	cmp	r3, #0
 8040c60:	d039      	beq.n	8040cd6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8040c62:	4b4a      	ldr	r3, [pc, #296]	; (8040d8c <HAL_RCC_OscConfig+0x27c>)
 8040c64:	681b      	ldr	r3, [r3, #0]
 8040c66:	4a49      	ldr	r2, [pc, #292]	; (8040d8c <HAL_RCC_OscConfig+0x27c>)
 8040c68:	f043 0301 	orr.w	r3, r3, #1
 8040c6c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8040c6e:	f7ff fbe3 	bl	8040438 <HAL_GetTick>
 8040c72:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8040c74:	e00f      	b.n	8040c96 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8040c76:	f7ff fbdf 	bl	8040438 <HAL_GetTick>
 8040c7a:	4602      	mov	r2, r0
 8040c7c:	693b      	ldr	r3, [r7, #16]
 8040c7e:	1ad3      	subs	r3, r2, r3
 8040c80:	2b02      	cmp	r3, #2
 8040c82:	d908      	bls.n	8040c96 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8040c84:	4b41      	ldr	r3, [pc, #260]	; (8040d8c <HAL_RCC_OscConfig+0x27c>)
 8040c86:	681b      	ldr	r3, [r3, #0]
 8040c88:	f003 0302 	and.w	r3, r3, #2
 8040c8c:	2b00      	cmp	r3, #0
 8040c8e:	d102      	bne.n	8040c96 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8040c90:	2303      	movs	r3, #3
 8040c92:	f000 bc09 	b.w	80414a8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8040c96:	4b3d      	ldr	r3, [pc, #244]	; (8040d8c <HAL_RCC_OscConfig+0x27c>)
 8040c98:	681b      	ldr	r3, [r3, #0]
 8040c9a:	f003 0302 	and.w	r3, r3, #2
 8040c9e:	2b00      	cmp	r3, #0
 8040ca0:	d0e9      	beq.n	8040c76 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8040ca2:	4b3a      	ldr	r3, [pc, #232]	; (8040d8c <HAL_RCC_OscConfig+0x27c>)
 8040ca4:	681b      	ldr	r3, [r3, #0]
 8040ca6:	4a39      	ldr	r2, [pc, #228]	; (8040d8c <HAL_RCC_OscConfig+0x27c>)
 8040ca8:	f043 0308 	orr.w	r3, r3, #8
 8040cac:	6013      	str	r3, [r2, #0]
 8040cae:	4b37      	ldr	r3, [pc, #220]	; (8040d8c <HAL_RCC_OscConfig+0x27c>)
 8040cb0:	681b      	ldr	r3, [r3, #0]
 8040cb2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8040cb6:	687b      	ldr	r3, [r7, #4]
 8040cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8040cba:	4934      	ldr	r1, [pc, #208]	; (8040d8c <HAL_RCC_OscConfig+0x27c>)
 8040cbc:	4313      	orrs	r3, r2
 8040cbe:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8040cc0:	4b32      	ldr	r3, [pc, #200]	; (8040d8c <HAL_RCC_OscConfig+0x27c>)
 8040cc2:	685b      	ldr	r3, [r3, #4]
 8040cc4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8040cc8:	687b      	ldr	r3, [r7, #4]
 8040cca:	6a1b      	ldr	r3, [r3, #32]
 8040ccc:	021b      	lsls	r3, r3, #8
 8040cce:	492f      	ldr	r1, [pc, #188]	; (8040d8c <HAL_RCC_OscConfig+0x27c>)
 8040cd0:	4313      	orrs	r3, r2
 8040cd2:	604b      	str	r3, [r1, #4]
 8040cd4:	e020      	b.n	8040d18 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8040cd6:	4b2d      	ldr	r3, [pc, #180]	; (8040d8c <HAL_RCC_OscConfig+0x27c>)
 8040cd8:	681b      	ldr	r3, [r3, #0]
 8040cda:	4a2c      	ldr	r2, [pc, #176]	; (8040d8c <HAL_RCC_OscConfig+0x27c>)
 8040cdc:	f023 0301 	bic.w	r3, r3, #1
 8040ce0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8040ce2:	f7ff fba9 	bl	8040438 <HAL_GetTick>
 8040ce6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8040ce8:	e00e      	b.n	8040d08 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8040cea:	f7ff fba5 	bl	8040438 <HAL_GetTick>
 8040cee:	4602      	mov	r2, r0
 8040cf0:	693b      	ldr	r3, [r7, #16]
 8040cf2:	1ad3      	subs	r3, r2, r3
 8040cf4:	2b02      	cmp	r3, #2
 8040cf6:	d907      	bls.n	8040d08 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8040cf8:	4b24      	ldr	r3, [pc, #144]	; (8040d8c <HAL_RCC_OscConfig+0x27c>)
 8040cfa:	681b      	ldr	r3, [r3, #0]
 8040cfc:	f003 0302 	and.w	r3, r3, #2
 8040d00:	2b00      	cmp	r3, #0
 8040d02:	d001      	beq.n	8040d08 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8040d04:	2303      	movs	r3, #3
 8040d06:	e3cf      	b.n	80414a8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8040d08:	4b20      	ldr	r3, [pc, #128]	; (8040d8c <HAL_RCC_OscConfig+0x27c>)
 8040d0a:	681b      	ldr	r3, [r3, #0]
 8040d0c:	f003 0302 	and.w	r3, r3, #2
 8040d10:	2b00      	cmp	r3, #0
 8040d12:	d1ea      	bne.n	8040cea <HAL_RCC_OscConfig+0x1da>
 8040d14:	e000      	b.n	8040d18 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8040d16:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8040d18:	687b      	ldr	r3, [r7, #4]
 8040d1a:	681b      	ldr	r3, [r3, #0]
 8040d1c:	f003 0301 	and.w	r3, r3, #1
 8040d20:	2b00      	cmp	r3, #0
 8040d22:	d07e      	beq.n	8040e22 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8040d24:	69bb      	ldr	r3, [r7, #24]
 8040d26:	2b08      	cmp	r3, #8
 8040d28:	d005      	beq.n	8040d36 <HAL_RCC_OscConfig+0x226>
 8040d2a:	69bb      	ldr	r3, [r7, #24]
 8040d2c:	2b0c      	cmp	r3, #12
 8040d2e:	d10e      	bne.n	8040d4e <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8040d30:	697b      	ldr	r3, [r7, #20]
 8040d32:	2b03      	cmp	r3, #3
 8040d34:	d10b      	bne.n	8040d4e <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8040d36:	4b15      	ldr	r3, [pc, #84]	; (8040d8c <HAL_RCC_OscConfig+0x27c>)
 8040d38:	681b      	ldr	r3, [r3, #0]
 8040d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8040d3e:	2b00      	cmp	r3, #0
 8040d40:	d06e      	beq.n	8040e20 <HAL_RCC_OscConfig+0x310>
 8040d42:	687b      	ldr	r3, [r7, #4]
 8040d44:	685b      	ldr	r3, [r3, #4]
 8040d46:	2b00      	cmp	r3, #0
 8040d48:	d16a      	bne.n	8040e20 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8040d4a:	2301      	movs	r3, #1
 8040d4c:	e3ac      	b.n	80414a8 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8040d4e:	687b      	ldr	r3, [r7, #4]
 8040d50:	685b      	ldr	r3, [r3, #4]
 8040d52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8040d56:	d106      	bne.n	8040d66 <HAL_RCC_OscConfig+0x256>
 8040d58:	4b0c      	ldr	r3, [pc, #48]	; (8040d8c <HAL_RCC_OscConfig+0x27c>)
 8040d5a:	681b      	ldr	r3, [r3, #0]
 8040d5c:	4a0b      	ldr	r2, [pc, #44]	; (8040d8c <HAL_RCC_OscConfig+0x27c>)
 8040d5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8040d62:	6013      	str	r3, [r2, #0]
 8040d64:	e024      	b.n	8040db0 <HAL_RCC_OscConfig+0x2a0>
 8040d66:	687b      	ldr	r3, [r7, #4]
 8040d68:	685b      	ldr	r3, [r3, #4]
 8040d6a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8040d6e:	d113      	bne.n	8040d98 <HAL_RCC_OscConfig+0x288>
 8040d70:	4b06      	ldr	r3, [pc, #24]	; (8040d8c <HAL_RCC_OscConfig+0x27c>)
 8040d72:	681b      	ldr	r3, [r3, #0]
 8040d74:	4a05      	ldr	r2, [pc, #20]	; (8040d8c <HAL_RCC_OscConfig+0x27c>)
 8040d76:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8040d7a:	6013      	str	r3, [r2, #0]
 8040d7c:	4b03      	ldr	r3, [pc, #12]	; (8040d8c <HAL_RCC_OscConfig+0x27c>)
 8040d7e:	681b      	ldr	r3, [r3, #0]
 8040d80:	4a02      	ldr	r2, [pc, #8]	; (8040d8c <HAL_RCC_OscConfig+0x27c>)
 8040d82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8040d86:	6013      	str	r3, [r2, #0]
 8040d88:	e012      	b.n	8040db0 <HAL_RCC_OscConfig+0x2a0>
 8040d8a:	bf00      	nop
 8040d8c:	40021000 	.word	0x40021000
 8040d90:	2001800c 	.word	0x2001800c
 8040d94:	20018010 	.word	0x20018010
 8040d98:	4b8b      	ldr	r3, [pc, #556]	; (8040fc8 <HAL_RCC_OscConfig+0x4b8>)
 8040d9a:	681b      	ldr	r3, [r3, #0]
 8040d9c:	4a8a      	ldr	r2, [pc, #552]	; (8040fc8 <HAL_RCC_OscConfig+0x4b8>)
 8040d9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8040da2:	6013      	str	r3, [r2, #0]
 8040da4:	4b88      	ldr	r3, [pc, #544]	; (8040fc8 <HAL_RCC_OscConfig+0x4b8>)
 8040da6:	681b      	ldr	r3, [r3, #0]
 8040da8:	4a87      	ldr	r2, [pc, #540]	; (8040fc8 <HAL_RCC_OscConfig+0x4b8>)
 8040daa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8040dae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8040db0:	687b      	ldr	r3, [r7, #4]
 8040db2:	685b      	ldr	r3, [r3, #4]
 8040db4:	2b00      	cmp	r3, #0
 8040db6:	d019      	beq.n	8040dec <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8040db8:	f7ff fb3e 	bl	8040438 <HAL_GetTick>
 8040dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8040dbe:	e00e      	b.n	8040dde <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8040dc0:	f7ff fb3a 	bl	8040438 <HAL_GetTick>
 8040dc4:	4602      	mov	r2, r0
 8040dc6:	693b      	ldr	r3, [r7, #16]
 8040dc8:	1ad3      	subs	r3, r2, r3
 8040dca:	2b64      	cmp	r3, #100	; 0x64
 8040dcc:	d907      	bls.n	8040dde <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8040dce:	4b7e      	ldr	r3, [pc, #504]	; (8040fc8 <HAL_RCC_OscConfig+0x4b8>)
 8040dd0:	681b      	ldr	r3, [r3, #0]
 8040dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8040dd6:	2b00      	cmp	r3, #0
 8040dd8:	d101      	bne.n	8040dde <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8040dda:	2303      	movs	r3, #3
 8040ddc:	e364      	b.n	80414a8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8040dde:	4b7a      	ldr	r3, [pc, #488]	; (8040fc8 <HAL_RCC_OscConfig+0x4b8>)
 8040de0:	681b      	ldr	r3, [r3, #0]
 8040de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8040de6:	2b00      	cmp	r3, #0
 8040de8:	d0ea      	beq.n	8040dc0 <HAL_RCC_OscConfig+0x2b0>
 8040dea:	e01a      	b.n	8040e22 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8040dec:	f7ff fb24 	bl	8040438 <HAL_GetTick>
 8040df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8040df2:	e00e      	b.n	8040e12 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8040df4:	f7ff fb20 	bl	8040438 <HAL_GetTick>
 8040df8:	4602      	mov	r2, r0
 8040dfa:	693b      	ldr	r3, [r7, #16]
 8040dfc:	1ad3      	subs	r3, r2, r3
 8040dfe:	2b64      	cmp	r3, #100	; 0x64
 8040e00:	d907      	bls.n	8040e12 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8040e02:	4b71      	ldr	r3, [pc, #452]	; (8040fc8 <HAL_RCC_OscConfig+0x4b8>)
 8040e04:	681b      	ldr	r3, [r3, #0]
 8040e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8040e0a:	2b00      	cmp	r3, #0
 8040e0c:	d001      	beq.n	8040e12 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 8040e0e:	2303      	movs	r3, #3
 8040e10:	e34a      	b.n	80414a8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8040e12:	4b6d      	ldr	r3, [pc, #436]	; (8040fc8 <HAL_RCC_OscConfig+0x4b8>)
 8040e14:	681b      	ldr	r3, [r3, #0]
 8040e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8040e1a:	2b00      	cmp	r3, #0
 8040e1c:	d1ea      	bne.n	8040df4 <HAL_RCC_OscConfig+0x2e4>
 8040e1e:	e000      	b.n	8040e22 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8040e20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8040e22:	687b      	ldr	r3, [r7, #4]
 8040e24:	681b      	ldr	r3, [r3, #0]
 8040e26:	f003 0302 	and.w	r3, r3, #2
 8040e2a:	2b00      	cmp	r3, #0
 8040e2c:	d06c      	beq.n	8040f08 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8040e2e:	69bb      	ldr	r3, [r7, #24]
 8040e30:	2b04      	cmp	r3, #4
 8040e32:	d005      	beq.n	8040e40 <HAL_RCC_OscConfig+0x330>
 8040e34:	69bb      	ldr	r3, [r7, #24]
 8040e36:	2b0c      	cmp	r3, #12
 8040e38:	d119      	bne.n	8040e6e <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8040e3a:	697b      	ldr	r3, [r7, #20]
 8040e3c:	2b02      	cmp	r3, #2
 8040e3e:	d116      	bne.n	8040e6e <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8040e40:	4b61      	ldr	r3, [pc, #388]	; (8040fc8 <HAL_RCC_OscConfig+0x4b8>)
 8040e42:	681b      	ldr	r3, [r3, #0]
 8040e44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8040e48:	2b00      	cmp	r3, #0
 8040e4a:	d005      	beq.n	8040e58 <HAL_RCC_OscConfig+0x348>
 8040e4c:	687b      	ldr	r3, [r7, #4]
 8040e4e:	68db      	ldr	r3, [r3, #12]
 8040e50:	2b00      	cmp	r3, #0
 8040e52:	d101      	bne.n	8040e58 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8040e54:	2301      	movs	r3, #1
 8040e56:	e327      	b.n	80414a8 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8040e58:	4b5b      	ldr	r3, [pc, #364]	; (8040fc8 <HAL_RCC_OscConfig+0x4b8>)
 8040e5a:	685b      	ldr	r3, [r3, #4]
 8040e5c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8040e60:	687b      	ldr	r3, [r7, #4]
 8040e62:	691b      	ldr	r3, [r3, #16]
 8040e64:	061b      	lsls	r3, r3, #24
 8040e66:	4958      	ldr	r1, [pc, #352]	; (8040fc8 <HAL_RCC_OscConfig+0x4b8>)
 8040e68:	4313      	orrs	r3, r2
 8040e6a:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8040e6c:	e04c      	b.n	8040f08 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8040e6e:	687b      	ldr	r3, [r7, #4]
 8040e70:	68db      	ldr	r3, [r3, #12]
 8040e72:	2b00      	cmp	r3, #0
 8040e74:	d029      	beq.n	8040eca <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8040e76:	4b54      	ldr	r3, [pc, #336]	; (8040fc8 <HAL_RCC_OscConfig+0x4b8>)
 8040e78:	681b      	ldr	r3, [r3, #0]
 8040e7a:	4a53      	ldr	r2, [pc, #332]	; (8040fc8 <HAL_RCC_OscConfig+0x4b8>)
 8040e7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8040e80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8040e82:	f7ff fad9 	bl	8040438 <HAL_GetTick>
 8040e86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8040e88:	e00e      	b.n	8040ea8 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8040e8a:	f7ff fad5 	bl	8040438 <HAL_GetTick>
 8040e8e:	4602      	mov	r2, r0
 8040e90:	693b      	ldr	r3, [r7, #16]
 8040e92:	1ad3      	subs	r3, r2, r3
 8040e94:	2b02      	cmp	r3, #2
 8040e96:	d907      	bls.n	8040ea8 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8040e98:	4b4b      	ldr	r3, [pc, #300]	; (8040fc8 <HAL_RCC_OscConfig+0x4b8>)
 8040e9a:	681b      	ldr	r3, [r3, #0]
 8040e9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8040ea0:	2b00      	cmp	r3, #0
 8040ea2:	d101      	bne.n	8040ea8 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8040ea4:	2303      	movs	r3, #3
 8040ea6:	e2ff      	b.n	80414a8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8040ea8:	4b47      	ldr	r3, [pc, #284]	; (8040fc8 <HAL_RCC_OscConfig+0x4b8>)
 8040eaa:	681b      	ldr	r3, [r3, #0]
 8040eac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8040eb0:	2b00      	cmp	r3, #0
 8040eb2:	d0ea      	beq.n	8040e8a <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8040eb4:	4b44      	ldr	r3, [pc, #272]	; (8040fc8 <HAL_RCC_OscConfig+0x4b8>)
 8040eb6:	685b      	ldr	r3, [r3, #4]
 8040eb8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8040ebc:	687b      	ldr	r3, [r7, #4]
 8040ebe:	691b      	ldr	r3, [r3, #16]
 8040ec0:	061b      	lsls	r3, r3, #24
 8040ec2:	4941      	ldr	r1, [pc, #260]	; (8040fc8 <HAL_RCC_OscConfig+0x4b8>)
 8040ec4:	4313      	orrs	r3, r2
 8040ec6:	604b      	str	r3, [r1, #4]
 8040ec8:	e01e      	b.n	8040f08 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8040eca:	4b3f      	ldr	r3, [pc, #252]	; (8040fc8 <HAL_RCC_OscConfig+0x4b8>)
 8040ecc:	681b      	ldr	r3, [r3, #0]
 8040ece:	4a3e      	ldr	r2, [pc, #248]	; (8040fc8 <HAL_RCC_OscConfig+0x4b8>)
 8040ed0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8040ed4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8040ed6:	f7ff faaf 	bl	8040438 <HAL_GetTick>
 8040eda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8040edc:	e00e      	b.n	8040efc <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8040ede:	f7ff faab 	bl	8040438 <HAL_GetTick>
 8040ee2:	4602      	mov	r2, r0
 8040ee4:	693b      	ldr	r3, [r7, #16]
 8040ee6:	1ad3      	subs	r3, r2, r3
 8040ee8:	2b02      	cmp	r3, #2
 8040eea:	d907      	bls.n	8040efc <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8040eec:	4b36      	ldr	r3, [pc, #216]	; (8040fc8 <HAL_RCC_OscConfig+0x4b8>)
 8040eee:	681b      	ldr	r3, [r3, #0]
 8040ef0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8040ef4:	2b00      	cmp	r3, #0
 8040ef6:	d001      	beq.n	8040efc <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8040ef8:	2303      	movs	r3, #3
 8040efa:	e2d5      	b.n	80414a8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8040efc:	4b32      	ldr	r3, [pc, #200]	; (8040fc8 <HAL_RCC_OscConfig+0x4b8>)
 8040efe:	681b      	ldr	r3, [r3, #0]
 8040f00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8040f04:	2b00      	cmp	r3, #0
 8040f06:	d1ea      	bne.n	8040ede <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8040f08:	687b      	ldr	r3, [r7, #4]
 8040f0a:	681b      	ldr	r3, [r3, #0]
 8040f0c:	f003 0308 	and.w	r3, r3, #8
 8040f10:	2b00      	cmp	r3, #0
 8040f12:	d062      	beq.n	8040fda <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8040f14:	687b      	ldr	r3, [r7, #4]
 8040f16:	695b      	ldr	r3, [r3, #20]
 8040f18:	2b00      	cmp	r3, #0
 8040f1a:	d038      	beq.n	8040f8e <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8040f1c:	687b      	ldr	r3, [r7, #4]
 8040f1e:	699b      	ldr	r3, [r3, #24]
 8040f20:	2b00      	cmp	r3, #0
 8040f22:	d108      	bne.n	8040f36 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8040f24:	4b28      	ldr	r3, [pc, #160]	; (8040fc8 <HAL_RCC_OscConfig+0x4b8>)
 8040f26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8040f2a:	4a27      	ldr	r2, [pc, #156]	; (8040fc8 <HAL_RCC_OscConfig+0x4b8>)
 8040f2c:	f023 0310 	bic.w	r3, r3, #16
 8040f30:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8040f34:	e007      	b.n	8040f46 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8040f36:	4b24      	ldr	r3, [pc, #144]	; (8040fc8 <HAL_RCC_OscConfig+0x4b8>)
 8040f38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8040f3c:	4a22      	ldr	r2, [pc, #136]	; (8040fc8 <HAL_RCC_OscConfig+0x4b8>)
 8040f3e:	f043 0310 	orr.w	r3, r3, #16
 8040f42:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8040f46:	4b20      	ldr	r3, [pc, #128]	; (8040fc8 <HAL_RCC_OscConfig+0x4b8>)
 8040f48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8040f4c:	4a1e      	ldr	r2, [pc, #120]	; (8040fc8 <HAL_RCC_OscConfig+0x4b8>)
 8040f4e:	f043 0301 	orr.w	r3, r3, #1
 8040f52:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8040f56:	f7ff fa6f 	bl	8040438 <HAL_GetTick>
 8040f5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8040f5c:	e00f      	b.n	8040f7e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8040f5e:	f7ff fa6b 	bl	8040438 <HAL_GetTick>
 8040f62:	4602      	mov	r2, r0
 8040f64:	693b      	ldr	r3, [r7, #16]
 8040f66:	1ad3      	subs	r3, r2, r3
 8040f68:	2b07      	cmp	r3, #7
 8040f6a:	d908      	bls.n	8040f7e <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8040f6c:	4b16      	ldr	r3, [pc, #88]	; (8040fc8 <HAL_RCC_OscConfig+0x4b8>)
 8040f6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8040f72:	f003 0302 	and.w	r3, r3, #2
 8040f76:	2b00      	cmp	r3, #0
 8040f78:	d101      	bne.n	8040f7e <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8040f7a:	2303      	movs	r3, #3
 8040f7c:	e294      	b.n	80414a8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8040f7e:	4b12      	ldr	r3, [pc, #72]	; (8040fc8 <HAL_RCC_OscConfig+0x4b8>)
 8040f80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8040f84:	f003 0302 	and.w	r3, r3, #2
 8040f88:	2b00      	cmp	r3, #0
 8040f8a:	d0e8      	beq.n	8040f5e <HAL_RCC_OscConfig+0x44e>
 8040f8c:	e025      	b.n	8040fda <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8040f8e:	4b0e      	ldr	r3, [pc, #56]	; (8040fc8 <HAL_RCC_OscConfig+0x4b8>)
 8040f90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8040f94:	4a0c      	ldr	r2, [pc, #48]	; (8040fc8 <HAL_RCC_OscConfig+0x4b8>)
 8040f96:	f023 0301 	bic.w	r3, r3, #1
 8040f9a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8040f9e:	f7ff fa4b 	bl	8040438 <HAL_GetTick>
 8040fa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8040fa4:	e012      	b.n	8040fcc <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8040fa6:	f7ff fa47 	bl	8040438 <HAL_GetTick>
 8040faa:	4602      	mov	r2, r0
 8040fac:	693b      	ldr	r3, [r7, #16]
 8040fae:	1ad3      	subs	r3, r2, r3
 8040fb0:	2b07      	cmp	r3, #7
 8040fb2:	d90b      	bls.n	8040fcc <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8040fb4:	4b04      	ldr	r3, [pc, #16]	; (8040fc8 <HAL_RCC_OscConfig+0x4b8>)
 8040fb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8040fba:	f003 0302 	and.w	r3, r3, #2
 8040fbe:	2b00      	cmp	r3, #0
 8040fc0:	d004      	beq.n	8040fcc <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8040fc2:	2303      	movs	r3, #3
 8040fc4:	e270      	b.n	80414a8 <HAL_RCC_OscConfig+0x998>
 8040fc6:	bf00      	nop
 8040fc8:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8040fcc:	4ba8      	ldr	r3, [pc, #672]	; (8041270 <HAL_RCC_OscConfig+0x760>)
 8040fce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8040fd2:	f003 0302 	and.w	r3, r3, #2
 8040fd6:	2b00      	cmp	r3, #0
 8040fd8:	d1e5      	bne.n	8040fa6 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8040fda:	687b      	ldr	r3, [r7, #4]
 8040fdc:	681b      	ldr	r3, [r3, #0]
 8040fde:	f003 0304 	and.w	r3, r3, #4
 8040fe2:	2b00      	cmp	r3, #0
 8040fe4:	f000 812d 	beq.w	8041242 <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8040fe8:	2300      	movs	r3, #0
 8040fea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8040fec:	4ba0      	ldr	r3, [pc, #640]	; (8041270 <HAL_RCC_OscConfig+0x760>)
 8040fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8040ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8040ff4:	2b00      	cmp	r3, #0
 8040ff6:	d10d      	bne.n	8041014 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8040ff8:	4b9d      	ldr	r3, [pc, #628]	; (8041270 <HAL_RCC_OscConfig+0x760>)
 8040ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8040ffc:	4a9c      	ldr	r2, [pc, #624]	; (8041270 <HAL_RCC_OscConfig+0x760>)
 8040ffe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8041002:	6593      	str	r3, [r2, #88]	; 0x58
 8041004:	4b9a      	ldr	r3, [pc, #616]	; (8041270 <HAL_RCC_OscConfig+0x760>)
 8041006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041008:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 804100c:	60bb      	str	r3, [r7, #8]
 804100e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8041010:	2301      	movs	r3, #1
 8041012:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8041014:	4b97      	ldr	r3, [pc, #604]	; (8041274 <HAL_RCC_OscConfig+0x764>)
 8041016:	681b      	ldr	r3, [r3, #0]
 8041018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 804101c:	2b00      	cmp	r3, #0
 804101e:	d11e      	bne.n	804105e <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8041020:	4b94      	ldr	r3, [pc, #592]	; (8041274 <HAL_RCC_OscConfig+0x764>)
 8041022:	681b      	ldr	r3, [r3, #0]
 8041024:	4a93      	ldr	r2, [pc, #588]	; (8041274 <HAL_RCC_OscConfig+0x764>)
 8041026:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 804102a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 804102c:	f7ff fa04 	bl	8040438 <HAL_GetTick>
 8041030:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8041032:	e00e      	b.n	8041052 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8041034:	f7ff fa00 	bl	8040438 <HAL_GetTick>
 8041038:	4602      	mov	r2, r0
 804103a:	693b      	ldr	r3, [r7, #16]
 804103c:	1ad3      	subs	r3, r2, r3
 804103e:	2b02      	cmp	r3, #2
 8041040:	d907      	bls.n	8041052 <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8041042:	4b8c      	ldr	r3, [pc, #560]	; (8041274 <HAL_RCC_OscConfig+0x764>)
 8041044:	681b      	ldr	r3, [r3, #0]
 8041046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 804104a:	2b00      	cmp	r3, #0
 804104c:	d101      	bne.n	8041052 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 804104e:	2303      	movs	r3, #3
 8041050:	e22a      	b.n	80414a8 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8041052:	4b88      	ldr	r3, [pc, #544]	; (8041274 <HAL_RCC_OscConfig+0x764>)
 8041054:	681b      	ldr	r3, [r3, #0]
 8041056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 804105a:	2b00      	cmp	r3, #0
 804105c:	d0ea      	beq.n	8041034 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 804105e:	687b      	ldr	r3, [r7, #4]
 8041060:	689b      	ldr	r3, [r3, #8]
 8041062:	f003 0301 	and.w	r3, r3, #1
 8041066:	2b00      	cmp	r3, #0
 8041068:	d01f      	beq.n	80410aa <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 804106a:	687b      	ldr	r3, [r7, #4]
 804106c:	689b      	ldr	r3, [r3, #8]
 804106e:	f003 0304 	and.w	r3, r3, #4
 8041072:	2b00      	cmp	r3, #0
 8041074:	d010      	beq.n	8041098 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8041076:	4b7e      	ldr	r3, [pc, #504]	; (8041270 <HAL_RCC_OscConfig+0x760>)
 8041078:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804107c:	4a7c      	ldr	r2, [pc, #496]	; (8041270 <HAL_RCC_OscConfig+0x760>)
 804107e:	f043 0304 	orr.w	r3, r3, #4
 8041082:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8041086:	4b7a      	ldr	r3, [pc, #488]	; (8041270 <HAL_RCC_OscConfig+0x760>)
 8041088:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804108c:	4a78      	ldr	r2, [pc, #480]	; (8041270 <HAL_RCC_OscConfig+0x760>)
 804108e:	f043 0301 	orr.w	r3, r3, #1
 8041092:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8041096:	e018      	b.n	80410ca <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8041098:	4b75      	ldr	r3, [pc, #468]	; (8041270 <HAL_RCC_OscConfig+0x760>)
 804109a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804109e:	4a74      	ldr	r2, [pc, #464]	; (8041270 <HAL_RCC_OscConfig+0x760>)
 80410a0:	f043 0301 	orr.w	r3, r3, #1
 80410a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80410a8:	e00f      	b.n	80410ca <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80410aa:	4b71      	ldr	r3, [pc, #452]	; (8041270 <HAL_RCC_OscConfig+0x760>)
 80410ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80410b0:	4a6f      	ldr	r2, [pc, #444]	; (8041270 <HAL_RCC_OscConfig+0x760>)
 80410b2:	f023 0301 	bic.w	r3, r3, #1
 80410b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80410ba:	4b6d      	ldr	r3, [pc, #436]	; (8041270 <HAL_RCC_OscConfig+0x760>)
 80410bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80410c0:	4a6b      	ldr	r2, [pc, #428]	; (8041270 <HAL_RCC_OscConfig+0x760>)
 80410c2:	f023 0304 	bic.w	r3, r3, #4
 80410c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80410ca:	687b      	ldr	r3, [r7, #4]
 80410cc:	689b      	ldr	r3, [r3, #8]
 80410ce:	2b00      	cmp	r3, #0
 80410d0:	d068      	beq.n	80411a4 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80410d2:	f7ff f9b1 	bl	8040438 <HAL_GetTick>
 80410d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80410d8:	e011      	b.n	80410fe <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80410da:	f7ff f9ad 	bl	8040438 <HAL_GetTick>
 80410de:	4602      	mov	r2, r0
 80410e0:	693b      	ldr	r3, [r7, #16]
 80410e2:	1ad3      	subs	r3, r2, r3
 80410e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80410e8:	4293      	cmp	r3, r2
 80410ea:	d908      	bls.n	80410fe <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80410ec:	4b60      	ldr	r3, [pc, #384]	; (8041270 <HAL_RCC_OscConfig+0x760>)
 80410ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80410f2:	f003 0302 	and.w	r3, r3, #2
 80410f6:	2b00      	cmp	r3, #0
 80410f8:	d101      	bne.n	80410fe <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 80410fa:	2303      	movs	r3, #3
 80410fc:	e1d4      	b.n	80414a8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80410fe:	4b5c      	ldr	r3, [pc, #368]	; (8041270 <HAL_RCC_OscConfig+0x760>)
 8041100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041104:	f003 0302 	and.w	r3, r3, #2
 8041108:	2b00      	cmp	r3, #0
 804110a:	d0e6      	beq.n	80410da <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 804110c:	687b      	ldr	r3, [r7, #4]
 804110e:	689b      	ldr	r3, [r3, #8]
 8041110:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8041114:	2b00      	cmp	r3, #0
 8041116:	d022      	beq.n	804115e <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8041118:	4b55      	ldr	r3, [pc, #340]	; (8041270 <HAL_RCC_OscConfig+0x760>)
 804111a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804111e:	4a54      	ldr	r2, [pc, #336]	; (8041270 <HAL_RCC_OscConfig+0x760>)
 8041120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8041124:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8041128:	e011      	b.n	804114e <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 804112a:	f7ff f985 	bl	8040438 <HAL_GetTick>
 804112e:	4602      	mov	r2, r0
 8041130:	693b      	ldr	r3, [r7, #16]
 8041132:	1ad3      	subs	r3, r2, r3
 8041134:	f241 3288 	movw	r2, #5000	; 0x1388
 8041138:	4293      	cmp	r3, r2
 804113a:	d908      	bls.n	804114e <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 804113c:	4b4c      	ldr	r3, [pc, #304]	; (8041270 <HAL_RCC_OscConfig+0x760>)
 804113e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041142:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8041146:	2b00      	cmp	r3, #0
 8041148:	d101      	bne.n	804114e <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 804114a:	2303      	movs	r3, #3
 804114c:	e1ac      	b.n	80414a8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 804114e:	4b48      	ldr	r3, [pc, #288]	; (8041270 <HAL_RCC_OscConfig+0x760>)
 8041150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041154:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8041158:	2b00      	cmp	r3, #0
 804115a:	d0e6      	beq.n	804112a <HAL_RCC_OscConfig+0x61a>
 804115c:	e068      	b.n	8041230 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 804115e:	4b44      	ldr	r3, [pc, #272]	; (8041270 <HAL_RCC_OscConfig+0x760>)
 8041160:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041164:	4a42      	ldr	r2, [pc, #264]	; (8041270 <HAL_RCC_OscConfig+0x760>)
 8041166:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 804116a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 804116e:	e011      	b.n	8041194 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8041170:	f7ff f962 	bl	8040438 <HAL_GetTick>
 8041174:	4602      	mov	r2, r0
 8041176:	693b      	ldr	r3, [r7, #16]
 8041178:	1ad3      	subs	r3, r2, r3
 804117a:	f241 3288 	movw	r2, #5000	; 0x1388
 804117e:	4293      	cmp	r3, r2
 8041180:	d908      	bls.n	8041194 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8041182:	4b3b      	ldr	r3, [pc, #236]	; (8041270 <HAL_RCC_OscConfig+0x760>)
 8041184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041188:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 804118c:	2b00      	cmp	r3, #0
 804118e:	d001      	beq.n	8041194 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8041190:	2303      	movs	r3, #3
 8041192:	e189      	b.n	80414a8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8041194:	4b36      	ldr	r3, [pc, #216]	; (8041270 <HAL_RCC_OscConfig+0x760>)
 8041196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804119a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 804119e:	2b00      	cmp	r3, #0
 80411a0:	d1e6      	bne.n	8041170 <HAL_RCC_OscConfig+0x660>
 80411a2:	e045      	b.n	8041230 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80411a4:	f7ff f948 	bl	8040438 <HAL_GetTick>
 80411a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80411aa:	e011      	b.n	80411d0 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80411ac:	f7ff f944 	bl	8040438 <HAL_GetTick>
 80411b0:	4602      	mov	r2, r0
 80411b2:	693b      	ldr	r3, [r7, #16]
 80411b4:	1ad3      	subs	r3, r2, r3
 80411b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80411ba:	4293      	cmp	r3, r2
 80411bc:	d908      	bls.n	80411d0 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80411be:	4b2c      	ldr	r3, [pc, #176]	; (8041270 <HAL_RCC_OscConfig+0x760>)
 80411c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80411c4:	f003 0302 	and.w	r3, r3, #2
 80411c8:	2b00      	cmp	r3, #0
 80411ca:	d001      	beq.n	80411d0 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 80411cc:	2303      	movs	r3, #3
 80411ce:	e16b      	b.n	80414a8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80411d0:	4b27      	ldr	r3, [pc, #156]	; (8041270 <HAL_RCC_OscConfig+0x760>)
 80411d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80411d6:	f003 0302 	and.w	r3, r3, #2
 80411da:	2b00      	cmp	r3, #0
 80411dc:	d1e6      	bne.n	80411ac <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80411de:	4b24      	ldr	r3, [pc, #144]	; (8041270 <HAL_RCC_OscConfig+0x760>)
 80411e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80411e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80411e8:	2b00      	cmp	r3, #0
 80411ea:	d021      	beq.n	8041230 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80411ec:	4b20      	ldr	r3, [pc, #128]	; (8041270 <HAL_RCC_OscConfig+0x760>)
 80411ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80411f2:	4a1f      	ldr	r2, [pc, #124]	; (8041270 <HAL_RCC_OscConfig+0x760>)
 80411f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80411f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80411fc:	e011      	b.n	8041222 <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80411fe:	f7ff f91b 	bl	8040438 <HAL_GetTick>
 8041202:	4602      	mov	r2, r0
 8041204:	693b      	ldr	r3, [r7, #16]
 8041206:	1ad3      	subs	r3, r2, r3
 8041208:	f241 3288 	movw	r2, #5000	; 0x1388
 804120c:	4293      	cmp	r3, r2
 804120e:	d908      	bls.n	8041222 <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8041210:	4b17      	ldr	r3, [pc, #92]	; (8041270 <HAL_RCC_OscConfig+0x760>)
 8041212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041216:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 804121a:	2b00      	cmp	r3, #0
 804121c:	d001      	beq.n	8041222 <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 804121e:	2303      	movs	r3, #3
 8041220:	e142      	b.n	80414a8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8041222:	4b13      	ldr	r3, [pc, #76]	; (8041270 <HAL_RCC_OscConfig+0x760>)
 8041224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041228:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 804122c:	2b00      	cmp	r3, #0
 804122e:	d1e6      	bne.n	80411fe <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8041230:	7ffb      	ldrb	r3, [r7, #31]
 8041232:	2b01      	cmp	r3, #1
 8041234:	d105      	bne.n	8041242 <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8041236:	4b0e      	ldr	r3, [pc, #56]	; (8041270 <HAL_RCC_OscConfig+0x760>)
 8041238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804123a:	4a0d      	ldr	r2, [pc, #52]	; (8041270 <HAL_RCC_OscConfig+0x760>)
 804123c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8041240:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8041242:	687b      	ldr	r3, [r7, #4]
 8041244:	681b      	ldr	r3, [r3, #0]
 8041246:	f003 0320 	and.w	r3, r3, #32
 804124a:	2b00      	cmp	r3, #0
 804124c:	d04f      	beq.n	80412ee <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 804124e:	687b      	ldr	r3, [r7, #4]
 8041250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8041252:	2b00      	cmp	r3, #0
 8041254:	d028      	beq.n	80412a8 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8041256:	4b06      	ldr	r3, [pc, #24]	; (8041270 <HAL_RCC_OscConfig+0x760>)
 8041258:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 804125c:	4a04      	ldr	r2, [pc, #16]	; (8041270 <HAL_RCC_OscConfig+0x760>)
 804125e:	f043 0301 	orr.w	r3, r3, #1
 8041262:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8041266:	f7ff f8e7 	bl	8040438 <HAL_GetTick>
 804126a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 804126c:	e014      	b.n	8041298 <HAL_RCC_OscConfig+0x788>
 804126e:	bf00      	nop
 8041270:	40021000 	.word	0x40021000
 8041274:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8041278:	f7ff f8de 	bl	8040438 <HAL_GetTick>
 804127c:	4602      	mov	r2, r0
 804127e:	693b      	ldr	r3, [r7, #16]
 8041280:	1ad3      	subs	r3, r2, r3
 8041282:	2b02      	cmp	r3, #2
 8041284:	d908      	bls.n	8041298 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8041286:	4b8a      	ldr	r3, [pc, #552]	; (80414b0 <HAL_RCC_OscConfig+0x9a0>)
 8041288:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 804128c:	f003 0302 	and.w	r3, r3, #2
 8041290:	2b00      	cmp	r3, #0
 8041292:	d101      	bne.n	8041298 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8041294:	2303      	movs	r3, #3
 8041296:	e107      	b.n	80414a8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8041298:	4b85      	ldr	r3, [pc, #532]	; (80414b0 <HAL_RCC_OscConfig+0x9a0>)
 804129a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 804129e:	f003 0302 	and.w	r3, r3, #2
 80412a2:	2b00      	cmp	r3, #0
 80412a4:	d0e8      	beq.n	8041278 <HAL_RCC_OscConfig+0x768>
 80412a6:	e022      	b.n	80412ee <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80412a8:	4b81      	ldr	r3, [pc, #516]	; (80414b0 <HAL_RCC_OscConfig+0x9a0>)
 80412aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80412ae:	4a80      	ldr	r2, [pc, #512]	; (80414b0 <HAL_RCC_OscConfig+0x9a0>)
 80412b0:	f023 0301 	bic.w	r3, r3, #1
 80412b4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80412b8:	f7ff f8be 	bl	8040438 <HAL_GetTick>
 80412bc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80412be:	e00f      	b.n	80412e0 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80412c0:	f7ff f8ba 	bl	8040438 <HAL_GetTick>
 80412c4:	4602      	mov	r2, r0
 80412c6:	693b      	ldr	r3, [r7, #16]
 80412c8:	1ad3      	subs	r3, r2, r3
 80412ca:	2b02      	cmp	r3, #2
 80412cc:	d908      	bls.n	80412e0 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80412ce:	4b78      	ldr	r3, [pc, #480]	; (80414b0 <HAL_RCC_OscConfig+0x9a0>)
 80412d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80412d4:	f003 0302 	and.w	r3, r3, #2
 80412d8:	2b00      	cmp	r3, #0
 80412da:	d001      	beq.n	80412e0 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 80412dc:	2303      	movs	r3, #3
 80412de:	e0e3      	b.n	80414a8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80412e0:	4b73      	ldr	r3, [pc, #460]	; (80414b0 <HAL_RCC_OscConfig+0x9a0>)
 80412e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80412e6:	f003 0302 	and.w	r3, r3, #2
 80412ea:	2b00      	cmp	r3, #0
 80412ec:	d1e8      	bne.n	80412c0 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80412ee:	687b      	ldr	r3, [r7, #4]
 80412f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80412f2:	2b00      	cmp	r3, #0
 80412f4:	f000 80d7 	beq.w	80414a6 <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80412f8:	4b6d      	ldr	r3, [pc, #436]	; (80414b0 <HAL_RCC_OscConfig+0x9a0>)
 80412fa:	689b      	ldr	r3, [r3, #8]
 80412fc:	f003 030c 	and.w	r3, r3, #12
 8041300:	2b0c      	cmp	r3, #12
 8041302:	f000 8091 	beq.w	8041428 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8041306:	687b      	ldr	r3, [r7, #4]
 8041308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804130a:	2b02      	cmp	r3, #2
 804130c:	d166      	bne.n	80413dc <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 804130e:	4b68      	ldr	r3, [pc, #416]	; (80414b0 <HAL_RCC_OscConfig+0x9a0>)
 8041310:	681b      	ldr	r3, [r3, #0]
 8041312:	4a67      	ldr	r2, [pc, #412]	; (80414b0 <HAL_RCC_OscConfig+0x9a0>)
 8041314:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8041318:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 804131a:	f7ff f88d 	bl	8040438 <HAL_GetTick>
 804131e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8041320:	e00e      	b.n	8041340 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8041322:	f7ff f889 	bl	8040438 <HAL_GetTick>
 8041326:	4602      	mov	r2, r0
 8041328:	693b      	ldr	r3, [r7, #16]
 804132a:	1ad3      	subs	r3, r2, r3
 804132c:	2b02      	cmp	r3, #2
 804132e:	d907      	bls.n	8041340 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8041330:	4b5f      	ldr	r3, [pc, #380]	; (80414b0 <HAL_RCC_OscConfig+0x9a0>)
 8041332:	681b      	ldr	r3, [r3, #0]
 8041334:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8041338:	2b00      	cmp	r3, #0
 804133a:	d001      	beq.n	8041340 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 804133c:	2303      	movs	r3, #3
 804133e:	e0b3      	b.n	80414a8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8041340:	4b5b      	ldr	r3, [pc, #364]	; (80414b0 <HAL_RCC_OscConfig+0x9a0>)
 8041342:	681b      	ldr	r3, [r3, #0]
 8041344:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8041348:	2b00      	cmp	r3, #0
 804134a:	d1ea      	bne.n	8041322 <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 804134c:	4b58      	ldr	r3, [pc, #352]	; (80414b0 <HAL_RCC_OscConfig+0x9a0>)
 804134e:	68da      	ldr	r2, [r3, #12]
 8041350:	4b58      	ldr	r3, [pc, #352]	; (80414b4 <HAL_RCC_OscConfig+0x9a4>)
 8041352:	4013      	ands	r3, r2
 8041354:	687a      	ldr	r2, [r7, #4]
 8041356:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8041358:	687a      	ldr	r2, [r7, #4]
 804135a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 804135c:	3a01      	subs	r2, #1
 804135e:	0112      	lsls	r2, r2, #4
 8041360:	4311      	orrs	r1, r2
 8041362:	687a      	ldr	r2, [r7, #4]
 8041364:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8041366:	0212      	lsls	r2, r2, #8
 8041368:	4311      	orrs	r1, r2
 804136a:	687a      	ldr	r2, [r7, #4]
 804136c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 804136e:	0852      	lsrs	r2, r2, #1
 8041370:	3a01      	subs	r2, #1
 8041372:	0552      	lsls	r2, r2, #21
 8041374:	4311      	orrs	r1, r2
 8041376:	687a      	ldr	r2, [r7, #4]
 8041378:	6c52      	ldr	r2, [r2, #68]	; 0x44
 804137a:	0852      	lsrs	r2, r2, #1
 804137c:	3a01      	subs	r2, #1
 804137e:	0652      	lsls	r2, r2, #25
 8041380:	4311      	orrs	r1, r2
 8041382:	687a      	ldr	r2, [r7, #4]
 8041384:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8041386:	06d2      	lsls	r2, r2, #27
 8041388:	430a      	orrs	r2, r1
 804138a:	4949      	ldr	r1, [pc, #292]	; (80414b0 <HAL_RCC_OscConfig+0x9a0>)
 804138c:	4313      	orrs	r3, r2
 804138e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8041390:	4b47      	ldr	r3, [pc, #284]	; (80414b0 <HAL_RCC_OscConfig+0x9a0>)
 8041392:	681b      	ldr	r3, [r3, #0]
 8041394:	4a46      	ldr	r2, [pc, #280]	; (80414b0 <HAL_RCC_OscConfig+0x9a0>)
 8041396:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 804139a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 804139c:	4b44      	ldr	r3, [pc, #272]	; (80414b0 <HAL_RCC_OscConfig+0x9a0>)
 804139e:	68db      	ldr	r3, [r3, #12]
 80413a0:	4a43      	ldr	r2, [pc, #268]	; (80414b0 <HAL_RCC_OscConfig+0x9a0>)
 80413a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80413a6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80413a8:	f7ff f846 	bl	8040438 <HAL_GetTick>
 80413ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80413ae:	e00e      	b.n	80413ce <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80413b0:	f7ff f842 	bl	8040438 <HAL_GetTick>
 80413b4:	4602      	mov	r2, r0
 80413b6:	693b      	ldr	r3, [r7, #16]
 80413b8:	1ad3      	subs	r3, r2, r3
 80413ba:	2b02      	cmp	r3, #2
 80413bc:	d907      	bls.n	80413ce <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80413be:	4b3c      	ldr	r3, [pc, #240]	; (80414b0 <HAL_RCC_OscConfig+0x9a0>)
 80413c0:	681b      	ldr	r3, [r3, #0]
 80413c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80413c6:	2b00      	cmp	r3, #0
 80413c8:	d101      	bne.n	80413ce <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 80413ca:	2303      	movs	r3, #3
 80413cc:	e06c      	b.n	80414a8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80413ce:	4b38      	ldr	r3, [pc, #224]	; (80414b0 <HAL_RCC_OscConfig+0x9a0>)
 80413d0:	681b      	ldr	r3, [r3, #0]
 80413d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80413d6:	2b00      	cmp	r3, #0
 80413d8:	d0ea      	beq.n	80413b0 <HAL_RCC_OscConfig+0x8a0>
 80413da:	e064      	b.n	80414a6 <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80413dc:	4b34      	ldr	r3, [pc, #208]	; (80414b0 <HAL_RCC_OscConfig+0x9a0>)
 80413de:	681b      	ldr	r3, [r3, #0]
 80413e0:	4a33      	ldr	r2, [pc, #204]	; (80414b0 <HAL_RCC_OscConfig+0x9a0>)
 80413e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80413e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80413e8:	f7ff f826 	bl	8040438 <HAL_GetTick>
 80413ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80413ee:	e00e      	b.n	804140e <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80413f0:	f7ff f822 	bl	8040438 <HAL_GetTick>
 80413f4:	4602      	mov	r2, r0
 80413f6:	693b      	ldr	r3, [r7, #16]
 80413f8:	1ad3      	subs	r3, r2, r3
 80413fa:	2b02      	cmp	r3, #2
 80413fc:	d907      	bls.n	804140e <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80413fe:	4b2c      	ldr	r3, [pc, #176]	; (80414b0 <HAL_RCC_OscConfig+0x9a0>)
 8041400:	681b      	ldr	r3, [r3, #0]
 8041402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8041406:	2b00      	cmp	r3, #0
 8041408:	d001      	beq.n	804140e <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 804140a:	2303      	movs	r3, #3
 804140c:	e04c      	b.n	80414a8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 804140e:	4b28      	ldr	r3, [pc, #160]	; (80414b0 <HAL_RCC_OscConfig+0x9a0>)
 8041410:	681b      	ldr	r3, [r3, #0]
 8041412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8041416:	2b00      	cmp	r3, #0
 8041418:	d1ea      	bne.n	80413f0 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 804141a:	4b25      	ldr	r3, [pc, #148]	; (80414b0 <HAL_RCC_OscConfig+0x9a0>)
 804141c:	68da      	ldr	r2, [r3, #12]
 804141e:	4924      	ldr	r1, [pc, #144]	; (80414b0 <HAL_RCC_OscConfig+0x9a0>)
 8041420:	4b25      	ldr	r3, [pc, #148]	; (80414b8 <HAL_RCC_OscConfig+0x9a8>)
 8041422:	4013      	ands	r3, r2
 8041424:	60cb      	str	r3, [r1, #12]
 8041426:	e03e      	b.n	80414a6 <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8041428:	687b      	ldr	r3, [r7, #4]
 804142a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804142c:	2b01      	cmp	r3, #1
 804142e:	d101      	bne.n	8041434 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 8041430:	2301      	movs	r3, #1
 8041432:	e039      	b.n	80414a8 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8041434:	4b1e      	ldr	r3, [pc, #120]	; (80414b0 <HAL_RCC_OscConfig+0x9a0>)
 8041436:	68db      	ldr	r3, [r3, #12]
 8041438:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 804143a:	697b      	ldr	r3, [r7, #20]
 804143c:	f003 0203 	and.w	r2, r3, #3
 8041440:	687b      	ldr	r3, [r7, #4]
 8041442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041444:	429a      	cmp	r2, r3
 8041446:	d12c      	bne.n	80414a2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8041448:	697b      	ldr	r3, [r7, #20]
 804144a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 804144e:	687b      	ldr	r3, [r7, #4]
 8041450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8041452:	3b01      	subs	r3, #1
 8041454:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8041456:	429a      	cmp	r2, r3
 8041458:	d123      	bne.n	80414a2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 804145a:	697b      	ldr	r3, [r7, #20]
 804145c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8041460:	687b      	ldr	r3, [r7, #4]
 8041462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8041464:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8041466:	429a      	cmp	r2, r3
 8041468:	d11b      	bne.n	80414a2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 804146a:	697b      	ldr	r3, [r7, #20]
 804146c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8041470:	687b      	ldr	r3, [r7, #4]
 8041472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8041474:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8041476:	429a      	cmp	r2, r3
 8041478:	d113      	bne.n	80414a2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 804147a:	697b      	ldr	r3, [r7, #20]
 804147c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8041480:	687b      	ldr	r3, [r7, #4]
 8041482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8041484:	085b      	lsrs	r3, r3, #1
 8041486:	3b01      	subs	r3, #1
 8041488:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 804148a:	429a      	cmp	r2, r3
 804148c:	d109      	bne.n	80414a2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 804148e:	697b      	ldr	r3, [r7, #20]
 8041490:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8041494:	687b      	ldr	r3, [r7, #4]
 8041496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8041498:	085b      	lsrs	r3, r3, #1
 804149a:	3b01      	subs	r3, #1
 804149c:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 804149e:	429a      	cmp	r2, r3
 80414a0:	d001      	beq.n	80414a6 <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 80414a2:	2301      	movs	r3, #1
 80414a4:	e000      	b.n	80414a8 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 80414a6:	2300      	movs	r3, #0
}
 80414a8:	4618      	mov	r0, r3
 80414aa:	3720      	adds	r7, #32
 80414ac:	46bd      	mov	sp, r7
 80414ae:	bd80      	pop	{r7, pc}
 80414b0:	40021000 	.word	0x40021000
 80414b4:	019f800c 	.word	0x019f800c
 80414b8:	feeefffc 	.word	0xfeeefffc

080414bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80414bc:	b580      	push	{r7, lr}
 80414be:	b086      	sub	sp, #24
 80414c0:	af00      	add	r7, sp, #0
 80414c2:	6078      	str	r0, [r7, #4]
 80414c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80414c6:	2300      	movs	r3, #0
 80414c8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80414ca:	687b      	ldr	r3, [r7, #4]
 80414cc:	2b00      	cmp	r3, #0
 80414ce:	d101      	bne.n	80414d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80414d0:	2301      	movs	r3, #1
 80414d2:	e11c      	b.n	804170e <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80414d4:	4b90      	ldr	r3, [pc, #576]	; (8041718 <HAL_RCC_ClockConfig+0x25c>)
 80414d6:	681b      	ldr	r3, [r3, #0]
 80414d8:	f003 030f 	and.w	r3, r3, #15
 80414dc:	683a      	ldr	r2, [r7, #0]
 80414de:	429a      	cmp	r2, r3
 80414e0:	d910      	bls.n	8041504 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80414e2:	4b8d      	ldr	r3, [pc, #564]	; (8041718 <HAL_RCC_ClockConfig+0x25c>)
 80414e4:	681b      	ldr	r3, [r3, #0]
 80414e6:	f023 020f 	bic.w	r2, r3, #15
 80414ea:	498b      	ldr	r1, [pc, #556]	; (8041718 <HAL_RCC_ClockConfig+0x25c>)
 80414ec:	683b      	ldr	r3, [r7, #0]
 80414ee:	4313      	orrs	r3, r2
 80414f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80414f2:	4b89      	ldr	r3, [pc, #548]	; (8041718 <HAL_RCC_ClockConfig+0x25c>)
 80414f4:	681b      	ldr	r3, [r3, #0]
 80414f6:	f003 030f 	and.w	r3, r3, #15
 80414fa:	683a      	ldr	r2, [r7, #0]
 80414fc:	429a      	cmp	r2, r3
 80414fe:	d001      	beq.n	8041504 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8041500:	2301      	movs	r3, #1
 8041502:	e104      	b.n	804170e <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8041504:	687b      	ldr	r3, [r7, #4]
 8041506:	681b      	ldr	r3, [r3, #0]
 8041508:	f003 0302 	and.w	r3, r3, #2
 804150c:	2b00      	cmp	r3, #0
 804150e:	d010      	beq.n	8041532 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8041510:	687b      	ldr	r3, [r7, #4]
 8041512:	689a      	ldr	r2, [r3, #8]
 8041514:	4b81      	ldr	r3, [pc, #516]	; (804171c <HAL_RCC_ClockConfig+0x260>)
 8041516:	689b      	ldr	r3, [r3, #8]
 8041518:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 804151c:	429a      	cmp	r2, r3
 804151e:	d908      	bls.n	8041532 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8041520:	4b7e      	ldr	r3, [pc, #504]	; (804171c <HAL_RCC_ClockConfig+0x260>)
 8041522:	689b      	ldr	r3, [r3, #8]
 8041524:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8041528:	687b      	ldr	r3, [r7, #4]
 804152a:	689b      	ldr	r3, [r3, #8]
 804152c:	497b      	ldr	r1, [pc, #492]	; (804171c <HAL_RCC_ClockConfig+0x260>)
 804152e:	4313      	orrs	r3, r2
 8041530:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8041532:	687b      	ldr	r3, [r7, #4]
 8041534:	681b      	ldr	r3, [r3, #0]
 8041536:	f003 0301 	and.w	r3, r3, #1
 804153a:	2b00      	cmp	r3, #0
 804153c:	f000 8085 	beq.w	804164a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8041540:	687b      	ldr	r3, [r7, #4]
 8041542:	685b      	ldr	r3, [r3, #4]
 8041544:	2b03      	cmp	r3, #3
 8041546:	d11f      	bne.n	8041588 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8041548:	4b74      	ldr	r3, [pc, #464]	; (804171c <HAL_RCC_ClockConfig+0x260>)
 804154a:	681b      	ldr	r3, [r3, #0]
 804154c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8041550:	2b00      	cmp	r3, #0
 8041552:	d101      	bne.n	8041558 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8041554:	2301      	movs	r3, #1
 8041556:	e0da      	b.n	804170e <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8041558:	f000 f9fc 	bl	8041954 <RCC_GetSysClockFreqFromPLLSource>
 804155c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 804155e:	693b      	ldr	r3, [r7, #16]
 8041560:	4a6f      	ldr	r2, [pc, #444]	; (8041720 <HAL_RCC_ClockConfig+0x264>)
 8041562:	4293      	cmp	r3, r2
 8041564:	d947      	bls.n	80415f6 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8041566:	4b6d      	ldr	r3, [pc, #436]	; (804171c <HAL_RCC_ClockConfig+0x260>)
 8041568:	689b      	ldr	r3, [r3, #8]
 804156a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 804156e:	2b00      	cmp	r3, #0
 8041570:	d141      	bne.n	80415f6 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8041572:	4b6a      	ldr	r3, [pc, #424]	; (804171c <HAL_RCC_ClockConfig+0x260>)
 8041574:	689b      	ldr	r3, [r3, #8]
 8041576:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 804157a:	4a68      	ldr	r2, [pc, #416]	; (804171c <HAL_RCC_ClockConfig+0x260>)
 804157c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8041580:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8041582:	2380      	movs	r3, #128	; 0x80
 8041584:	617b      	str	r3, [r7, #20]
 8041586:	e036      	b.n	80415f6 <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8041588:	687b      	ldr	r3, [r7, #4]
 804158a:	685b      	ldr	r3, [r3, #4]
 804158c:	2b02      	cmp	r3, #2
 804158e:	d107      	bne.n	80415a0 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8041590:	4b62      	ldr	r3, [pc, #392]	; (804171c <HAL_RCC_ClockConfig+0x260>)
 8041592:	681b      	ldr	r3, [r3, #0]
 8041594:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8041598:	2b00      	cmp	r3, #0
 804159a:	d115      	bne.n	80415c8 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 804159c:	2301      	movs	r3, #1
 804159e:	e0b6      	b.n	804170e <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80415a0:	687b      	ldr	r3, [r7, #4]
 80415a2:	685b      	ldr	r3, [r3, #4]
 80415a4:	2b00      	cmp	r3, #0
 80415a6:	d107      	bne.n	80415b8 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80415a8:	4b5c      	ldr	r3, [pc, #368]	; (804171c <HAL_RCC_ClockConfig+0x260>)
 80415aa:	681b      	ldr	r3, [r3, #0]
 80415ac:	f003 0302 	and.w	r3, r3, #2
 80415b0:	2b00      	cmp	r3, #0
 80415b2:	d109      	bne.n	80415c8 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80415b4:	2301      	movs	r3, #1
 80415b6:	e0aa      	b.n	804170e <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80415b8:	4b58      	ldr	r3, [pc, #352]	; (804171c <HAL_RCC_ClockConfig+0x260>)
 80415ba:	681b      	ldr	r3, [r3, #0]
 80415bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80415c0:	2b00      	cmp	r3, #0
 80415c2:	d101      	bne.n	80415c8 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80415c4:	2301      	movs	r3, #1
 80415c6:	e0a2      	b.n	804170e <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80415c8:	f000 f8b0 	bl	804172c <HAL_RCC_GetSysClockFreq>
 80415cc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 80415ce:	693b      	ldr	r3, [r7, #16]
 80415d0:	4a53      	ldr	r2, [pc, #332]	; (8041720 <HAL_RCC_ClockConfig+0x264>)
 80415d2:	4293      	cmp	r3, r2
 80415d4:	d90f      	bls.n	80415f6 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80415d6:	4b51      	ldr	r3, [pc, #324]	; (804171c <HAL_RCC_ClockConfig+0x260>)
 80415d8:	689b      	ldr	r3, [r3, #8]
 80415da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80415de:	2b00      	cmp	r3, #0
 80415e0:	d109      	bne.n	80415f6 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80415e2:	4b4e      	ldr	r3, [pc, #312]	; (804171c <HAL_RCC_ClockConfig+0x260>)
 80415e4:	689b      	ldr	r3, [r3, #8]
 80415e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80415ea:	4a4c      	ldr	r2, [pc, #304]	; (804171c <HAL_RCC_ClockConfig+0x260>)
 80415ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80415f0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80415f2:	2380      	movs	r3, #128	; 0x80
 80415f4:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80415f6:	4b49      	ldr	r3, [pc, #292]	; (804171c <HAL_RCC_ClockConfig+0x260>)
 80415f8:	689b      	ldr	r3, [r3, #8]
 80415fa:	f023 0203 	bic.w	r2, r3, #3
 80415fe:	687b      	ldr	r3, [r7, #4]
 8041600:	685b      	ldr	r3, [r3, #4]
 8041602:	4946      	ldr	r1, [pc, #280]	; (804171c <HAL_RCC_ClockConfig+0x260>)
 8041604:	4313      	orrs	r3, r2
 8041606:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8041608:	f7fe ff16 	bl	8040438 <HAL_GetTick>
 804160c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 804160e:	e013      	b.n	8041638 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8041610:	f7fe ff12 	bl	8040438 <HAL_GetTick>
 8041614:	4602      	mov	r2, r0
 8041616:	68fb      	ldr	r3, [r7, #12]
 8041618:	1ad3      	subs	r3, r2, r3
 804161a:	f241 3288 	movw	r2, #5000	; 0x1388
 804161e:	4293      	cmp	r3, r2
 8041620:	d90a      	bls.n	8041638 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8041622:	4b3e      	ldr	r3, [pc, #248]	; (804171c <HAL_RCC_ClockConfig+0x260>)
 8041624:	689b      	ldr	r3, [r3, #8]
 8041626:	f003 020c 	and.w	r2, r3, #12
 804162a:	687b      	ldr	r3, [r7, #4]
 804162c:	685b      	ldr	r3, [r3, #4]
 804162e:	009b      	lsls	r3, r3, #2
 8041630:	429a      	cmp	r2, r3
 8041632:	d001      	beq.n	8041638 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8041634:	2303      	movs	r3, #3
 8041636:	e06a      	b.n	804170e <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8041638:	4b38      	ldr	r3, [pc, #224]	; (804171c <HAL_RCC_ClockConfig+0x260>)
 804163a:	689b      	ldr	r3, [r3, #8]
 804163c:	f003 020c 	and.w	r2, r3, #12
 8041640:	687b      	ldr	r3, [r7, #4]
 8041642:	685b      	ldr	r3, [r3, #4]
 8041644:	009b      	lsls	r3, r3, #2
 8041646:	429a      	cmp	r2, r3
 8041648:	d1e2      	bne.n	8041610 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 804164a:	697b      	ldr	r3, [r7, #20]
 804164c:	2b80      	cmp	r3, #128	; 0x80
 804164e:	d105      	bne.n	804165c <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8041650:	4b32      	ldr	r3, [pc, #200]	; (804171c <HAL_RCC_ClockConfig+0x260>)
 8041652:	689b      	ldr	r3, [r3, #8]
 8041654:	4a31      	ldr	r2, [pc, #196]	; (804171c <HAL_RCC_ClockConfig+0x260>)
 8041656:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 804165a:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 804165c:	687b      	ldr	r3, [r7, #4]
 804165e:	681b      	ldr	r3, [r3, #0]
 8041660:	f003 0302 	and.w	r3, r3, #2
 8041664:	2b00      	cmp	r3, #0
 8041666:	d010      	beq.n	804168a <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8041668:	687b      	ldr	r3, [r7, #4]
 804166a:	689a      	ldr	r2, [r3, #8]
 804166c:	4b2b      	ldr	r3, [pc, #172]	; (804171c <HAL_RCC_ClockConfig+0x260>)
 804166e:	689b      	ldr	r3, [r3, #8]
 8041670:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8041674:	429a      	cmp	r2, r3
 8041676:	d208      	bcs.n	804168a <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8041678:	4b28      	ldr	r3, [pc, #160]	; (804171c <HAL_RCC_ClockConfig+0x260>)
 804167a:	689b      	ldr	r3, [r3, #8]
 804167c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8041680:	687b      	ldr	r3, [r7, #4]
 8041682:	689b      	ldr	r3, [r3, #8]
 8041684:	4925      	ldr	r1, [pc, #148]	; (804171c <HAL_RCC_ClockConfig+0x260>)
 8041686:	4313      	orrs	r3, r2
 8041688:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 804168a:	4b23      	ldr	r3, [pc, #140]	; (8041718 <HAL_RCC_ClockConfig+0x25c>)
 804168c:	681b      	ldr	r3, [r3, #0]
 804168e:	f003 030f 	and.w	r3, r3, #15
 8041692:	683a      	ldr	r2, [r7, #0]
 8041694:	429a      	cmp	r2, r3
 8041696:	d210      	bcs.n	80416ba <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8041698:	4b1f      	ldr	r3, [pc, #124]	; (8041718 <HAL_RCC_ClockConfig+0x25c>)
 804169a:	681b      	ldr	r3, [r3, #0]
 804169c:	f023 020f 	bic.w	r2, r3, #15
 80416a0:	491d      	ldr	r1, [pc, #116]	; (8041718 <HAL_RCC_ClockConfig+0x25c>)
 80416a2:	683b      	ldr	r3, [r7, #0]
 80416a4:	4313      	orrs	r3, r2
 80416a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80416a8:	4b1b      	ldr	r3, [pc, #108]	; (8041718 <HAL_RCC_ClockConfig+0x25c>)
 80416aa:	681b      	ldr	r3, [r3, #0]
 80416ac:	f003 030f 	and.w	r3, r3, #15
 80416b0:	683a      	ldr	r2, [r7, #0]
 80416b2:	429a      	cmp	r2, r3
 80416b4:	d001      	beq.n	80416ba <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 80416b6:	2301      	movs	r3, #1
 80416b8:	e029      	b.n	804170e <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80416ba:	687b      	ldr	r3, [r7, #4]
 80416bc:	681b      	ldr	r3, [r3, #0]
 80416be:	f003 0304 	and.w	r3, r3, #4
 80416c2:	2b00      	cmp	r3, #0
 80416c4:	d008      	beq.n	80416d8 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80416c6:	4b15      	ldr	r3, [pc, #84]	; (804171c <HAL_RCC_ClockConfig+0x260>)
 80416c8:	689b      	ldr	r3, [r3, #8]
 80416ca:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80416ce:	687b      	ldr	r3, [r7, #4]
 80416d0:	68db      	ldr	r3, [r3, #12]
 80416d2:	4912      	ldr	r1, [pc, #72]	; (804171c <HAL_RCC_ClockConfig+0x260>)
 80416d4:	4313      	orrs	r3, r2
 80416d6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80416d8:	687b      	ldr	r3, [r7, #4]
 80416da:	681b      	ldr	r3, [r3, #0]
 80416dc:	f003 0308 	and.w	r3, r3, #8
 80416e0:	2b00      	cmp	r3, #0
 80416e2:	d009      	beq.n	80416f8 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80416e4:	4b0d      	ldr	r3, [pc, #52]	; (804171c <HAL_RCC_ClockConfig+0x260>)
 80416e6:	689b      	ldr	r3, [r3, #8]
 80416e8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80416ec:	687b      	ldr	r3, [r7, #4]
 80416ee:	691b      	ldr	r3, [r3, #16]
 80416f0:	00db      	lsls	r3, r3, #3
 80416f2:	490a      	ldr	r1, [pc, #40]	; (804171c <HAL_RCC_ClockConfig+0x260>)
 80416f4:	4313      	orrs	r3, r2
 80416f6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80416f8:	f000 f8b4 	bl	8041864 <HAL_RCC_GetHCLKFreq>
 80416fc:	4603      	mov	r3, r0
 80416fe:	4a09      	ldr	r2, [pc, #36]	; (8041724 <HAL_RCC_ClockConfig+0x268>)
 8041700:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8041702:	4b09      	ldr	r3, [pc, #36]	; (8041728 <HAL_RCC_ClockConfig+0x26c>)
 8041704:	681b      	ldr	r3, [r3, #0]
 8041706:	4618      	mov	r0, r3
 8041708:	f7fe fe46 	bl	8040398 <HAL_InitTick>
 804170c:	4603      	mov	r3, r0
}
 804170e:	4618      	mov	r0, r3
 8041710:	3718      	adds	r7, #24
 8041712:	46bd      	mov	sp, r7
 8041714:	bd80      	pop	{r7, pc}
 8041716:	bf00      	nop
 8041718:	40022000 	.word	0x40022000
 804171c:	40021000 	.word	0x40021000
 8041720:	04c4b400 	.word	0x04c4b400
 8041724:	2001800c 	.word	0x2001800c
 8041728:	20018010 	.word	0x20018010

0804172c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 804172c:	b480      	push	{r7}
 804172e:	b089      	sub	sp, #36	; 0x24
 8041730:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8041732:	2300      	movs	r3, #0
 8041734:	61fb      	str	r3, [r7, #28]
 8041736:	2300      	movs	r3, #0
 8041738:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 804173a:	4b47      	ldr	r3, [pc, #284]	; (8041858 <HAL_RCC_GetSysClockFreq+0x12c>)
 804173c:	689b      	ldr	r3, [r3, #8]
 804173e:	f003 030c 	and.w	r3, r3, #12
 8041742:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8041744:	4b44      	ldr	r3, [pc, #272]	; (8041858 <HAL_RCC_GetSysClockFreq+0x12c>)
 8041746:	68db      	ldr	r3, [r3, #12]
 8041748:	f003 0303 	and.w	r3, r3, #3
 804174c:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 804174e:	693b      	ldr	r3, [r7, #16]
 8041750:	2b00      	cmp	r3, #0
 8041752:	d005      	beq.n	8041760 <HAL_RCC_GetSysClockFreq+0x34>
 8041754:	693b      	ldr	r3, [r7, #16]
 8041756:	2b0c      	cmp	r3, #12
 8041758:	d121      	bne.n	804179e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 804175a:	68fb      	ldr	r3, [r7, #12]
 804175c:	2b01      	cmp	r3, #1
 804175e:	d11e      	bne.n	804179e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8041760:	4b3d      	ldr	r3, [pc, #244]	; (8041858 <HAL_RCC_GetSysClockFreq+0x12c>)
 8041762:	681b      	ldr	r3, [r3, #0]
 8041764:	f003 0308 	and.w	r3, r3, #8
 8041768:	2b00      	cmp	r3, #0
 804176a:	d107      	bne.n	804177c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 804176c:	4b3a      	ldr	r3, [pc, #232]	; (8041858 <HAL_RCC_GetSysClockFreq+0x12c>)
 804176e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8041772:	0a1b      	lsrs	r3, r3, #8
 8041774:	f003 030f 	and.w	r3, r3, #15
 8041778:	61fb      	str	r3, [r7, #28]
 804177a:	e005      	b.n	8041788 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 804177c:	4b36      	ldr	r3, [pc, #216]	; (8041858 <HAL_RCC_GetSysClockFreq+0x12c>)
 804177e:	681b      	ldr	r3, [r3, #0]
 8041780:	091b      	lsrs	r3, r3, #4
 8041782:	f003 030f 	and.w	r3, r3, #15
 8041786:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8041788:	4a34      	ldr	r2, [pc, #208]	; (804185c <HAL_RCC_GetSysClockFreq+0x130>)
 804178a:	69fb      	ldr	r3, [r7, #28]
 804178c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8041790:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8041792:	693b      	ldr	r3, [r7, #16]
 8041794:	2b00      	cmp	r3, #0
 8041796:	d10d      	bne.n	80417b4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8041798:	69fb      	ldr	r3, [r7, #28]
 804179a:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 804179c:	e00a      	b.n	80417b4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 804179e:	693b      	ldr	r3, [r7, #16]
 80417a0:	2b04      	cmp	r3, #4
 80417a2:	d102      	bne.n	80417aa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80417a4:	4b2e      	ldr	r3, [pc, #184]	; (8041860 <HAL_RCC_GetSysClockFreq+0x134>)
 80417a6:	61bb      	str	r3, [r7, #24]
 80417a8:	e004      	b.n	80417b4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80417aa:	693b      	ldr	r3, [r7, #16]
 80417ac:	2b08      	cmp	r3, #8
 80417ae:	d101      	bne.n	80417b4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80417b0:	4b2b      	ldr	r3, [pc, #172]	; (8041860 <HAL_RCC_GetSysClockFreq+0x134>)
 80417b2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80417b4:	693b      	ldr	r3, [r7, #16]
 80417b6:	2b0c      	cmp	r3, #12
 80417b8:	d146      	bne.n	8041848 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80417ba:	4b27      	ldr	r3, [pc, #156]	; (8041858 <HAL_RCC_GetSysClockFreq+0x12c>)
 80417bc:	68db      	ldr	r3, [r3, #12]
 80417be:	f003 0303 	and.w	r3, r3, #3
 80417c2:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80417c4:	4b24      	ldr	r3, [pc, #144]	; (8041858 <HAL_RCC_GetSysClockFreq+0x12c>)
 80417c6:	68db      	ldr	r3, [r3, #12]
 80417c8:	091b      	lsrs	r3, r3, #4
 80417ca:	f003 030f 	and.w	r3, r3, #15
 80417ce:	3301      	adds	r3, #1
 80417d0:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 80417d2:	68bb      	ldr	r3, [r7, #8]
 80417d4:	2b02      	cmp	r3, #2
 80417d6:	d003      	beq.n	80417e0 <HAL_RCC_GetSysClockFreq+0xb4>
 80417d8:	68bb      	ldr	r3, [r7, #8]
 80417da:	2b03      	cmp	r3, #3
 80417dc:	d00d      	beq.n	80417fa <HAL_RCC_GetSysClockFreq+0xce>
 80417de:	e019      	b.n	8041814 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80417e0:	4a1f      	ldr	r2, [pc, #124]	; (8041860 <HAL_RCC_GetSysClockFreq+0x134>)
 80417e2:	687b      	ldr	r3, [r7, #4]
 80417e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80417e8:	4a1b      	ldr	r2, [pc, #108]	; (8041858 <HAL_RCC_GetSysClockFreq+0x12c>)
 80417ea:	68d2      	ldr	r2, [r2, #12]
 80417ec:	0a12      	lsrs	r2, r2, #8
 80417ee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80417f2:	fb02 f303 	mul.w	r3, r2, r3
 80417f6:	617b      	str	r3, [r7, #20]
        break;
 80417f8:	e019      	b.n	804182e <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80417fa:	4a19      	ldr	r2, [pc, #100]	; (8041860 <HAL_RCC_GetSysClockFreq+0x134>)
 80417fc:	687b      	ldr	r3, [r7, #4]
 80417fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8041802:	4a15      	ldr	r2, [pc, #84]	; (8041858 <HAL_RCC_GetSysClockFreq+0x12c>)
 8041804:	68d2      	ldr	r2, [r2, #12]
 8041806:	0a12      	lsrs	r2, r2, #8
 8041808:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 804180c:	fb02 f303 	mul.w	r3, r2, r3
 8041810:	617b      	str	r3, [r7, #20]
        break;
 8041812:	e00c      	b.n	804182e <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8041814:	69fa      	ldr	r2, [r7, #28]
 8041816:	687b      	ldr	r3, [r7, #4]
 8041818:	fbb2 f3f3 	udiv	r3, r2, r3
 804181c:	4a0e      	ldr	r2, [pc, #56]	; (8041858 <HAL_RCC_GetSysClockFreq+0x12c>)
 804181e:	68d2      	ldr	r2, [r2, #12]
 8041820:	0a12      	lsrs	r2, r2, #8
 8041822:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8041826:	fb02 f303 	mul.w	r3, r2, r3
 804182a:	617b      	str	r3, [r7, #20]
        break;
 804182c:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 804182e:	4b0a      	ldr	r3, [pc, #40]	; (8041858 <HAL_RCC_GetSysClockFreq+0x12c>)
 8041830:	68db      	ldr	r3, [r3, #12]
 8041832:	0e5b      	lsrs	r3, r3, #25
 8041834:	f003 0303 	and.w	r3, r3, #3
 8041838:	3301      	adds	r3, #1
 804183a:	005b      	lsls	r3, r3, #1
 804183c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 804183e:	697a      	ldr	r2, [r7, #20]
 8041840:	683b      	ldr	r3, [r7, #0]
 8041842:	fbb2 f3f3 	udiv	r3, r2, r3
 8041846:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8041848:	69bb      	ldr	r3, [r7, #24]
}
 804184a:	4618      	mov	r0, r3
 804184c:	3724      	adds	r7, #36	; 0x24
 804184e:	46bd      	mov	sp, r7
 8041850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041854:	4770      	bx	lr
 8041856:	bf00      	nop
 8041858:	40021000 	.word	0x40021000
 804185c:	08042320 	.word	0x08042320
 8041860:	00f42400 	.word	0x00f42400

08041864 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8041864:	b580      	push	{r7, lr}
 8041866:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8041868:	f7ff ff60 	bl	804172c <HAL_RCC_GetSysClockFreq>
 804186c:	4602      	mov	r2, r0
 804186e:	4b05      	ldr	r3, [pc, #20]	; (8041884 <HAL_RCC_GetHCLKFreq+0x20>)
 8041870:	689b      	ldr	r3, [r3, #8]
 8041872:	091b      	lsrs	r3, r3, #4
 8041874:	f003 030f 	and.w	r3, r3, #15
 8041878:	4903      	ldr	r1, [pc, #12]	; (8041888 <HAL_RCC_GetHCLKFreq+0x24>)
 804187a:	5ccb      	ldrb	r3, [r1, r3]
 804187c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8041880:	4618      	mov	r0, r3
 8041882:	bd80      	pop	{r7, pc}
 8041884:	40021000 	.word	0x40021000
 8041888:	08042310 	.word	0x08042310

0804188c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 804188c:	b580      	push	{r7, lr}
 804188e:	b086      	sub	sp, #24
 8041890:	af00      	add	r7, sp, #0
 8041892:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8041894:	2300      	movs	r3, #0
 8041896:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8041898:	4b2c      	ldr	r3, [pc, #176]	; (804194c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 804189a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804189c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80418a0:	2b00      	cmp	r3, #0
 80418a2:	d003      	beq.n	80418ac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80418a4:	f7ff f896 	bl	80409d4 <HAL_PWREx_GetVoltageRange>
 80418a8:	6138      	str	r0, [r7, #16]
 80418aa:	e014      	b.n	80418d6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80418ac:	4b27      	ldr	r3, [pc, #156]	; (804194c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80418ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80418b0:	4a26      	ldr	r2, [pc, #152]	; (804194c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80418b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80418b6:	6593      	str	r3, [r2, #88]	; 0x58
 80418b8:	4b24      	ldr	r3, [pc, #144]	; (804194c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80418ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80418bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80418c0:	60fb      	str	r3, [r7, #12]
 80418c2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80418c4:	f7ff f886 	bl	80409d4 <HAL_PWREx_GetVoltageRange>
 80418c8:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 80418ca:	4b20      	ldr	r3, [pc, #128]	; (804194c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80418cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80418ce:	4a1f      	ldr	r2, [pc, #124]	; (804194c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80418d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80418d4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 80418d6:	693b      	ldr	r3, [r7, #16]
 80418d8:	2b00      	cmp	r3, #0
 80418da:	d003      	beq.n	80418e4 <RCC_SetFlashLatencyFromMSIRange+0x58>
 80418dc:	693b      	ldr	r3, [r7, #16]
 80418de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80418e2:	d10b      	bne.n	80418fc <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 80418e4:	687b      	ldr	r3, [r7, #4]
 80418e6:	2b80      	cmp	r3, #128	; 0x80
 80418e8:	d919      	bls.n	804191e <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 80418ea:	687b      	ldr	r3, [r7, #4]
 80418ec:	2ba0      	cmp	r3, #160	; 0xa0
 80418ee:	d902      	bls.n	80418f6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80418f0:	2302      	movs	r3, #2
 80418f2:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 80418f4:	e013      	b.n	804191e <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80418f6:	2301      	movs	r3, #1
 80418f8:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 80418fa:	e010      	b.n	804191e <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 80418fc:	687b      	ldr	r3, [r7, #4]
 80418fe:	2b80      	cmp	r3, #128	; 0x80
 8041900:	d902      	bls.n	8041908 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8041902:	2303      	movs	r3, #3
 8041904:	617b      	str	r3, [r7, #20]
 8041906:	e00a      	b.n	804191e <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8041908:	687b      	ldr	r3, [r7, #4]
 804190a:	2b80      	cmp	r3, #128	; 0x80
 804190c:	d102      	bne.n	8041914 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 804190e:	2302      	movs	r3, #2
 8041910:	617b      	str	r3, [r7, #20]
 8041912:	e004      	b.n	804191e <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8041914:	687b      	ldr	r3, [r7, #4]
 8041916:	2b70      	cmp	r3, #112	; 0x70
 8041918:	d101      	bne.n	804191e <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 804191a:	2301      	movs	r3, #1
 804191c:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 804191e:	4b0c      	ldr	r3, [pc, #48]	; (8041950 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8041920:	681b      	ldr	r3, [r3, #0]
 8041922:	f023 020f 	bic.w	r2, r3, #15
 8041926:	490a      	ldr	r1, [pc, #40]	; (8041950 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8041928:	697b      	ldr	r3, [r7, #20]
 804192a:	4313      	orrs	r3, r2
 804192c:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 804192e:	4b08      	ldr	r3, [pc, #32]	; (8041950 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8041930:	681b      	ldr	r3, [r3, #0]
 8041932:	f003 030f 	and.w	r3, r3, #15
 8041936:	697a      	ldr	r2, [r7, #20]
 8041938:	429a      	cmp	r2, r3
 804193a:	d001      	beq.n	8041940 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 804193c:	2301      	movs	r3, #1
 804193e:	e000      	b.n	8041942 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8041940:	2300      	movs	r3, #0
}
 8041942:	4618      	mov	r0, r3
 8041944:	3718      	adds	r7, #24
 8041946:	46bd      	mov	sp, r7
 8041948:	bd80      	pop	{r7, pc}
 804194a:	bf00      	nop
 804194c:	40021000 	.word	0x40021000
 8041950:	40022000 	.word	0x40022000

08041954 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8041954:	b480      	push	{r7}
 8041956:	b087      	sub	sp, #28
 8041958:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 804195a:	4b31      	ldr	r3, [pc, #196]	; (8041a20 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 804195c:	68db      	ldr	r3, [r3, #12]
 804195e:	f003 0303 	and.w	r3, r3, #3
 8041962:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8041964:	4b2e      	ldr	r3, [pc, #184]	; (8041a20 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8041966:	68db      	ldr	r3, [r3, #12]
 8041968:	091b      	lsrs	r3, r3, #4
 804196a:	f003 030f 	and.w	r3, r3, #15
 804196e:	3301      	adds	r3, #1
 8041970:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8041972:	68fb      	ldr	r3, [r7, #12]
 8041974:	2b03      	cmp	r3, #3
 8041976:	d015      	beq.n	80419a4 <RCC_GetSysClockFreqFromPLLSource+0x50>
 8041978:	68fb      	ldr	r3, [r7, #12]
 804197a:	2b03      	cmp	r3, #3
 804197c:	d839      	bhi.n	80419f2 <RCC_GetSysClockFreqFromPLLSource+0x9e>
 804197e:	68fb      	ldr	r3, [r7, #12]
 8041980:	2b01      	cmp	r3, #1
 8041982:	d01c      	beq.n	80419be <RCC_GetSysClockFreqFromPLLSource+0x6a>
 8041984:	68fb      	ldr	r3, [r7, #12]
 8041986:	2b02      	cmp	r3, #2
 8041988:	d133      	bne.n	80419f2 <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 804198a:	4a26      	ldr	r2, [pc, #152]	; (8041a24 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 804198c:	68bb      	ldr	r3, [r7, #8]
 804198e:	fbb2 f3f3 	udiv	r3, r2, r3
 8041992:	4a23      	ldr	r2, [pc, #140]	; (8041a20 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8041994:	68d2      	ldr	r2, [r2, #12]
 8041996:	0a12      	lsrs	r2, r2, #8
 8041998:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 804199c:	fb02 f303 	mul.w	r3, r2, r3
 80419a0:	613b      	str	r3, [r7, #16]
      break;
 80419a2:	e029      	b.n	80419f8 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80419a4:	4a1f      	ldr	r2, [pc, #124]	; (8041a24 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 80419a6:	68bb      	ldr	r3, [r7, #8]
 80419a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80419ac:	4a1c      	ldr	r2, [pc, #112]	; (8041a20 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80419ae:	68d2      	ldr	r2, [r2, #12]
 80419b0:	0a12      	lsrs	r2, r2, #8
 80419b2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80419b6:	fb02 f303 	mul.w	r3, r2, r3
 80419ba:	613b      	str	r3, [r7, #16]
      break;
 80419bc:	e01c      	b.n	80419f8 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80419be:	4b18      	ldr	r3, [pc, #96]	; (8041a20 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80419c0:	681b      	ldr	r3, [r3, #0]
 80419c2:	f003 0308 	and.w	r3, r3, #8
 80419c6:	2b00      	cmp	r3, #0
 80419c8:	d107      	bne.n	80419da <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80419ca:	4b15      	ldr	r3, [pc, #84]	; (8041a20 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80419cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80419d0:	0a1b      	lsrs	r3, r3, #8
 80419d2:	f003 030f 	and.w	r3, r3, #15
 80419d6:	617b      	str	r3, [r7, #20]
 80419d8:	e005      	b.n	80419e6 <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80419da:	4b11      	ldr	r3, [pc, #68]	; (8041a20 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80419dc:	681b      	ldr	r3, [r3, #0]
 80419de:	091b      	lsrs	r3, r3, #4
 80419e0:	f003 030f 	and.w	r3, r3, #15
 80419e4:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 80419e6:	4a10      	ldr	r2, [pc, #64]	; (8041a28 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 80419e8:	697b      	ldr	r3, [r7, #20]
 80419ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80419ee:	613b      	str	r3, [r7, #16]
        break;
 80419f0:	e002      	b.n	80419f8 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 80419f2:	2300      	movs	r3, #0
 80419f4:	613b      	str	r3, [r7, #16]
      break;
 80419f6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 80419f8:	4b09      	ldr	r3, [pc, #36]	; (8041a20 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80419fa:	68db      	ldr	r3, [r3, #12]
 80419fc:	0e5b      	lsrs	r3, r3, #25
 80419fe:	f003 0303 	and.w	r3, r3, #3
 8041a02:	3301      	adds	r3, #1
 8041a04:	005b      	lsls	r3, r3, #1
 8041a06:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8041a08:	693a      	ldr	r2, [r7, #16]
 8041a0a:	687b      	ldr	r3, [r7, #4]
 8041a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8041a10:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8041a12:	683b      	ldr	r3, [r7, #0]
}
 8041a14:	4618      	mov	r0, r3
 8041a16:	371c      	adds	r7, #28
 8041a18:	46bd      	mov	sp, r7
 8041a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041a1e:	4770      	bx	lr
 8041a20:	40021000 	.word	0x40021000
 8041a24:	00f42400 	.word	0x00f42400
 8041a28:	08042320 	.word	0x08042320

08041a2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8041a2c:	b580      	push	{r7, lr}
 8041a2e:	b082      	sub	sp, #8
 8041a30:	af00      	add	r7, sp, #0
 8041a32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8041a34:	687b      	ldr	r3, [r7, #4]
 8041a36:	2b00      	cmp	r3, #0
 8041a38:	d101      	bne.n	8041a3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8041a3a:	2301      	movs	r3, #1
 8041a3c:	e049      	b.n	8041ad2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8041a3e:	687b      	ldr	r3, [r7, #4]
 8041a40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8041a44:	b2db      	uxtb	r3, r3
 8041a46:	2b00      	cmp	r3, #0
 8041a48:	d106      	bne.n	8041a58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8041a4a:	687b      	ldr	r3, [r7, #4]
 8041a4c:	2200      	movs	r2, #0
 8041a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8041a52:	6878      	ldr	r0, [r7, #4]
 8041a54:	f000 fb6e 	bl	8042134 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8041a58:	687b      	ldr	r3, [r7, #4]
 8041a5a:	2202      	movs	r2, #2
 8041a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8041a60:	687b      	ldr	r3, [r7, #4]
 8041a62:	681a      	ldr	r2, [r3, #0]
 8041a64:	687b      	ldr	r3, [r7, #4]
 8041a66:	3304      	adds	r3, #4
 8041a68:	4619      	mov	r1, r3
 8041a6a:	4610      	mov	r0, r2
 8041a6c:	f000 f97c 	bl	8041d68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8041a70:	687b      	ldr	r3, [r7, #4]
 8041a72:	2201      	movs	r2, #1
 8041a74:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8041a78:	687b      	ldr	r3, [r7, #4]
 8041a7a:	2201      	movs	r2, #1
 8041a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8041a80:	687b      	ldr	r3, [r7, #4]
 8041a82:	2201      	movs	r2, #1
 8041a84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8041a88:	687b      	ldr	r3, [r7, #4]
 8041a8a:	2201      	movs	r2, #1
 8041a8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8041a90:	687b      	ldr	r3, [r7, #4]
 8041a92:	2201      	movs	r2, #1
 8041a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8041a98:	687b      	ldr	r3, [r7, #4]
 8041a9a:	2201      	movs	r2, #1
 8041a9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8041aa0:	687b      	ldr	r3, [r7, #4]
 8041aa2:	2201      	movs	r2, #1
 8041aa4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8041aa8:	687b      	ldr	r3, [r7, #4]
 8041aaa:	2201      	movs	r2, #1
 8041aac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8041ab0:	687b      	ldr	r3, [r7, #4]
 8041ab2:	2201      	movs	r2, #1
 8041ab4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8041ab8:	687b      	ldr	r3, [r7, #4]
 8041aba:	2201      	movs	r2, #1
 8041abc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8041ac0:	687b      	ldr	r3, [r7, #4]
 8041ac2:	2201      	movs	r2, #1
 8041ac4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8041ac8:	687b      	ldr	r3, [r7, #4]
 8041aca:	2201      	movs	r2, #1
 8041acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8041ad0:	2300      	movs	r3, #0
}
 8041ad2:	4618      	mov	r0, r3
 8041ad4:	3708      	adds	r7, #8
 8041ad6:	46bd      	mov	sp, r7
 8041ad8:	bd80      	pop	{r7, pc}

08041ada <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8041ada:	b580      	push	{r7, lr}
 8041adc:	b082      	sub	sp, #8
 8041ade:	af00      	add	r7, sp, #0
 8041ae0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8041ae2:	687b      	ldr	r3, [r7, #4]
 8041ae4:	681b      	ldr	r3, [r3, #0]
 8041ae6:	691b      	ldr	r3, [r3, #16]
 8041ae8:	f003 0302 	and.w	r3, r3, #2
 8041aec:	2b02      	cmp	r3, #2
 8041aee:	d122      	bne.n	8041b36 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8041af0:	687b      	ldr	r3, [r7, #4]
 8041af2:	681b      	ldr	r3, [r3, #0]
 8041af4:	68db      	ldr	r3, [r3, #12]
 8041af6:	f003 0302 	and.w	r3, r3, #2
 8041afa:	2b02      	cmp	r3, #2
 8041afc:	d11b      	bne.n	8041b36 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8041afe:	687b      	ldr	r3, [r7, #4]
 8041b00:	681b      	ldr	r3, [r3, #0]
 8041b02:	f06f 0202 	mvn.w	r2, #2
 8041b06:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8041b08:	687b      	ldr	r3, [r7, #4]
 8041b0a:	2201      	movs	r2, #1
 8041b0c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8041b0e:	687b      	ldr	r3, [r7, #4]
 8041b10:	681b      	ldr	r3, [r3, #0]
 8041b12:	699b      	ldr	r3, [r3, #24]
 8041b14:	f003 0303 	and.w	r3, r3, #3
 8041b18:	2b00      	cmp	r3, #0
 8041b1a:	d003      	beq.n	8041b24 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8041b1c:	6878      	ldr	r0, [r7, #4]
 8041b1e:	f000 f905 	bl	8041d2c <HAL_TIM_IC_CaptureCallback>
 8041b22:	e005      	b.n	8041b30 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8041b24:	6878      	ldr	r0, [r7, #4]
 8041b26:	f000 f8f7 	bl	8041d18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8041b2a:	6878      	ldr	r0, [r7, #4]
 8041b2c:	f000 f908 	bl	8041d40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8041b30:	687b      	ldr	r3, [r7, #4]
 8041b32:	2200      	movs	r2, #0
 8041b34:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8041b36:	687b      	ldr	r3, [r7, #4]
 8041b38:	681b      	ldr	r3, [r3, #0]
 8041b3a:	691b      	ldr	r3, [r3, #16]
 8041b3c:	f003 0304 	and.w	r3, r3, #4
 8041b40:	2b04      	cmp	r3, #4
 8041b42:	d122      	bne.n	8041b8a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8041b44:	687b      	ldr	r3, [r7, #4]
 8041b46:	681b      	ldr	r3, [r3, #0]
 8041b48:	68db      	ldr	r3, [r3, #12]
 8041b4a:	f003 0304 	and.w	r3, r3, #4
 8041b4e:	2b04      	cmp	r3, #4
 8041b50:	d11b      	bne.n	8041b8a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8041b52:	687b      	ldr	r3, [r7, #4]
 8041b54:	681b      	ldr	r3, [r3, #0]
 8041b56:	f06f 0204 	mvn.w	r2, #4
 8041b5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8041b5c:	687b      	ldr	r3, [r7, #4]
 8041b5e:	2202      	movs	r2, #2
 8041b60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8041b62:	687b      	ldr	r3, [r7, #4]
 8041b64:	681b      	ldr	r3, [r3, #0]
 8041b66:	699b      	ldr	r3, [r3, #24]
 8041b68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8041b6c:	2b00      	cmp	r3, #0
 8041b6e:	d003      	beq.n	8041b78 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8041b70:	6878      	ldr	r0, [r7, #4]
 8041b72:	f000 f8db 	bl	8041d2c <HAL_TIM_IC_CaptureCallback>
 8041b76:	e005      	b.n	8041b84 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8041b78:	6878      	ldr	r0, [r7, #4]
 8041b7a:	f000 f8cd 	bl	8041d18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8041b7e:	6878      	ldr	r0, [r7, #4]
 8041b80:	f000 f8de 	bl	8041d40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8041b84:	687b      	ldr	r3, [r7, #4]
 8041b86:	2200      	movs	r2, #0
 8041b88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8041b8a:	687b      	ldr	r3, [r7, #4]
 8041b8c:	681b      	ldr	r3, [r3, #0]
 8041b8e:	691b      	ldr	r3, [r3, #16]
 8041b90:	f003 0308 	and.w	r3, r3, #8
 8041b94:	2b08      	cmp	r3, #8
 8041b96:	d122      	bne.n	8041bde <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8041b98:	687b      	ldr	r3, [r7, #4]
 8041b9a:	681b      	ldr	r3, [r3, #0]
 8041b9c:	68db      	ldr	r3, [r3, #12]
 8041b9e:	f003 0308 	and.w	r3, r3, #8
 8041ba2:	2b08      	cmp	r3, #8
 8041ba4:	d11b      	bne.n	8041bde <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8041ba6:	687b      	ldr	r3, [r7, #4]
 8041ba8:	681b      	ldr	r3, [r3, #0]
 8041baa:	f06f 0208 	mvn.w	r2, #8
 8041bae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8041bb0:	687b      	ldr	r3, [r7, #4]
 8041bb2:	2204      	movs	r2, #4
 8041bb4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8041bb6:	687b      	ldr	r3, [r7, #4]
 8041bb8:	681b      	ldr	r3, [r3, #0]
 8041bba:	69db      	ldr	r3, [r3, #28]
 8041bbc:	f003 0303 	and.w	r3, r3, #3
 8041bc0:	2b00      	cmp	r3, #0
 8041bc2:	d003      	beq.n	8041bcc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8041bc4:	6878      	ldr	r0, [r7, #4]
 8041bc6:	f000 f8b1 	bl	8041d2c <HAL_TIM_IC_CaptureCallback>
 8041bca:	e005      	b.n	8041bd8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8041bcc:	6878      	ldr	r0, [r7, #4]
 8041bce:	f000 f8a3 	bl	8041d18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8041bd2:	6878      	ldr	r0, [r7, #4]
 8041bd4:	f000 f8b4 	bl	8041d40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8041bd8:	687b      	ldr	r3, [r7, #4]
 8041bda:	2200      	movs	r2, #0
 8041bdc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8041bde:	687b      	ldr	r3, [r7, #4]
 8041be0:	681b      	ldr	r3, [r3, #0]
 8041be2:	691b      	ldr	r3, [r3, #16]
 8041be4:	f003 0310 	and.w	r3, r3, #16
 8041be8:	2b10      	cmp	r3, #16
 8041bea:	d122      	bne.n	8041c32 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8041bec:	687b      	ldr	r3, [r7, #4]
 8041bee:	681b      	ldr	r3, [r3, #0]
 8041bf0:	68db      	ldr	r3, [r3, #12]
 8041bf2:	f003 0310 	and.w	r3, r3, #16
 8041bf6:	2b10      	cmp	r3, #16
 8041bf8:	d11b      	bne.n	8041c32 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8041bfa:	687b      	ldr	r3, [r7, #4]
 8041bfc:	681b      	ldr	r3, [r3, #0]
 8041bfe:	f06f 0210 	mvn.w	r2, #16
 8041c02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8041c04:	687b      	ldr	r3, [r7, #4]
 8041c06:	2208      	movs	r2, #8
 8041c08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8041c0a:	687b      	ldr	r3, [r7, #4]
 8041c0c:	681b      	ldr	r3, [r3, #0]
 8041c0e:	69db      	ldr	r3, [r3, #28]
 8041c10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8041c14:	2b00      	cmp	r3, #0
 8041c16:	d003      	beq.n	8041c20 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8041c18:	6878      	ldr	r0, [r7, #4]
 8041c1a:	f000 f887 	bl	8041d2c <HAL_TIM_IC_CaptureCallback>
 8041c1e:	e005      	b.n	8041c2c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8041c20:	6878      	ldr	r0, [r7, #4]
 8041c22:	f000 f879 	bl	8041d18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8041c26:	6878      	ldr	r0, [r7, #4]
 8041c28:	f000 f88a 	bl	8041d40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8041c2c:	687b      	ldr	r3, [r7, #4]
 8041c2e:	2200      	movs	r2, #0
 8041c30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8041c32:	687b      	ldr	r3, [r7, #4]
 8041c34:	681b      	ldr	r3, [r3, #0]
 8041c36:	691b      	ldr	r3, [r3, #16]
 8041c38:	f003 0301 	and.w	r3, r3, #1
 8041c3c:	2b01      	cmp	r3, #1
 8041c3e:	d10e      	bne.n	8041c5e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8041c40:	687b      	ldr	r3, [r7, #4]
 8041c42:	681b      	ldr	r3, [r3, #0]
 8041c44:	68db      	ldr	r3, [r3, #12]
 8041c46:	f003 0301 	and.w	r3, r3, #1
 8041c4a:	2b01      	cmp	r3, #1
 8041c4c:	d107      	bne.n	8041c5e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8041c4e:	687b      	ldr	r3, [r7, #4]
 8041c50:	681b      	ldr	r3, [r3, #0]
 8041c52:	f06f 0201 	mvn.w	r2, #1
 8041c56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8041c58:	6878      	ldr	r0, [r7, #4]
 8041c5a:	f000 fa51 	bl	8042100 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8041c5e:	687b      	ldr	r3, [r7, #4]
 8041c60:	681b      	ldr	r3, [r3, #0]
 8041c62:	691b      	ldr	r3, [r3, #16]
 8041c64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8041c68:	2b80      	cmp	r3, #128	; 0x80
 8041c6a:	d10e      	bne.n	8041c8a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8041c6c:	687b      	ldr	r3, [r7, #4]
 8041c6e:	681b      	ldr	r3, [r3, #0]
 8041c70:	68db      	ldr	r3, [r3, #12]
 8041c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8041c76:	2b80      	cmp	r3, #128	; 0x80
 8041c78:	d107      	bne.n	8041c8a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8041c7a:	687b      	ldr	r3, [r7, #4]
 8041c7c:	681b      	ldr	r3, [r3, #0]
 8041c7e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8041c82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8041c84:	6878      	ldr	r0, [r7, #4]
 8041c86:	f000 f913 	bl	8041eb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8041c8a:	687b      	ldr	r3, [r7, #4]
 8041c8c:	681b      	ldr	r3, [r3, #0]
 8041c8e:	691b      	ldr	r3, [r3, #16]
 8041c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8041c94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8041c98:	d10e      	bne.n	8041cb8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8041c9a:	687b      	ldr	r3, [r7, #4]
 8041c9c:	681b      	ldr	r3, [r3, #0]
 8041c9e:	68db      	ldr	r3, [r3, #12]
 8041ca0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8041ca4:	2b80      	cmp	r3, #128	; 0x80
 8041ca6:	d107      	bne.n	8041cb8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8041ca8:	687b      	ldr	r3, [r7, #4]
 8041caa:	681b      	ldr	r3, [r3, #0]
 8041cac:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8041cb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8041cb2:	6878      	ldr	r0, [r7, #4]
 8041cb4:	f000 f906 	bl	8041ec4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8041cb8:	687b      	ldr	r3, [r7, #4]
 8041cba:	681b      	ldr	r3, [r3, #0]
 8041cbc:	691b      	ldr	r3, [r3, #16]
 8041cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8041cc2:	2b40      	cmp	r3, #64	; 0x40
 8041cc4:	d10e      	bne.n	8041ce4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8041cc6:	687b      	ldr	r3, [r7, #4]
 8041cc8:	681b      	ldr	r3, [r3, #0]
 8041cca:	68db      	ldr	r3, [r3, #12]
 8041ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8041cd0:	2b40      	cmp	r3, #64	; 0x40
 8041cd2:	d107      	bne.n	8041ce4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8041cd4:	687b      	ldr	r3, [r7, #4]
 8041cd6:	681b      	ldr	r3, [r3, #0]
 8041cd8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8041cdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8041cde:	6878      	ldr	r0, [r7, #4]
 8041ce0:	f000 f838 	bl	8041d54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8041ce4:	687b      	ldr	r3, [r7, #4]
 8041ce6:	681b      	ldr	r3, [r3, #0]
 8041ce8:	691b      	ldr	r3, [r3, #16]
 8041cea:	f003 0320 	and.w	r3, r3, #32
 8041cee:	2b20      	cmp	r3, #32
 8041cf0:	d10e      	bne.n	8041d10 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8041cf2:	687b      	ldr	r3, [r7, #4]
 8041cf4:	681b      	ldr	r3, [r3, #0]
 8041cf6:	68db      	ldr	r3, [r3, #12]
 8041cf8:	f003 0320 	and.w	r3, r3, #32
 8041cfc:	2b20      	cmp	r3, #32
 8041cfe:	d107      	bne.n	8041d10 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8041d00:	687b      	ldr	r3, [r7, #4]
 8041d02:	681b      	ldr	r3, [r3, #0]
 8041d04:	f06f 0220 	mvn.w	r2, #32
 8041d08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8041d0a:	6878      	ldr	r0, [r7, #4]
 8041d0c:	f000 f8c6 	bl	8041e9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8041d10:	bf00      	nop
 8041d12:	3708      	adds	r7, #8
 8041d14:	46bd      	mov	sp, r7
 8041d16:	bd80      	pop	{r7, pc}

08041d18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8041d18:	b480      	push	{r7}
 8041d1a:	b083      	sub	sp, #12
 8041d1c:	af00      	add	r7, sp, #0
 8041d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8041d20:	bf00      	nop
 8041d22:	370c      	adds	r7, #12
 8041d24:	46bd      	mov	sp, r7
 8041d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041d2a:	4770      	bx	lr

08041d2c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8041d2c:	b480      	push	{r7}
 8041d2e:	b083      	sub	sp, #12
 8041d30:	af00      	add	r7, sp, #0
 8041d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8041d34:	bf00      	nop
 8041d36:	370c      	adds	r7, #12
 8041d38:	46bd      	mov	sp, r7
 8041d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041d3e:	4770      	bx	lr

08041d40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8041d40:	b480      	push	{r7}
 8041d42:	b083      	sub	sp, #12
 8041d44:	af00      	add	r7, sp, #0
 8041d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8041d48:	bf00      	nop
 8041d4a:	370c      	adds	r7, #12
 8041d4c:	46bd      	mov	sp, r7
 8041d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041d52:	4770      	bx	lr

08041d54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8041d54:	b480      	push	{r7}
 8041d56:	b083      	sub	sp, #12
 8041d58:	af00      	add	r7, sp, #0
 8041d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8041d5c:	bf00      	nop
 8041d5e:	370c      	adds	r7, #12
 8041d60:	46bd      	mov	sp, r7
 8041d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041d66:	4770      	bx	lr

08041d68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8041d68:	b480      	push	{r7}
 8041d6a:	b085      	sub	sp, #20
 8041d6c:	af00      	add	r7, sp, #0
 8041d6e:	6078      	str	r0, [r7, #4]
 8041d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8041d72:	687b      	ldr	r3, [r7, #4]
 8041d74:	681b      	ldr	r3, [r3, #0]
 8041d76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8041d78:	687b      	ldr	r3, [r7, #4]
 8041d7a:	4a40      	ldr	r2, [pc, #256]	; (8041e7c <TIM_Base_SetConfig+0x114>)
 8041d7c:	4293      	cmp	r3, r2
 8041d7e:	d013      	beq.n	8041da8 <TIM_Base_SetConfig+0x40>
 8041d80:	687b      	ldr	r3, [r7, #4]
 8041d82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8041d86:	d00f      	beq.n	8041da8 <TIM_Base_SetConfig+0x40>
 8041d88:	687b      	ldr	r3, [r7, #4]
 8041d8a:	4a3d      	ldr	r2, [pc, #244]	; (8041e80 <TIM_Base_SetConfig+0x118>)
 8041d8c:	4293      	cmp	r3, r2
 8041d8e:	d00b      	beq.n	8041da8 <TIM_Base_SetConfig+0x40>
 8041d90:	687b      	ldr	r3, [r7, #4]
 8041d92:	4a3c      	ldr	r2, [pc, #240]	; (8041e84 <TIM_Base_SetConfig+0x11c>)
 8041d94:	4293      	cmp	r3, r2
 8041d96:	d007      	beq.n	8041da8 <TIM_Base_SetConfig+0x40>
 8041d98:	687b      	ldr	r3, [r7, #4]
 8041d9a:	4a3b      	ldr	r2, [pc, #236]	; (8041e88 <TIM_Base_SetConfig+0x120>)
 8041d9c:	4293      	cmp	r3, r2
 8041d9e:	d003      	beq.n	8041da8 <TIM_Base_SetConfig+0x40>
 8041da0:	687b      	ldr	r3, [r7, #4]
 8041da2:	4a3a      	ldr	r2, [pc, #232]	; (8041e8c <TIM_Base_SetConfig+0x124>)
 8041da4:	4293      	cmp	r3, r2
 8041da6:	d108      	bne.n	8041dba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8041da8:	68fb      	ldr	r3, [r7, #12]
 8041daa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8041dae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8041db0:	683b      	ldr	r3, [r7, #0]
 8041db2:	685b      	ldr	r3, [r3, #4]
 8041db4:	68fa      	ldr	r2, [r7, #12]
 8041db6:	4313      	orrs	r3, r2
 8041db8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8041dba:	687b      	ldr	r3, [r7, #4]
 8041dbc:	4a2f      	ldr	r2, [pc, #188]	; (8041e7c <TIM_Base_SetConfig+0x114>)
 8041dbe:	4293      	cmp	r3, r2
 8041dc0:	d01f      	beq.n	8041e02 <TIM_Base_SetConfig+0x9a>
 8041dc2:	687b      	ldr	r3, [r7, #4]
 8041dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8041dc8:	d01b      	beq.n	8041e02 <TIM_Base_SetConfig+0x9a>
 8041dca:	687b      	ldr	r3, [r7, #4]
 8041dcc:	4a2c      	ldr	r2, [pc, #176]	; (8041e80 <TIM_Base_SetConfig+0x118>)
 8041dce:	4293      	cmp	r3, r2
 8041dd0:	d017      	beq.n	8041e02 <TIM_Base_SetConfig+0x9a>
 8041dd2:	687b      	ldr	r3, [r7, #4]
 8041dd4:	4a2b      	ldr	r2, [pc, #172]	; (8041e84 <TIM_Base_SetConfig+0x11c>)
 8041dd6:	4293      	cmp	r3, r2
 8041dd8:	d013      	beq.n	8041e02 <TIM_Base_SetConfig+0x9a>
 8041dda:	687b      	ldr	r3, [r7, #4]
 8041ddc:	4a2a      	ldr	r2, [pc, #168]	; (8041e88 <TIM_Base_SetConfig+0x120>)
 8041dde:	4293      	cmp	r3, r2
 8041de0:	d00f      	beq.n	8041e02 <TIM_Base_SetConfig+0x9a>
 8041de2:	687b      	ldr	r3, [r7, #4]
 8041de4:	4a29      	ldr	r2, [pc, #164]	; (8041e8c <TIM_Base_SetConfig+0x124>)
 8041de6:	4293      	cmp	r3, r2
 8041de8:	d00b      	beq.n	8041e02 <TIM_Base_SetConfig+0x9a>
 8041dea:	687b      	ldr	r3, [r7, #4]
 8041dec:	4a28      	ldr	r2, [pc, #160]	; (8041e90 <TIM_Base_SetConfig+0x128>)
 8041dee:	4293      	cmp	r3, r2
 8041df0:	d007      	beq.n	8041e02 <TIM_Base_SetConfig+0x9a>
 8041df2:	687b      	ldr	r3, [r7, #4]
 8041df4:	4a27      	ldr	r2, [pc, #156]	; (8041e94 <TIM_Base_SetConfig+0x12c>)
 8041df6:	4293      	cmp	r3, r2
 8041df8:	d003      	beq.n	8041e02 <TIM_Base_SetConfig+0x9a>
 8041dfa:	687b      	ldr	r3, [r7, #4]
 8041dfc:	4a26      	ldr	r2, [pc, #152]	; (8041e98 <TIM_Base_SetConfig+0x130>)
 8041dfe:	4293      	cmp	r3, r2
 8041e00:	d108      	bne.n	8041e14 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8041e02:	68fb      	ldr	r3, [r7, #12]
 8041e04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8041e08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8041e0a:	683b      	ldr	r3, [r7, #0]
 8041e0c:	68db      	ldr	r3, [r3, #12]
 8041e0e:	68fa      	ldr	r2, [r7, #12]
 8041e10:	4313      	orrs	r3, r2
 8041e12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8041e14:	68fb      	ldr	r3, [r7, #12]
 8041e16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8041e1a:	683b      	ldr	r3, [r7, #0]
 8041e1c:	695b      	ldr	r3, [r3, #20]
 8041e1e:	4313      	orrs	r3, r2
 8041e20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8041e22:	687b      	ldr	r3, [r7, #4]
 8041e24:	68fa      	ldr	r2, [r7, #12]
 8041e26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8041e28:	683b      	ldr	r3, [r7, #0]
 8041e2a:	689a      	ldr	r2, [r3, #8]
 8041e2c:	687b      	ldr	r3, [r7, #4]
 8041e2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8041e30:	683b      	ldr	r3, [r7, #0]
 8041e32:	681a      	ldr	r2, [r3, #0]
 8041e34:	687b      	ldr	r3, [r7, #4]
 8041e36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8041e38:	687b      	ldr	r3, [r7, #4]
 8041e3a:	4a10      	ldr	r2, [pc, #64]	; (8041e7c <TIM_Base_SetConfig+0x114>)
 8041e3c:	4293      	cmp	r3, r2
 8041e3e:	d00f      	beq.n	8041e60 <TIM_Base_SetConfig+0xf8>
 8041e40:	687b      	ldr	r3, [r7, #4]
 8041e42:	4a12      	ldr	r2, [pc, #72]	; (8041e8c <TIM_Base_SetConfig+0x124>)
 8041e44:	4293      	cmp	r3, r2
 8041e46:	d00b      	beq.n	8041e60 <TIM_Base_SetConfig+0xf8>
 8041e48:	687b      	ldr	r3, [r7, #4]
 8041e4a:	4a11      	ldr	r2, [pc, #68]	; (8041e90 <TIM_Base_SetConfig+0x128>)
 8041e4c:	4293      	cmp	r3, r2
 8041e4e:	d007      	beq.n	8041e60 <TIM_Base_SetConfig+0xf8>
 8041e50:	687b      	ldr	r3, [r7, #4]
 8041e52:	4a10      	ldr	r2, [pc, #64]	; (8041e94 <TIM_Base_SetConfig+0x12c>)
 8041e54:	4293      	cmp	r3, r2
 8041e56:	d003      	beq.n	8041e60 <TIM_Base_SetConfig+0xf8>
 8041e58:	687b      	ldr	r3, [r7, #4]
 8041e5a:	4a0f      	ldr	r2, [pc, #60]	; (8041e98 <TIM_Base_SetConfig+0x130>)
 8041e5c:	4293      	cmp	r3, r2
 8041e5e:	d103      	bne.n	8041e68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8041e60:	683b      	ldr	r3, [r7, #0]
 8041e62:	691a      	ldr	r2, [r3, #16]
 8041e64:	687b      	ldr	r3, [r7, #4]
 8041e66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8041e68:	687b      	ldr	r3, [r7, #4]
 8041e6a:	2201      	movs	r2, #1
 8041e6c:	615a      	str	r2, [r3, #20]
}
 8041e6e:	bf00      	nop
 8041e70:	3714      	adds	r7, #20
 8041e72:	46bd      	mov	sp, r7
 8041e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041e78:	4770      	bx	lr
 8041e7a:	bf00      	nop
 8041e7c:	40012c00 	.word	0x40012c00
 8041e80:	40000400 	.word	0x40000400
 8041e84:	40000800 	.word	0x40000800
 8041e88:	40000c00 	.word	0x40000c00
 8041e8c:	40013400 	.word	0x40013400
 8041e90:	40014000 	.word	0x40014000
 8041e94:	40014400 	.word	0x40014400
 8041e98:	40014800 	.word	0x40014800

08041e9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8041e9c:	b480      	push	{r7}
 8041e9e:	b083      	sub	sp, #12
 8041ea0:	af00      	add	r7, sp, #0
 8041ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8041ea4:	bf00      	nop
 8041ea6:	370c      	adds	r7, #12
 8041ea8:	46bd      	mov	sp, r7
 8041eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041eae:	4770      	bx	lr

08041eb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8041eb0:	b480      	push	{r7}
 8041eb2:	b083      	sub	sp, #12
 8041eb4:	af00      	add	r7, sp, #0
 8041eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8041eb8:	bf00      	nop
 8041eba:	370c      	adds	r7, #12
 8041ebc:	46bd      	mov	sp, r7
 8041ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041ec2:	4770      	bx	lr

08041ec4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8041ec4:	b480      	push	{r7}
 8041ec6:	b083      	sub	sp, #12
 8041ec8:	af00      	add	r7, sp, #0
 8041eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8041ecc:	bf00      	nop
 8041ece:	370c      	adds	r7, #12
 8041ed0:	46bd      	mov	sp, r7
 8041ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041ed6:	4770      	bx	lr

08041ed8 <main>:
int jump_ns = 0;



int main(void)
{
 8041ed8:	b580      	push	{r7, lr}
 8041eda:	af00      	add	r7, sp, #0
         purpose timer for example or other time source), keeping in mind that
         Time base duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined
         and handled in milliseconds basis.
       - Low Level Initialization
     */
  HAL_Init();
 8041edc:	f7fe fa3a 	bl	8040354 <HAL_Init>

  /* USER CODE END Init */

  /* Configure the System clock to have a frequency of 110 MHz         */
  /* Nothing expected here as the secure application took care of it   */
  SystemClock_Config();
 8041ee0:	f000 f84c 	bl	8041f7c <SystemClock_Config>

  SECURE_RegisterCallback(TASK1_ID, (void *)Task1_Delay);
 8041ee4:	4910      	ldr	r1, [pc, #64]	; (8041f28 <main+0x50>)
 8041ee6:	2002      	movs	r0, #2
 8041ee8:	f000 f9fa 	bl	80422e0 <__SECURE_RegisterCallback_veneer>

  /* Register SecureFault callback defined in non-secure and to be called by secure handler */
  SECURE_RegisterCallback(SECURE_FAULT_CB_ID, (void *)SecureFault_Callback);
 8041eec:	490f      	ldr	r1, [pc, #60]	; (8041f2c <main+0x54>)
 8041eee:	2000      	movs	r0, #0
 8041ef0:	f000 f9f6 	bl	80422e0 <__SECURE_RegisterCallback_veneer>

  /* Register SecureError callback defined in non-secure and to be called by secure handler */
  SECURE_RegisterCallback(GTZC_ERROR_CB_ID, (void *)SecureError_Callback);
 8041ef4:	490e      	ldr	r1, [pc, #56]	; (8041f30 <main+0x58>)
 8041ef6:	2001      	movs	r0, #1
 8041ef8:	f000 f9f2 	bl	80422e0 <__SECURE_RegisterCallback_veneer>


//  pTask1Callback
   /* USER CODE BEGIN SysInit */
  /* Configure LED_OK and LED_ERROR */
  BSP_LED_Init(LED_OK);
 8041efc:	2001      	movs	r0, #1
 8041efe:	f7fe f99b 	bl	8040238 <BSP_LED_Init>
  BSP_LED_Init(LED_ERROR);
 8041f02:	2000      	movs	r0, #0
 8041f04:	f7fe f998 	bl	8040238 <BSP_LED_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

//  HAL_TIM_Base_Start_IT(&htim17);
  MX_TIM16_Init();
 8041f08:	f000 f8d2 	bl	80420b0 <MX_TIM16_Init>
//  HAL_TIM_Base_Start_IT(&htim16);
//  while(1){
//
//  }
  jump_ns++;
 8041f0c:	4b09      	ldr	r3, [pc, #36]	; (8041f34 <main+0x5c>)
 8041f0e:	681b      	ldr	r3, [r3, #0]
 8041f10:	3301      	adds	r3, #1
 8041f12:	4a08      	ldr	r2, [pc, #32]	; (8041f34 <main+0x5c>)
 8041f14:	6013      	str	r3, [r2, #0]
  jump_secure(jump_ns);
 8041f16:	4b07      	ldr	r3, [pc, #28]	; (8041f34 <main+0x5c>)
 8041f18:	681b      	ldr	r3, [r3, #0]
 8041f1a:	4618      	mov	r0, r3
 8041f1c:	f000 f9e8 	bl	80422f0 <__jump_secure_veneer>
 8041f20:	2300      	movs	r3, #0
////    /* USER CODE END WHILE */
////
////    /* USER CODE BEGIN 3 */
//  }
//  /* USER CODE END 3 */
}
 8041f22:	4618      	mov	r0, r3
 8041f24:	bd80      	pop	{r7, pc}
 8041f26:	bf00      	nop
 8041f28:	08041f39 	.word	0x08041f39
 8041f2c:	08041f65 	.word	0x08041f65
 8041f30:	08041f71 	.word	0x08041f71
 8041f34:	20018084 	.word	0x20018084

08041f38 <Task1_Delay>:

/////////////Execute the normal world task and jump to the secure world.
void Task1_Delay(void)
{
 8041f38:	b580      	push	{r7, lr}
 8041f3a:	af00      	add	r7, sp, #0
//  HAL_TIM_Base_Start_IT(&htim16);
//  HAL_Delay(10);
//	  while(1){
//
//	  }
	jump_ns++;
 8041f3c:	4b07      	ldr	r3, [pc, #28]	; (8041f5c <Task1_Delay+0x24>)
 8041f3e:	681b      	ldr	r3, [r3, #0]
 8041f40:	3301      	adds	r3, #1
 8041f42:	4a06      	ldr	r2, [pc, #24]	; (8041f5c <Task1_Delay+0x24>)
 8041f44:	6013      	str	r3, [r2, #0]
  	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_3);
 8041f46:	2108      	movs	r1, #8
 8041f48:	4805      	ldr	r0, [pc, #20]	; (8041f60 <Task1_Delay+0x28>)
 8041f4a:	f7fe fd29 	bl	80409a0 <HAL_GPIO_TogglePin>
//	HAL_Delay(5);
	jump_secure(jump_ns);
 8041f4e:	4b03      	ldr	r3, [pc, #12]	; (8041f5c <Task1_Delay+0x24>)
 8041f50:	681b      	ldr	r3, [r3, #0]
 8041f52:	4618      	mov	r0, r3
 8041f54:	f000 f9cc 	bl	80422f0 <__jump_secure_veneer>

}
 8041f58:	bf00      	nop
 8041f5a:	bd80      	pop	{r7, pc}
 8041f5c:	20018084 	.word	0x20018084
 8041f60:	42020c00 	.word	0x42020c00

08041f64 <SecureFault_Callback>:
  *         done by the non-secure application with non-secure callable API
  *         SECURE_RegisterCallback(SECURE_FAULT_CB_ID, (void *)SecureFault_Callback);
  * @retval None
  */
void SecureFault_Callback(void)
{
 8041f64:	b580      	push	{r7, lr}
 8041f66:	af00      	add	r7, sp, #0
  /* Go to error infinite loop when Secure fault generated by IDAU/SAU check */
  /* because of illegal access */
  Error_Handler();
 8041f68:	f000 f89c 	bl	80420a4 <Error_Handler>
}
 8041f6c:	bf00      	nop
 8041f6e:	bd80      	pop	{r7, pc}

08041f70 <SecureError_Callback>:
  *         done by the non-secure application with non-secure callable API
  *         SECURE_RegisterCallback(GTZC_ERROR_CB_ID, (void *)SecureError_Callback);
  * @retval None
  */
void SecureError_Callback(void)
{
 8041f70:	b580      	push	{r7, lr}
 8041f72:	af00      	add	r7, sp, #0
  /* Go to error infinite loop when Secure error generated by GTZC check */
  /* because of illegal access */
  Error_Handler();
 8041f74:	f000 f896 	bl	80420a4 <Error_Handler>
}
 8041f78:	bf00      	nop
 8041f7a:	bd80      	pop	{r7, pc}

08041f7c <SystemClock_Config>:
  *            PLL_P                          = 7
  *            Flash Latency(WS)              = 5
  * @retval None
  */
static void SystemClock_Config(void)
{
 8041f7c:	b580      	push	{r7, lr}
 8041f7e:	b098      	sub	sp, #96	; 0x60
 8041f80:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8041f82:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8041f86:	2200      	movs	r2, #0
 8041f88:	601a      	str	r2, [r3, #0]
 8041f8a:	605a      	str	r2, [r3, #4]
 8041f8c:	609a      	str	r2, [r3, #8]
 8041f8e:	60da      	str	r2, [r3, #12]
 8041f90:	611a      	str	r2, [r3, #16]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8041f92:	1d3b      	adds	r3, r7, #4
 8041f94:	2248      	movs	r2, #72	; 0x48
 8041f96:	2100      	movs	r1, #0
 8041f98:	4618      	mov	r0, r3
 8041f9a:	f000 f98b 	bl	80422b4 <memset>

  /* Check if the expected SYSCLK is running at 110Mhz */
  if(HAL_RCC_GetSysClockFreq() != 110000000U)
 8041f9e:	f7ff fbc5 	bl	804172c <HAL_RCC_GetSysClockFreq>
 8041fa2:	4603      	mov	r3, r0
 8041fa4:	4a3d      	ldr	r2, [pc, #244]	; (804209c <SystemClock_Config+0x120>)
 8041fa6:	4293      	cmp	r3, r2
 8041fa8:	d073      	beq.n	8042092 <SystemClock_Config+0x116>
  {
    /* Stop the PLL if running to insure clean restart with MSI oscillator source */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8041faa:	2310      	movs	r3, #16
 8041fac:	607b      	str	r3, [r7, #4]
    RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8041fae:	2301      	movs	r3, #1
 8041fb0:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8041fb2:	2360      	movs	r3, #96	; 0x60
 8041fb4:	62bb      	str	r3, [r7, #40]	; 0x28
    RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8041fb6:	2300      	movs	r3, #0
 8041fb8:	627b      	str	r3, [r7, #36]	; 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8041fba:	2300      	movs	r3, #0
 8041fbc:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8041fbe:	1d3b      	adds	r3, r7, #4
 8041fc0:	4618      	mov	r0, r3
 8041fc2:	f7fe fda5 	bl	8040b10 <HAL_RCC_OscConfig>
 8041fc6:	4603      	mov	r3, r0
 8041fc8:	2b00      	cmp	r3, #0
 8041fca:	d001      	beq.n	8041fd0 <SystemClock_Config+0x54>
    {
      /* Initialization Error */
      Error_Handler();
 8041fcc:	f000 f86a 	bl	80420a4 <Error_Handler>
    }

    /* Select MSI as system clock */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK;
 8041fd0:	2301      	movs	r3, #1
 8041fd2:	64fb      	str	r3, [r7, #76]	; 0x4c
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8041fd4:	2300      	movs	r3, #0
 8041fd6:	653b      	str	r3, [r7, #80]	; 0x50
    if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8041fd8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8041fdc:	2100      	movs	r1, #0
 8041fde:	4618      	mov	r0, r3
 8041fe0:	f7ff fa6c 	bl	80414bc <HAL_RCC_ClockConfig>
 8041fe4:	4603      	mov	r3, r0
 8041fe6:	2b00      	cmp	r3, #0
 8041fe8:	d001      	beq.n	8041fee <SystemClock_Config+0x72>
    {
      /* Initialization Error */
      Error_Handler();
 8041fea:	f000 f85b 	bl	80420a4 <Error_Handler>
    }

    /* Enable voltage range 0 for frequency above 80 Mhz */
    __HAL_RCC_PWR_CLK_ENABLE();
 8041fee:	4b2c      	ldr	r3, [pc, #176]	; (80420a0 <SystemClock_Config+0x124>)
 8041ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041ff2:	4a2b      	ldr	r2, [pc, #172]	; (80420a0 <SystemClock_Config+0x124>)
 8041ff4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8041ff8:	6593      	str	r3, [r2, #88]	; 0x58
 8041ffa:	4b29      	ldr	r3, [pc, #164]	; (80420a0 <SystemClock_Config+0x124>)
 8041ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8042002:	603b      	str	r3, [r7, #0]
 8042004:	683b      	ldr	r3, [r7, #0]
    HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0);
 8042006:	2000      	movs	r0, #0
 8042008:	f7fe fcf2 	bl	80409f0 <HAL_PWREx_ControlVoltageScaling>
    __HAL_RCC_PWR_CLK_DISABLE();
 804200c:	4b24      	ldr	r3, [pc, #144]	; (80420a0 <SystemClock_Config+0x124>)
 804200e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8042010:	4a23      	ldr	r2, [pc, #140]	; (80420a0 <SystemClock_Config+0x124>)
 8042012:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8042016:	6593      	str	r3, [r2, #88]	; 0x58

    /* MSI Oscillator enabled at reset (4Mhz), activate PLL with MSI as source */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_NONE;
 8042018:	2300      	movs	r3, #0
 804201a:	607b      	str	r3, [r7, #4]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 804201c:	2302      	movs	r3, #2
 804201e:	633b      	str	r3, [r7, #48]	; 0x30
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8042020:	2301      	movs	r3, #1
 8042022:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLM = 1;
 8042024:	2301      	movs	r3, #1
 8042026:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLN = 55;
 8042028:	2337      	movs	r3, #55	; 0x37
 804202a:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 804202c:	2302      	movs	r3, #2
 804202e:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8042030:	2302      	movs	r3, #2
 8042032:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8042034:	2307      	movs	r3, #7
 8042036:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8042038:	1d3b      	adds	r3, r7, #4
 804203a:	4618      	mov	r0, r3
 804203c:	f7fe fd68 	bl	8040b10 <HAL_RCC_OscConfig>
 8042040:	4603      	mov	r3, r0
 8042042:	2b00      	cmp	r3, #0
 8042044:	d001      	beq.n	804204a <SystemClock_Config+0xce>
    {
      /* Initialization Error */
      Error_Handler();
 8042046:	f000 f82d 	bl	80420a4 <Error_Handler>
    }

    /* Select PLL as system clock source with transition state */
    /* with AHB prescaler divider 2 as first step */
    RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 804204a:	230f      	movs	r3, #15
 804204c:	64fb      	str	r3, [r7, #76]	; 0x4c
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 804204e:	2303      	movs	r3, #3
 8042050:	653b      	str	r3, [r7, #80]	; 0x50
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8042052:	2380      	movs	r3, #128	; 0x80
 8042054:	657b      	str	r3, [r7, #84]	; 0x54
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8042056:	2300      	movs	r3, #0
 8042058:	65bb      	str	r3, [r7, #88]	; 0x58
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 804205a:	2300      	movs	r3, #0
 804205c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 804205e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8042062:	2103      	movs	r1, #3
 8042064:	4618      	mov	r0, r3
 8042066:	f7ff fa29 	bl	80414bc <HAL_RCC_ClockConfig>
 804206a:	4603      	mov	r3, r0
 804206c:	2b00      	cmp	r3, #0
 804206e:	d001      	beq.n	8042074 <SystemClock_Config+0xf8>
    {
      /* Initialization Error */
      Error_Handler();
 8042070:	f000 f818 	bl	80420a4 <Error_Handler>
    }

    /* AHB prescaler divider at 1 as second step */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK;
 8042074:	2302      	movs	r3, #2
 8042076:	64fb      	str	r3, [r7, #76]	; 0x4c
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8042078:	2300      	movs	r3, #0
 804207a:	657b      	str	r3, [r7, #84]	; 0x54
    if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 804207c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8042080:	2105      	movs	r1, #5
 8042082:	4618      	mov	r0, r3
 8042084:	f7ff fa1a 	bl	80414bc <HAL_RCC_ClockConfig>
 8042088:	4603      	mov	r3, r0
 804208a:	2b00      	cmp	r3, #0
 804208c:	d001      	beq.n	8042092 <SystemClock_Config+0x116>
    {
      /* Initialization Error */
      Error_Handler();
 804208e:	f000 f809 	bl	80420a4 <Error_Handler>
    }
  }
}
 8042092:	bf00      	nop
 8042094:	3760      	adds	r7, #96	; 0x60
 8042096:	46bd      	mov	sp, r7
 8042098:	bd80      	pop	{r7, pc}
 804209a:	bf00      	nop
 804209c:	068e7780 	.word	0x068e7780
 80420a0:	40021000 	.word	0x40021000

080420a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
static void Error_Handler(void)
{
 80420a4:	b580      	push	{r7, lr}
 80420a6:	af00      	add	r7, sp, #0
  /* LED_ERROR on */
  BSP_LED_On(LED_ERROR);
 80420a8:	2000      	movs	r0, #0
 80420aa:	f7fe f923 	bl	80402f4 <BSP_LED_On>

  /* Infinite loop */
  while (1)
 80420ae:	e7fe      	b.n	80420ae <Error_Handler+0xa>

080420b0 <MX_TIM16_Init>:
}


///////////////////////////////Timer16 and Timer17
static void MX_TIM16_Init(void)
{
 80420b0:	b580      	push	{r7, lr}
 80420b2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80420b4:	4b10      	ldr	r3, [pc, #64]	; (80420f8 <MX_TIM16_Init+0x48>)
 80420b6:	4a11      	ldr	r2, [pc, #68]	; (80420fc <MX_TIM16_Init+0x4c>)
 80420b8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1000;
 80420ba:	4b0f      	ldr	r3, [pc, #60]	; (80420f8 <MX_TIM16_Init+0x48>)
 80420bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80420c0:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80420c2:	4b0d      	ldr	r3, [pc, #52]	; (80420f8 <MX_TIM16_Init+0x48>)
 80420c4:	2200      	movs	r2, #0
 80420c6:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 36000;
 80420c8:	4b0b      	ldr	r3, [pc, #44]	; (80420f8 <MX_TIM16_Init+0x48>)
 80420ca:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 80420ce:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80420d0:	4b09      	ldr	r3, [pc, #36]	; (80420f8 <MX_TIM16_Init+0x48>)
 80420d2:	2200      	movs	r2, #0
 80420d4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80420d6:	4b08      	ldr	r3, [pc, #32]	; (80420f8 <MX_TIM16_Init+0x48>)
 80420d8:	2200      	movs	r2, #0
 80420da:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80420dc:	4b06      	ldr	r3, [pc, #24]	; (80420f8 <MX_TIM16_Init+0x48>)
 80420de:	2200      	movs	r2, #0
 80420e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80420e2:	4805      	ldr	r0, [pc, #20]	; (80420f8 <MX_TIM16_Init+0x48>)
 80420e4:	f7ff fca2 	bl	8041a2c <HAL_TIM_Base_Init>
 80420e8:	4603      	mov	r3, r0
 80420ea:	2b00      	cmp	r3, #0
 80420ec:	d001      	beq.n	80420f2 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80420ee:	f7ff ffd9 	bl	80420a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80420f2:	bf00      	nop
 80420f4:	bd80      	pop	{r7, pc}
 80420f6:	bf00      	nop
 80420f8:	20018038 	.word	0x20018038
 80420fc:	40014400 	.word	0x40014400

08042100 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8042100:	b580      	push	{r7, lr}
 8042102:	b082      	sub	sp, #8
 8042104:	af00      	add	r7, sp, #0
 8042106:	6078      	str	r0, [r7, #4]
	jump_ns++;
 8042108:	4b08      	ldr	r3, [pc, #32]	; (804212c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 804210a:	681b      	ldr	r3, [r3, #0]
 804210c:	3301      	adds	r3, #1
 804210e:	4a07      	ldr	r2, [pc, #28]	; (804212c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8042110:	6013      	str	r3, [r2, #0]
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_3);
 8042112:	2108      	movs	r1, #8
 8042114:	4806      	ldr	r0, [pc, #24]	; (8042130 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8042116:	f7fe fc43 	bl	80409a0 <HAL_GPIO_TogglePin>
//	HAL_Delay(5);
	jump_secure(jump_ns);
 804211a:	4b04      	ldr	r3, [pc, #16]	; (804212c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 804211c:	681b      	ldr	r3, [r3, #0]
 804211e:	4618      	mov	r0, r3
 8042120:	f000 f8e6 	bl	80422f0 <__jump_secure_veneer>
}
 8042124:	bf00      	nop
 8042126:	3708      	adds	r7, #8
 8042128:	46bd      	mov	sp, r7
 804212a:	bd80      	pop	{r7, pc}
 804212c:	20018084 	.word	0x20018084
 8042130:	42020c00 	.word	0x42020c00

08042134 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8042134:	b580      	push	{r7, lr}
 8042136:	b084      	sub	sp, #16
 8042138:	af00      	add	r7, sp, #0
 804213a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 804213c:	687b      	ldr	r3, [r7, #4]
 804213e:	681b      	ldr	r3, [r3, #0]
 8042140:	4a1a      	ldr	r2, [pc, #104]	; (80421ac <HAL_TIM_Base_MspInit+0x78>)
 8042142:	4293      	cmp	r3, r2
 8042144:	d114      	bne.n	8042170 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8042146:	4b1a      	ldr	r3, [pc, #104]	; (80421b0 <HAL_TIM_Base_MspInit+0x7c>)
 8042148:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 804214a:	4a19      	ldr	r2, [pc, #100]	; (80421b0 <HAL_TIM_Base_MspInit+0x7c>)
 804214c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8042150:	6613      	str	r3, [r2, #96]	; 0x60
 8042152:	4b17      	ldr	r3, [pc, #92]	; (80421b0 <HAL_TIM_Base_MspInit+0x7c>)
 8042154:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8042156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 804215a:	60fb      	str	r3, [r7, #12]
 804215c:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 804215e:	2200      	movs	r2, #0
 8042160:	2100      	movs	r1, #0
 8042162:	2046      	movs	r0, #70	; 0x46
 8042164:	f7fe fa4f 	bl	8040606 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8042168:	2046      	movs	r0, #70	; 0x46
 804216a:	f7fe fa66 	bl	804063a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 804216e:	e018      	b.n	80421a2 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM17)
 8042170:	687b      	ldr	r3, [r7, #4]
 8042172:	681b      	ldr	r3, [r3, #0]
 8042174:	4a0f      	ldr	r2, [pc, #60]	; (80421b4 <HAL_TIM_Base_MspInit+0x80>)
 8042176:	4293      	cmp	r3, r2
 8042178:	d113      	bne.n	80421a2 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 804217a:	4b0d      	ldr	r3, [pc, #52]	; (80421b0 <HAL_TIM_Base_MspInit+0x7c>)
 804217c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 804217e:	4a0c      	ldr	r2, [pc, #48]	; (80421b0 <HAL_TIM_Base_MspInit+0x7c>)
 8042180:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8042184:	6613      	str	r3, [r2, #96]	; 0x60
 8042186:	4b0a      	ldr	r3, [pc, #40]	; (80421b0 <HAL_TIM_Base_MspInit+0x7c>)
 8042188:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 804218a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 804218e:	60bb      	str	r3, [r7, #8]
 8042190:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8042192:	2200      	movs	r2, #0
 8042194:	2100      	movs	r1, #0
 8042196:	2047      	movs	r0, #71	; 0x47
 8042198:	f7fe fa35 	bl	8040606 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 804219c:	2047      	movs	r0, #71	; 0x47
 804219e:	f7fe fa4c 	bl	804063a <HAL_NVIC_EnableIRQ>
}
 80421a2:	bf00      	nop
 80421a4:	3710      	adds	r7, #16
 80421a6:	46bd      	mov	sp, r7
 80421a8:	bd80      	pop	{r7, pc}
 80421aa:	bf00      	nop
 80421ac:	40014400 	.word	0x40014400
 80421b0:	40021000 	.word	0x40021000
 80421b4:	40014800 	.word	0x40014800

080421b8 <NMI_Handler>:
/**
  * @brief  This function handles NMI exception.
  * @retval None
  */
void NMI_Handler(void)
{
 80421b8:	b480      	push	{r7}
 80421ba:	af00      	add	r7, sp, #0
}
 80421bc:	bf00      	nop
 80421be:	46bd      	mov	sp, r7
 80421c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80421c4:	4770      	bx	lr

080421c6 <HardFault_Handler>:
/**
  * @brief  This function handles Hard Fault exception.
  * @retval None
  */
void HardFault_Handler(void)
{
 80421c6:	b480      	push	{r7}
 80421c8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80421ca:	e7fe      	b.n	80421ca <HardFault_Handler+0x4>

080421cc <MemManage_Handler>:
/**
  * @brief  This function handles Memory Manage exception.
  * @retval None
  */
void MemManage_Handler(void)
{
 80421cc:	b480      	push	{r7}
 80421ce:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80421d0:	e7fe      	b.n	80421d0 <MemManage_Handler+0x4>

080421d2 <BusFault_Handler>:
/**
  * @brief  This function handles Bus Fault exception.
  * @retval None
  */
void BusFault_Handler(void)
{
 80421d2:	b480      	push	{r7}
 80421d4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80421d6:	e7fe      	b.n	80421d6 <BusFault_Handler+0x4>

080421d8 <UsageFault_Handler>:
/**
  * @brief  This function handles Usage Fault exception.
  * @retval None
  */
void UsageFault_Handler(void)
{
 80421d8:	b480      	push	{r7}
 80421da:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80421dc:	e7fe      	b.n	80421dc <UsageFault_Handler+0x4>

080421de <SVC_Handler>:
/**
  * @brief  This function handles SVCall exception.
  * @retval None
  */
void SVC_Handler(void)
{
 80421de:	b480      	push	{r7}
 80421e0:	af00      	add	r7, sp, #0
}
 80421e2:	bf00      	nop
 80421e4:	46bd      	mov	sp, r7
 80421e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80421ea:	4770      	bx	lr

080421ec <DebugMon_Handler>:
/**
  * @brief  This function handles Debug Monitor exception.
  * @retval None
  */
void DebugMon_Handler(void)
{
 80421ec:	b480      	push	{r7}
 80421ee:	af00      	add	r7, sp, #0
  while (1)
 80421f0:	e7fe      	b.n	80421f0 <DebugMon_Handler+0x4>

080421f2 <PendSV_Handler>:
/**
  * @brief  This function handles PendSVC exception.
  * @retval None
  */
void PendSV_Handler(void)
{
 80421f2:	b480      	push	{r7}
 80421f4:	af00      	add	r7, sp, #0
  while (1)
 80421f6:	e7fe      	b.n	80421f6 <PendSV_Handler+0x4>

080421f8 <SysTick_Handler>:
/**
  * @brief  This function handles SysTick Handler.
  * @retval None
  */
void SysTick_Handler(void)
{
 80421f8:	b580      	push	{r7, lr}
 80421fa:	af00      	add	r7, sp, #0
  HAL_IncTick();
 80421fc:	f7fe f908 	bl	8040410 <HAL_IncTick>
}
 8042200:	bf00      	nop
 8042202:	bd80      	pop	{r7, pc}

08042204 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8042204:	b580      	push	{r7, lr}
 8042206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8042208:	4802      	ldr	r0, [pc, #8]	; (8042214 <TIM16_IRQHandler+0x10>)
 804220a:	f7ff fc66 	bl	8041ada <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 804220e:	bf00      	nop
 8042210:	bd80      	pop	{r7, pc}
 8042212:	bf00      	nop
 8042214:	20018038 	.word	0x20018038

08042218 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8042218:	f8df d034 	ldr.w	sp, [pc, #52]	; 8042250 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 804221c:	f7fe f886 	bl	804032c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8042220:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8042222:	e003      	b.n	804222c <LoopCopyDataInit>

08042224 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8042224:	4b0b      	ldr	r3, [pc, #44]	; (8042254 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8042226:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8042228:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 804222a:	3104      	adds	r1, #4

0804222c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 804222c:	480a      	ldr	r0, [pc, #40]	; (8042258 <LoopForever+0xa>)
	ldr	r3, =_edata
 804222e:	4b0b      	ldr	r3, [pc, #44]	; (804225c <LoopForever+0xe>)
	adds	r2, r0, r1
 8042230:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8042232:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8042234:	d3f6      	bcc.n	8042224 <CopyDataInit>
	ldr	r2, =_sbss
 8042236:	4a0a      	ldr	r2, [pc, #40]	; (8042260 <LoopForever+0x12>)
	b	LoopFillZerobss
 8042238:	e002      	b.n	8042240 <LoopFillZerobss>

0804223a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 804223a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 804223c:	f842 3b04 	str.w	r3, [r2], #4

08042240 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8042240:	4b08      	ldr	r3, [pc, #32]	; (8042264 <LoopForever+0x16>)
	cmp	r2, r3
 8042242:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8042244:	d3f9      	bcc.n	804223a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8042246:	f000 f811 	bl	804226c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 804224a:	f7ff fe45 	bl	8041ed8 <main>

0804224e <LoopForever>:

LoopForever:
    b LoopForever
 804224e:	e7fe      	b.n	804224e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8042250:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8042254:	08042370 	.word	0x08042370
	ldr	r0, =_sdata
 8042258:	20018000 	.word	0x20018000
	ldr	r3, =_edata
 804225c:	20018018 	.word	0x20018018
	ldr	r2, =_sbss
 8042260:	20018018 	.word	0x20018018
	ldr	r3, = _ebss
 8042264:	20018088 	.word	0x20018088

08042268 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8042268:	e7fe      	b.n	8042268 <ADC1_2_IRQHandler>
	...

0804226c <__libc_init_array>:
 804226c:	b570      	push	{r4, r5, r6, lr}
 804226e:	4d0d      	ldr	r5, [pc, #52]	; (80422a4 <__libc_init_array+0x38>)
 8042270:	2600      	movs	r6, #0
 8042272:	4c0d      	ldr	r4, [pc, #52]	; (80422a8 <__libc_init_array+0x3c>)
 8042274:	1b64      	subs	r4, r4, r5
 8042276:	10a4      	asrs	r4, r4, #2
 8042278:	42a6      	cmp	r6, r4
 804227a:	d109      	bne.n	8042290 <__libc_init_array+0x24>
 804227c:	4d0b      	ldr	r5, [pc, #44]	; (80422ac <__libc_init_array+0x40>)
 804227e:	2600      	movs	r6, #0
 8042280:	4c0b      	ldr	r4, [pc, #44]	; (80422b0 <__libc_init_array+0x44>)
 8042282:	f000 f81f 	bl	80422c4 <_init>
 8042286:	1b64      	subs	r4, r4, r5
 8042288:	10a4      	asrs	r4, r4, #2
 804228a:	42a6      	cmp	r6, r4
 804228c:	d105      	bne.n	804229a <__libc_init_array+0x2e>
 804228e:	bd70      	pop	{r4, r5, r6, pc}
 8042290:	f855 3b04 	ldr.w	r3, [r5], #4
 8042294:	3601      	adds	r6, #1
 8042296:	4798      	blx	r3
 8042298:	e7ee      	b.n	8042278 <__libc_init_array+0xc>
 804229a:	f855 3b04 	ldr.w	r3, [r5], #4
 804229e:	3601      	adds	r6, #1
 80422a0:	4798      	blx	r3
 80422a2:	e7f2      	b.n	804228a <__libc_init_array+0x1e>
 80422a4:	08042360 	.word	0x08042360
 80422a8:	08042360 	.word	0x08042360
 80422ac:	08042360 	.word	0x08042360
 80422b0:	08042364 	.word	0x08042364

080422b4 <memset>:
 80422b4:	4402      	add	r2, r0
 80422b6:	4603      	mov	r3, r0
 80422b8:	4293      	cmp	r3, r2
 80422ba:	d100      	bne.n	80422be <memset+0xa>
 80422bc:	4770      	bx	lr
 80422be:	f803 1b01 	strb.w	r1, [r3], #1
 80422c2:	e7f9      	b.n	80422b8 <memset+0x4>

080422c4 <_init>:
 80422c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80422c6:	bf00      	nop
 80422c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80422ca:	bc08      	pop	{r3}
 80422cc:	469e      	mov	lr, r3
 80422ce:	4770      	bx	lr

080422d0 <_fini>:
 80422d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80422d2:	bf00      	nop
 80422d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80422d6:	bc08      	pop	{r3}
 80422d8:	469e      	mov	lr, r3
 80422da:	4770      	bx	lr
 80422dc:	0000      	movs	r0, r0
	...

080422e0 <__SECURE_RegisterCallback_veneer>:
 80422e0:	b401      	push	{r0}
 80422e2:	4802      	ldr	r0, [pc, #8]	; (80422ec <__SECURE_RegisterCallback_veneer+0xc>)
 80422e4:	4684      	mov	ip, r0
 80422e6:	bc01      	pop	{r0}
 80422e8:	4760      	bx	ip
 80422ea:	bf00      	nop
 80422ec:	0c03e029 	.word	0x0c03e029

080422f0 <__jump_secure_veneer>:
 80422f0:	b401      	push	{r0}
 80422f2:	4802      	ldr	r0, [pc, #8]	; (80422fc <__jump_secure_veneer+0xc>)
 80422f4:	4684      	mov	ip, r0
 80422f6:	bc01      	pop	{r0}
 80422f8:	4760      	bx	ip
 80422fa:	bf00      	nop
 80422fc:	0c03e039 	.word	0x0c03e039

08042300 <__SECURE_SystemCoreClockUpdate_veneer>:
 8042300:	b401      	push	{r0}
 8042302:	4802      	ldr	r0, [pc, #8]	; (804230c <__SECURE_SystemCoreClockUpdate_veneer+0xc>)
 8042304:	4684      	mov	ip, r0
 8042306:	bc01      	pop	{r0}
 8042308:	4760      	bx	ip
 804230a:	bf00      	nop
 804230c:	0c03e001 	.word	0x0c03e001
