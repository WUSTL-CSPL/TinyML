
FatFs_uSD_TrustZone_Secure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  0c000000  0c000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b8b8  0c0001f8  0c0001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000590  0c00bab0  0c00bab0  0001bab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0c00c040  0c00c040  0002e060  2**0
                  CONTENTS
  4 .ARM          00000000  0c00c040  0c00c040  0002e060  2**0
                  CONTENTS
  5 .preinit_array 00000000  0c00c040  0c00c040  0002e060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0c00c040  0c00c040  0001c040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0c00c048  0c00c048  0001c048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  30000000  0c00c050  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .gnu.sgstubs  00000060  0c03e000  0c03e000  0002e000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 10 .bss          000007b0  30000078  30000078  00030078  2**2
                  ALLOC
 11 ._user_heap_stack 00003000  30000828  30000828  00030078  2**0
                  ALLOC
 12 .ARM.attributes 00000036  00000000  00000000  0002e060  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017c21  00000000  00000000  0002e096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000355d  00000000  00000000  00045cb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001690  00000000  00000000  00049218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001520  00000000  00000000  0004a8a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000594e  00000000  00000000  0004bdc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c352  00000000  00000000  00051716  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011d991  00000000  00000000  0006da68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0018b3f9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000603c  00000000  00000000  0018b44c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0c0001f8 <__do_global_dtors_aux>:
 c0001f8:	b510      	push	{r4, lr}
 c0001fa:	4c05      	ldr	r4, [pc, #20]	; (c000210 <__do_global_dtors_aux+0x18>)
 c0001fc:	7823      	ldrb	r3, [r4, #0]
 c0001fe:	b933      	cbnz	r3, c00020e <__do_global_dtors_aux+0x16>
 c000200:	4b04      	ldr	r3, [pc, #16]	; (c000214 <__do_global_dtors_aux+0x1c>)
 c000202:	b113      	cbz	r3, c00020a <__do_global_dtors_aux+0x12>
 c000204:	4804      	ldr	r0, [pc, #16]	; (c000218 <__do_global_dtors_aux+0x20>)
 c000206:	e000      	b.n	c00020a <__do_global_dtors_aux+0x12>
 c000208:	bf00      	nop
 c00020a:	2301      	movs	r3, #1
 c00020c:	7023      	strb	r3, [r4, #0]
 c00020e:	bd10      	pop	{r4, pc}
 c000210:	30000078 	.word	0x30000078
 c000214:	00000000 	.word	0x00000000
 c000218:	0c00ba98 	.word	0x0c00ba98

0c00021c <frame_dummy>:
 c00021c:	b508      	push	{r3, lr}
 c00021e:	4b03      	ldr	r3, [pc, #12]	; (c00022c <frame_dummy+0x10>)
 c000220:	b11b      	cbz	r3, c00022a <frame_dummy+0xe>
 c000222:	4903      	ldr	r1, [pc, #12]	; (c000230 <frame_dummy+0x14>)
 c000224:	4803      	ldr	r0, [pc, #12]	; (c000234 <frame_dummy+0x18>)
 c000226:	e000      	b.n	c00022a <frame_dummy+0xe>
 c000228:	bf00      	nop
 c00022a:	bd08      	pop	{r3, pc}
 c00022c:	00000000 	.word	0x00000000
 c000230:	3000007c 	.word	0x3000007c
 c000234:	0c00ba98 	.word	0x0c00ba98

0c000238 <__gnu_cmse_nonsecure_call>:
 c000238:	e92d 4fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp, lr}
 c00023c:	4627      	mov	r7, r4
 c00023e:	46a0      	mov	r8, r4
 c000240:	46a1      	mov	r9, r4
 c000242:	46a2      	mov	sl, r4
 c000244:	46a3      	mov	fp, r4
 c000246:	46a4      	mov	ip, r4
 c000248:	ed2d 8b10 	vpush	{d8-d15}
 c00024c:	f04f 0500 	mov.w	r5, #0
 c000250:	ec45 5b18 	vmov	d8, r5, r5
 c000254:	ec45 5a19 	vmov	s18, s19, r5, r5
 c000258:	ec45 5a1a 	vmov	s20, s21, r5, r5
 c00025c:	ec45 5a1b 	vmov	s22, s23, r5, r5
 c000260:	ec45 5a1c 	vmov	s24, s25, r5, r5
 c000264:	ec45 5a1d 	vmov	s26, s27, r5, r5
 c000268:	ec45 5a1e 	vmov	s28, s29, r5, r5
 c00026c:	ec45 5a1f 	vmov	s30, s31, r5, r5
 c000270:	eef1 5a10 	vmrs	r5, fpscr
 c000274:	f64f 7660 	movw	r6, #65376	; 0xff60
 c000278:	f6c0 76ff 	movt	r6, #4095	; 0xfff
 c00027c:	4035      	ands	r5, r6
 c00027e:	eee1 5a10 	vmsr	fpscr, r5
 c000282:	f384 8800 	msr	CPSR_f, r4
 c000286:	4625      	mov	r5, r4
 c000288:	4626      	mov	r6, r4
 c00028a:	47a4      	blxns	r4
 c00028c:	ecbd 8b10 	vpop	{d8-d15}
 c000290:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}

0c000294 <BSP_SD_Init>:
  * @brief  Initializes the SD card device.
  * @param  Instance SD Instance
  * @retval BSP status
  */
int32_t BSP_SD_Init(uint32_t Instance)
{
 c000294:	b580      	push	{r7, lr}
 c000296:	b08a      	sub	sp, #40	; 0x28
 c000298:	af00      	add	r7, sp, #0
 c00029a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 c00029c:	2300      	movs	r3, #0
 c00029e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitTypeDef gpioinitstruct = {0};
 c0002a0:	f107 0310 	add.w	r3, r7, #16
 c0002a4:	2200      	movs	r2, #0
 c0002a6:	601a      	str	r2, [r3, #0]
 c0002a8:	605a      	str	r2, [r3, #4]
 c0002aa:	609a      	str	r2, [r3, #8]
 c0002ac:	60da      	str	r2, [r3, #12]
 c0002ae:	611a      	str	r2, [r3, #16]

  if(Instance >= SD_INSTANCES_NBR)
 c0002b0:	687b      	ldr	r3, [r7, #4]
 c0002b2:	2b00      	cmp	r3, #0
 c0002b4:	d003      	beq.n	c0002be <BSP_SD_Init+0x2a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 c0002b6:	f06f 0301 	mvn.w	r3, #1
 c0002ba:	627b      	str	r3, [r7, #36]	; 0x24
 c0002bc:	e045      	b.n	c00034a <BSP_SD_Init+0xb6>
  }
  else
  {
    /* Configure SD pin detect */
    __SD_DETECT_GPIO_CLK_ENABLE();
 c0002be:	4b25      	ldr	r3, [pc, #148]	; (c000354 <BSP_SD_Init+0xc0>)
 c0002c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c0002c2:	4a24      	ldr	r2, [pc, #144]	; (c000354 <BSP_SD_Init+0xc0>)
 c0002c4:	f043 0320 	orr.w	r3, r3, #32
 c0002c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 c0002ca:	4b22      	ldr	r3, [pc, #136]	; (c000354 <BSP_SD_Init+0xc0>)
 c0002cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c0002ce:	f003 0320 	and.w	r3, r3, #32
 c0002d2:	60fb      	str	r3, [r7, #12]
 c0002d4:	68fb      	ldr	r3, [r7, #12]

    gpioinitstruct.Mode  = GPIO_MODE_IT_RISING_FALLING;
 c0002d6:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 c0002da:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Pull  = GPIO_PULLUP;
 c0002dc:	2301      	movs	r3, #1
 c0002de:	61bb      	str	r3, [r7, #24]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 c0002e0:	2303      	movs	r3, #3
 c0002e2:	61fb      	str	r3, [r7, #28]
    gpioinitstruct.Pin   = Sd_PinDetect[Instance];
 c0002e4:	4a1c      	ldr	r2, [pc, #112]	; (c000358 <BSP_SD_Init+0xc4>)
 c0002e6:	687b      	ldr	r3, [r7, #4]
 c0002e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c0002ec:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(Sd_PortDetect[Instance], &gpioinitstruct);
 c0002ee:	4a1b      	ldr	r2, [pc, #108]	; (c00035c <BSP_SD_Init+0xc8>)
 c0002f0:	687b      	ldr	r3, [r7, #4]
 c0002f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c0002f6:	f107 0210 	add.w	r2, r7, #16
 c0002fa:	4611      	mov	r1, r2
 c0002fc:	4618      	mov	r0, r3
 c0002fe:	f000 fd31 	bl	c000d64 <HAL_GPIO_Init>

    /* Check if SD card is present */
    if((uint32_t)BSP_SD_IsDetected(Instance) != SD_PRESENT)
 c000302:	6878      	ldr	r0, [r7, #4]
 c000304:	f000 f858 	bl	c0003b8 <BSP_SD_IsDetected>
 c000308:	4603      	mov	r3, r0
 c00030a:	2b01      	cmp	r3, #1
 c00030c:	d003      	beq.n	c000316 <BSP_SD_Init+0x82>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 c00030e:	f06f 0306 	mvn.w	r3, #6
 c000312:	627b      	str	r3, [r7, #36]	; 0x24
 c000314:	e019      	b.n	c00034a <BSP_SD_Init+0xb6>
    }
    else
    {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 0)
      /* Msp SD initialization */
      SD_MspInit(&hsd_sdmmc[Instance]);
 c000316:	687a      	ldr	r2, [r7, #4]
 c000318:	4613      	mov	r3, r2
 c00031a:	015b      	lsls	r3, r3, #5
 c00031c:	1a9b      	subs	r3, r3, r2
 c00031e:	009b      	lsls	r3, r3, #2
 c000320:	4a0f      	ldr	r2, [pc, #60]	; (c000360 <BSP_SD_Init+0xcc>)
 c000322:	4413      	add	r3, r2
 c000324:	4618      	mov	r0, r3
 c000326:	f000 f921 	bl	c00056c <SD_MspInit>
        }
      }
#endif /* (USE_HAL_SD_REGISTER_CALLBACKS == 0) */

      /* HAL SD initialization operation */
      if(MX_SDMMC1_SD_Init(&hsd_sdmmc[Instance]) != HAL_OK)
 c00032a:	687a      	ldr	r2, [r7, #4]
 c00032c:	4613      	mov	r3, r2
 c00032e:	015b      	lsls	r3, r3, #5
 c000330:	1a9b      	subs	r3, r3, r2
 c000332:	009b      	lsls	r3, r3, #2
 c000334:	4a0a      	ldr	r2, [pc, #40]	; (c000360 <BSP_SD_Init+0xcc>)
 c000336:	4413      	add	r3, r2
 c000338:	4618      	mov	r0, r3
 c00033a:	f000 f813 	bl	c000364 <MX_SDMMC1_SD_Init>
 c00033e:	4603      	mov	r3, r0
 c000340:	2b00      	cmp	r3, #0
 c000342:	d002      	beq.n	c00034a <BSP_SD_Init+0xb6>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 c000344:	f06f 0303 	mvn.w	r3, #3
 c000348:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* (USE_HAL_SD_REGISTER_CALLBACKS == 1) */
      }
    }
  }

  return  ret;
 c00034a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 c00034c:	4618      	mov	r0, r3
 c00034e:	3728      	adds	r7, #40	; 0x28
 c000350:	46bd      	mov	sp, r7
 c000352:	bd80      	pop	{r7, pc}
 c000354:	50021000 	.word	0x50021000
 c000358:	30000000 	.word	0x30000000
 c00035c:	30000004 	.word	0x30000004
 c000360:	30000094 	.word	0x30000094

0c000364 <MX_SDMMC1_SD_Init>:
  * @brief  Initializes the SDMMC1 peripheral.
  * @param  hsd SD handle
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SDMMC1_SD_Init(SD_HandleTypeDef *hsd)
{
 c000364:	b580      	push	{r7, lr}
 c000366:	b084      	sub	sp, #16
 c000368:	af00      	add	r7, sp, #0
 c00036a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 c00036c:	2300      	movs	r3, #0
 c00036e:	73fb      	strb	r3, [r7, #15]

  /* uSD device interface configuration */
  hsd->Instance                 = SDMMC1;
 c000370:	687b      	ldr	r3, [r7, #4]
 c000372:	4a10      	ldr	r2, [pc, #64]	; (c0003b4 <MX_SDMMC1_SD_Init+0x50>)
 c000374:	601a      	str	r2, [r3, #0]
  hsd->Init.ClockEdge           = SDMMC_CLOCK_EDGE_FALLING;
 c000376:	687b      	ldr	r3, [r7, #4]
 c000378:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 c00037c:	605a      	str	r2, [r3, #4]
  hsd->Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 c00037e:	687b      	ldr	r3, [r7, #4]
 c000380:	2200      	movs	r2, #0
 c000382:	609a      	str	r2, [r3, #8]
  hsd->Init.BusWide             = SDMMC_BUS_WIDE_4B;
 c000384:	687b      	ldr	r3, [r7, #4]
 c000386:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 c00038a:	60da      	str	r2, [r3, #12]
  hsd->Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 c00038c:	687b      	ldr	r3, [r7, #4]
 c00038e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 c000392:	611a      	str	r2, [r3, #16]
  hsd->Init.ClockDiv            = SDMMC_NSpeed_CLK_DIV;
 c000394:	687b      	ldr	r3, [r7, #4]
 c000396:	2203      	movs	r2, #3
 c000398:	615a      	str	r2, [r3, #20]

  /* HAL SD initialization */
  if(HAL_SD_Init(hsd) != HAL_OK)
 c00039a:	6878      	ldr	r0, [r7, #4]
 c00039c:	f004 f80e 	bl	c0043bc <HAL_SD_Init>
 c0003a0:	4603      	mov	r3, r0
 c0003a2:	2b00      	cmp	r3, #0
 c0003a4:	d001      	beq.n	c0003aa <MX_SDMMC1_SD_Init+0x46>
  {
    ret = HAL_ERROR;
 c0003a6:	2301      	movs	r3, #1
 c0003a8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 c0003aa:	7bfb      	ldrb	r3, [r7, #15]
}
 c0003ac:	4618      	mov	r0, r3
 c0003ae:	3710      	adds	r7, #16
 c0003b0:	46bd      	mov	sp, r7
 c0003b2:	bd80      	pop	{r7, pc}
 c0003b4:	520c8000 	.word	0x520c8000

0c0003b8 <BSP_SD_IsDetected>:
  * @brief  Detects if SD card is correctly plugged in the memory slot or not.
  * @param  Instance SD Instance
  * @retval Returns if SD is detected or not
  */
int32_t BSP_SD_IsDetected(uint32_t Instance)
{
 c0003b8:	b580      	push	{r7, lr}
 c0003ba:	b084      	sub	sp, #16
 c0003bc:	af00      	add	r7, sp, #0
 c0003be:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if(Instance >= SD_INSTANCES_NBR)
 c0003c0:	687b      	ldr	r3, [r7, #4]
 c0003c2:	2b00      	cmp	r3, #0
 c0003c4:	d003      	beq.n	c0003ce <BSP_SD_IsDetected+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 c0003c6:	f06f 0301 	mvn.w	r3, #1
 c0003ca:	60fb      	str	r3, [r7, #12]
 c0003cc:	e014      	b.n	c0003f8 <BSP_SD_IsDetected+0x40>
  }
  else
  {
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(Sd_PortDetect[Instance], (uint16_t) Sd_PinDetect[Instance]) != GPIO_PIN_RESET)
 c0003ce:	4a0d      	ldr	r2, [pc, #52]	; (c000404 <BSP_SD_IsDetected+0x4c>)
 c0003d0:	687b      	ldr	r3, [r7, #4]
 c0003d2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 c0003d6:	490c      	ldr	r1, [pc, #48]	; (c000408 <BSP_SD_IsDetected+0x50>)
 c0003d8:	687b      	ldr	r3, [r7, #4]
 c0003da:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 c0003de:	b29b      	uxth	r3, r3
 c0003e0:	4619      	mov	r1, r3
 c0003e2:	4610      	mov	r0, r2
 c0003e4:	f000 fe3e 	bl	c001064 <HAL_GPIO_ReadPin>
 c0003e8:	4603      	mov	r3, r0
 c0003ea:	2b00      	cmp	r3, #0
 c0003ec:	d002      	beq.n	c0003f4 <BSP_SD_IsDetected+0x3c>
    {
      ret = (int32_t) SD_NOT_PRESENT;
 c0003ee:	2300      	movs	r3, #0
 c0003f0:	60fb      	str	r3, [r7, #12]
 c0003f2:	e001      	b.n	c0003f8 <BSP_SD_IsDetected+0x40>
    }
    else
    {
      ret = (int32_t) SD_PRESENT;
 c0003f4:	2301      	movs	r3, #1
 c0003f6:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 c0003f8:	68fb      	ldr	r3, [r7, #12]
}
 c0003fa:	4618      	mov	r0, r3
 c0003fc:	3710      	adds	r7, #16
 c0003fe:	46bd      	mov	sp, r7
 c000400:	bd80      	pop	{r7, pc}
 c000402:	bf00      	nop
 c000404:	30000004 	.word	0x30000004
 c000408:	30000000 	.word	0x30000000

0c00040c <BSP_SD_ReadBlocks>:
  * @param  BlockIdx  Block index from where data is to be read
  * @param  BlocksNbr Number of SD blocks to read
  * @retval BSP status
  */
int32_t BSP_SD_ReadBlocks(uint32_t Instance, uint32_t *pData, uint32_t BlockIdx, uint32_t BlocksNbr)
{
 c00040c:	b580      	push	{r7, lr}
 c00040e:	b088      	sub	sp, #32
 c000410:	af02      	add	r7, sp, #8
 c000412:	60f8      	str	r0, [r7, #12]
 c000414:	60b9      	str	r1, [r7, #8]
 c000416:	607a      	str	r2, [r7, #4]
 c000418:	603b      	str	r3, [r7, #0]
  uint32_t timeout = SD_READ_TIMEOUT*BlocksNbr;
 c00041a:	683b      	ldr	r3, [r7, #0]
 c00041c:	2264      	movs	r2, #100	; 0x64
 c00041e:	fb02 f303 	mul.w	r3, r2, r3
 c000422:	613b      	str	r3, [r7, #16]
  int32_t ret;

  if(Instance >= SD_INSTANCES_NBR)
 c000424:	68fb      	ldr	r3, [r7, #12]
 c000426:	2b00      	cmp	r3, #0
 c000428:	d003      	beq.n	c000432 <BSP_SD_ReadBlocks+0x26>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 c00042a:	f06f 0301 	mvn.w	r3, #1
 c00042e:	617b      	str	r3, [r7, #20]
 c000430:	e016      	b.n	c000460 <BSP_SD_ReadBlocks+0x54>
  }
  else if(HAL_SD_ReadBlocks(&hsd_sdmmc[Instance], (uint8_t *)pData, BlockIdx, BlocksNbr, timeout) != HAL_OK)
 c000432:	68fa      	ldr	r2, [r7, #12]
 c000434:	4613      	mov	r3, r2
 c000436:	015b      	lsls	r3, r3, #5
 c000438:	1a9b      	subs	r3, r3, r2
 c00043a:	009b      	lsls	r3, r3, #2
 c00043c:	4a0b      	ldr	r2, [pc, #44]	; (c00046c <BSP_SD_ReadBlocks+0x60>)
 c00043e:	1898      	adds	r0, r3, r2
 c000440:	693b      	ldr	r3, [r7, #16]
 c000442:	9300      	str	r3, [sp, #0]
 c000444:	683b      	ldr	r3, [r7, #0]
 c000446:	687a      	ldr	r2, [r7, #4]
 c000448:	68b9      	ldr	r1, [r7, #8]
 c00044a:	f004 f8d9 	bl	c004600 <HAL_SD_ReadBlocks>
 c00044e:	4603      	mov	r3, r0
 c000450:	2b00      	cmp	r3, #0
 c000452:	d003      	beq.n	c00045c <BSP_SD_ReadBlocks+0x50>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 c000454:	f06f 0303 	mvn.w	r3, #3
 c000458:	617b      	str	r3, [r7, #20]
 c00045a:	e001      	b.n	c000460 <BSP_SD_ReadBlocks+0x54>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 c00045c:	2300      	movs	r3, #0
 c00045e:	617b      	str	r3, [r7, #20]
  }

  return ret;
 c000460:	697b      	ldr	r3, [r7, #20]
}
 c000462:	4618      	mov	r0, r3
 c000464:	3718      	adds	r7, #24
 c000466:	46bd      	mov	sp, r7
 c000468:	bd80      	pop	{r7, pc}
 c00046a:	bf00      	nop
 c00046c:	30000094 	.word	0x30000094

0c000470 <BSP_SD_WriteBlocks>:
  * @param  BlockIdx   Block index from where data is to be written
  * @param  BlocksNbr  Number of SD blocks to write
  * @retval BSP status
  */
int32_t BSP_SD_WriteBlocks(uint32_t Instance, uint32_t *pData, uint32_t BlockIdx, uint32_t BlocksNbr)
{
 c000470:	b580      	push	{r7, lr}
 c000472:	b088      	sub	sp, #32
 c000474:	af02      	add	r7, sp, #8
 c000476:	60f8      	str	r0, [r7, #12]
 c000478:	60b9      	str	r1, [r7, #8]
 c00047a:	607a      	str	r2, [r7, #4]
 c00047c:	603b      	str	r3, [r7, #0]
  uint32_t timeout = SD_WRITE_TIMEOUT*BlocksNbr;
 c00047e:	683b      	ldr	r3, [r7, #0]
 c000480:	22fa      	movs	r2, #250	; 0xfa
 c000482:	fb02 f303 	mul.w	r3, r2, r3
 c000486:	613b      	str	r3, [r7, #16]
  int32_t ret;

  if(Instance >= SD_INSTANCES_NBR)
 c000488:	68fb      	ldr	r3, [r7, #12]
 c00048a:	2b00      	cmp	r3, #0
 c00048c:	d003      	beq.n	c000496 <BSP_SD_WriteBlocks+0x26>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 c00048e:	f06f 0301 	mvn.w	r3, #1
 c000492:	617b      	str	r3, [r7, #20]
 c000494:	e016      	b.n	c0004c4 <BSP_SD_WriteBlocks+0x54>
  }
  else if(HAL_SD_WriteBlocks(&hsd_sdmmc[Instance], (uint8_t *)pData, BlockIdx, BlocksNbr, timeout) != HAL_OK)
 c000496:	68fa      	ldr	r2, [r7, #12]
 c000498:	4613      	mov	r3, r2
 c00049a:	015b      	lsls	r3, r3, #5
 c00049c:	1a9b      	subs	r3, r3, r2
 c00049e:	009b      	lsls	r3, r3, #2
 c0004a0:	4a0b      	ldr	r2, [pc, #44]	; (c0004d0 <BSP_SD_WriteBlocks+0x60>)
 c0004a2:	1898      	adds	r0, r3, r2
 c0004a4:	693b      	ldr	r3, [r7, #16]
 c0004a6:	9300      	str	r3, [sp, #0]
 c0004a8:	683b      	ldr	r3, [r7, #0]
 c0004aa:	687a      	ldr	r2, [r7, #4]
 c0004ac:	68b9      	ldr	r1, [r7, #8]
 c0004ae:	f004 fa31 	bl	c004914 <HAL_SD_WriteBlocks>
 c0004b2:	4603      	mov	r3, r0
 c0004b4:	2b00      	cmp	r3, #0
 c0004b6:	d003      	beq.n	c0004c0 <BSP_SD_WriteBlocks+0x50>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 c0004b8:	f06f 0303 	mvn.w	r3, #3
 c0004bc:	617b      	str	r3, [r7, #20]
 c0004be:	e001      	b.n	c0004c4 <BSP_SD_WriteBlocks+0x54>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 c0004c0:	2300      	movs	r3, #0
 c0004c2:	617b      	str	r3, [r7, #20]
  }

  return ret;
 c0004c4:	697b      	ldr	r3, [r7, #20]
}
 c0004c6:	4618      	mov	r0, r3
 c0004c8:	3718      	adds	r7, #24
 c0004ca:	46bd      	mov	sp, r7
 c0004cc:	bd80      	pop	{r7, pc}
 c0004ce:	bf00      	nop
 c0004d0:	30000094 	.word	0x30000094

0c0004d4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
int32_t BSP_SD_GetCardState(uint32_t Instance)
{
 c0004d4:	b580      	push	{r7, lr}
 c0004d6:	b084      	sub	sp, #16
 c0004d8:	af00      	add	r7, sp, #0
 c0004da:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if(Instance >= SD_INSTANCES_NBR)
 c0004dc:	687b      	ldr	r3, [r7, #4]
 c0004de:	2b00      	cmp	r3, #0
 c0004e0:	d003      	beq.n	c0004ea <BSP_SD_GetCardState+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 c0004e2:	f06f 0301 	mvn.w	r3, #1
 c0004e6:	60fb      	str	r3, [r7, #12]
 c0004e8:	e010      	b.n	c00050c <BSP_SD_GetCardState+0x38>
  }
  else
  {
    ret = (int32_t) ((HAL_SD_GetCardState(&hsd_sdmmc[Instance]) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 c0004ea:	687a      	ldr	r2, [r7, #4]
 c0004ec:	4613      	mov	r3, r2
 c0004ee:	015b      	lsls	r3, r3, #5
 c0004f0:	1a9b      	subs	r3, r3, r2
 c0004f2:	009b      	lsls	r3, r3, #2
 c0004f4:	4a08      	ldr	r2, [pc, #32]	; (c000518 <BSP_SD_GetCardState+0x44>)
 c0004f6:	4413      	add	r3, r2
 c0004f8:	4618      	mov	r0, r3
 c0004fa:	f004 ff37 	bl	c00536c <HAL_SD_GetCardState>
 c0004fe:	4603      	mov	r3, r0
 c000500:	2b04      	cmp	r3, #4
 c000502:	bf14      	ite	ne
 c000504:	2301      	movne	r3, #1
 c000506:	2300      	moveq	r3, #0
 c000508:	b2db      	uxtb	r3, r3
 c00050a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 c00050c:	68fb      	ldr	r3, [r7, #12]
}
 c00050e:	4618      	mov	r0, r3
 c000510:	3710      	adds	r7, #16
 c000512:	46bd      	mov	sp, r7
 c000514:	bd80      	pop	{r7, pc}
 c000516:	bf00      	nop
 c000518:	30000094 	.word	0x30000094

0c00051c <BSP_SD_GetCardInfo>:
  * @param  Instance  SD Instance
  * @param  CardInfo  Pointer to HAL_SD_CardInfoTypedef structure
  * @retval BSP status
  */
int32_t BSP_SD_GetCardInfo(uint32_t Instance, BSP_SD_CardInfo *CardInfo)
{
 c00051c:	b580      	push	{r7, lr}
 c00051e:	b084      	sub	sp, #16
 c000520:	af00      	add	r7, sp, #0
 c000522:	6078      	str	r0, [r7, #4]
 c000524:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if(Instance >= SD_INSTANCES_NBR)
 c000526:	687b      	ldr	r3, [r7, #4]
 c000528:	2b00      	cmp	r3, #0
 c00052a:	d003      	beq.n	c000534 <BSP_SD_GetCardInfo+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 c00052c:	f06f 0301 	mvn.w	r3, #1
 c000530:	60fb      	str	r3, [r7, #12]
 c000532:	e013      	b.n	c00055c <BSP_SD_GetCardInfo+0x40>
  }
  else if(HAL_SD_GetCardInfo(&hsd_sdmmc[Instance], CardInfo) != HAL_OK)
 c000534:	687a      	ldr	r2, [r7, #4]
 c000536:	4613      	mov	r3, r2
 c000538:	015b      	lsls	r3, r3, #5
 c00053a:	1a9b      	subs	r3, r3, r2
 c00053c:	009b      	lsls	r3, r3, #2
 c00053e:	4a0a      	ldr	r2, [pc, #40]	; (c000568 <BSP_SD_GetCardInfo+0x4c>)
 c000540:	4413      	add	r3, r2
 c000542:	6839      	ldr	r1, [r7, #0]
 c000544:	4618      	mov	r0, r3
 c000546:	f004 fdd5 	bl	c0050f4 <HAL_SD_GetCardInfo>
 c00054a:	4603      	mov	r3, r0
 c00054c:	2b00      	cmp	r3, #0
 c00054e:	d003      	beq.n	c000558 <BSP_SD_GetCardInfo+0x3c>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 c000550:	f06f 0303 	mvn.w	r3, #3
 c000554:	60fb      	str	r3, [r7, #12]
 c000556:	e001      	b.n	c00055c <BSP_SD_GetCardInfo+0x40>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 c000558:	2300      	movs	r3, #0
 c00055a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 c00055c:	68fb      	ldr	r3, [r7, #12]
}
 c00055e:	4618      	mov	r0, r3
 c000560:	3710      	adds	r7, #16
 c000562:	46bd      	mov	sp, r7
 c000564:	bd80      	pop	{r7, pc}
 c000566:	bf00      	nop
 c000568:	30000094 	.word	0x30000094

0c00056c <SD_MspInit>:
  * @brief  Initializes the SD MSP.
  * @param  hsd  SD handle
  * @retval None
  */
static void SD_MspInit(SD_HandleTypeDef *hsd)
{
 c00056c:	b580      	push	{r7, lr}
 c00056e:	b0c2      	sub	sp, #264	; 0x108
 c000570:	af00      	add	r7, sp, #0
 c000572:	f507 7384 	add.w	r3, r7, #264	; 0x108
 c000576:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 c00057a:	6018      	str	r0, [r3, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 c00057c:	2300      	movs	r3, #0
 c00057e:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
  GPIO_InitTypeDef gpioinitstruct = {0};
 c000582:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 c000586:	2200      	movs	r2, #0
 c000588:	601a      	str	r2, [r3, #0]
 c00058a:	605a      	str	r2, [r3, #4]
 c00058c:	609a      	str	r2, [r3, #8]
 c00058e:	60da      	str	r2, [r3, #12]
 c000590:	611a      	str	r2, [r3, #16]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsd);

  /* Check whether HSI48 is enabled or not */
  HAL_RCC_GetOscConfig(&RCC_OscInitStruct);
 c000592:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 c000596:	4618      	mov	r0, r3
 c000598:	f001 feee 	bl	c002378 <HAL_RCC_GetOscConfig>
  if(RCC_OscInitStruct.HSI48State != RCC_HSI48_ON)
 c00059c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 c0005a0:	2b01      	cmp	r3, #1
 c0005a2:	d010      	beq.n	c0005c6 <SD_MspInit+0x5a>
  {
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 c0005a4:	2320      	movs	r3, #32
 c0005a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    RCC_OscInitStruct.HSI48State     = RCC_HSI48_ON;
 c0005aa:	2301      	movs	r3, #1
 c0005ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    RCC_OscInitStruct.PLL.PLLState   = RCC_PLL_NONE;
 c0005b0:	2300      	movs	r3, #0
 c0005b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 c0005b6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 c0005ba:	4618      	mov	r0, r3
 c0005bc:	f000 fff6 	bl	c0015ac <HAL_RCC_OscConfig>
 c0005c0:	4603      	mov	r3, r0
 c0005c2:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
  }

  if (ret == HAL_OK)
 c0005c6:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 c0005ca:	2b00      	cmp	r3, #0
 c0005cc:	d164      	bne.n	c000698 <SD_MspInit+0x12c>
  {
    /* Configure the discovery SDMMC1 clock source. The clock is derived from the HSI48 */
    RCC_PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 c0005ce:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 c0005d2:	617b      	str	r3, [r7, #20]
    RCC_PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_HSI48;
 c0005d4:	2300      	movs	r3, #0
 c0005d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    ret = HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphClkInit);
 c0005da:	f107 0314 	add.w	r3, r7, #20
 c0005de:	4618      	mov	r0, r3
 c0005e0:	f002 f888 	bl	c0026f4 <HAL_RCCEx_PeriphCLKConfig>
 c0005e4:	4603      	mov	r3, r0
 c0005e6:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

    if (ret == HAL_OK)
 c0005ea:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 c0005ee:	2b00      	cmp	r3, #0
 c0005f0:	d152      	bne.n	c000698 <SD_MspInit+0x12c>
    {
      /* Enable SDMMC1 clock */
      __HAL_RCC_SDMMC1_CLK_ENABLE();
 c0005f2:	4b2c      	ldr	r3, [pc, #176]	; (c0006a4 <SD_MspInit+0x138>)
 c0005f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c0005f6:	4a2b      	ldr	r2, [pc, #172]	; (c0006a4 <SD_MspInit+0x138>)
 c0005f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 c0005fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 c0005fe:	4b29      	ldr	r3, [pc, #164]	; (c0006a4 <SD_MspInit+0x138>)
 c000600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000602:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 c000606:	613b      	str	r3, [r7, #16]
 c000608:	693b      	ldr	r3, [r7, #16]

      /* Enable GPIOs clock */
      __HAL_RCC_GPIOC_CLK_ENABLE();
 c00060a:	4b26      	ldr	r3, [pc, #152]	; (c0006a4 <SD_MspInit+0x138>)
 c00060c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c00060e:	4a25      	ldr	r2, [pc, #148]	; (c0006a4 <SD_MspInit+0x138>)
 c000610:	f043 0304 	orr.w	r3, r3, #4
 c000614:	64d3      	str	r3, [r2, #76]	; 0x4c
 c000616:	4b23      	ldr	r3, [pc, #140]	; (c0006a4 <SD_MspInit+0x138>)
 c000618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c00061a:	f003 0304 	and.w	r3, r3, #4
 c00061e:	60fb      	str	r3, [r7, #12]
 c000620:	68fb      	ldr	r3, [r7, #12]
      __HAL_RCC_GPIOD_CLK_ENABLE();
 c000622:	4b20      	ldr	r3, [pc, #128]	; (c0006a4 <SD_MspInit+0x138>)
 c000624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000626:	4a1f      	ldr	r2, [pc, #124]	; (c0006a4 <SD_MspInit+0x138>)
 c000628:	f043 0308 	orr.w	r3, r3, #8
 c00062c:	64d3      	str	r3, [r2, #76]	; 0x4c
 c00062e:	4b1d      	ldr	r3, [pc, #116]	; (c0006a4 <SD_MspInit+0x138>)
 c000630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000632:	f003 0208 	and.w	r2, r3, #8
 c000636:	f507 7384 	add.w	r3, r7, #264	; 0x108
 c00063a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 c00063e:	601a      	str	r2, [r3, #0]
 c000640:	f507 7384 	add.w	r3, r7, #264	; 0x108
 c000644:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 c000648:	681b      	ldr	r3, [r3, #0]

      /* Common GPIO configuration */
      gpioinitstruct.Mode      = GPIO_MODE_AF_PP;
 c00064a:	2302      	movs	r3, #2
 c00064c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
      gpioinitstruct.Pull      = GPIO_PULLUP;
 c000650:	2301      	movs	r3, #1
 c000652:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
      gpioinitstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 c000656:	2303      	movs	r3, #3
 c000658:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
      gpioinitstruct.Alternate = GPIO_AF12_SDMMC1;
 c00065c:	230c      	movs	r3, #12
 c00065e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

      /* GPIOC configuration */
      gpioinitstruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 c000662:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 c000666:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
      HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 c00066a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 c00066e:	4619      	mov	r1, r3
 c000670:	480d      	ldr	r0, [pc, #52]	; (c0006a8 <SD_MspInit+0x13c>)
 c000672:	f000 fb77 	bl	c000d64 <HAL_GPIO_Init>

      /* GPIOD configuration */
      gpioinitstruct.Pin = GPIO_PIN_2;
 c000676:	2304      	movs	r3, #4
 c000678:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
      HAL_GPIO_Init(GPIOD, &gpioinitstruct);
 c00067c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 c000680:	4619      	mov	r1, r3
 c000682:	480a      	ldr	r0, [pc, #40]	; (c0006ac <SD_MspInit+0x140>)
 c000684:	f000 fb6e 	bl	c000d64 <HAL_GPIO_Init>

      /* NVIC configuration for SDMMC1 interrupts */
      HAL_NVIC_SetPriority(SDMMCx_IRQn, BSP_SD_IT_PRIORITY, 0);
 c000688:	2200      	movs	r2, #0
 c00068a:	2107      	movs	r1, #7
 c00068c:	204e      	movs	r0, #78	; 0x4e
 c00068e:	f000 fb26 	bl	c000cde <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(SDMMCx_IRQn);
 c000692:	204e      	movs	r0, #78	; 0x4e
 c000694:	f000 fb3d 	bl	c000d12 <HAL_NVIC_EnableIRQ>
    }
  }
}
 c000698:	bf00      	nop
 c00069a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 c00069e:	46bd      	mov	sp, r7
 c0006a0:	bd80      	pop	{r7, pc}
 c0006a2:	bf00      	nop
 c0006a4:	50021000 	.word	0x50021000
 c0006a8:	52020800 	.word	0x52020800
 c0006ac:	52020c00 	.word	0x52020c00

0c0006b0 <TZ_SAU_Setup>:
  \brief   Setup a SAU Region
  \details Writes the region information contained in SAU_Region to the
           registers SAU_RNR, SAU_RBAR, and SAU_RLAR
 */
__STATIC_INLINE void TZ_SAU_Setup (void)
{
 c0006b0:	b480      	push	{r7}
 c0006b2:	af00      	add	r7, sp, #0

#if defined (__SAUREGION_PRESENT) && (__SAUREGION_PRESENT == 1U)

  #if defined (SAU_INIT_REGION0) && (SAU_INIT_REGION0 == 1U)
    SAU_INIT_REGION(0);
 c0006b4:	4b2f      	ldr	r3, [pc, #188]	; (c000774 <TZ_SAU_Setup+0xc4>)
 c0006b6:	2200      	movs	r2, #0
 c0006b8:	609a      	str	r2, [r3, #8]
 c0006ba:	4b2e      	ldr	r3, [pc, #184]	; (c000774 <TZ_SAU_Setup+0xc4>)
 c0006bc:	4a2e      	ldr	r2, [pc, #184]	; (c000778 <TZ_SAU_Setup+0xc8>)
 c0006be:	60da      	str	r2, [r3, #12]
 c0006c0:	4b2c      	ldr	r3, [pc, #176]	; (c000774 <TZ_SAU_Setup+0xc4>)
 c0006c2:	4a2e      	ldr	r2, [pc, #184]	; (c00077c <TZ_SAU_Setup+0xcc>)
 c0006c4:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION1) && (SAU_INIT_REGION1 == 1U)
    SAU_INIT_REGION(1);
 c0006c6:	4b2b      	ldr	r3, [pc, #172]	; (c000774 <TZ_SAU_Setup+0xc4>)
 c0006c8:	2201      	movs	r2, #1
 c0006ca:	609a      	str	r2, [r3, #8]
 c0006cc:	4b29      	ldr	r3, [pc, #164]	; (c000774 <TZ_SAU_Setup+0xc4>)
 c0006ce:	4a2c      	ldr	r2, [pc, #176]	; (c000780 <TZ_SAU_Setup+0xd0>)
 c0006d0:	60da      	str	r2, [r3, #12]
 c0006d2:	4b28      	ldr	r3, [pc, #160]	; (c000774 <TZ_SAU_Setup+0xc4>)
 c0006d4:	4a2b      	ldr	r2, [pc, #172]	; (c000784 <TZ_SAU_Setup+0xd4>)
 c0006d6:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION2) && (SAU_INIT_REGION2 == 1U)
    SAU_INIT_REGION(2);
 c0006d8:	4b26      	ldr	r3, [pc, #152]	; (c000774 <TZ_SAU_Setup+0xc4>)
 c0006da:	2202      	movs	r2, #2
 c0006dc:	609a      	str	r2, [r3, #8]
 c0006de:	4b25      	ldr	r3, [pc, #148]	; (c000774 <TZ_SAU_Setup+0xc4>)
 c0006e0:	4a29      	ldr	r2, [pc, #164]	; (c000788 <TZ_SAU_Setup+0xd8>)
 c0006e2:	60da      	str	r2, [r3, #12]
 c0006e4:	4b23      	ldr	r3, [pc, #140]	; (c000774 <TZ_SAU_Setup+0xc4>)
 c0006e6:	4a29      	ldr	r2, [pc, #164]	; (c00078c <TZ_SAU_Setup+0xdc>)
 c0006e8:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION3) && (SAU_INIT_REGION3 == 1U)
    SAU_INIT_REGION(3);
 c0006ea:	4b22      	ldr	r3, [pc, #136]	; (c000774 <TZ_SAU_Setup+0xc4>)
 c0006ec:	2203      	movs	r2, #3
 c0006ee:	609a      	str	r2, [r3, #8]
 c0006f0:	4b20      	ldr	r3, [pc, #128]	; (c000774 <TZ_SAU_Setup+0xc4>)
 c0006f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 c0006f6:	60da      	str	r2, [r3, #12]
 c0006f8:	4b1e      	ldr	r3, [pc, #120]	; (c000774 <TZ_SAU_Setup+0xc4>)
 c0006fa:	4a25      	ldr	r2, [pc, #148]	; (c000790 <TZ_SAU_Setup+0xe0>)
 c0006fc:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION4) && (SAU_INIT_REGION4 == 1U)
    SAU_INIT_REGION(4);
 c0006fe:	4b1d      	ldr	r3, [pc, #116]	; (c000774 <TZ_SAU_Setup+0xc4>)
 c000700:	2204      	movs	r2, #4
 c000702:	609a      	str	r2, [r3, #8]
 c000704:	4b1b      	ldr	r3, [pc, #108]	; (c000774 <TZ_SAU_Setup+0xc4>)
 c000706:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 c00070a:	60da      	str	r2, [r3, #12]
 c00070c:	4b19      	ldr	r3, [pc, #100]	; (c000774 <TZ_SAU_Setup+0xc4>)
 c00070e:	4a21      	ldr	r2, [pc, #132]	; (c000794 <TZ_SAU_Setup+0xe4>)
 c000710:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION5) && (SAU_INIT_REGION5 == 1U)
    SAU_INIT_REGION(5);
 c000712:	4b18      	ldr	r3, [pc, #96]	; (c000774 <TZ_SAU_Setup+0xc4>)
 c000714:	2205      	movs	r2, #5
 c000716:	609a      	str	r2, [r3, #8]
 c000718:	4b16      	ldr	r3, [pc, #88]	; (c000774 <TZ_SAU_Setup+0xc4>)
 c00071a:	4a1f      	ldr	r2, [pc, #124]	; (c000798 <TZ_SAU_Setup+0xe8>)
 c00071c:	60da      	str	r2, [r3, #12]
 c00071e:	4b15      	ldr	r3, [pc, #84]	; (c000774 <TZ_SAU_Setup+0xc4>)
 c000720:	4a1e      	ldr	r2, [pc, #120]	; (c00079c <TZ_SAU_Setup+0xec>)
 c000722:	611a      	str	r2, [r3, #16]

#endif /* defined (__SAUREGION_PRESENT) && (__SAUREGION_PRESENT == 1U) */


  #if defined (SAU_INIT_CTRL) && (SAU_INIT_CTRL == 1U)
    SAU->CTRL = ((SAU_INIT_CTRL_ENABLE << SAU_CTRL_ENABLE_Pos) & SAU_CTRL_ENABLE_Msk) |
 c000724:	4b13      	ldr	r3, [pc, #76]	; (c000774 <TZ_SAU_Setup+0xc4>)
 c000726:	2201      	movs	r2, #1
 c000728:	601a      	str	r2, [r3, #0]
  #endif /* defined (SCB_CSR_AIRCR_INIT) && (SCB_CSR_AIRCR_INIT == 1U) */

  #if defined (__FPU_USED) && (__FPU_USED == 1U) && \
      defined (TZ_FPU_NS_USAGE) && (TZ_FPU_NS_USAGE == 1U)

    SCB->NSACR = (SCB->NSACR & ~(SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk)) |
 c00072a:	4b1d      	ldr	r3, [pc, #116]	; (c0007a0 <TZ_SAU_Setup+0xf0>)
 c00072c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c000730:	4a1b      	ldr	r2, [pc, #108]	; (c0007a0 <TZ_SAU_Setup+0xf0>)
 c000732:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 c000736:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                   ((SCB_NSACR_CP10_11_VAL << SCB_NSACR_CP10_Pos) & (SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk));

    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c00073a:	4b1a      	ldr	r3, [pc, #104]	; (c0007a4 <TZ_SAU_Setup+0xf4>)
 c00073c:	685b      	ldr	r3, [r3, #4]
                   ((FPU_FPCCR_TS_VAL        << FPU_FPCCR_TS_Pos       ) & FPU_FPCCR_TS_Msk       ) |
 c00073e:	f023 53e0 	bic.w	r3, r3, #469762048	; 0x1c000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c000742:	4a18      	ldr	r2, [pc, #96]	; (c0007a4 <TZ_SAU_Setup+0xf4>)
                   ((FPU_FPCCR_CLRONRETS_VAL << FPU_FPCCR_CLRONRETS_Pos) & FPU_FPCCR_CLRONRETS_Msk) |
 c000744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c000748:	6053      	str	r3, [r2, #4]
                   ((FPU_FPCCR_CLRONRET_VAL  << FPU_FPCCR_CLRONRET_Pos ) & FPU_FPCCR_CLRONRET_Msk );
  #endif

  #if defined (NVIC_INIT_ITNS0) && (NVIC_INIT_ITNS0 == 1U)
    NVIC->ITNS[0] = NVIC_INIT_ITNS0_VAL;
 c00074a:	4b17      	ldr	r3, [pc, #92]	; (c0007a8 <TZ_SAU_Setup+0xf8>)
 c00074c:	2200      	movs	r2, #0
 c00074e:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
  #endif

  #if defined (NVIC_INIT_ITNS1) && (NVIC_INIT_ITNS1 == 1U)
    NVIC->ITNS[1] = NVIC_INIT_ITNS1_VAL;
 c000752:	4b15      	ldr	r3, [pc, #84]	; (c0007a8 <TZ_SAU_Setup+0xf8>)
 c000754:	2200      	movs	r2, #0
 c000756:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
  #endif

  #if defined (NVIC_INIT_ITNS2) && (NVIC_INIT_ITNS2 == 1U)
    NVIC->ITNS[2] = NVIC_INIT_ITNS2_VAL;
 c00075a:	4b13      	ldr	r3, [pc, #76]	; (c0007a8 <TZ_SAU_Setup+0xf8>)
 c00075c:	2240      	movs	r2, #64	; 0x40
 c00075e:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  #endif

  #if defined (NVIC_INIT_ITNS3) && (NVIC_INIT_ITNS3 == 1U)
    NVIC->ITNS[3] = NVIC_INIT_ITNS3_VAL;
 c000762:	4b11      	ldr	r3, [pc, #68]	; (c0007a8 <TZ_SAU_Setup+0xf8>)
 c000764:	2200      	movs	r2, #0
 c000766:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  #endif

}
 c00076a:	bf00      	nop
 c00076c:	46bd      	mov	sp, r7
 c00076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000772:	4770      	bx	lr
 c000774:	e000edd0 	.word	0xe000edd0
 c000778:	0c03e000 	.word	0x0c03e000
 c00077c:	0c03ffe3 	.word	0x0c03ffe3
 c000780:	08040000 	.word	0x08040000
 c000784:	0807ffe1 	.word	0x0807ffe1
 c000788:	20018000 	.word	0x20018000
 c00078c:	2003ffe1 	.word	0x2003ffe1
 c000790:	4fffffe1 	.word	0x4fffffe1
 c000794:	9fffffe1 	.word	0x9fffffe1
 c000798:	0bf90000 	.word	0x0bf90000
 c00079c:	0bfa8fe1 	.word	0x0bfa8fe1
 c0007a0:	e000ed00 	.word	0xe000ed00
 c0007a4:	e000ef30 	.word	0xe000ef30
 c0007a8:	e000e100 	.word	0xe000e100

0c0007ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 c0007ac:	b580      	push	{r7, lr}
 c0007ae:	af00      	add	r7, sp, #0
  /* SAU/IDAU, FPU and Interrupts secure/non-secure allocation settings */
  TZ_SAU_Setup();
 c0007b0:	f7ff ff7e 	bl	c0006b0 <TZ_SAU_Setup>
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 c0007b4:	4b08      	ldr	r3, [pc, #32]	; (c0007d8 <SystemInit+0x2c>)
 c0007b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0007ba:	4a07      	ldr	r2, [pc, #28]	; (c0007d8 <SystemInit+0x2c>)
 c0007bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 c0007c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  SCB_NS->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 c0007c4:	4b05      	ldr	r3, [pc, #20]	; (c0007dc <SystemInit+0x30>)
 c0007c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0007ca:	4a04      	ldr	r2, [pc, #16]	; (c0007dc <SystemInit+0x30>)
 c0007cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 c0007d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 c0007d4:	bf00      	nop
 c0007d6:	bd80      	pop	{r7, pc}
 c0007d8:	e000ed00 	.word	0xe000ed00
 c0007dc:	e002ed00 	.word	0xe002ed00

0c0007e0 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 c0007e0:	b480      	push	{r7}
 c0007e2:	b087      	sub	sp, #28
 c0007e4:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 c0007e6:	4b4f      	ldr	r3, [pc, #316]	; (c000924 <SystemCoreClockUpdate+0x144>)
 c0007e8:	681b      	ldr	r3, [r3, #0]
 c0007ea:	f003 0308 	and.w	r3, r3, #8
 c0007ee:	2b00      	cmp	r3, #0
 c0007f0:	d107      	bne.n	c000802 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 c0007f2:	4b4c      	ldr	r3, [pc, #304]	; (c000924 <SystemCoreClockUpdate+0x144>)
 c0007f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c0007f8:	0a1b      	lsrs	r3, r3, #8
 c0007fa:	f003 030f 	and.w	r3, r3, #15
 c0007fe:	617b      	str	r3, [r7, #20]
 c000800:	e005      	b.n	c00080e <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 c000802:	4b48      	ldr	r3, [pc, #288]	; (c000924 <SystemCoreClockUpdate+0x144>)
 c000804:	681b      	ldr	r3, [r3, #0]
 c000806:	091b      	lsrs	r3, r3, #4
 c000808:	f003 030f 	and.w	r3, r3, #15
 c00080c:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 c00080e:	4a46      	ldr	r2, [pc, #280]	; (c000928 <SystemCoreClockUpdate+0x148>)
 c000810:	697b      	ldr	r3, [r7, #20]
 c000812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c000816:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 c000818:	4b42      	ldr	r3, [pc, #264]	; (c000924 <SystemCoreClockUpdate+0x144>)
 c00081a:	689b      	ldr	r3, [r3, #8]
 c00081c:	f003 030c 	and.w	r3, r3, #12
 c000820:	2b0c      	cmp	r3, #12
 c000822:	d866      	bhi.n	c0008f2 <SystemCoreClockUpdate+0x112>
 c000824:	a201      	add	r2, pc, #4	; (adr r2, c00082c <SystemCoreClockUpdate+0x4c>)
 c000826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c00082a:	bf00      	nop
 c00082c:	0c000861 	.word	0x0c000861
 c000830:	0c0008f3 	.word	0x0c0008f3
 c000834:	0c0008f3 	.word	0x0c0008f3
 c000838:	0c0008f3 	.word	0x0c0008f3
 c00083c:	0c000869 	.word	0x0c000869
 c000840:	0c0008f3 	.word	0x0c0008f3
 c000844:	0c0008f3 	.word	0x0c0008f3
 c000848:	0c0008f3 	.word	0x0c0008f3
 c00084c:	0c000871 	.word	0x0c000871
 c000850:	0c0008f3 	.word	0x0c0008f3
 c000854:	0c0008f3 	.word	0x0c0008f3
 c000858:	0c0008f3 	.word	0x0c0008f3
 c00085c:	0c000879 	.word	0x0c000879
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 c000860:	4a32      	ldr	r2, [pc, #200]	; (c00092c <SystemCoreClockUpdate+0x14c>)
 c000862:	697b      	ldr	r3, [r7, #20]
 c000864:	6013      	str	r3, [r2, #0]
      break;
 c000866:	e048      	b.n	c0008fa <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 c000868:	4b30      	ldr	r3, [pc, #192]	; (c00092c <SystemCoreClockUpdate+0x14c>)
 c00086a:	4a31      	ldr	r2, [pc, #196]	; (c000930 <SystemCoreClockUpdate+0x150>)
 c00086c:	601a      	str	r2, [r3, #0]
      break;
 c00086e:	e044      	b.n	c0008fa <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 c000870:	4b2e      	ldr	r3, [pc, #184]	; (c00092c <SystemCoreClockUpdate+0x14c>)
 c000872:	4a2f      	ldr	r2, [pc, #188]	; (c000930 <SystemCoreClockUpdate+0x150>)
 c000874:	601a      	str	r2, [r3, #0]
      break;
 c000876:	e040      	b.n	c0008fa <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 c000878:	4b2a      	ldr	r3, [pc, #168]	; (c000924 <SystemCoreClockUpdate+0x144>)
 c00087a:	68db      	ldr	r3, [r3, #12]
 c00087c:	f003 0303 	and.w	r3, r3, #3
 c000880:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 c000882:	4b28      	ldr	r3, [pc, #160]	; (c000924 <SystemCoreClockUpdate+0x144>)
 c000884:	68db      	ldr	r3, [r3, #12]
 c000886:	091b      	lsrs	r3, r3, #4
 c000888:	f003 030f 	and.w	r3, r3, #15
 c00088c:	3301      	adds	r3, #1
 c00088e:	60bb      	str	r3, [r7, #8]
 c000890:	68fb      	ldr	r3, [r7, #12]
 c000892:	2b02      	cmp	r3, #2
 c000894:	d003      	beq.n	c00089e <SystemCoreClockUpdate+0xbe>
 c000896:	68fb      	ldr	r3, [r7, #12]
 c000898:	2b03      	cmp	r3, #3
 c00089a:	d006      	beq.n	c0008aa <SystemCoreClockUpdate+0xca>
 c00089c:	e00b      	b.n	c0008b6 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 c00089e:	4a24      	ldr	r2, [pc, #144]	; (c000930 <SystemCoreClockUpdate+0x150>)
 c0008a0:	68bb      	ldr	r3, [r7, #8]
 c0008a2:	fbb2 f3f3 	udiv	r3, r2, r3
 c0008a6:	613b      	str	r3, [r7, #16]
          break;
 c0008a8:	e00b      	b.n	c0008c2 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 c0008aa:	4a21      	ldr	r2, [pc, #132]	; (c000930 <SystemCoreClockUpdate+0x150>)
 c0008ac:	68bb      	ldr	r3, [r7, #8]
 c0008ae:	fbb2 f3f3 	udiv	r3, r2, r3
 c0008b2:	613b      	str	r3, [r7, #16]
          break;
 c0008b4:	e005      	b.n	c0008c2 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 c0008b6:	697a      	ldr	r2, [r7, #20]
 c0008b8:	68bb      	ldr	r3, [r7, #8]
 c0008ba:	fbb2 f3f3 	udiv	r3, r2, r3
 c0008be:	613b      	str	r3, [r7, #16]
          break;
 c0008c0:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 c0008c2:	4b18      	ldr	r3, [pc, #96]	; (c000924 <SystemCoreClockUpdate+0x144>)
 c0008c4:	68db      	ldr	r3, [r3, #12]
 c0008c6:	0a1b      	lsrs	r3, r3, #8
 c0008c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 c0008cc:	693b      	ldr	r3, [r7, #16]
 c0008ce:	fb02 f303 	mul.w	r3, r2, r3
 c0008d2:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 c0008d4:	4b13      	ldr	r3, [pc, #76]	; (c000924 <SystemCoreClockUpdate+0x144>)
 c0008d6:	68db      	ldr	r3, [r3, #12]
 c0008d8:	0e5b      	lsrs	r3, r3, #25
 c0008da:	f003 0303 	and.w	r3, r3, #3
 c0008de:	3301      	adds	r3, #1
 c0008e0:	005b      	lsls	r3, r3, #1
 c0008e2:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 c0008e4:	693a      	ldr	r2, [r7, #16]
 c0008e6:	687b      	ldr	r3, [r7, #4]
 c0008e8:	fbb2 f3f3 	udiv	r3, r2, r3
 c0008ec:	4a0f      	ldr	r2, [pc, #60]	; (c00092c <SystemCoreClockUpdate+0x14c>)
 c0008ee:	6013      	str	r3, [r2, #0]
      break;
 c0008f0:	e003      	b.n	c0008fa <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 c0008f2:	4a0e      	ldr	r2, [pc, #56]	; (c00092c <SystemCoreClockUpdate+0x14c>)
 c0008f4:	697b      	ldr	r3, [r7, #20]
 c0008f6:	6013      	str	r3, [r2, #0]
      break;
 c0008f8:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 c0008fa:	4b0a      	ldr	r3, [pc, #40]	; (c000924 <SystemCoreClockUpdate+0x144>)
 c0008fc:	689b      	ldr	r3, [r3, #8]
 c0008fe:	091b      	lsrs	r3, r3, #4
 c000900:	f003 030f 	and.w	r3, r3, #15
 c000904:	4a0b      	ldr	r2, [pc, #44]	; (c000934 <SystemCoreClockUpdate+0x154>)
 c000906:	5cd3      	ldrb	r3, [r2, r3]
 c000908:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 c00090a:	4b08      	ldr	r3, [pc, #32]	; (c00092c <SystemCoreClockUpdate+0x14c>)
 c00090c:	681a      	ldr	r2, [r3, #0]
 c00090e:	683b      	ldr	r3, [r7, #0]
 c000910:	fa22 f303 	lsr.w	r3, r2, r3
 c000914:	4a05      	ldr	r2, [pc, #20]	; (c00092c <SystemCoreClockUpdate+0x14c>)
 c000916:	6013      	str	r3, [r2, #0]
}
 c000918:	bf00      	nop
 c00091a:	371c      	adds	r7, #28
 c00091c:	46bd      	mov	sp, r7
 c00091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000922:	4770      	bx	lr
 c000924:	50021000 	.word	0x50021000
 c000928:	0c00bb8c 	.word	0x0c00bb8c
 c00092c:	30000008 	.word	0x30000008
 c000930:	00f42400 	.word	0x00f42400
 c000934:	0c00bb74 	.word	0x0c00bb74

0c000938 <__acle_se_SECURE_SystemCoreClockUpdate>:
  *         be used by the user application to setup the SysTick timer or configure
  *         other parameters.
  * @retval SystemCoreClock value (HCLK)
  */
CMSE_NS_ENTRY uint32_t SECURE_SystemCoreClockUpdate(void)
{
 c000938:	b580      	push	{r7, lr}
 c00093a:	af00      	add	r7, sp, #0
  SystemCoreClockUpdate();
 c00093c:	f7ff ff50 	bl	c0007e0 <SystemCoreClockUpdate>
  
  return SystemCoreClock;
 c000940:	4b1c      	ldr	r3, [pc, #112]	; (c0009b4 <__acle_se_SECURE_SystemCoreClockUpdate+0x7c>)
 c000942:	681b      	ldr	r3, [r3, #0]
}
 c000944:	4618      	mov	r0, r3
 c000946:	46bd      	mov	sp, r7
 c000948:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c00094c:	4671      	mov	r1, lr
 c00094e:	4672      	mov	r2, lr
 c000950:	4673      	mov	r3, lr
 c000952:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c000956:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c00095a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c00095e:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c000962:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c000966:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c00096a:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c00096e:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c000972:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c000976:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c00097a:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c00097e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c000982:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c000986:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c00098a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c00098e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c000992:	f38e 8c00 	msr	CPSR_fs, lr
 c000996:	b410      	push	{r4}
 c000998:	eef1 ca10 	vmrs	ip, fpscr
 c00099c:	f64f 7460 	movw	r4, #65376	; 0xff60
 c0009a0:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c0009a4:	ea0c 0c04 	and.w	ip, ip, r4
 c0009a8:	eee1 ca10 	vmsr	fpscr, ip
 c0009ac:	bc10      	pop	{r4}
 c0009ae:	46f4      	mov	ip, lr
 c0009b0:	4774      	bxns	lr
 c0009b2:	bf00      	nop
 c0009b4:	30000008 	.word	0x30000008

0c0009b8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 c0009b8:	b580      	push	{r7, lr}
 c0009ba:	b082      	sub	sp, #8
 c0009bc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 c0009be:	2300      	movs	r3, #0
 c0009c0:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 c0009c2:	2004      	movs	r0, #4
 c0009c4:	f000 f980 	bl	c000cc8 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 c0009c8:	f7ff ff0a 	bl	c0007e0 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 c0009cc:	2007      	movs	r0, #7
 c0009ce:	f000 f80d 	bl	c0009ec <HAL_InitTick>
 c0009d2:	4603      	mov	r3, r0
 c0009d4:	2b00      	cmp	r3, #0
 c0009d6:	d002      	beq.n	c0009de <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 c0009d8:	2301      	movs	r3, #1
 c0009da:	71fb      	strb	r3, [r7, #7]
 c0009dc:	e001      	b.n	c0009e2 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 c0009de:	f007 f9ef 	bl	c007dc0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 c0009e2:	79fb      	ldrb	r3, [r7, #7]
}
 c0009e4:	4618      	mov	r0, r3
 c0009e6:	3708      	adds	r7, #8
 c0009e8:	46bd      	mov	sp, r7
 c0009ea:	bd80      	pop	{r7, pc}

0c0009ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 c0009ec:	b580      	push	{r7, lr}
 c0009ee:	b084      	sub	sp, #16
 c0009f0:	af00      	add	r7, sp, #0
 c0009f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 c0009f4:	2300      	movs	r3, #0
 c0009f6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 c0009f8:	4b17      	ldr	r3, [pc, #92]	; (c000a58 <HAL_InitTick+0x6c>)
 c0009fa:	781b      	ldrb	r3, [r3, #0]
 c0009fc:	2b00      	cmp	r3, #0
 c0009fe:	d023      	beq.n	c000a48 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 c000a00:	4b16      	ldr	r3, [pc, #88]	; (c000a5c <HAL_InitTick+0x70>)
 c000a02:	681a      	ldr	r2, [r3, #0]
 c000a04:	4b14      	ldr	r3, [pc, #80]	; (c000a58 <HAL_InitTick+0x6c>)
 c000a06:	781b      	ldrb	r3, [r3, #0]
 c000a08:	4619      	mov	r1, r3
 c000a0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 c000a0e:	fbb3 f3f1 	udiv	r3, r3, r1
 c000a12:	fbb2 f3f3 	udiv	r3, r2, r3
 c000a16:	4618      	mov	r0, r3
 c000a18:	f000 f989 	bl	c000d2e <HAL_SYSTICK_Config>
 c000a1c:	4603      	mov	r3, r0
 c000a1e:	2b00      	cmp	r3, #0
 c000a20:	d10f      	bne.n	c000a42 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 c000a22:	687b      	ldr	r3, [r7, #4]
 c000a24:	2b07      	cmp	r3, #7
 c000a26:	d809      	bhi.n	c000a3c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 c000a28:	2200      	movs	r2, #0
 c000a2a:	6879      	ldr	r1, [r7, #4]
 c000a2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 c000a30:	f000 f955 	bl	c000cde <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 c000a34:	4a0a      	ldr	r2, [pc, #40]	; (c000a60 <HAL_InitTick+0x74>)
 c000a36:	687b      	ldr	r3, [r7, #4]
 c000a38:	6013      	str	r3, [r2, #0]
 c000a3a:	e007      	b.n	c000a4c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 c000a3c:	2301      	movs	r3, #1
 c000a3e:	73fb      	strb	r3, [r7, #15]
 c000a40:	e004      	b.n	c000a4c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 c000a42:	2301      	movs	r3, #1
 c000a44:	73fb      	strb	r3, [r7, #15]
 c000a46:	e001      	b.n	c000a4c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 c000a48:	2301      	movs	r3, #1
 c000a4a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 c000a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 c000a4e:	4618      	mov	r0, r3
 c000a50:	3710      	adds	r7, #16
 c000a52:	46bd      	mov	sp, r7
 c000a54:	bd80      	pop	{r7, pc}
 c000a56:	bf00      	nop
 c000a58:	30000010 	.word	0x30000010
 c000a5c:	30000008 	.word	0x30000008
 c000a60:	3000000c 	.word	0x3000000c

0c000a64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 c000a64:	b480      	push	{r7}
 c000a66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 c000a68:	4b06      	ldr	r3, [pc, #24]	; (c000a84 <HAL_IncTick+0x20>)
 c000a6a:	781b      	ldrb	r3, [r3, #0]
 c000a6c:	461a      	mov	r2, r3
 c000a6e:	4b06      	ldr	r3, [pc, #24]	; (c000a88 <HAL_IncTick+0x24>)
 c000a70:	681b      	ldr	r3, [r3, #0]
 c000a72:	4413      	add	r3, r2
 c000a74:	4a04      	ldr	r2, [pc, #16]	; (c000a88 <HAL_IncTick+0x24>)
 c000a76:	6013      	str	r3, [r2, #0]
}
 c000a78:	bf00      	nop
 c000a7a:	46bd      	mov	sp, r7
 c000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000a80:	4770      	bx	lr
 c000a82:	bf00      	nop
 c000a84:	30000010 	.word	0x30000010
 c000a88:	30000110 	.word	0x30000110

0c000a8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 c000a8c:	b480      	push	{r7}
 c000a8e:	af00      	add	r7, sp, #0
  return uwTick;
 c000a90:	4b03      	ldr	r3, [pc, #12]	; (c000aa0 <HAL_GetTick+0x14>)
 c000a92:	681b      	ldr	r3, [r3, #0]
}
 c000a94:	4618      	mov	r0, r3
 c000a96:	46bd      	mov	sp, r7
 c000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000a9c:	4770      	bx	lr
 c000a9e:	bf00      	nop
 c000aa0:	30000110 	.word	0x30000110

0c000aa4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 c000aa4:	b580      	push	{r7, lr}
 c000aa6:	b084      	sub	sp, #16
 c000aa8:	af00      	add	r7, sp, #0
 c000aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 c000aac:	f7ff ffee 	bl	c000a8c <HAL_GetTick>
 c000ab0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 c000ab2:	687b      	ldr	r3, [r7, #4]
 c000ab4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 c000ab6:	68fb      	ldr	r3, [r7, #12]
 c000ab8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 c000abc:	d005      	beq.n	c000aca <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 c000abe:	4b0a      	ldr	r3, [pc, #40]	; (c000ae8 <HAL_Delay+0x44>)
 c000ac0:	781b      	ldrb	r3, [r3, #0]
 c000ac2:	461a      	mov	r2, r3
 c000ac4:	68fb      	ldr	r3, [r7, #12]
 c000ac6:	4413      	add	r3, r2
 c000ac8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 c000aca:	bf00      	nop
 c000acc:	f7ff ffde 	bl	c000a8c <HAL_GetTick>
 c000ad0:	4602      	mov	r2, r0
 c000ad2:	68bb      	ldr	r3, [r7, #8]
 c000ad4:	1ad3      	subs	r3, r2, r3
 c000ad6:	68fa      	ldr	r2, [r7, #12]
 c000ad8:	429a      	cmp	r2, r3
 c000ada:	d8f7      	bhi.n	c000acc <HAL_Delay+0x28>
  {
  }
}
 c000adc:	bf00      	nop
 c000ade:	bf00      	nop
 c000ae0:	3710      	adds	r7, #16
 c000ae2:	46bd      	mov	sp, r7
 c000ae4:	bd80      	pop	{r7, pc}
 c000ae6:	bf00      	nop
 c000ae8:	30000010 	.word	0x30000010

0c000aec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 c000aec:	b480      	push	{r7}
 c000aee:	b085      	sub	sp, #20
 c000af0:	af00      	add	r7, sp, #0
 c000af2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 c000af4:	687b      	ldr	r3, [r7, #4]
 c000af6:	f003 0307 	and.w	r3, r3, #7
 c000afa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 c000afc:	4b0c      	ldr	r3, [pc, #48]	; (c000b30 <__NVIC_SetPriorityGrouping+0x44>)
 c000afe:	68db      	ldr	r3, [r3, #12]
 c000b00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 c000b02:	68ba      	ldr	r2, [r7, #8]
 c000b04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 c000b08:	4013      	ands	r3, r2
 c000b0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 c000b0c:	68fb      	ldr	r3, [r7, #12]
 c000b0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 c000b10:	68bb      	ldr	r3, [r7, #8]
 c000b12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 c000b14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 c000b18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 c000b1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 c000b1e:	4a04      	ldr	r2, [pc, #16]	; (c000b30 <__NVIC_SetPriorityGrouping+0x44>)
 c000b20:	68bb      	ldr	r3, [r7, #8]
 c000b22:	60d3      	str	r3, [r2, #12]
}
 c000b24:	bf00      	nop
 c000b26:	3714      	adds	r7, #20
 c000b28:	46bd      	mov	sp, r7
 c000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000b2e:	4770      	bx	lr
 c000b30:	e000ed00 	.word	0xe000ed00

0c000b34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 c000b34:	b480      	push	{r7}
 c000b36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 c000b38:	4b04      	ldr	r3, [pc, #16]	; (c000b4c <__NVIC_GetPriorityGrouping+0x18>)
 c000b3a:	68db      	ldr	r3, [r3, #12]
 c000b3c:	0a1b      	lsrs	r3, r3, #8
 c000b3e:	f003 0307 	and.w	r3, r3, #7
}
 c000b42:	4618      	mov	r0, r3
 c000b44:	46bd      	mov	sp, r7
 c000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000b4a:	4770      	bx	lr
 c000b4c:	e000ed00 	.word	0xe000ed00

0c000b50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 c000b50:	b480      	push	{r7}
 c000b52:	b083      	sub	sp, #12
 c000b54:	af00      	add	r7, sp, #0
 c000b56:	4603      	mov	r3, r0
 c000b58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 c000b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c000b5e:	2b00      	cmp	r3, #0
 c000b60:	db0b      	blt.n	c000b7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 c000b62:	79fb      	ldrb	r3, [r7, #7]
 c000b64:	f003 021f 	and.w	r2, r3, #31
 c000b68:	4907      	ldr	r1, [pc, #28]	; (c000b88 <__NVIC_EnableIRQ+0x38>)
 c000b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c000b6e:	095b      	lsrs	r3, r3, #5
 c000b70:	2001      	movs	r0, #1
 c000b72:	fa00 f202 	lsl.w	r2, r0, r2
 c000b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 c000b7a:	bf00      	nop
 c000b7c:	370c      	adds	r7, #12
 c000b7e:	46bd      	mov	sp, r7
 c000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000b84:	4770      	bx	lr
 c000b86:	bf00      	nop
 c000b88:	e000e100 	.word	0xe000e100

0c000b8c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 c000b8c:	b480      	push	{r7}
 c000b8e:	b083      	sub	sp, #12
 c000b90:	af00      	add	r7, sp, #0
 c000b92:	4603      	mov	r3, r0
 c000b94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 c000b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c000b9a:	2b00      	cmp	r3, #0
 c000b9c:	db0c      	blt.n	c000bb8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 c000b9e:	79fb      	ldrb	r3, [r7, #7]
 c000ba0:	f003 021f 	and.w	r2, r3, #31
 c000ba4:	4907      	ldr	r1, [pc, #28]	; (c000bc4 <__NVIC_ClearPendingIRQ+0x38>)
 c000ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c000baa:	095b      	lsrs	r3, r3, #5
 c000bac:	2001      	movs	r0, #1
 c000bae:	fa00 f202 	lsl.w	r2, r0, r2
 c000bb2:	3360      	adds	r3, #96	; 0x60
 c000bb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 c000bb8:	bf00      	nop
 c000bba:	370c      	adds	r7, #12
 c000bbc:	46bd      	mov	sp, r7
 c000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000bc2:	4770      	bx	lr
 c000bc4:	e000e100 	.word	0xe000e100

0c000bc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 c000bc8:	b480      	push	{r7}
 c000bca:	b083      	sub	sp, #12
 c000bcc:	af00      	add	r7, sp, #0
 c000bce:	4603      	mov	r3, r0
 c000bd0:	6039      	str	r1, [r7, #0]
 c000bd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 c000bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c000bd8:	2b00      	cmp	r3, #0
 c000bda:	db0a      	blt.n	c000bf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c000bdc:	683b      	ldr	r3, [r7, #0]
 c000bde:	b2da      	uxtb	r2, r3
 c000be0:	490c      	ldr	r1, [pc, #48]	; (c000c14 <__NVIC_SetPriority+0x4c>)
 c000be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c000be6:	0152      	lsls	r2, r2, #5
 c000be8:	b2d2      	uxtb	r2, r2
 c000bea:	440b      	add	r3, r1
 c000bec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 c000bf0:	e00a      	b.n	c000c08 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c000bf2:	683b      	ldr	r3, [r7, #0]
 c000bf4:	b2da      	uxtb	r2, r3
 c000bf6:	4908      	ldr	r1, [pc, #32]	; (c000c18 <__NVIC_SetPriority+0x50>)
 c000bf8:	79fb      	ldrb	r3, [r7, #7]
 c000bfa:	f003 030f 	and.w	r3, r3, #15
 c000bfe:	3b04      	subs	r3, #4
 c000c00:	0152      	lsls	r2, r2, #5
 c000c02:	b2d2      	uxtb	r2, r2
 c000c04:	440b      	add	r3, r1
 c000c06:	761a      	strb	r2, [r3, #24]
}
 c000c08:	bf00      	nop
 c000c0a:	370c      	adds	r7, #12
 c000c0c:	46bd      	mov	sp, r7
 c000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000c12:	4770      	bx	lr
 c000c14:	e000e100 	.word	0xe000e100
 c000c18:	e000ed00 	.word	0xe000ed00

0c000c1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 c000c1c:	b480      	push	{r7}
 c000c1e:	b089      	sub	sp, #36	; 0x24
 c000c20:	af00      	add	r7, sp, #0
 c000c22:	60f8      	str	r0, [r7, #12]
 c000c24:	60b9      	str	r1, [r7, #8]
 c000c26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 c000c28:	68fb      	ldr	r3, [r7, #12]
 c000c2a:	f003 0307 	and.w	r3, r3, #7
 c000c2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 c000c30:	69fb      	ldr	r3, [r7, #28]
 c000c32:	f1c3 0307 	rsb	r3, r3, #7
 c000c36:	2b03      	cmp	r3, #3
 c000c38:	bf28      	it	cs
 c000c3a:	2303      	movcs	r3, #3
 c000c3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 c000c3e:	69fb      	ldr	r3, [r7, #28]
 c000c40:	3303      	adds	r3, #3
 c000c42:	2b06      	cmp	r3, #6
 c000c44:	d902      	bls.n	c000c4c <NVIC_EncodePriority+0x30>
 c000c46:	69fb      	ldr	r3, [r7, #28]
 c000c48:	3b04      	subs	r3, #4
 c000c4a:	e000      	b.n	c000c4e <NVIC_EncodePriority+0x32>
 c000c4c:	2300      	movs	r3, #0
 c000c4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 c000c50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 c000c54:	69bb      	ldr	r3, [r7, #24]
 c000c56:	fa02 f303 	lsl.w	r3, r2, r3
 c000c5a:	43da      	mvns	r2, r3
 c000c5c:	68bb      	ldr	r3, [r7, #8]
 c000c5e:	401a      	ands	r2, r3
 c000c60:	697b      	ldr	r3, [r7, #20]
 c000c62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 c000c64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 c000c68:	697b      	ldr	r3, [r7, #20]
 c000c6a:	fa01 f303 	lsl.w	r3, r1, r3
 c000c6e:	43d9      	mvns	r1, r3
 c000c70:	687b      	ldr	r3, [r7, #4]
 c000c72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 c000c74:	4313      	orrs	r3, r2
         );
}
 c000c76:	4618      	mov	r0, r3
 c000c78:	3724      	adds	r7, #36	; 0x24
 c000c7a:	46bd      	mov	sp, r7
 c000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000c80:	4770      	bx	lr
	...

0c000c84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 c000c84:	b580      	push	{r7, lr}
 c000c86:	b082      	sub	sp, #8
 c000c88:	af00      	add	r7, sp, #0
 c000c8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 c000c8c:	687b      	ldr	r3, [r7, #4]
 c000c8e:	3b01      	subs	r3, #1
 c000c90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 c000c94:	d301      	bcc.n	c000c9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 c000c96:	2301      	movs	r3, #1
 c000c98:	e00f      	b.n	c000cba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 c000c9a:	4a0a      	ldr	r2, [pc, #40]	; (c000cc4 <SysTick_Config+0x40>)
 c000c9c:	687b      	ldr	r3, [r7, #4]
 c000c9e:	3b01      	subs	r3, #1
 c000ca0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 c000ca2:	2107      	movs	r1, #7
 c000ca4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 c000ca8:	f7ff ff8e 	bl	c000bc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 c000cac:	4b05      	ldr	r3, [pc, #20]	; (c000cc4 <SysTick_Config+0x40>)
 c000cae:	2200      	movs	r2, #0
 c000cb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 c000cb2:	4b04      	ldr	r3, [pc, #16]	; (c000cc4 <SysTick_Config+0x40>)
 c000cb4:	2207      	movs	r2, #7
 c000cb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 c000cb8:	2300      	movs	r3, #0
}
 c000cba:	4618      	mov	r0, r3
 c000cbc:	3708      	adds	r7, #8
 c000cbe:	46bd      	mov	sp, r7
 c000cc0:	bd80      	pop	{r7, pc}
 c000cc2:	bf00      	nop
 c000cc4:	e000e010 	.word	0xe000e010

0c000cc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 c000cc8:	b580      	push	{r7, lr}
 c000cca:	b082      	sub	sp, #8
 c000ccc:	af00      	add	r7, sp, #0
 c000cce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 c000cd0:	6878      	ldr	r0, [r7, #4]
 c000cd2:	f7ff ff0b 	bl	c000aec <__NVIC_SetPriorityGrouping>
}
 c000cd6:	bf00      	nop
 c000cd8:	3708      	adds	r7, #8
 c000cda:	46bd      	mov	sp, r7
 c000cdc:	bd80      	pop	{r7, pc}

0c000cde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 c000cde:	b580      	push	{r7, lr}
 c000ce0:	b086      	sub	sp, #24
 c000ce2:	af00      	add	r7, sp, #0
 c000ce4:	4603      	mov	r3, r0
 c000ce6:	60b9      	str	r1, [r7, #8]
 c000ce8:	607a      	str	r2, [r7, #4]
 c000cea:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 c000cec:	f7ff ff22 	bl	c000b34 <__NVIC_GetPriorityGrouping>
 c000cf0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 c000cf2:	687a      	ldr	r2, [r7, #4]
 c000cf4:	68b9      	ldr	r1, [r7, #8]
 c000cf6:	6978      	ldr	r0, [r7, #20]
 c000cf8:	f7ff ff90 	bl	c000c1c <NVIC_EncodePriority>
 c000cfc:	4602      	mov	r2, r0
 c000cfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 c000d02:	4611      	mov	r1, r2
 c000d04:	4618      	mov	r0, r3
 c000d06:	f7ff ff5f 	bl	c000bc8 <__NVIC_SetPriority>
}
 c000d0a:	bf00      	nop
 c000d0c:	3718      	adds	r7, #24
 c000d0e:	46bd      	mov	sp, r7
 c000d10:	bd80      	pop	{r7, pc}

0c000d12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 c000d12:	b580      	push	{r7, lr}
 c000d14:	b082      	sub	sp, #8
 c000d16:	af00      	add	r7, sp, #0
 c000d18:	4603      	mov	r3, r0
 c000d1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 c000d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c000d20:	4618      	mov	r0, r3
 c000d22:	f7ff ff15 	bl	c000b50 <__NVIC_EnableIRQ>
}
 c000d26:	bf00      	nop
 c000d28:	3708      	adds	r7, #8
 c000d2a:	46bd      	mov	sp, r7
 c000d2c:	bd80      	pop	{r7, pc}

0c000d2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 c000d2e:	b580      	push	{r7, lr}
 c000d30:	b082      	sub	sp, #8
 c000d32:	af00      	add	r7, sp, #0
 c000d34:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 c000d36:	6878      	ldr	r0, [r7, #4]
 c000d38:	f7ff ffa4 	bl	c000c84 <SysTick_Config>
 c000d3c:	4603      	mov	r3, r0
}
 c000d3e:	4618      	mov	r0, r3
 c000d40:	3708      	adds	r7, #8
 c000d42:	46bd      	mov	sp, r7
 c000d44:	bd80      	pop	{r7, pc}

0c000d46 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 c000d46:	b580      	push	{r7, lr}
 c000d48:	b082      	sub	sp, #8
 c000d4a:	af00      	add	r7, sp, #0
 c000d4c:	4603      	mov	r3, r0
 c000d4e:	71fb      	strb	r3, [r7, #7]
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 c000d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c000d54:	4618      	mov	r0, r3
 c000d56:	f7ff ff19 	bl	c000b8c <__NVIC_ClearPendingIRQ>
}
 c000d5a:	bf00      	nop
 c000d5c:	3708      	adds	r7, #8
 c000d5e:	46bd      	mov	sp, r7
 c000d60:	bd80      	pop	{r7, pc}
	...

0c000d64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 c000d64:	b480      	push	{r7}
 c000d66:	b087      	sub	sp, #28
 c000d68:	af00      	add	r7, sp, #0
 c000d6a:	6078      	str	r0, [r7, #4]
 c000d6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 c000d6e:	2300      	movs	r3, #0
 c000d70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 c000d72:	e158      	b.n	c001026 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 c000d74:	683b      	ldr	r3, [r7, #0]
 c000d76:	681a      	ldr	r2, [r3, #0]
 c000d78:	2101      	movs	r1, #1
 c000d7a:	697b      	ldr	r3, [r7, #20]
 c000d7c:	fa01 f303 	lsl.w	r3, r1, r3
 c000d80:	4013      	ands	r3, r2
 c000d82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 c000d84:	68fb      	ldr	r3, [r7, #12]
 c000d86:	2b00      	cmp	r3, #0
 c000d88:	f000 814a 	beq.w	c001020 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 c000d8c:	683b      	ldr	r3, [r7, #0]
 c000d8e:	685b      	ldr	r3, [r3, #4]
 c000d90:	f003 0303 	and.w	r3, r3, #3
 c000d94:	2b01      	cmp	r3, #1
 c000d96:	d005      	beq.n	c000da4 <HAL_GPIO_Init+0x40>
 c000d98:	683b      	ldr	r3, [r7, #0]
 c000d9a:	685b      	ldr	r3, [r3, #4]
 c000d9c:	f003 0303 	and.w	r3, r3, #3
 c000da0:	2b02      	cmp	r3, #2
 c000da2:	d130      	bne.n	c000e06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 c000da4:	687b      	ldr	r3, [r7, #4]
 c000da6:	689b      	ldr	r3, [r3, #8]
 c000da8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 c000daa:	697b      	ldr	r3, [r7, #20]
 c000dac:	005b      	lsls	r3, r3, #1
 c000dae:	2203      	movs	r2, #3
 c000db0:	fa02 f303 	lsl.w	r3, r2, r3
 c000db4:	43db      	mvns	r3, r3
 c000db6:	693a      	ldr	r2, [r7, #16]
 c000db8:	4013      	ands	r3, r2
 c000dba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 c000dbc:	683b      	ldr	r3, [r7, #0]
 c000dbe:	68da      	ldr	r2, [r3, #12]
 c000dc0:	697b      	ldr	r3, [r7, #20]
 c000dc2:	005b      	lsls	r3, r3, #1
 c000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 c000dc8:	693a      	ldr	r2, [r7, #16]
 c000dca:	4313      	orrs	r3, r2
 c000dcc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 c000dce:	687b      	ldr	r3, [r7, #4]
 c000dd0:	693a      	ldr	r2, [r7, #16]
 c000dd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 c000dd4:	687b      	ldr	r3, [r7, #4]
 c000dd6:	685b      	ldr	r3, [r3, #4]
 c000dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 c000dda:	2201      	movs	r2, #1
 c000ddc:	697b      	ldr	r3, [r7, #20]
 c000dde:	fa02 f303 	lsl.w	r3, r2, r3
 c000de2:	43db      	mvns	r3, r3
 c000de4:	693a      	ldr	r2, [r7, #16]
 c000de6:	4013      	ands	r3, r2
 c000de8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 c000dea:	683b      	ldr	r3, [r7, #0]
 c000dec:	685b      	ldr	r3, [r3, #4]
 c000dee:	091b      	lsrs	r3, r3, #4
 c000df0:	f003 0201 	and.w	r2, r3, #1
 c000df4:	697b      	ldr	r3, [r7, #20]
 c000df6:	fa02 f303 	lsl.w	r3, r2, r3
 c000dfa:	693a      	ldr	r2, [r7, #16]
 c000dfc:	4313      	orrs	r3, r2
 c000dfe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 c000e00:	687b      	ldr	r3, [r7, #4]
 c000e02:	693a      	ldr	r2, [r7, #16]
 c000e04:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 c000e06:	683b      	ldr	r3, [r7, #0]
 c000e08:	685b      	ldr	r3, [r3, #4]
 c000e0a:	f003 0303 	and.w	r3, r3, #3
 c000e0e:	2b03      	cmp	r3, #3
 c000e10:	d017      	beq.n	c000e42 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 c000e12:	687b      	ldr	r3, [r7, #4]
 c000e14:	68db      	ldr	r3, [r3, #12]
 c000e16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 c000e18:	697b      	ldr	r3, [r7, #20]
 c000e1a:	005b      	lsls	r3, r3, #1
 c000e1c:	2203      	movs	r2, #3
 c000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 c000e22:	43db      	mvns	r3, r3
 c000e24:	693a      	ldr	r2, [r7, #16]
 c000e26:	4013      	ands	r3, r2
 c000e28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 c000e2a:	683b      	ldr	r3, [r7, #0]
 c000e2c:	689a      	ldr	r2, [r3, #8]
 c000e2e:	697b      	ldr	r3, [r7, #20]
 c000e30:	005b      	lsls	r3, r3, #1
 c000e32:	fa02 f303 	lsl.w	r3, r2, r3
 c000e36:	693a      	ldr	r2, [r7, #16]
 c000e38:	4313      	orrs	r3, r2
 c000e3a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 c000e3c:	687b      	ldr	r3, [r7, #4]
 c000e3e:	693a      	ldr	r2, [r7, #16]
 c000e40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 c000e42:	683b      	ldr	r3, [r7, #0]
 c000e44:	685b      	ldr	r3, [r3, #4]
 c000e46:	f003 0303 	and.w	r3, r3, #3
 c000e4a:	2b02      	cmp	r3, #2
 c000e4c:	d123      	bne.n	c000e96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 c000e4e:	697b      	ldr	r3, [r7, #20]
 c000e50:	08da      	lsrs	r2, r3, #3
 c000e52:	687b      	ldr	r3, [r7, #4]
 c000e54:	3208      	adds	r2, #8
 c000e56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 c000e5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 c000e5c:	697b      	ldr	r3, [r7, #20]
 c000e5e:	f003 0307 	and.w	r3, r3, #7
 c000e62:	009b      	lsls	r3, r3, #2
 c000e64:	220f      	movs	r2, #15
 c000e66:	fa02 f303 	lsl.w	r3, r2, r3
 c000e6a:	43db      	mvns	r3, r3
 c000e6c:	693a      	ldr	r2, [r7, #16]
 c000e6e:	4013      	ands	r3, r2
 c000e70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 c000e72:	683b      	ldr	r3, [r7, #0]
 c000e74:	691a      	ldr	r2, [r3, #16]
 c000e76:	697b      	ldr	r3, [r7, #20]
 c000e78:	f003 0307 	and.w	r3, r3, #7
 c000e7c:	009b      	lsls	r3, r3, #2
 c000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 c000e82:	693a      	ldr	r2, [r7, #16]
 c000e84:	4313      	orrs	r3, r2
 c000e86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 c000e88:	697b      	ldr	r3, [r7, #20]
 c000e8a:	08da      	lsrs	r2, r3, #3
 c000e8c:	687b      	ldr	r3, [r7, #4]
 c000e8e:	3208      	adds	r2, #8
 c000e90:	6939      	ldr	r1, [r7, #16]
 c000e92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 c000e96:	687b      	ldr	r3, [r7, #4]
 c000e98:	681b      	ldr	r3, [r3, #0]
 c000e9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 c000e9c:	697b      	ldr	r3, [r7, #20]
 c000e9e:	005b      	lsls	r3, r3, #1
 c000ea0:	2203      	movs	r2, #3
 c000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 c000ea6:	43db      	mvns	r3, r3
 c000ea8:	693a      	ldr	r2, [r7, #16]
 c000eaa:	4013      	ands	r3, r2
 c000eac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 c000eae:	683b      	ldr	r3, [r7, #0]
 c000eb0:	685b      	ldr	r3, [r3, #4]
 c000eb2:	f003 0203 	and.w	r2, r3, #3
 c000eb6:	697b      	ldr	r3, [r7, #20]
 c000eb8:	005b      	lsls	r3, r3, #1
 c000eba:	fa02 f303 	lsl.w	r3, r2, r3
 c000ebe:	693a      	ldr	r2, [r7, #16]
 c000ec0:	4313      	orrs	r3, r2
 c000ec2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 c000ec4:	687b      	ldr	r3, [r7, #4]
 c000ec6:	693a      	ldr	r2, [r7, #16]
 c000ec8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 c000eca:	683b      	ldr	r3, [r7, #0]
 c000ecc:	685b      	ldr	r3, [r3, #4]
 c000ece:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 c000ed2:	2b00      	cmp	r3, #0
 c000ed4:	f000 80a4 	beq.w	c001020 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 c000ed8:	4a5a      	ldr	r2, [pc, #360]	; (c001044 <HAL_GPIO_Init+0x2e0>)
 c000eda:	697b      	ldr	r3, [r7, #20]
 c000edc:	089b      	lsrs	r3, r3, #2
 c000ede:	3318      	adds	r3, #24
 c000ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c000ee4:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 c000ee6:	697b      	ldr	r3, [r7, #20]
 c000ee8:	f003 0303 	and.w	r3, r3, #3
 c000eec:	00db      	lsls	r3, r3, #3
 c000eee:	220f      	movs	r2, #15
 c000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 c000ef4:	43db      	mvns	r3, r3
 c000ef6:	693a      	ldr	r2, [r7, #16]
 c000ef8:	4013      	ands	r3, r2
 c000efa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 c000efc:	687b      	ldr	r3, [r7, #4]
 c000efe:	4a52      	ldr	r2, [pc, #328]	; (c001048 <HAL_GPIO_Init+0x2e4>)
 c000f00:	4293      	cmp	r3, r2
 c000f02:	d025      	beq.n	c000f50 <HAL_GPIO_Init+0x1ec>
 c000f04:	687b      	ldr	r3, [r7, #4]
 c000f06:	4a51      	ldr	r2, [pc, #324]	; (c00104c <HAL_GPIO_Init+0x2e8>)
 c000f08:	4293      	cmp	r3, r2
 c000f0a:	d01f      	beq.n	c000f4c <HAL_GPIO_Init+0x1e8>
 c000f0c:	687b      	ldr	r3, [r7, #4]
 c000f0e:	4a50      	ldr	r2, [pc, #320]	; (c001050 <HAL_GPIO_Init+0x2ec>)
 c000f10:	4293      	cmp	r3, r2
 c000f12:	d019      	beq.n	c000f48 <HAL_GPIO_Init+0x1e4>
 c000f14:	687b      	ldr	r3, [r7, #4]
 c000f16:	4a4f      	ldr	r2, [pc, #316]	; (c001054 <HAL_GPIO_Init+0x2f0>)
 c000f18:	4293      	cmp	r3, r2
 c000f1a:	d013      	beq.n	c000f44 <HAL_GPIO_Init+0x1e0>
 c000f1c:	687b      	ldr	r3, [r7, #4]
 c000f1e:	4a4e      	ldr	r2, [pc, #312]	; (c001058 <HAL_GPIO_Init+0x2f4>)
 c000f20:	4293      	cmp	r3, r2
 c000f22:	d00d      	beq.n	c000f40 <HAL_GPIO_Init+0x1dc>
 c000f24:	687b      	ldr	r3, [r7, #4]
 c000f26:	4a4d      	ldr	r2, [pc, #308]	; (c00105c <HAL_GPIO_Init+0x2f8>)
 c000f28:	4293      	cmp	r3, r2
 c000f2a:	d007      	beq.n	c000f3c <HAL_GPIO_Init+0x1d8>
 c000f2c:	687b      	ldr	r3, [r7, #4]
 c000f2e:	4a4c      	ldr	r2, [pc, #304]	; (c001060 <HAL_GPIO_Init+0x2fc>)
 c000f30:	4293      	cmp	r3, r2
 c000f32:	d101      	bne.n	c000f38 <HAL_GPIO_Init+0x1d4>
 c000f34:	2306      	movs	r3, #6
 c000f36:	e00c      	b.n	c000f52 <HAL_GPIO_Init+0x1ee>
 c000f38:	2307      	movs	r3, #7
 c000f3a:	e00a      	b.n	c000f52 <HAL_GPIO_Init+0x1ee>
 c000f3c:	2305      	movs	r3, #5
 c000f3e:	e008      	b.n	c000f52 <HAL_GPIO_Init+0x1ee>
 c000f40:	2304      	movs	r3, #4
 c000f42:	e006      	b.n	c000f52 <HAL_GPIO_Init+0x1ee>
 c000f44:	2303      	movs	r3, #3
 c000f46:	e004      	b.n	c000f52 <HAL_GPIO_Init+0x1ee>
 c000f48:	2302      	movs	r3, #2
 c000f4a:	e002      	b.n	c000f52 <HAL_GPIO_Init+0x1ee>
 c000f4c:	2301      	movs	r3, #1
 c000f4e:	e000      	b.n	c000f52 <HAL_GPIO_Init+0x1ee>
 c000f50:	2300      	movs	r3, #0
 c000f52:	697a      	ldr	r2, [r7, #20]
 c000f54:	f002 0203 	and.w	r2, r2, #3
 c000f58:	00d2      	lsls	r2, r2, #3
 c000f5a:	4093      	lsls	r3, r2
 c000f5c:	693a      	ldr	r2, [r7, #16]
 c000f5e:	4313      	orrs	r3, r2
 c000f60:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 c000f62:	4938      	ldr	r1, [pc, #224]	; (c001044 <HAL_GPIO_Init+0x2e0>)
 c000f64:	697b      	ldr	r3, [r7, #20]
 c000f66:	089b      	lsrs	r3, r3, #2
 c000f68:	3318      	adds	r3, #24
 c000f6a:	693a      	ldr	r2, [r7, #16]
 c000f6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 c000f70:	4b34      	ldr	r3, [pc, #208]	; (c001044 <HAL_GPIO_Init+0x2e0>)
 c000f72:	681b      	ldr	r3, [r3, #0]
 c000f74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c000f76:	68fb      	ldr	r3, [r7, #12]
 c000f78:	43db      	mvns	r3, r3
 c000f7a:	693a      	ldr	r2, [r7, #16]
 c000f7c:	4013      	ands	r3, r2
 c000f7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 c000f80:	683b      	ldr	r3, [r7, #0]
 c000f82:	685b      	ldr	r3, [r3, #4]
 c000f84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 c000f88:	2b00      	cmp	r3, #0
 c000f8a:	d003      	beq.n	c000f94 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 c000f8c:	693a      	ldr	r2, [r7, #16]
 c000f8e:	68fb      	ldr	r3, [r7, #12]
 c000f90:	4313      	orrs	r3, r2
 c000f92:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 c000f94:	4a2b      	ldr	r2, [pc, #172]	; (c001044 <HAL_GPIO_Init+0x2e0>)
 c000f96:	693b      	ldr	r3, [r7, #16]
 c000f98:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 c000f9a:	4b2a      	ldr	r3, [pc, #168]	; (c001044 <HAL_GPIO_Init+0x2e0>)
 c000f9c:	685b      	ldr	r3, [r3, #4]
 c000f9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c000fa0:	68fb      	ldr	r3, [r7, #12]
 c000fa2:	43db      	mvns	r3, r3
 c000fa4:	693a      	ldr	r2, [r7, #16]
 c000fa6:	4013      	ands	r3, r2
 c000fa8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 c000faa:	683b      	ldr	r3, [r7, #0]
 c000fac:	685b      	ldr	r3, [r3, #4]
 c000fae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 c000fb2:	2b00      	cmp	r3, #0
 c000fb4:	d003      	beq.n	c000fbe <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 c000fb6:	693a      	ldr	r2, [r7, #16]
 c000fb8:	68fb      	ldr	r3, [r7, #12]
 c000fba:	4313      	orrs	r3, r2
 c000fbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 c000fbe:	4a21      	ldr	r2, [pc, #132]	; (c001044 <HAL_GPIO_Init+0x2e0>)
 c000fc0:	693b      	ldr	r3, [r7, #16]
 c000fc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 c000fc4:	4b1f      	ldr	r3, [pc, #124]	; (c001044 <HAL_GPIO_Init+0x2e0>)
 c000fc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 c000fca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c000fcc:	68fb      	ldr	r3, [r7, #12]
 c000fce:	43db      	mvns	r3, r3
 c000fd0:	693a      	ldr	r2, [r7, #16]
 c000fd2:	4013      	ands	r3, r2
 c000fd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 c000fd6:	683b      	ldr	r3, [r7, #0]
 c000fd8:	685b      	ldr	r3, [r3, #4]
 c000fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c000fde:	2b00      	cmp	r3, #0
 c000fe0:	d003      	beq.n	c000fea <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 c000fe2:	693a      	ldr	r2, [r7, #16]
 c000fe4:	68fb      	ldr	r3, [r7, #12]
 c000fe6:	4313      	orrs	r3, r2
 c000fe8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 c000fea:	4a16      	ldr	r2, [pc, #88]	; (c001044 <HAL_GPIO_Init+0x2e0>)
 c000fec:	693b      	ldr	r3, [r7, #16]
 c000fee:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 c000ff2:	4b14      	ldr	r3, [pc, #80]	; (c001044 <HAL_GPIO_Init+0x2e0>)
 c000ff4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 c000ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c000ffa:	68fb      	ldr	r3, [r7, #12]
 c000ffc:	43db      	mvns	r3, r3
 c000ffe:	693a      	ldr	r2, [r7, #16]
 c001000:	4013      	ands	r3, r2
 c001002:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 c001004:	683b      	ldr	r3, [r7, #0]
 c001006:	685b      	ldr	r3, [r3, #4]
 c001008:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 c00100c:	2b00      	cmp	r3, #0
 c00100e:	d003      	beq.n	c001018 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 c001010:	693a      	ldr	r2, [r7, #16]
 c001012:	68fb      	ldr	r3, [r7, #12]
 c001014:	4313      	orrs	r3, r2
 c001016:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 c001018:	4a0a      	ldr	r2, [pc, #40]	; (c001044 <HAL_GPIO_Init+0x2e0>)
 c00101a:	693b      	ldr	r3, [r7, #16]
 c00101c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 c001020:	697b      	ldr	r3, [r7, #20]
 c001022:	3301      	adds	r3, #1
 c001024:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 c001026:	683b      	ldr	r3, [r7, #0]
 c001028:	681a      	ldr	r2, [r3, #0]
 c00102a:	697b      	ldr	r3, [r7, #20]
 c00102c:	fa22 f303 	lsr.w	r3, r2, r3
 c001030:	2b00      	cmp	r3, #0
 c001032:	f47f ae9f 	bne.w	c000d74 <HAL_GPIO_Init+0x10>
  }
}
 c001036:	bf00      	nop
 c001038:	bf00      	nop
 c00103a:	371c      	adds	r7, #28
 c00103c:	46bd      	mov	sp, r7
 c00103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001042:	4770      	bx	lr
 c001044:	5002f400 	.word	0x5002f400
 c001048:	52020000 	.word	0x52020000
 c00104c:	52020400 	.word	0x52020400
 c001050:	52020800 	.word	0x52020800
 c001054:	52020c00 	.word	0x52020c00
 c001058:	52021000 	.word	0x52021000
 c00105c:	52021400 	.word	0x52021400
 c001060:	52021800 	.word	0x52021800

0c001064 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 c001064:	b480      	push	{r7}
 c001066:	b085      	sub	sp, #20
 c001068:	af00      	add	r7, sp, #0
 c00106a:	6078      	str	r0, [r7, #4]
 c00106c:	460b      	mov	r3, r1
 c00106e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 c001070:	687b      	ldr	r3, [r7, #4]
 c001072:	691a      	ldr	r2, [r3, #16]
 c001074:	887b      	ldrh	r3, [r7, #2]
 c001076:	4013      	ands	r3, r2
 c001078:	2b00      	cmp	r3, #0
 c00107a:	d002      	beq.n	c001082 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 c00107c:	2301      	movs	r3, #1
 c00107e:	73fb      	strb	r3, [r7, #15]
 c001080:	e001      	b.n	c001086 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 c001082:	2300      	movs	r3, #0
 c001084:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 c001086:	7bfb      	ldrb	r3, [r7, #15]
}
 c001088:	4618      	mov	r0, r3
 c00108a:	3714      	adds	r7, #20
 c00108c:	46bd      	mov	sp, r7
 c00108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001092:	4770      	bx	lr

0c001094 <HAL_GPIO_ConfigPinAttributes>:
  * @param  GPIO_Pin specifies the pin(s) to configure the secure attribute
  * @param  PinAttributes specifies the pin(s) to be set in secure mode, other being set non secured.
  * @retval None
  */
void HAL_GPIO_ConfigPinAttributes(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint32_t PinAttributes)
{
 c001094:	b480      	push	{r7}
 c001096:	b089      	sub	sp, #36	; 0x24
 c001098:	af00      	add	r7, sp, #0
 c00109a:	60f8      	str	r0, [r7, #12]
 c00109c:	460b      	mov	r3, r1
 c00109e:	607a      	str	r2, [r7, #4]
 c0010a0:	817b      	strh	r3, [r7, #10]
  uint32_t position = 0U;
 c0010a2:	2300      	movs	r3, #0
 c0010a4:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ATTRIBUTES(PinAttributes));

  temp = GPIOx->SECCFGR;
 c0010a6:	68fb      	ldr	r3, [r7, #12]
 c0010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c0010aa:	61bb      	str	r3, [r7, #24]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 c0010ac:	e01b      	b.n	c0010e6 <HAL_GPIO_ConfigPinAttributes+0x52>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position);
 c0010ae:	897a      	ldrh	r2, [r7, #10]
 c0010b0:	2101      	movs	r1, #1
 c0010b2:	69fb      	ldr	r3, [r7, #28]
 c0010b4:	fa01 f303 	lsl.w	r3, r1, r3
 c0010b8:	4013      	ands	r3, r2
 c0010ba:	617b      	str	r3, [r7, #20]

    if (iocurrent != 0U)
 c0010bc:	697b      	ldr	r3, [r7, #20]
 c0010be:	2b00      	cmp	r3, #0
 c0010c0:	d00e      	beq.n	c0010e0 <HAL_GPIO_ConfigPinAttributes+0x4c>
    {
      /* Configure the IO secure attribute */
      temp &= ~(GPIO_SECCFGR_SEC0 << position) ;
 c0010c2:	2201      	movs	r2, #1
 c0010c4:	69fb      	ldr	r3, [r7, #28]
 c0010c6:	fa02 f303 	lsl.w	r3, r2, r3
 c0010ca:	43db      	mvns	r3, r3
 c0010cc:	69ba      	ldr	r2, [r7, #24]
 c0010ce:	4013      	ands	r3, r2
 c0010d0:	61bb      	str	r3, [r7, #24]
      temp |= (PinAttributes << position);
 c0010d2:	687a      	ldr	r2, [r7, #4]
 c0010d4:	69fb      	ldr	r3, [r7, #28]
 c0010d6:	fa02 f303 	lsl.w	r3, r2, r3
 c0010da:	69ba      	ldr	r2, [r7, #24]
 c0010dc:	4313      	orrs	r3, r2
 c0010de:	61bb      	str	r3, [r7, #24]
    }
    position++;
 c0010e0:	69fb      	ldr	r3, [r7, #28]
 c0010e2:	3301      	adds	r3, #1
 c0010e4:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0U)
 c0010e6:	897a      	ldrh	r2, [r7, #10]
 c0010e8:	69fb      	ldr	r3, [r7, #28]
 c0010ea:	fa42 f303 	asr.w	r3, r2, r3
 c0010ee:	2b00      	cmp	r3, #0
 c0010f0:	d1dd      	bne.n	c0010ae <HAL_GPIO_ConfigPinAttributes+0x1a>
  }

  /* Set secure attributes */
  GPIOx->SECCFGR = temp;
 c0010f2:	68fb      	ldr	r3, [r7, #12]
 c0010f4:	69ba      	ldr	r2, [r7, #24]
 c0010f6:	631a      	str	r2, [r3, #48]	; 0x30
}
 c0010f8:	bf00      	nop
 c0010fa:	3724      	adds	r7, #36	; 0x24
 c0010fc:	46bd      	mov	sp, r7
 c0010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001102:	4770      	bx	lr

0c001104 <HAL_GTZC_MPCBB_ConfigMem>:
  *         The structure description is available in @ref GTZC_Exported_Types.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GTZC_MPCBB_ConfigMem(uint32_t MemBaseAddress,
                                           const MPCBB_ConfigTypeDef *pMPCBB_desc)
{
 c001104:	b480      	push	{r7}
 c001106:	b089      	sub	sp, #36	; 0x24
 c001108:	af00      	add	r7, sp, #0
 c00110a:	6078      	str	r0, [r7, #4]
 c00110c:	6039      	str	r1, [r7, #0]
  uint32_t size_mask;
  uint32_t size_in_superblocks;
  uint32_t i;

  /* check entry parameters */
  if ((!(IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c00110e:	687b      	ldr	r3, [r7, #4]
 c001110:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 c001114:	d00b      	beq.n	c00112e <HAL_GTZC_MPCBB_ConfigMem+0x2a>
 c001116:	687b      	ldr	r3, [r7, #4]
 c001118:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 c00111c:	d007      	beq.n	c00112e <HAL_GTZC_MPCBB_ConfigMem+0x2a>
       &&  !(IS_GTZC_BASE_ADDRESS(SRAM2, MemBaseAddress)))
 c00111e:	687b      	ldr	r3, [r7, #4]
 c001120:	4a36      	ldr	r2, [pc, #216]	; (c0011fc <HAL_GTZC_MPCBB_ConfigMem+0xf8>)
 c001122:	4293      	cmp	r3, r2
 c001124:	d003      	beq.n	c00112e <HAL_GTZC_MPCBB_ConfigMem+0x2a>
 c001126:	687b      	ldr	r3, [r7, #4]
 c001128:	4a35      	ldr	r2, [pc, #212]	; (c001200 <HAL_GTZC_MPCBB_ConfigMem+0xfc>)
 c00112a:	4293      	cmp	r3, r2
 c00112c:	d111      	bne.n	c001152 <HAL_GTZC_MPCBB_ConfigMem+0x4e>
      || ((pMPCBB_desc->SecureRWIllegalMode != GTZC_MPCBB_SRWILADIS_ENABLE)
 c00112e:	683b      	ldr	r3, [r7, #0]
 c001130:	681b      	ldr	r3, [r3, #0]
 c001132:	2b00      	cmp	r3, #0
 c001134:	d004      	beq.n	c001140 <HAL_GTZC_MPCBB_ConfigMem+0x3c>
          && (pMPCBB_desc->SecureRWIllegalMode != GTZC_MPCBB_SRWILADIS_DISABLE))
 c001136:	683b      	ldr	r3, [r7, #0]
 c001138:	681b      	ldr	r3, [r3, #0]
 c00113a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 c00113e:	d108      	bne.n	c001152 <HAL_GTZC_MPCBB_ConfigMem+0x4e>
      || ((pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_NOT_INVERTED)
 c001140:	683b      	ldr	r3, [r7, #0]
 c001142:	685b      	ldr	r3, [r3, #4]
 c001144:	2b00      	cmp	r3, #0
 c001146:	d006      	beq.n	c001156 <HAL_GTZC_MPCBB_ConfigMem+0x52>
          && (pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_INVERTED)))
 c001148:	683b      	ldr	r3, [r7, #0]
 c00114a:	685b      	ldr	r3, [r3, #4]
 c00114c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 c001150:	d001      	beq.n	c001156 <HAL_GTZC_MPCBB_ConfigMem+0x52>
  {
    return HAL_ERROR;
 c001152:	2301      	movs	r3, #1
 c001154:	e04b      	b.n	c0011ee <HAL_GTZC_MPCBB_ConfigMem+0xea>
  }

  /* write InvertSecureState and SecureRWIllegalMode properties */
  /* assume their Position/Mask is identical for all sub-blocks */
  reg_value = pMPCBB_desc->InvertSecureState;
 c001156:	683b      	ldr	r3, [r7, #0]
 c001158:	685b      	ldr	r3, [r3, #4]
 c00115a:	613b      	str	r3, [r7, #16]
  reg_value |= pMPCBB_desc->SecureRWIllegalMode;
 c00115c:	683b      	ldr	r3, [r7, #0]
 c00115e:	681b      	ldr	r3, [r3, #0]
 c001160:	693a      	ldr	r2, [r7, #16]
 c001162:	4313      	orrs	r3, r2
 c001164:	613b      	str	r3, [r7, #16]
  if (IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c001166:	687b      	ldr	r3, [r7, #4]
 c001168:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 c00116c:	d003      	beq.n	c001176 <HAL_GTZC_MPCBB_ConfigMem+0x72>
 c00116e:	687b      	ldr	r3, [r7, #4]
 c001170:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 c001174:	d105      	bne.n	c001182 <HAL_GTZC_MPCBB_ConfigMem+0x7e>
  {
    mpcbb_ptr = GTZC_MPCBB1_S;
 c001176:	4b23      	ldr	r3, [pc, #140]	; (c001204 <HAL_GTZC_MPCBB_ConfigMem+0x100>)
 c001178:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM1);
 c00117a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 c00117e:	61bb      	str	r3, [r7, #24]
 c001180:	e004      	b.n	c00118c <HAL_GTZC_MPCBB_ConfigMem+0x88>
  }
  else
  {
    /* Here MemBaseAddress is inside SRAM2 (already tested) */
    mpcbb_ptr = GTZC_MPCBB2_S;
 c001182:	4b21      	ldr	r3, [pc, #132]	; (c001208 <HAL_GTZC_MPCBB_ConfigMem+0x104>)
 c001184:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM2);
 c001186:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 c00118a:	61bb      	str	r3, [r7, #24]
  }

  /* write vector register information */
  size_in_superblocks = (mem_size / GTZC_MPCBB_SUPERBLOCK_SIZE);
 c00118c:	69bb      	ldr	r3, [r7, #24]
 c00118e:	0b5b      	lsrs	r3, r3, #13
 c001190:	60fb      	str	r3, [r7, #12]
  for (i = 0U; i < size_in_superblocks; i++)
 c001192:	2300      	movs	r3, #0
 c001194:	617b      	str	r3, [r7, #20]
 c001196:	e00c      	b.n	c0011b2 <HAL_GTZC_MPCBB_ConfigMem+0xae>
  {
    WRITE_REG(mpcbb_ptr->VCTR[i],
 c001198:	683b      	ldr	r3, [r7, #0]
 c00119a:	697a      	ldr	r2, [r7, #20]
 c00119c:	3202      	adds	r2, #2
 c00119e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 c0011a2:	69fb      	ldr	r3, [r7, #28]
 c0011a4:	697a      	ldr	r2, [r7, #20]
 c0011a6:	3240      	adds	r2, #64	; 0x40
 c0011a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0U; i < size_in_superblocks; i++)
 c0011ac:	697b      	ldr	r3, [r7, #20]
 c0011ae:	3301      	adds	r3, #1
 c0011b0:	617b      	str	r3, [r7, #20]
 c0011b2:	697a      	ldr	r2, [r7, #20]
 c0011b4:	68fb      	ldr	r3, [r7, #12]
 c0011b6:	429a      	cmp	r2, r3
 c0011b8:	d3ee      	bcc.n	c001198 <HAL_GTZC_MPCBB_ConfigMem+0x94>
              pMPCBB_desc->AttributeConfig.MPCBB_SecConfig_array[i]);
  }

  /* write configuration and lock register information */
  MODIFY_REG(mpcbb_ptr->CR,
 c0011ba:	69fb      	ldr	r3, [r7, #28]
 c0011bc:	681b      	ldr	r3, [r3, #0]
 c0011be:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 c0011c2:	693b      	ldr	r3, [r7, #16]
 c0011c4:	431a      	orrs	r2, r3
 c0011c6:	69fb      	ldr	r3, [r7, #28]
 c0011c8:	601a      	str	r2, [r3, #0]
             GTZC_MPCBB_CR_INVSECSTATE_Msk | GTZC_MPCBB_CR_SRWILADIS_Msk, reg_value);

  size_mask = (1UL << (mem_size / GTZC_MPCBB_SUPERBLOCK_SIZE)) - 1U;
 c0011ca:	69bb      	ldr	r3, [r7, #24]
 c0011cc:	0b5b      	lsrs	r3, r3, #13
 c0011ce:	2201      	movs	r2, #1
 c0011d0:	fa02 f303 	lsl.w	r3, r2, r3
 c0011d4:	3b01      	subs	r3, #1
 c0011d6:	60bb      	str	r3, [r7, #8]
  /* limitation: code not portable with memory > 256K */
  MODIFY_REG(mpcbb_ptr->LCKVTR1, size_mask, pMPCBB_desc->AttributeConfig.MPCBB_LockConfig_array[0]);
 c0011d8:	69fb      	ldr	r3, [r7, #28]
 c0011da:	691a      	ldr	r2, [r3, #16]
 c0011dc:	68bb      	ldr	r3, [r7, #8]
 c0011de:	43db      	mvns	r3, r3
 c0011e0:	401a      	ands	r2, r3
 c0011e2:	683b      	ldr	r3, [r7, #0]
 c0011e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 c0011e6:	431a      	orrs	r2, r3
 c0011e8:	69fb      	ldr	r3, [r7, #28]
 c0011ea:	611a      	str	r2, [r3, #16]

  return HAL_OK;
 c0011ec:	2300      	movs	r3, #0
}
 c0011ee:	4618      	mov	r0, r3
 c0011f0:	3724      	adds	r7, #36	; 0x24
 c0011f2:	46bd      	mov	sp, r7
 c0011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0011f8:	4770      	bx	lr
 c0011fa:	bf00      	nop
 c0011fc:	20030000 	.word	0x20030000
 c001200:	30030000 	.word	0x30030000
 c001204:	50032c00 	.word	0x50032c00
 c001208:	50033000 	.word	0x50033000

0c00120c <HAL_GTZC_TZIC_EnableIT>:
  *         This parameter can be a value of @ref GTZC_TZSC_TZIC_PeriphId.
  *         Use GTZC_PERIPH_ALL to select all peripherals.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GTZC_TZIC_EnableIT(uint32_t PeriphId)
{
 c00120c:	b480      	push	{r7}
 c00120e:	b085      	sub	sp, #20
 c001210:	af00      	add	r7, sp, #0
 c001212:	6078      	str	r0, [r7, #4]
  uint32_t register_address;

  /* check entry parameters */
  if ((HAL_GTZC_GET_ARRAY_INDEX(PeriphId) >= GTZC_TZIC_PERIPH_NUMBER)
 c001214:	687b      	ldr	r3, [r7, #4]
 c001216:	0f1b      	lsrs	r3, r3, #28
 c001218:	015a      	lsls	r2, r3, #5
 c00121a:	687b      	ldr	r3, [r7, #4]
 c00121c:	f003 031f 	and.w	r3, r3, #31
 c001220:	4413      	add	r3, r2
 c001222:	2b47      	cmp	r3, #71	; 0x47
 c001224:	d80d      	bhi.n	c001242 <HAL_GTZC_TZIC_EnableIT+0x36>
      || (((PeriphId & GTZC_PERIPH_ALL) != 0U) && (HAL_GTZC_GET_ARRAY_INDEX(PeriphId) != 0U)))
 c001226:	687b      	ldr	r3, [r7, #4]
 c001228:	f003 0320 	and.w	r3, r3, #32
 c00122c:	2b00      	cmp	r3, #0
 c00122e:	d00a      	beq.n	c001246 <HAL_GTZC_TZIC_EnableIT+0x3a>
 c001230:	687b      	ldr	r3, [r7, #4]
 c001232:	0f1b      	lsrs	r3, r3, #28
 c001234:	015a      	lsls	r2, r3, #5
 c001236:	687b      	ldr	r3, [r7, #4]
 c001238:	f003 031f 	and.w	r3, r3, #31
 c00123c:	4413      	add	r3, r2
 c00123e:	2b00      	cmp	r3, #0
 c001240:	d001      	beq.n	c001246 <HAL_GTZC_TZIC_EnableIT+0x3a>
  {
    return HAL_ERROR;
 c001242:	2301      	movs	r3, #1
 c001244:	e023      	b.n	c00128e <HAL_GTZC_TZIC_EnableIT+0x82>
  }

  if ((PeriphId & GTZC_PERIPH_ALL) != 0U)
 c001246:	687b      	ldr	r3, [r7, #4]
 c001248:	f003 0320 	and.w	r3, r3, #32
 c00124c:	2b00      	cmp	r3, #0
 c00124e:	d00b      	beq.n	c001268 <HAL_GTZC_TZIC_EnableIT+0x5c>
  {
    /* same configuration is applied to all peripherals */
    WRITE_REG(GTZC_TZIC->IER1, TZIC_IER1_ALL);
 c001250:	4b12      	ldr	r3, [pc, #72]	; (c00129c <HAL_GTZC_TZIC_EnableIT+0x90>)
 c001252:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 c001256:	601a      	str	r2, [r3, #0]
    WRITE_REG(GTZC_TZIC->IER2, TZIC_IER2_ALL);
 c001258:	4b10      	ldr	r3, [pc, #64]	; (c00129c <HAL_GTZC_TZIC_EnableIT+0x90>)
 c00125a:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 c00125e:	605a      	str	r2, [r3, #4]
    WRITE_REG(GTZC_TZIC->IER3, TZIC_IER3_ALL);
 c001260:	4b0e      	ldr	r3, [pc, #56]	; (c00129c <HAL_GTZC_TZIC_EnableIT+0x90>)
 c001262:	22ff      	movs	r2, #255	; 0xff
 c001264:	609a      	str	r2, [r3, #8]
 c001266:	e011      	b.n	c00128c <HAL_GTZC_TZIC_EnableIT+0x80>
  }
  else
  {
    /* common case where only one peripheral is configured */
    register_address = (uint32_t) &(GTZC_TZIC->IER1) + (4U * GTZC_GET_REG_INDEX(PeriphId));
 c001268:	687b      	ldr	r3, [r7, #4]
 c00126a:	0f1b      	lsrs	r3, r3, #28
 c00126c:	f103 53a0 	add.w	r3, r3, #335544320	; 0x14000000
 c001270:	f503 434a 	add.w	r3, r3, #51712	; 0xca00
 c001274:	009b      	lsls	r3, r3, #2
 c001276:	60fb      	str	r3, [r7, #12]
    SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c001278:	68fb      	ldr	r3, [r7, #12]
 c00127a:	6819      	ldr	r1, [r3, #0]
 c00127c:	687b      	ldr	r3, [r7, #4]
 c00127e:	f003 031f 	and.w	r3, r3, #31
 c001282:	2201      	movs	r2, #1
 c001284:	409a      	lsls	r2, r3
 c001286:	68fb      	ldr	r3, [r7, #12]
 c001288:	430a      	orrs	r2, r1
 c00128a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 c00128c:	2300      	movs	r3, #0
}
 c00128e:	4618      	mov	r0, r3
 c001290:	3714      	adds	r7, #20
 c001292:	46bd      	mov	sp, r7
 c001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001298:	4770      	bx	lr
 c00129a:	bf00      	nop
 c00129c:	50032800 	.word	0x50032800

0c0012a0 <HAL_GTZC_TZIC_ClearFlag>:
  *         This parameter can be a value of @ref GTZC_TZSC_TZIC_PeriphId.
  *         Use GTZC_PERIPH_ALL to select all peripherals.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GTZC_TZIC_ClearFlag(uint32_t PeriphId)
{
 c0012a0:	b480      	push	{r7}
 c0012a2:	b085      	sub	sp, #20
 c0012a4:	af00      	add	r7, sp, #0
 c0012a6:	6078      	str	r0, [r7, #4]
  uint32_t register_address;

  /* check entry parameters */
  if ((HAL_GTZC_GET_ARRAY_INDEX(PeriphId) >= GTZC_TZIC_PERIPH_NUMBER)
 c0012a8:	687b      	ldr	r3, [r7, #4]
 c0012aa:	0f1b      	lsrs	r3, r3, #28
 c0012ac:	015a      	lsls	r2, r3, #5
 c0012ae:	687b      	ldr	r3, [r7, #4]
 c0012b0:	f003 031f 	and.w	r3, r3, #31
 c0012b4:	4413      	add	r3, r2
 c0012b6:	2b47      	cmp	r3, #71	; 0x47
 c0012b8:	d80d      	bhi.n	c0012d6 <HAL_GTZC_TZIC_ClearFlag+0x36>
      || (((PeriphId & GTZC_PERIPH_ALL) != 0U) && (HAL_GTZC_GET_ARRAY_INDEX(PeriphId) != 0U)))
 c0012ba:	687b      	ldr	r3, [r7, #4]
 c0012bc:	f003 0320 	and.w	r3, r3, #32
 c0012c0:	2b00      	cmp	r3, #0
 c0012c2:	d00a      	beq.n	c0012da <HAL_GTZC_TZIC_ClearFlag+0x3a>
 c0012c4:	687b      	ldr	r3, [r7, #4]
 c0012c6:	0f1b      	lsrs	r3, r3, #28
 c0012c8:	015a      	lsls	r2, r3, #5
 c0012ca:	687b      	ldr	r3, [r7, #4]
 c0012cc:	f003 031f 	and.w	r3, r3, #31
 c0012d0:	4413      	add	r3, r2
 c0012d2:	2b00      	cmp	r3, #0
 c0012d4:	d001      	beq.n	c0012da <HAL_GTZC_TZIC_ClearFlag+0x3a>
  {
    return HAL_ERROR;
 c0012d6:	2301      	movs	r3, #1
 c0012d8:	e021      	b.n	c00131e <HAL_GTZC_TZIC_ClearFlag+0x7e>
  }

  if ((PeriphId & GTZC_PERIPH_ALL) != 0U)
 c0012da:	687b      	ldr	r3, [r7, #4]
 c0012dc:	f003 0320 	and.w	r3, r3, #32
 c0012e0:	2b00      	cmp	r3, #0
 c0012e2:	d00b      	beq.n	c0012fc <HAL_GTZC_TZIC_ClearFlag+0x5c>
  {
    /* same configuration is applied to all peripherals */
    WRITE_REG(GTZC_TZIC->FCR1, TZIC_FCR1_ALL);
 c0012e4:	4b11      	ldr	r3, [pc, #68]	; (c00132c <HAL_GTZC_TZIC_ClearFlag+0x8c>)
 c0012e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 c0012ea:	621a      	str	r2, [r3, #32]
    WRITE_REG(GTZC_TZIC->FCR2, TZIC_FCR2_ALL);
 c0012ec:	4b0f      	ldr	r3, [pc, #60]	; (c00132c <HAL_GTZC_TZIC_ClearFlag+0x8c>)
 c0012ee:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 c0012f2:	625a      	str	r2, [r3, #36]	; 0x24
    WRITE_REG(GTZC_TZIC->FCR3, TZIC_FCR3_ALL);
 c0012f4:	4b0d      	ldr	r3, [pc, #52]	; (c00132c <HAL_GTZC_TZIC_ClearFlag+0x8c>)
 c0012f6:	22ff      	movs	r2, #255	; 0xff
 c0012f8:	629a      	str	r2, [r3, #40]	; 0x28
 c0012fa:	e00f      	b.n	c00131c <HAL_GTZC_TZIC_ClearFlag+0x7c>
  }
  else
  {
    /* common case where only one peripheral is configured */
    register_address = (uint32_t) &(GTZC_TZIC->FCR1) + (4U * GTZC_GET_REG_INDEX(PeriphId));
 c0012fc:	687b      	ldr	r3, [r7, #4]
 c0012fe:	0f1a      	lsrs	r2, r3, #28
 c001300:	4b0b      	ldr	r3, [pc, #44]	; (c001330 <HAL_GTZC_TZIC_ClearFlag+0x90>)
 c001302:	4413      	add	r3, r2
 c001304:	009b      	lsls	r3, r3, #2
 c001306:	60fb      	str	r3, [r7, #12]
    SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c001308:	68fb      	ldr	r3, [r7, #12]
 c00130a:	6819      	ldr	r1, [r3, #0]
 c00130c:	687b      	ldr	r3, [r7, #4]
 c00130e:	f003 031f 	and.w	r3, r3, #31
 c001312:	2201      	movs	r2, #1
 c001314:	409a      	lsls	r2, r3
 c001316:	68fb      	ldr	r3, [r7, #12]
 c001318:	430a      	orrs	r2, r1
 c00131a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 c00131c:	2300      	movs	r3, #0
}
 c00131e:	4618      	mov	r0, r3
 c001320:	3714      	adds	r7, #20
 c001322:	46bd      	mov	sp, r7
 c001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001328:	4770      	bx	lr
 c00132a:	bf00      	nop
 c00132c:	50032800 	.word	0x50032800
 c001330:	1400ca08 	.word	0x1400ca08

0c001334 <HAL_GTZC_IRQHandler>:
/**
  * @brief  This function handles GTZC interrupt request.
  * @retval None.
  */
void HAL_GTZC_IRQHandler(void)
{
 c001334:	b580      	push	{r7, lr}
 c001336:	b084      	sub	sp, #16
 c001338:	af00      	add	r7, sp, #0
  uint32_t flag;
  uint32_t ier_itsources;
  uint32_t sr_flags;

  /* Get current IT Flags and IT sources value on 1st register */
  ier_itsources = READ_REG(GTZC_TZIC->IER1);
 c00133a:	4b3f      	ldr	r3, [pc, #252]	; (c001438 <HAL_GTZC_IRQHandler+0x104>)
 c00133c:	681b      	ldr	r3, [r3, #0]
 c00133e:	60bb      	str	r3, [r7, #8]
  sr_flags      = READ_REG(GTZC_TZIC->SR1);
 c001340:	4b3d      	ldr	r3, [pc, #244]	; (c001438 <HAL_GTZC_IRQHandler+0x104>)
 c001342:	691b      	ldr	r3, [r3, #16]
 c001344:	607b      	str	r3, [r7, #4]

  /* Get Mask interrupt and then clear them */
  flag = ier_itsources & sr_flags;
 c001346:	68ba      	ldr	r2, [r7, #8]
 c001348:	687b      	ldr	r3, [r7, #4]
 c00134a:	4013      	ands	r3, r2
 c00134c:	603b      	str	r3, [r7, #0]
  if (flag != 0U)
 c00134e:	683b      	ldr	r3, [r7, #0]
 c001350:	2b00      	cmp	r3, #0
 c001352:	d019      	beq.n	c001388 <HAL_GTZC_IRQHandler+0x54>
  {
    WRITE_REG(GTZC_TZIC->FCR1, flag);
 c001354:	4a38      	ldr	r2, [pc, #224]	; (c001438 <HAL_GTZC_IRQHandler+0x104>)
 c001356:	683b      	ldr	r3, [r7, #0]
 c001358:	6213      	str	r3, [r2, #32]

    /* Loop on flag to check, which ones have been raised */
    position = 0U;
 c00135a:	2300      	movs	r3, #0
 c00135c:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c00135e:	e00d      	b.n	c00137c <HAL_GTZC_IRQHandler+0x48>
    {
      if ((flag & (1UL << position)) != 0U)
 c001360:	683a      	ldr	r2, [r7, #0]
 c001362:	68fb      	ldr	r3, [r7, #12]
 c001364:	fa22 f303 	lsr.w	r3, r2, r3
 c001368:	f003 0301 	and.w	r3, r3, #1
 c00136c:	2b00      	cmp	r3, #0
 c00136e:	d002      	beq.n	c001376 <HAL_GTZC_IRQHandler+0x42>
      {
        HAL_GTZC_TZIC_Callback(GTZC_PERIPH_REG1 | position);
 c001370:	68f8      	ldr	r0, [r7, #12]
 c001372:	f000 f863 	bl	c00143c <HAL_GTZC_TZIC_Callback>
      }

      /* Position bit to be updated */
      position++;
 c001376:	68fb      	ldr	r3, [r7, #12]
 c001378:	3301      	adds	r3, #1
 c00137a:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c00137c:	683a      	ldr	r2, [r7, #0]
 c00137e:	68fb      	ldr	r3, [r7, #12]
 c001380:	fa22 f303 	lsr.w	r3, r2, r3
 c001384:	2b00      	cmp	r3, #0
 c001386:	d1eb      	bne.n	c001360 <HAL_GTZC_IRQHandler+0x2c>
    }
  }

  /* Get current IT Flags and IT sources value on 2nd register */
  ier_itsources = READ_REG(GTZC_TZIC->IER2);
 c001388:	4b2b      	ldr	r3, [pc, #172]	; (c001438 <HAL_GTZC_IRQHandler+0x104>)
 c00138a:	685b      	ldr	r3, [r3, #4]
 c00138c:	60bb      	str	r3, [r7, #8]
  sr_flags      = READ_REG(GTZC_TZIC->SR2);
 c00138e:	4b2a      	ldr	r3, [pc, #168]	; (c001438 <HAL_GTZC_IRQHandler+0x104>)
 c001390:	695b      	ldr	r3, [r3, #20]
 c001392:	607b      	str	r3, [r7, #4]

  /* Get Mask interrupt and then clear them */
  flag = ier_itsources & sr_flags;
 c001394:	68ba      	ldr	r2, [r7, #8]
 c001396:	687b      	ldr	r3, [r7, #4]
 c001398:	4013      	ands	r3, r2
 c00139a:	603b      	str	r3, [r7, #0]
  if (flag != 0U)
 c00139c:	683b      	ldr	r3, [r7, #0]
 c00139e:	2b00      	cmp	r3, #0
 c0013a0:	d01c      	beq.n	c0013dc <HAL_GTZC_IRQHandler+0xa8>
  {
    WRITE_REG(GTZC_TZIC->FCR2, flag);
 c0013a2:	4a25      	ldr	r2, [pc, #148]	; (c001438 <HAL_GTZC_IRQHandler+0x104>)
 c0013a4:	683b      	ldr	r3, [r7, #0]
 c0013a6:	6253      	str	r3, [r2, #36]	; 0x24

    /* Loop on flag to check, which ones have been raised */
    position = 0U;
 c0013a8:	2300      	movs	r3, #0
 c0013aa:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c0013ac:	e010      	b.n	c0013d0 <HAL_GTZC_IRQHandler+0x9c>
    {
      if ((flag & (1UL << position)) != 0U)
 c0013ae:	683a      	ldr	r2, [r7, #0]
 c0013b0:	68fb      	ldr	r3, [r7, #12]
 c0013b2:	fa22 f303 	lsr.w	r3, r2, r3
 c0013b6:	f003 0301 	and.w	r3, r3, #1
 c0013ba:	2b00      	cmp	r3, #0
 c0013bc:	d005      	beq.n	c0013ca <HAL_GTZC_IRQHandler+0x96>
      {
        HAL_GTZC_TZIC_Callback(GTZC_PERIPH_REG2 | position);
 c0013be:	68fb      	ldr	r3, [r7, #12]
 c0013c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c0013c4:	4618      	mov	r0, r3
 c0013c6:	f000 f839 	bl	c00143c <HAL_GTZC_TZIC_Callback>
      }

      /* Position bit to be updated */
      position++;
 c0013ca:	68fb      	ldr	r3, [r7, #12]
 c0013cc:	3301      	adds	r3, #1
 c0013ce:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c0013d0:	683a      	ldr	r2, [r7, #0]
 c0013d2:	68fb      	ldr	r3, [r7, #12]
 c0013d4:	fa22 f303 	lsr.w	r3, r2, r3
 c0013d8:	2b00      	cmp	r3, #0
 c0013da:	d1e8      	bne.n	c0013ae <HAL_GTZC_IRQHandler+0x7a>
    }
  }

  /* Get current IT Flags and IT sources value on 3rd register */
  ier_itsources = READ_REG(GTZC_TZIC->IER3);
 c0013dc:	4b16      	ldr	r3, [pc, #88]	; (c001438 <HAL_GTZC_IRQHandler+0x104>)
 c0013de:	689b      	ldr	r3, [r3, #8]
 c0013e0:	60bb      	str	r3, [r7, #8]
  sr_flags      = READ_REG(GTZC_TZIC->SR3);
 c0013e2:	4b15      	ldr	r3, [pc, #84]	; (c001438 <HAL_GTZC_IRQHandler+0x104>)
 c0013e4:	699b      	ldr	r3, [r3, #24]
 c0013e6:	607b      	str	r3, [r7, #4]

  /* Get Mask interrupt and then clear them */
  flag = ier_itsources & sr_flags;
 c0013e8:	68ba      	ldr	r2, [r7, #8]
 c0013ea:	687b      	ldr	r3, [r7, #4]
 c0013ec:	4013      	ands	r3, r2
 c0013ee:	603b      	str	r3, [r7, #0]
  if (flag != 0U)
 c0013f0:	683b      	ldr	r3, [r7, #0]
 c0013f2:	2b00      	cmp	r3, #0
 c0013f4:	d01c      	beq.n	c001430 <HAL_GTZC_IRQHandler+0xfc>
  {
    WRITE_REG(GTZC_TZIC->FCR3, flag);
 c0013f6:	4a10      	ldr	r2, [pc, #64]	; (c001438 <HAL_GTZC_IRQHandler+0x104>)
 c0013f8:	683b      	ldr	r3, [r7, #0]
 c0013fa:	6293      	str	r3, [r2, #40]	; 0x28

    /* Loop on flag to check, which ones have been raised */
    position = 0U;
 c0013fc:	2300      	movs	r3, #0
 c0013fe:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c001400:	e010      	b.n	c001424 <HAL_GTZC_IRQHandler+0xf0>
    {
      if ((flag & (1UL << position)) != 0U)
 c001402:	683a      	ldr	r2, [r7, #0]
 c001404:	68fb      	ldr	r3, [r7, #12]
 c001406:	fa22 f303 	lsr.w	r3, r2, r3
 c00140a:	f003 0301 	and.w	r3, r3, #1
 c00140e:	2b00      	cmp	r3, #0
 c001410:	d005      	beq.n	c00141e <HAL_GTZC_IRQHandler+0xea>
      {
        HAL_GTZC_TZIC_Callback(GTZC_PERIPH_REG3 | position);
 c001412:	68fb      	ldr	r3, [r7, #12]
 c001414:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 c001418:	4618      	mov	r0, r3
 c00141a:	f000 f80f 	bl	c00143c <HAL_GTZC_TZIC_Callback>
      }

      /* Position bit to be updated */
      position++;
 c00141e:	68fb      	ldr	r3, [r7, #12]
 c001420:	3301      	adds	r3, #1
 c001422:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c001424:	683a      	ldr	r2, [r7, #0]
 c001426:	68fb      	ldr	r3, [r7, #12]
 c001428:	fa22 f303 	lsr.w	r3, r2, r3
 c00142c:	2b00      	cmp	r3, #0
 c00142e:	d1e8      	bne.n	c001402 <HAL_GTZC_IRQHandler+0xce>
    }
  }
}
 c001430:	bf00      	nop
 c001432:	3710      	adds	r7, #16
 c001434:	46bd      	mov	sp, r7
 c001436:	bd80      	pop	{r7, pc}
 c001438:	50032800 	.word	0x50032800

0c00143c <HAL_GTZC_TZIC_Callback>:
  * @param  PeriphId Peripheral identifier triggering the illegal access.
  *         This parameter can be a value of @ref GTZC_TZSC_TZIC_PeriphId
  * @retval None.
  */
__weak void HAL_GTZC_TZIC_Callback(uint32_t PeriphId)
{
 c00143c:	b480      	push	{r7}
 c00143e:	b083      	sub	sp, #12
 c001440:	af00      	add	r7, sp, #0
 c001442:	6078      	str	r0, [r7, #4]
  UNUSED(PeriphId);

  /* NOTE: This function should not be modified. When the callback is needed,
   * the HAL_GTZC_TZIC_Callback is to be implemented in the user file
   */
}
 c001444:	bf00      	nop
 c001446:	370c      	adds	r7, #12
 c001448:	46bd      	mov	sp, r7
 c00144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00144e:	4770      	bx	lr

0c001450 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 c001450:	b480      	push	{r7}
 c001452:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 c001454:	4b05      	ldr	r3, [pc, #20]	; (c00146c <HAL_ICACHE_Enable+0x1c>)
 c001456:	681b      	ldr	r3, [r3, #0]
 c001458:	4a04      	ldr	r2, [pc, #16]	; (c00146c <HAL_ICACHE_Enable+0x1c>)
 c00145a:	f043 0301 	orr.w	r3, r3, #1
 c00145e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 c001460:	2300      	movs	r3, #0
}
 c001462:	4618      	mov	r0, r3
 c001464:	46bd      	mov	sp, r7
 c001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00146a:	4770      	bx	lr
 c00146c:	50030400 	.word	0x50030400

0c001470 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 c001470:	b480      	push	{r7}
 c001472:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 c001474:	4b04      	ldr	r3, [pc, #16]	; (c001488 <HAL_PWREx_GetVoltageRange+0x18>)
 c001476:	681b      	ldr	r3, [r3, #0]
 c001478:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 c00147c:	4618      	mov	r0, r3
 c00147e:	46bd      	mov	sp, r7
 c001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001484:	4770      	bx	lr
 c001486:	bf00      	nop
 c001488:	50007000 	.word	0x50007000

0c00148c <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 c00148c:	b580      	push	{r7, lr}
 c00148e:	b084      	sub	sp, #16
 c001490:	af00      	add	r7, sp, #0
 c001492:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 c001494:	4b27      	ldr	r3, [pc, #156]	; (c001534 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c001496:	681b      	ldr	r3, [r3, #0]
 c001498:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 c00149c:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 c00149e:	f000 f861 	bl	c001564 <HAL_PWREx_SMPS_GetEffectiveMode>
 c0014a2:	4603      	mov	r3, r0
 c0014a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c0014a8:	d101      	bne.n	c0014ae <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 c0014aa:	2301      	movs	r3, #1
 c0014ac:	e03e      	b.n	c00152c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 c0014ae:	4b21      	ldr	r3, [pc, #132]	; (c001534 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c0014b0:	68db      	ldr	r3, [r3, #12]
 c0014b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 c0014b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c0014ba:	d101      	bne.n	c0014c0 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 c0014bc:	2301      	movs	r3, #1
 c0014be:	e035      	b.n	c00152c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 c0014c0:	68ba      	ldr	r2, [r7, #8]
 c0014c2:	687b      	ldr	r3, [r7, #4]
 c0014c4:	429a      	cmp	r2, r3
 c0014c6:	d101      	bne.n	c0014cc <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 c0014c8:	2300      	movs	r3, #0
 c0014ca:	e02f      	b.n	c00152c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 c0014cc:	4b19      	ldr	r3, [pc, #100]	; (c001534 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c0014ce:	681b      	ldr	r3, [r3, #0]
 c0014d0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 c0014d4:	4917      	ldr	r1, [pc, #92]	; (c001534 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c0014d6:	687b      	ldr	r3, [r7, #4]
 c0014d8:	4313      	orrs	r3, r2
 c0014da:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 c0014dc:	4b16      	ldr	r3, [pc, #88]	; (c001538 <HAL_PWREx_ControlVoltageScaling+0xac>)
 c0014de:	681b      	ldr	r3, [r3, #0]
 c0014e0:	095b      	lsrs	r3, r3, #5
 c0014e2:	4a16      	ldr	r2, [pc, #88]	; (c00153c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 c0014e4:	fba2 2303 	umull	r2, r3, r2, r3
 c0014e8:	09db      	lsrs	r3, r3, #7
 c0014ea:	2232      	movs	r2, #50	; 0x32
 c0014ec:	fb02 f303 	mul.w	r3, r2, r3
 c0014f0:	4a13      	ldr	r2, [pc, #76]	; (c001540 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 c0014f2:	fba2 2303 	umull	r2, r3, r2, r3
 c0014f6:	08db      	lsrs	r3, r3, #3
 c0014f8:	3301      	adds	r3, #1
 c0014fa:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 c0014fc:	e002      	b.n	c001504 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 c0014fe:	68fb      	ldr	r3, [r7, #12]
 c001500:	3b01      	subs	r3, #1
 c001502:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 c001504:	4b0b      	ldr	r3, [pc, #44]	; (c001534 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c001506:	695b      	ldr	r3, [r3, #20]
 c001508:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c00150c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c001510:	d102      	bne.n	c001518 <HAL_PWREx_ControlVoltageScaling+0x8c>
 c001512:	68fb      	ldr	r3, [r7, #12]
 c001514:	2b00      	cmp	r3, #0
 c001516:	d1f2      	bne.n	c0014fe <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 c001518:	4b06      	ldr	r3, [pc, #24]	; (c001534 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c00151a:	695b      	ldr	r3, [r3, #20]
 c00151c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c001520:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c001524:	d101      	bne.n	c00152a <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 c001526:	2303      	movs	r3, #3
 c001528:	e000      	b.n	c00152c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 c00152a:	2300      	movs	r3, #0
}
 c00152c:	4618      	mov	r0, r3
 c00152e:	3710      	adds	r7, #16
 c001530:	46bd      	mov	sp, r7
 c001532:	bd80      	pop	{r7, pc}
 c001534:	50007000 	.word	0x50007000
 c001538:	30000008 	.word	0x30000008
 c00153c:	0a7c5ac5 	.word	0x0a7c5ac5
 c001540:	cccccccd 	.word	0xcccccccd

0c001544 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 c001544:	b480      	push	{r7}
 c001546:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 c001548:	4b05      	ldr	r3, [pc, #20]	; (c001560 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 c00154a:	689b      	ldr	r3, [r3, #8]
 c00154c:	4a04      	ldr	r2, [pc, #16]	; (c001560 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 c00154e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 c001552:	6093      	str	r3, [r2, #8]
}
 c001554:	bf00      	nop
 c001556:	46bd      	mov	sp, r7
 c001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00155c:	4770      	bx	lr
 c00155e:	bf00      	nop
 c001560:	50007000 	.word	0x50007000

0c001564 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 c001564:	b480      	push	{r7}
 c001566:	b083      	sub	sp, #12
 c001568:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 c00156a:	4b0f      	ldr	r3, [pc, #60]	; (c0015a8 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 c00156c:	691b      	ldr	r3, [r3, #16]
 c00156e:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 c001570:	683b      	ldr	r3, [r7, #0]
 c001572:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 c001576:	2b00      	cmp	r3, #0
 c001578:	d003      	beq.n	c001582 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 c00157a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 c00157e:	607b      	str	r3, [r7, #4]
 c001580:	e00a      	b.n	c001598 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 c001582:	683b      	ldr	r3, [r7, #0]
 c001584:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 c001588:	2b00      	cmp	r3, #0
 c00158a:	d103      	bne.n	c001594 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 c00158c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 c001590:	607b      	str	r3, [r7, #4]
 c001592:	e001      	b.n	c001598 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 c001594:	2300      	movs	r3, #0
 c001596:	607b      	str	r3, [r7, #4]
  }

  return mode;
 c001598:	687b      	ldr	r3, [r7, #4]
}
 c00159a:	4618      	mov	r0, r3
 c00159c:	370c      	adds	r7, #12
 c00159e:	46bd      	mov	sp, r7
 c0015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0015a4:	4770      	bx	lr
 c0015a6:	bf00      	nop
 c0015a8:	50007000 	.word	0x50007000

0c0015ac <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 c0015ac:	b580      	push	{r7, lr}
 c0015ae:	b088      	sub	sp, #32
 c0015b0:	af00      	add	r7, sp, #0
 c0015b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 c0015b4:	687b      	ldr	r3, [r7, #4]
 c0015b6:	2b00      	cmp	r3, #0
 c0015b8:	d102      	bne.n	c0015c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 c0015ba:	2301      	movs	r3, #1
 c0015bc:	f000 bcc2 	b.w	c001f44 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 c0015c0:	4b99      	ldr	r3, [pc, #612]	; (c001828 <HAL_RCC_OscConfig+0x27c>)
 c0015c2:	689b      	ldr	r3, [r3, #8]
 c0015c4:	f003 030c 	and.w	r3, r3, #12
 c0015c8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 c0015ca:	4b97      	ldr	r3, [pc, #604]	; (c001828 <HAL_RCC_OscConfig+0x27c>)
 c0015cc:	68db      	ldr	r3, [r3, #12]
 c0015ce:	f003 0303 	and.w	r3, r3, #3
 c0015d2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 c0015d4:	687b      	ldr	r3, [r7, #4]
 c0015d6:	681b      	ldr	r3, [r3, #0]
 c0015d8:	f003 0310 	and.w	r3, r3, #16
 c0015dc:	2b00      	cmp	r3, #0
 c0015de:	f000 80e9 	beq.w	c0017b4 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 c0015e2:	69bb      	ldr	r3, [r7, #24]
 c0015e4:	2b00      	cmp	r3, #0
 c0015e6:	d006      	beq.n	c0015f6 <HAL_RCC_OscConfig+0x4a>
 c0015e8:	69bb      	ldr	r3, [r7, #24]
 c0015ea:	2b0c      	cmp	r3, #12
 c0015ec:	f040 8083 	bne.w	c0016f6 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 c0015f0:	697b      	ldr	r3, [r7, #20]
 c0015f2:	2b01      	cmp	r3, #1
 c0015f4:	d17f      	bne.n	c0016f6 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 c0015f6:	4b8c      	ldr	r3, [pc, #560]	; (c001828 <HAL_RCC_OscConfig+0x27c>)
 c0015f8:	681b      	ldr	r3, [r3, #0]
 c0015fa:	f003 0302 	and.w	r3, r3, #2
 c0015fe:	2b00      	cmp	r3, #0
 c001600:	d006      	beq.n	c001610 <HAL_RCC_OscConfig+0x64>
 c001602:	687b      	ldr	r3, [r7, #4]
 c001604:	69db      	ldr	r3, [r3, #28]
 c001606:	2b00      	cmp	r3, #0
 c001608:	d102      	bne.n	c001610 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 c00160a:	2301      	movs	r3, #1
 c00160c:	f000 bc9a 	b.w	c001f44 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 c001610:	687b      	ldr	r3, [r7, #4]
 c001612:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 c001614:	4b84      	ldr	r3, [pc, #528]	; (c001828 <HAL_RCC_OscConfig+0x27c>)
 c001616:	681b      	ldr	r3, [r3, #0]
 c001618:	f003 0308 	and.w	r3, r3, #8
 c00161c:	2b00      	cmp	r3, #0
 c00161e:	d004      	beq.n	c00162a <HAL_RCC_OscConfig+0x7e>
 c001620:	4b81      	ldr	r3, [pc, #516]	; (c001828 <HAL_RCC_OscConfig+0x27c>)
 c001622:	681b      	ldr	r3, [r3, #0]
 c001624:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 c001628:	e005      	b.n	c001636 <HAL_RCC_OscConfig+0x8a>
 c00162a:	4b7f      	ldr	r3, [pc, #508]	; (c001828 <HAL_RCC_OscConfig+0x27c>)
 c00162c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c001630:	091b      	lsrs	r3, r3, #4
 c001632:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 c001636:	4293      	cmp	r3, r2
 c001638:	d224      	bcs.n	c001684 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 c00163a:	687b      	ldr	r3, [r7, #4]
 c00163c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c00163e:	4618      	mov	r0, r3
 c001640:	f000 ff88 	bl	c002554 <RCC_SetFlashLatencyFromMSIRange>
 c001644:	4603      	mov	r3, r0
 c001646:	2b00      	cmp	r3, #0
 c001648:	d002      	beq.n	c001650 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 c00164a:	2301      	movs	r3, #1
 c00164c:	f000 bc7a 	b.w	c001f44 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 c001650:	4b75      	ldr	r3, [pc, #468]	; (c001828 <HAL_RCC_OscConfig+0x27c>)
 c001652:	681b      	ldr	r3, [r3, #0]
 c001654:	4a74      	ldr	r2, [pc, #464]	; (c001828 <HAL_RCC_OscConfig+0x27c>)
 c001656:	f043 0308 	orr.w	r3, r3, #8
 c00165a:	6013      	str	r3, [r2, #0]
 c00165c:	4b72      	ldr	r3, [pc, #456]	; (c001828 <HAL_RCC_OscConfig+0x27c>)
 c00165e:	681b      	ldr	r3, [r3, #0]
 c001660:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 c001664:	687b      	ldr	r3, [r7, #4]
 c001666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c001668:	496f      	ldr	r1, [pc, #444]	; (c001828 <HAL_RCC_OscConfig+0x27c>)
 c00166a:	4313      	orrs	r3, r2
 c00166c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 c00166e:	4b6e      	ldr	r3, [pc, #440]	; (c001828 <HAL_RCC_OscConfig+0x27c>)
 c001670:	685b      	ldr	r3, [r3, #4]
 c001672:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 c001676:	687b      	ldr	r3, [r7, #4]
 c001678:	6a1b      	ldr	r3, [r3, #32]
 c00167a:	021b      	lsls	r3, r3, #8
 c00167c:	496a      	ldr	r1, [pc, #424]	; (c001828 <HAL_RCC_OscConfig+0x27c>)
 c00167e:	4313      	orrs	r3, r2
 c001680:	604b      	str	r3, [r1, #4]
 c001682:	e026      	b.n	c0016d2 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 c001684:	4b68      	ldr	r3, [pc, #416]	; (c001828 <HAL_RCC_OscConfig+0x27c>)
 c001686:	681b      	ldr	r3, [r3, #0]
 c001688:	4a67      	ldr	r2, [pc, #412]	; (c001828 <HAL_RCC_OscConfig+0x27c>)
 c00168a:	f043 0308 	orr.w	r3, r3, #8
 c00168e:	6013      	str	r3, [r2, #0]
 c001690:	4b65      	ldr	r3, [pc, #404]	; (c001828 <HAL_RCC_OscConfig+0x27c>)
 c001692:	681b      	ldr	r3, [r3, #0]
 c001694:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 c001698:	687b      	ldr	r3, [r7, #4]
 c00169a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c00169c:	4962      	ldr	r1, [pc, #392]	; (c001828 <HAL_RCC_OscConfig+0x27c>)
 c00169e:	4313      	orrs	r3, r2
 c0016a0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 c0016a2:	4b61      	ldr	r3, [pc, #388]	; (c001828 <HAL_RCC_OscConfig+0x27c>)
 c0016a4:	685b      	ldr	r3, [r3, #4]
 c0016a6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 c0016aa:	687b      	ldr	r3, [r7, #4]
 c0016ac:	6a1b      	ldr	r3, [r3, #32]
 c0016ae:	021b      	lsls	r3, r3, #8
 c0016b0:	495d      	ldr	r1, [pc, #372]	; (c001828 <HAL_RCC_OscConfig+0x27c>)
 c0016b2:	4313      	orrs	r3, r2
 c0016b4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c0016b6:	69bb      	ldr	r3, [r7, #24]
 c0016b8:	2b00      	cmp	r3, #0
 c0016ba:	d10a      	bne.n	c0016d2 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 c0016bc:	687b      	ldr	r3, [r7, #4]
 c0016be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0016c0:	4618      	mov	r0, r3
 c0016c2:	f000 ff47 	bl	c002554 <RCC_SetFlashLatencyFromMSIRange>
 c0016c6:	4603      	mov	r3, r0
 c0016c8:	2b00      	cmp	r3, #0
 c0016ca:	d002      	beq.n	c0016d2 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 c0016cc:	2301      	movs	r3, #1
 c0016ce:	f000 bc39 	b.w	c001f44 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 c0016d2:	f000 fe15 	bl	c002300 <HAL_RCC_GetHCLKFreq>
 c0016d6:	4603      	mov	r3, r0
 c0016d8:	4a54      	ldr	r2, [pc, #336]	; (c00182c <HAL_RCC_OscConfig+0x280>)
 c0016da:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 c0016dc:	4b54      	ldr	r3, [pc, #336]	; (c001830 <HAL_RCC_OscConfig+0x284>)
 c0016de:	681b      	ldr	r3, [r3, #0]
 c0016e0:	4618      	mov	r0, r3
 c0016e2:	f7ff f983 	bl	c0009ec <HAL_InitTick>
 c0016e6:	4603      	mov	r3, r0
 c0016e8:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 c0016ea:	7bfb      	ldrb	r3, [r7, #15]
 c0016ec:	2b00      	cmp	r3, #0
 c0016ee:	d060      	beq.n	c0017b2 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 c0016f0:	7bfb      	ldrb	r3, [r7, #15]
 c0016f2:	f000 bc27 	b.w	c001f44 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 c0016f6:	687b      	ldr	r3, [r7, #4]
 c0016f8:	69db      	ldr	r3, [r3, #28]
 c0016fa:	2b00      	cmp	r3, #0
 c0016fc:	d039      	beq.n	c001772 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 c0016fe:	4b4a      	ldr	r3, [pc, #296]	; (c001828 <HAL_RCC_OscConfig+0x27c>)
 c001700:	681b      	ldr	r3, [r3, #0]
 c001702:	4a49      	ldr	r2, [pc, #292]	; (c001828 <HAL_RCC_OscConfig+0x27c>)
 c001704:	f043 0301 	orr.w	r3, r3, #1
 c001708:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 c00170a:	f7ff f9bf 	bl	c000a8c <HAL_GetTick>
 c00170e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c001710:	e00f      	b.n	c001732 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 c001712:	f7ff f9bb 	bl	c000a8c <HAL_GetTick>
 c001716:	4602      	mov	r2, r0
 c001718:	693b      	ldr	r3, [r7, #16]
 c00171a:	1ad3      	subs	r3, r2, r3
 c00171c:	2b02      	cmp	r3, #2
 c00171e:	d908      	bls.n	c001732 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c001720:	4b41      	ldr	r3, [pc, #260]	; (c001828 <HAL_RCC_OscConfig+0x27c>)
 c001722:	681b      	ldr	r3, [r3, #0]
 c001724:	f003 0302 	and.w	r3, r3, #2
 c001728:	2b00      	cmp	r3, #0
 c00172a:	d102      	bne.n	c001732 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 c00172c:	2303      	movs	r3, #3
 c00172e:	f000 bc09 	b.w	c001f44 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c001732:	4b3d      	ldr	r3, [pc, #244]	; (c001828 <HAL_RCC_OscConfig+0x27c>)
 c001734:	681b      	ldr	r3, [r3, #0]
 c001736:	f003 0302 	and.w	r3, r3, #2
 c00173a:	2b00      	cmp	r3, #0
 c00173c:	d0e9      	beq.n	c001712 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 c00173e:	4b3a      	ldr	r3, [pc, #232]	; (c001828 <HAL_RCC_OscConfig+0x27c>)
 c001740:	681b      	ldr	r3, [r3, #0]
 c001742:	4a39      	ldr	r2, [pc, #228]	; (c001828 <HAL_RCC_OscConfig+0x27c>)
 c001744:	f043 0308 	orr.w	r3, r3, #8
 c001748:	6013      	str	r3, [r2, #0]
 c00174a:	4b37      	ldr	r3, [pc, #220]	; (c001828 <HAL_RCC_OscConfig+0x27c>)
 c00174c:	681b      	ldr	r3, [r3, #0]
 c00174e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 c001752:	687b      	ldr	r3, [r7, #4]
 c001754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c001756:	4934      	ldr	r1, [pc, #208]	; (c001828 <HAL_RCC_OscConfig+0x27c>)
 c001758:	4313      	orrs	r3, r2
 c00175a:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 c00175c:	4b32      	ldr	r3, [pc, #200]	; (c001828 <HAL_RCC_OscConfig+0x27c>)
 c00175e:	685b      	ldr	r3, [r3, #4]
 c001760:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 c001764:	687b      	ldr	r3, [r7, #4]
 c001766:	6a1b      	ldr	r3, [r3, #32]
 c001768:	021b      	lsls	r3, r3, #8
 c00176a:	492f      	ldr	r1, [pc, #188]	; (c001828 <HAL_RCC_OscConfig+0x27c>)
 c00176c:	4313      	orrs	r3, r2
 c00176e:	604b      	str	r3, [r1, #4]
 c001770:	e020      	b.n	c0017b4 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 c001772:	4b2d      	ldr	r3, [pc, #180]	; (c001828 <HAL_RCC_OscConfig+0x27c>)
 c001774:	681b      	ldr	r3, [r3, #0]
 c001776:	4a2c      	ldr	r2, [pc, #176]	; (c001828 <HAL_RCC_OscConfig+0x27c>)
 c001778:	f023 0301 	bic.w	r3, r3, #1
 c00177c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 c00177e:	f7ff f985 	bl	c000a8c <HAL_GetTick>
 c001782:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 c001784:	e00e      	b.n	c0017a4 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 c001786:	f7ff f981 	bl	c000a8c <HAL_GetTick>
 c00178a:	4602      	mov	r2, r0
 c00178c:	693b      	ldr	r3, [r7, #16]
 c00178e:	1ad3      	subs	r3, r2, r3
 c001790:	2b02      	cmp	r3, #2
 c001792:	d907      	bls.n	c0017a4 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 c001794:	4b24      	ldr	r3, [pc, #144]	; (c001828 <HAL_RCC_OscConfig+0x27c>)
 c001796:	681b      	ldr	r3, [r3, #0]
 c001798:	f003 0302 	and.w	r3, r3, #2
 c00179c:	2b00      	cmp	r3, #0
 c00179e:	d001      	beq.n	c0017a4 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 c0017a0:	2303      	movs	r3, #3
 c0017a2:	e3cf      	b.n	c001f44 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 c0017a4:	4b20      	ldr	r3, [pc, #128]	; (c001828 <HAL_RCC_OscConfig+0x27c>)
 c0017a6:	681b      	ldr	r3, [r3, #0]
 c0017a8:	f003 0302 	and.w	r3, r3, #2
 c0017ac:	2b00      	cmp	r3, #0
 c0017ae:	d1ea      	bne.n	c001786 <HAL_RCC_OscConfig+0x1da>
 c0017b0:	e000      	b.n	c0017b4 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 c0017b2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 c0017b4:	687b      	ldr	r3, [r7, #4]
 c0017b6:	681b      	ldr	r3, [r3, #0]
 c0017b8:	f003 0301 	and.w	r3, r3, #1
 c0017bc:	2b00      	cmp	r3, #0
 c0017be:	d07e      	beq.n	c0018be <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 c0017c0:	69bb      	ldr	r3, [r7, #24]
 c0017c2:	2b08      	cmp	r3, #8
 c0017c4:	d005      	beq.n	c0017d2 <HAL_RCC_OscConfig+0x226>
 c0017c6:	69bb      	ldr	r3, [r7, #24]
 c0017c8:	2b0c      	cmp	r3, #12
 c0017ca:	d10e      	bne.n	c0017ea <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 c0017cc:	697b      	ldr	r3, [r7, #20]
 c0017ce:	2b03      	cmp	r3, #3
 c0017d0:	d10b      	bne.n	c0017ea <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 c0017d2:	4b15      	ldr	r3, [pc, #84]	; (c001828 <HAL_RCC_OscConfig+0x27c>)
 c0017d4:	681b      	ldr	r3, [r3, #0]
 c0017d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c0017da:	2b00      	cmp	r3, #0
 c0017dc:	d06e      	beq.n	c0018bc <HAL_RCC_OscConfig+0x310>
 c0017de:	687b      	ldr	r3, [r7, #4]
 c0017e0:	685b      	ldr	r3, [r3, #4]
 c0017e2:	2b00      	cmp	r3, #0
 c0017e4:	d16a      	bne.n	c0018bc <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 c0017e6:	2301      	movs	r3, #1
 c0017e8:	e3ac      	b.n	c001f44 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 c0017ea:	687b      	ldr	r3, [r7, #4]
 c0017ec:	685b      	ldr	r3, [r3, #4]
 c0017ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 c0017f2:	d106      	bne.n	c001802 <HAL_RCC_OscConfig+0x256>
 c0017f4:	4b0c      	ldr	r3, [pc, #48]	; (c001828 <HAL_RCC_OscConfig+0x27c>)
 c0017f6:	681b      	ldr	r3, [r3, #0]
 c0017f8:	4a0b      	ldr	r2, [pc, #44]	; (c001828 <HAL_RCC_OscConfig+0x27c>)
 c0017fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c0017fe:	6013      	str	r3, [r2, #0]
 c001800:	e024      	b.n	c00184c <HAL_RCC_OscConfig+0x2a0>
 c001802:	687b      	ldr	r3, [r7, #4]
 c001804:	685b      	ldr	r3, [r3, #4]
 c001806:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 c00180a:	d113      	bne.n	c001834 <HAL_RCC_OscConfig+0x288>
 c00180c:	4b06      	ldr	r3, [pc, #24]	; (c001828 <HAL_RCC_OscConfig+0x27c>)
 c00180e:	681b      	ldr	r3, [r3, #0]
 c001810:	4a05      	ldr	r2, [pc, #20]	; (c001828 <HAL_RCC_OscConfig+0x27c>)
 c001812:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 c001816:	6013      	str	r3, [r2, #0]
 c001818:	4b03      	ldr	r3, [pc, #12]	; (c001828 <HAL_RCC_OscConfig+0x27c>)
 c00181a:	681b      	ldr	r3, [r3, #0]
 c00181c:	4a02      	ldr	r2, [pc, #8]	; (c001828 <HAL_RCC_OscConfig+0x27c>)
 c00181e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c001822:	6013      	str	r3, [r2, #0]
 c001824:	e012      	b.n	c00184c <HAL_RCC_OscConfig+0x2a0>
 c001826:	bf00      	nop
 c001828:	50021000 	.word	0x50021000
 c00182c:	30000008 	.word	0x30000008
 c001830:	3000000c 	.word	0x3000000c
 c001834:	4b8b      	ldr	r3, [pc, #556]	; (c001a64 <HAL_RCC_OscConfig+0x4b8>)
 c001836:	681b      	ldr	r3, [r3, #0]
 c001838:	4a8a      	ldr	r2, [pc, #552]	; (c001a64 <HAL_RCC_OscConfig+0x4b8>)
 c00183a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 c00183e:	6013      	str	r3, [r2, #0]
 c001840:	4b88      	ldr	r3, [pc, #544]	; (c001a64 <HAL_RCC_OscConfig+0x4b8>)
 c001842:	681b      	ldr	r3, [r3, #0]
 c001844:	4a87      	ldr	r2, [pc, #540]	; (c001a64 <HAL_RCC_OscConfig+0x4b8>)
 c001846:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 c00184a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 c00184c:	687b      	ldr	r3, [r7, #4]
 c00184e:	685b      	ldr	r3, [r3, #4]
 c001850:	2b00      	cmp	r3, #0
 c001852:	d019      	beq.n	c001888 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c001854:	f7ff f91a 	bl	c000a8c <HAL_GetTick>
 c001858:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c00185a:	e00e      	b.n	c00187a <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 c00185c:	f7ff f916 	bl	c000a8c <HAL_GetTick>
 c001860:	4602      	mov	r2, r0
 c001862:	693b      	ldr	r3, [r7, #16]
 c001864:	1ad3      	subs	r3, r2, r3
 c001866:	2b64      	cmp	r3, #100	; 0x64
 c001868:	d907      	bls.n	c00187a <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c00186a:	4b7e      	ldr	r3, [pc, #504]	; (c001a64 <HAL_RCC_OscConfig+0x4b8>)
 c00186c:	681b      	ldr	r3, [r3, #0]
 c00186e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c001872:	2b00      	cmp	r3, #0
 c001874:	d101      	bne.n	c00187a <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 c001876:	2303      	movs	r3, #3
 c001878:	e364      	b.n	c001f44 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c00187a:	4b7a      	ldr	r3, [pc, #488]	; (c001a64 <HAL_RCC_OscConfig+0x4b8>)
 c00187c:	681b      	ldr	r3, [r3, #0]
 c00187e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c001882:	2b00      	cmp	r3, #0
 c001884:	d0ea      	beq.n	c00185c <HAL_RCC_OscConfig+0x2b0>
 c001886:	e01a      	b.n	c0018be <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c001888:	f7ff f900 	bl	c000a8c <HAL_GetTick>
 c00188c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 c00188e:	e00e      	b.n	c0018ae <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 c001890:	f7ff f8fc 	bl	c000a8c <HAL_GetTick>
 c001894:	4602      	mov	r2, r0
 c001896:	693b      	ldr	r3, [r7, #16]
 c001898:	1ad3      	subs	r3, r2, r3
 c00189a:	2b64      	cmp	r3, #100	; 0x64
 c00189c:	d907      	bls.n	c0018ae <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 c00189e:	4b71      	ldr	r3, [pc, #452]	; (c001a64 <HAL_RCC_OscConfig+0x4b8>)
 c0018a0:	681b      	ldr	r3, [r3, #0]
 c0018a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c0018a6:	2b00      	cmp	r3, #0
 c0018a8:	d001      	beq.n	c0018ae <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 c0018aa:	2303      	movs	r3, #3
 c0018ac:	e34a      	b.n	c001f44 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 c0018ae:	4b6d      	ldr	r3, [pc, #436]	; (c001a64 <HAL_RCC_OscConfig+0x4b8>)
 c0018b0:	681b      	ldr	r3, [r3, #0]
 c0018b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c0018b6:	2b00      	cmp	r3, #0
 c0018b8:	d1ea      	bne.n	c001890 <HAL_RCC_OscConfig+0x2e4>
 c0018ba:	e000      	b.n	c0018be <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 c0018bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 c0018be:	687b      	ldr	r3, [r7, #4]
 c0018c0:	681b      	ldr	r3, [r3, #0]
 c0018c2:	f003 0302 	and.w	r3, r3, #2
 c0018c6:	2b00      	cmp	r3, #0
 c0018c8:	d06c      	beq.n	c0019a4 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 c0018ca:	69bb      	ldr	r3, [r7, #24]
 c0018cc:	2b04      	cmp	r3, #4
 c0018ce:	d005      	beq.n	c0018dc <HAL_RCC_OscConfig+0x330>
 c0018d0:	69bb      	ldr	r3, [r7, #24]
 c0018d2:	2b0c      	cmp	r3, #12
 c0018d4:	d119      	bne.n	c00190a <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 c0018d6:	697b      	ldr	r3, [r7, #20]
 c0018d8:	2b02      	cmp	r3, #2
 c0018da:	d116      	bne.n	c00190a <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 c0018dc:	4b61      	ldr	r3, [pc, #388]	; (c001a64 <HAL_RCC_OscConfig+0x4b8>)
 c0018de:	681b      	ldr	r3, [r3, #0]
 c0018e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c0018e4:	2b00      	cmp	r3, #0
 c0018e6:	d005      	beq.n	c0018f4 <HAL_RCC_OscConfig+0x348>
 c0018e8:	687b      	ldr	r3, [r7, #4]
 c0018ea:	68db      	ldr	r3, [r3, #12]
 c0018ec:	2b00      	cmp	r3, #0
 c0018ee:	d101      	bne.n	c0018f4 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 c0018f0:	2301      	movs	r3, #1
 c0018f2:	e327      	b.n	c001f44 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 c0018f4:	4b5b      	ldr	r3, [pc, #364]	; (c001a64 <HAL_RCC_OscConfig+0x4b8>)
 c0018f6:	685b      	ldr	r3, [r3, #4]
 c0018f8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 c0018fc:	687b      	ldr	r3, [r7, #4]
 c0018fe:	691b      	ldr	r3, [r3, #16]
 c001900:	061b      	lsls	r3, r3, #24
 c001902:	4958      	ldr	r1, [pc, #352]	; (c001a64 <HAL_RCC_OscConfig+0x4b8>)
 c001904:	4313      	orrs	r3, r2
 c001906:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 c001908:	e04c      	b.n	c0019a4 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 c00190a:	687b      	ldr	r3, [r7, #4]
 c00190c:	68db      	ldr	r3, [r3, #12]
 c00190e:	2b00      	cmp	r3, #0
 c001910:	d029      	beq.n	c001966 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 c001912:	4b54      	ldr	r3, [pc, #336]	; (c001a64 <HAL_RCC_OscConfig+0x4b8>)
 c001914:	681b      	ldr	r3, [r3, #0]
 c001916:	4a53      	ldr	r2, [pc, #332]	; (c001a64 <HAL_RCC_OscConfig+0x4b8>)
 c001918:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 c00191c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c00191e:	f7ff f8b5 	bl	c000a8c <HAL_GetTick>
 c001922:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c001924:	e00e      	b.n	c001944 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 c001926:	f7ff f8b1 	bl	c000a8c <HAL_GetTick>
 c00192a:	4602      	mov	r2, r0
 c00192c:	693b      	ldr	r3, [r7, #16]
 c00192e:	1ad3      	subs	r3, r2, r3
 c001930:	2b02      	cmp	r3, #2
 c001932:	d907      	bls.n	c001944 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c001934:	4b4b      	ldr	r3, [pc, #300]	; (c001a64 <HAL_RCC_OscConfig+0x4b8>)
 c001936:	681b      	ldr	r3, [r3, #0]
 c001938:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c00193c:	2b00      	cmp	r3, #0
 c00193e:	d101      	bne.n	c001944 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 c001940:	2303      	movs	r3, #3
 c001942:	e2ff      	b.n	c001f44 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c001944:	4b47      	ldr	r3, [pc, #284]	; (c001a64 <HAL_RCC_OscConfig+0x4b8>)
 c001946:	681b      	ldr	r3, [r3, #0]
 c001948:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c00194c:	2b00      	cmp	r3, #0
 c00194e:	d0ea      	beq.n	c001926 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 c001950:	4b44      	ldr	r3, [pc, #272]	; (c001a64 <HAL_RCC_OscConfig+0x4b8>)
 c001952:	685b      	ldr	r3, [r3, #4]
 c001954:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 c001958:	687b      	ldr	r3, [r7, #4]
 c00195a:	691b      	ldr	r3, [r3, #16]
 c00195c:	061b      	lsls	r3, r3, #24
 c00195e:	4941      	ldr	r1, [pc, #260]	; (c001a64 <HAL_RCC_OscConfig+0x4b8>)
 c001960:	4313      	orrs	r3, r2
 c001962:	604b      	str	r3, [r1, #4]
 c001964:	e01e      	b.n	c0019a4 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 c001966:	4b3f      	ldr	r3, [pc, #252]	; (c001a64 <HAL_RCC_OscConfig+0x4b8>)
 c001968:	681b      	ldr	r3, [r3, #0]
 c00196a:	4a3e      	ldr	r2, [pc, #248]	; (c001a64 <HAL_RCC_OscConfig+0x4b8>)
 c00196c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 c001970:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c001972:	f7ff f88b 	bl	c000a8c <HAL_GetTick>
 c001976:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 c001978:	e00e      	b.n	c001998 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 c00197a:	f7ff f887 	bl	c000a8c <HAL_GetTick>
 c00197e:	4602      	mov	r2, r0
 c001980:	693b      	ldr	r3, [r7, #16]
 c001982:	1ad3      	subs	r3, r2, r3
 c001984:	2b02      	cmp	r3, #2
 c001986:	d907      	bls.n	c001998 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 c001988:	4b36      	ldr	r3, [pc, #216]	; (c001a64 <HAL_RCC_OscConfig+0x4b8>)
 c00198a:	681b      	ldr	r3, [r3, #0]
 c00198c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c001990:	2b00      	cmp	r3, #0
 c001992:	d001      	beq.n	c001998 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 c001994:	2303      	movs	r3, #3
 c001996:	e2d5      	b.n	c001f44 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 c001998:	4b32      	ldr	r3, [pc, #200]	; (c001a64 <HAL_RCC_OscConfig+0x4b8>)
 c00199a:	681b      	ldr	r3, [r3, #0]
 c00199c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c0019a0:	2b00      	cmp	r3, #0
 c0019a2:	d1ea      	bne.n	c00197a <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 c0019a4:	687b      	ldr	r3, [r7, #4]
 c0019a6:	681b      	ldr	r3, [r3, #0]
 c0019a8:	f003 0308 	and.w	r3, r3, #8
 c0019ac:	2b00      	cmp	r3, #0
 c0019ae:	d062      	beq.n	c001a76 <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 c0019b0:	687b      	ldr	r3, [r7, #4]
 c0019b2:	695b      	ldr	r3, [r3, #20]
 c0019b4:	2b00      	cmp	r3, #0
 c0019b6:	d038      	beq.n	c001a2a <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 c0019b8:	687b      	ldr	r3, [r7, #4]
 c0019ba:	699b      	ldr	r3, [r3, #24]
 c0019bc:	2b00      	cmp	r3, #0
 c0019be:	d108      	bne.n	c0019d2 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 c0019c0:	4b28      	ldr	r3, [pc, #160]	; (c001a64 <HAL_RCC_OscConfig+0x4b8>)
 c0019c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c0019c6:	4a27      	ldr	r2, [pc, #156]	; (c001a64 <HAL_RCC_OscConfig+0x4b8>)
 c0019c8:	f023 0310 	bic.w	r3, r3, #16
 c0019cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 c0019d0:	e007      	b.n	c0019e2 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 c0019d2:	4b24      	ldr	r3, [pc, #144]	; (c001a64 <HAL_RCC_OscConfig+0x4b8>)
 c0019d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c0019d8:	4a22      	ldr	r2, [pc, #136]	; (c001a64 <HAL_RCC_OscConfig+0x4b8>)
 c0019da:	f043 0310 	orr.w	r3, r3, #16
 c0019de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 c0019e2:	4b20      	ldr	r3, [pc, #128]	; (c001a64 <HAL_RCC_OscConfig+0x4b8>)
 c0019e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c0019e8:	4a1e      	ldr	r2, [pc, #120]	; (c001a64 <HAL_RCC_OscConfig+0x4b8>)
 c0019ea:	f043 0301 	orr.w	r3, r3, #1
 c0019ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c0019f2:	f7ff f84b 	bl	c000a8c <HAL_GetTick>
 c0019f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 c0019f8:	e00f      	b.n	c001a1a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 c0019fa:	f7ff f847 	bl	c000a8c <HAL_GetTick>
 c0019fe:	4602      	mov	r2, r0
 c001a00:	693b      	ldr	r3, [r7, #16]
 c001a02:	1ad3      	subs	r3, r2, r3
 c001a04:	2b07      	cmp	r3, #7
 c001a06:	d908      	bls.n	c001a1a <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 c001a08:	4b16      	ldr	r3, [pc, #88]	; (c001a64 <HAL_RCC_OscConfig+0x4b8>)
 c001a0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c001a0e:	f003 0302 	and.w	r3, r3, #2
 c001a12:	2b00      	cmp	r3, #0
 c001a14:	d101      	bne.n	c001a1a <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 c001a16:	2303      	movs	r3, #3
 c001a18:	e294      	b.n	c001f44 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 c001a1a:	4b12      	ldr	r3, [pc, #72]	; (c001a64 <HAL_RCC_OscConfig+0x4b8>)
 c001a1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c001a20:	f003 0302 	and.w	r3, r3, #2
 c001a24:	2b00      	cmp	r3, #0
 c001a26:	d0e8      	beq.n	c0019fa <HAL_RCC_OscConfig+0x44e>
 c001a28:	e025      	b.n	c001a76 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 c001a2a:	4b0e      	ldr	r3, [pc, #56]	; (c001a64 <HAL_RCC_OscConfig+0x4b8>)
 c001a2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c001a30:	4a0c      	ldr	r2, [pc, #48]	; (c001a64 <HAL_RCC_OscConfig+0x4b8>)
 c001a32:	f023 0301 	bic.w	r3, r3, #1
 c001a36:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c001a3a:	f7ff f827 	bl	c000a8c <HAL_GetTick>
 c001a3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 c001a40:	e012      	b.n	c001a68 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 c001a42:	f7ff f823 	bl	c000a8c <HAL_GetTick>
 c001a46:	4602      	mov	r2, r0
 c001a48:	693b      	ldr	r3, [r7, #16]
 c001a4a:	1ad3      	subs	r3, r2, r3
 c001a4c:	2b07      	cmp	r3, #7
 c001a4e:	d90b      	bls.n	c001a68 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 c001a50:	4b04      	ldr	r3, [pc, #16]	; (c001a64 <HAL_RCC_OscConfig+0x4b8>)
 c001a52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c001a56:	f003 0302 	and.w	r3, r3, #2
 c001a5a:	2b00      	cmp	r3, #0
 c001a5c:	d004      	beq.n	c001a68 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 c001a5e:	2303      	movs	r3, #3
 c001a60:	e270      	b.n	c001f44 <HAL_RCC_OscConfig+0x998>
 c001a62:	bf00      	nop
 c001a64:	50021000 	.word	0x50021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 c001a68:	4ba8      	ldr	r3, [pc, #672]	; (c001d0c <HAL_RCC_OscConfig+0x760>)
 c001a6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c001a6e:	f003 0302 	and.w	r3, r3, #2
 c001a72:	2b00      	cmp	r3, #0
 c001a74:	d1e5      	bne.n	c001a42 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 c001a76:	687b      	ldr	r3, [r7, #4]
 c001a78:	681b      	ldr	r3, [r3, #0]
 c001a7a:	f003 0304 	and.w	r3, r3, #4
 c001a7e:	2b00      	cmp	r3, #0
 c001a80:	f000 812d 	beq.w	c001cde <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 c001a84:	2300      	movs	r3, #0
 c001a86:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 c001a88:	4ba0      	ldr	r3, [pc, #640]	; (c001d0c <HAL_RCC_OscConfig+0x760>)
 c001a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c001a8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c001a90:	2b00      	cmp	r3, #0
 c001a92:	d10d      	bne.n	c001ab0 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 c001a94:	4b9d      	ldr	r3, [pc, #628]	; (c001d0c <HAL_RCC_OscConfig+0x760>)
 c001a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c001a98:	4a9c      	ldr	r2, [pc, #624]	; (c001d0c <HAL_RCC_OscConfig+0x760>)
 c001a9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c001a9e:	6593      	str	r3, [r2, #88]	; 0x58
 c001aa0:	4b9a      	ldr	r3, [pc, #616]	; (c001d0c <HAL_RCC_OscConfig+0x760>)
 c001aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c001aa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c001aa8:	60bb      	str	r3, [r7, #8]
 c001aaa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 c001aac:	2301      	movs	r3, #1
 c001aae:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c001ab0:	4b97      	ldr	r3, [pc, #604]	; (c001d10 <HAL_RCC_OscConfig+0x764>)
 c001ab2:	681b      	ldr	r3, [r3, #0]
 c001ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c001ab8:	2b00      	cmp	r3, #0
 c001aba:	d11e      	bne.n	c001afa <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 c001abc:	4b94      	ldr	r3, [pc, #592]	; (c001d10 <HAL_RCC_OscConfig+0x764>)
 c001abe:	681b      	ldr	r3, [r3, #0]
 c001ac0:	4a93      	ldr	r2, [pc, #588]	; (c001d10 <HAL_RCC_OscConfig+0x764>)
 c001ac2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 c001ac6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 c001ac8:	f7fe ffe0 	bl	c000a8c <HAL_GetTick>
 c001acc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c001ace:	e00e      	b.n	c001aee <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 c001ad0:	f7fe ffdc 	bl	c000a8c <HAL_GetTick>
 c001ad4:	4602      	mov	r2, r0
 c001ad6:	693b      	ldr	r3, [r7, #16]
 c001ad8:	1ad3      	subs	r3, r2, r3
 c001ada:	2b02      	cmp	r3, #2
 c001adc:	d907      	bls.n	c001aee <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c001ade:	4b8c      	ldr	r3, [pc, #560]	; (c001d10 <HAL_RCC_OscConfig+0x764>)
 c001ae0:	681b      	ldr	r3, [r3, #0]
 c001ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c001ae6:	2b00      	cmp	r3, #0
 c001ae8:	d101      	bne.n	c001aee <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 c001aea:	2303      	movs	r3, #3
 c001aec:	e22a      	b.n	c001f44 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c001aee:	4b88      	ldr	r3, [pc, #544]	; (c001d10 <HAL_RCC_OscConfig+0x764>)
 c001af0:	681b      	ldr	r3, [r3, #0]
 c001af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c001af6:	2b00      	cmp	r3, #0
 c001af8:	d0ea      	beq.n	c001ad0 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 c001afa:	687b      	ldr	r3, [r7, #4]
 c001afc:	689b      	ldr	r3, [r3, #8]
 c001afe:	f003 0301 	and.w	r3, r3, #1
 c001b02:	2b00      	cmp	r3, #0
 c001b04:	d01f      	beq.n	c001b46 <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 c001b06:	687b      	ldr	r3, [r7, #4]
 c001b08:	689b      	ldr	r3, [r3, #8]
 c001b0a:	f003 0304 	and.w	r3, r3, #4
 c001b0e:	2b00      	cmp	r3, #0
 c001b10:	d010      	beq.n	c001b34 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 c001b12:	4b7e      	ldr	r3, [pc, #504]	; (c001d0c <HAL_RCC_OscConfig+0x760>)
 c001b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c001b18:	4a7c      	ldr	r2, [pc, #496]	; (c001d0c <HAL_RCC_OscConfig+0x760>)
 c001b1a:	f043 0304 	orr.w	r3, r3, #4
 c001b1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 c001b22:	4b7a      	ldr	r3, [pc, #488]	; (c001d0c <HAL_RCC_OscConfig+0x760>)
 c001b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c001b28:	4a78      	ldr	r2, [pc, #480]	; (c001d0c <HAL_RCC_OscConfig+0x760>)
 c001b2a:	f043 0301 	orr.w	r3, r3, #1
 c001b2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 c001b32:	e018      	b.n	c001b66 <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 c001b34:	4b75      	ldr	r3, [pc, #468]	; (c001d0c <HAL_RCC_OscConfig+0x760>)
 c001b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c001b3a:	4a74      	ldr	r2, [pc, #464]	; (c001d0c <HAL_RCC_OscConfig+0x760>)
 c001b3c:	f043 0301 	orr.w	r3, r3, #1
 c001b40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 c001b44:	e00f      	b.n	c001b66 <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 c001b46:	4b71      	ldr	r3, [pc, #452]	; (c001d0c <HAL_RCC_OscConfig+0x760>)
 c001b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c001b4c:	4a6f      	ldr	r2, [pc, #444]	; (c001d0c <HAL_RCC_OscConfig+0x760>)
 c001b4e:	f023 0301 	bic.w	r3, r3, #1
 c001b52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 c001b56:	4b6d      	ldr	r3, [pc, #436]	; (c001d0c <HAL_RCC_OscConfig+0x760>)
 c001b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c001b5c:	4a6b      	ldr	r2, [pc, #428]	; (c001d0c <HAL_RCC_OscConfig+0x760>)
 c001b5e:	f023 0304 	bic.w	r3, r3, #4
 c001b62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 c001b66:	687b      	ldr	r3, [r7, #4]
 c001b68:	689b      	ldr	r3, [r3, #8]
 c001b6a:	2b00      	cmp	r3, #0
 c001b6c:	d068      	beq.n	c001c40 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c001b6e:	f7fe ff8d 	bl	c000a8c <HAL_GetTick>
 c001b72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c001b74:	e011      	b.n	c001b9a <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c001b76:	f7fe ff89 	bl	c000a8c <HAL_GetTick>
 c001b7a:	4602      	mov	r2, r0
 c001b7c:	693b      	ldr	r3, [r7, #16]
 c001b7e:	1ad3      	subs	r3, r2, r3
 c001b80:	f241 3288 	movw	r2, #5000	; 0x1388
 c001b84:	4293      	cmp	r3, r2
 c001b86:	d908      	bls.n	c001b9a <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c001b88:	4b60      	ldr	r3, [pc, #384]	; (c001d0c <HAL_RCC_OscConfig+0x760>)
 c001b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c001b8e:	f003 0302 	and.w	r3, r3, #2
 c001b92:	2b00      	cmp	r3, #0
 c001b94:	d101      	bne.n	c001b9a <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 c001b96:	2303      	movs	r3, #3
 c001b98:	e1d4      	b.n	c001f44 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c001b9a:	4b5c      	ldr	r3, [pc, #368]	; (c001d0c <HAL_RCC_OscConfig+0x760>)
 c001b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c001ba0:	f003 0302 	and.w	r3, r3, #2
 c001ba4:	2b00      	cmp	r3, #0
 c001ba6:	d0e6      	beq.n	c001b76 <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 c001ba8:	687b      	ldr	r3, [r7, #4]
 c001baa:	689b      	ldr	r3, [r3, #8]
 c001bac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c001bb0:	2b00      	cmp	r3, #0
 c001bb2:	d022      	beq.n	c001bfa <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 c001bb4:	4b55      	ldr	r3, [pc, #340]	; (c001d0c <HAL_RCC_OscConfig+0x760>)
 c001bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c001bba:	4a54      	ldr	r2, [pc, #336]	; (c001d0c <HAL_RCC_OscConfig+0x760>)
 c001bbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c001bc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 c001bc4:	e011      	b.n	c001bea <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c001bc6:	f7fe ff61 	bl	c000a8c <HAL_GetTick>
 c001bca:	4602      	mov	r2, r0
 c001bcc:	693b      	ldr	r3, [r7, #16]
 c001bce:	1ad3      	subs	r3, r2, r3
 c001bd0:	f241 3288 	movw	r2, #5000	; 0x1388
 c001bd4:	4293      	cmp	r3, r2
 c001bd6:	d908      	bls.n	c001bea <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 c001bd8:	4b4c      	ldr	r3, [pc, #304]	; (c001d0c <HAL_RCC_OscConfig+0x760>)
 c001bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c001bde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c001be2:	2b00      	cmp	r3, #0
 c001be4:	d101      	bne.n	c001bea <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 c001be6:	2303      	movs	r3, #3
 c001be8:	e1ac      	b.n	c001f44 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 c001bea:	4b48      	ldr	r3, [pc, #288]	; (c001d0c <HAL_RCC_OscConfig+0x760>)
 c001bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c001bf0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c001bf4:	2b00      	cmp	r3, #0
 c001bf6:	d0e6      	beq.n	c001bc6 <HAL_RCC_OscConfig+0x61a>
 c001bf8:	e068      	b.n	c001ccc <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 c001bfa:	4b44      	ldr	r3, [pc, #272]	; (c001d0c <HAL_RCC_OscConfig+0x760>)
 c001bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c001c00:	4a42      	ldr	r2, [pc, #264]	; (c001d0c <HAL_RCC_OscConfig+0x760>)
 c001c02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 c001c06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c001c0a:	e011      	b.n	c001c30 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c001c0c:	f7fe ff3e 	bl	c000a8c <HAL_GetTick>
 c001c10:	4602      	mov	r2, r0
 c001c12:	693b      	ldr	r3, [r7, #16]
 c001c14:	1ad3      	subs	r3, r2, r3
 c001c16:	f241 3288 	movw	r2, #5000	; 0x1388
 c001c1a:	4293      	cmp	r3, r2
 c001c1c:	d908      	bls.n	c001c30 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c001c1e:	4b3b      	ldr	r3, [pc, #236]	; (c001d0c <HAL_RCC_OscConfig+0x760>)
 c001c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c001c24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c001c28:	2b00      	cmp	r3, #0
 c001c2a:	d001      	beq.n	c001c30 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 c001c2c:	2303      	movs	r3, #3
 c001c2e:	e189      	b.n	c001f44 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c001c30:	4b36      	ldr	r3, [pc, #216]	; (c001d0c <HAL_RCC_OscConfig+0x760>)
 c001c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c001c36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c001c3a:	2b00      	cmp	r3, #0
 c001c3c:	d1e6      	bne.n	c001c0c <HAL_RCC_OscConfig+0x660>
 c001c3e:	e045      	b.n	c001ccc <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c001c40:	f7fe ff24 	bl	c000a8c <HAL_GetTick>
 c001c44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 c001c46:	e011      	b.n	c001c6c <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c001c48:	f7fe ff20 	bl	c000a8c <HAL_GetTick>
 c001c4c:	4602      	mov	r2, r0
 c001c4e:	693b      	ldr	r3, [r7, #16]
 c001c50:	1ad3      	subs	r3, r2, r3
 c001c52:	f241 3288 	movw	r2, #5000	; 0x1388
 c001c56:	4293      	cmp	r3, r2
 c001c58:	d908      	bls.n	c001c6c <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 c001c5a:	4b2c      	ldr	r3, [pc, #176]	; (c001d0c <HAL_RCC_OscConfig+0x760>)
 c001c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c001c60:	f003 0302 	and.w	r3, r3, #2
 c001c64:	2b00      	cmp	r3, #0
 c001c66:	d001      	beq.n	c001c6c <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 c001c68:	2303      	movs	r3, #3
 c001c6a:	e16b      	b.n	c001f44 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 c001c6c:	4b27      	ldr	r3, [pc, #156]	; (c001d0c <HAL_RCC_OscConfig+0x760>)
 c001c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c001c72:	f003 0302 	and.w	r3, r3, #2
 c001c76:	2b00      	cmp	r3, #0
 c001c78:	d1e6      	bne.n	c001c48 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 c001c7a:	4b24      	ldr	r3, [pc, #144]	; (c001d0c <HAL_RCC_OscConfig+0x760>)
 c001c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c001c80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c001c84:	2b00      	cmp	r3, #0
 c001c86:	d021      	beq.n	c001ccc <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 c001c88:	4b20      	ldr	r3, [pc, #128]	; (c001d0c <HAL_RCC_OscConfig+0x760>)
 c001c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c001c8e:	4a1f      	ldr	r2, [pc, #124]	; (c001d0c <HAL_RCC_OscConfig+0x760>)
 c001c90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 c001c94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c001c98:	e011      	b.n	c001cbe <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c001c9a:	f7fe fef7 	bl	c000a8c <HAL_GetTick>
 c001c9e:	4602      	mov	r2, r0
 c001ca0:	693b      	ldr	r3, [r7, #16]
 c001ca2:	1ad3      	subs	r3, r2, r3
 c001ca4:	f241 3288 	movw	r2, #5000	; 0x1388
 c001ca8:	4293      	cmp	r3, r2
 c001caa:	d908      	bls.n	c001cbe <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c001cac:	4b17      	ldr	r3, [pc, #92]	; (c001d0c <HAL_RCC_OscConfig+0x760>)
 c001cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c001cb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c001cb6:	2b00      	cmp	r3, #0
 c001cb8:	d001      	beq.n	c001cbe <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 c001cba:	2303      	movs	r3, #3
 c001cbc:	e142      	b.n	c001f44 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c001cbe:	4b13      	ldr	r3, [pc, #76]	; (c001d0c <HAL_RCC_OscConfig+0x760>)
 c001cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c001cc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c001cc8:	2b00      	cmp	r3, #0
 c001cca:	d1e6      	bne.n	c001c9a <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 c001ccc:	7ffb      	ldrb	r3, [r7, #31]
 c001cce:	2b01      	cmp	r3, #1
 c001cd0:	d105      	bne.n	c001cde <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 c001cd2:	4b0e      	ldr	r3, [pc, #56]	; (c001d0c <HAL_RCC_OscConfig+0x760>)
 c001cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c001cd6:	4a0d      	ldr	r2, [pc, #52]	; (c001d0c <HAL_RCC_OscConfig+0x760>)
 c001cd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c001cdc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 c001cde:	687b      	ldr	r3, [r7, #4]
 c001ce0:	681b      	ldr	r3, [r3, #0]
 c001ce2:	f003 0320 	and.w	r3, r3, #32
 c001ce6:	2b00      	cmp	r3, #0
 c001ce8:	d04f      	beq.n	c001d8a <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 c001cea:	687b      	ldr	r3, [r7, #4]
 c001cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c001cee:	2b00      	cmp	r3, #0
 c001cf0:	d028      	beq.n	c001d44 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 c001cf2:	4b06      	ldr	r3, [pc, #24]	; (c001d0c <HAL_RCC_OscConfig+0x760>)
 c001cf4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c001cf8:	4a04      	ldr	r2, [pc, #16]	; (c001d0c <HAL_RCC_OscConfig+0x760>)
 c001cfa:	f043 0301 	orr.w	r3, r3, #1
 c001cfe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c001d02:	f7fe fec3 	bl	c000a8c <HAL_GetTick>
 c001d06:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 c001d08:	e014      	b.n	c001d34 <HAL_RCC_OscConfig+0x788>
 c001d0a:	bf00      	nop
 c001d0c:	50021000 	.word	0x50021000
 c001d10:	50007000 	.word	0x50007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 c001d14:	f7fe feba 	bl	c000a8c <HAL_GetTick>
 c001d18:	4602      	mov	r2, r0
 c001d1a:	693b      	ldr	r3, [r7, #16]
 c001d1c:	1ad3      	subs	r3, r2, r3
 c001d1e:	2b02      	cmp	r3, #2
 c001d20:	d908      	bls.n	c001d34 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 c001d22:	4b8a      	ldr	r3, [pc, #552]	; (c001f4c <HAL_RCC_OscConfig+0x9a0>)
 c001d24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c001d28:	f003 0302 	and.w	r3, r3, #2
 c001d2c:	2b00      	cmp	r3, #0
 c001d2e:	d101      	bne.n	c001d34 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 c001d30:	2303      	movs	r3, #3
 c001d32:	e107      	b.n	c001f44 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 c001d34:	4b85      	ldr	r3, [pc, #532]	; (c001f4c <HAL_RCC_OscConfig+0x9a0>)
 c001d36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c001d3a:	f003 0302 	and.w	r3, r3, #2
 c001d3e:	2b00      	cmp	r3, #0
 c001d40:	d0e8      	beq.n	c001d14 <HAL_RCC_OscConfig+0x768>
 c001d42:	e022      	b.n	c001d8a <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 c001d44:	4b81      	ldr	r3, [pc, #516]	; (c001f4c <HAL_RCC_OscConfig+0x9a0>)
 c001d46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c001d4a:	4a80      	ldr	r2, [pc, #512]	; (c001f4c <HAL_RCC_OscConfig+0x9a0>)
 c001d4c:	f023 0301 	bic.w	r3, r3, #1
 c001d50:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c001d54:	f7fe fe9a 	bl	c000a8c <HAL_GetTick>
 c001d58:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 c001d5a:	e00f      	b.n	c001d7c <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 c001d5c:	f7fe fe96 	bl	c000a8c <HAL_GetTick>
 c001d60:	4602      	mov	r2, r0
 c001d62:	693b      	ldr	r3, [r7, #16]
 c001d64:	1ad3      	subs	r3, r2, r3
 c001d66:	2b02      	cmp	r3, #2
 c001d68:	d908      	bls.n	c001d7c <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 c001d6a:	4b78      	ldr	r3, [pc, #480]	; (c001f4c <HAL_RCC_OscConfig+0x9a0>)
 c001d6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c001d70:	f003 0302 	and.w	r3, r3, #2
 c001d74:	2b00      	cmp	r3, #0
 c001d76:	d001      	beq.n	c001d7c <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 c001d78:	2303      	movs	r3, #3
 c001d7a:	e0e3      	b.n	c001f44 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 c001d7c:	4b73      	ldr	r3, [pc, #460]	; (c001f4c <HAL_RCC_OscConfig+0x9a0>)
 c001d7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c001d82:	f003 0302 	and.w	r3, r3, #2
 c001d86:	2b00      	cmp	r3, #0
 c001d88:	d1e8      	bne.n	c001d5c <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 c001d8a:	687b      	ldr	r3, [r7, #4]
 c001d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c001d8e:	2b00      	cmp	r3, #0
 c001d90:	f000 80d7 	beq.w	c001f42 <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 c001d94:	4b6d      	ldr	r3, [pc, #436]	; (c001f4c <HAL_RCC_OscConfig+0x9a0>)
 c001d96:	689b      	ldr	r3, [r3, #8]
 c001d98:	f003 030c 	and.w	r3, r3, #12
 c001d9c:	2b0c      	cmp	r3, #12
 c001d9e:	f000 8091 	beq.w	c001ec4 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 c001da2:	687b      	ldr	r3, [r7, #4]
 c001da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c001da6:	2b02      	cmp	r3, #2
 c001da8:	d166      	bne.n	c001e78 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 c001daa:	4b68      	ldr	r3, [pc, #416]	; (c001f4c <HAL_RCC_OscConfig+0x9a0>)
 c001dac:	681b      	ldr	r3, [r3, #0]
 c001dae:	4a67      	ldr	r2, [pc, #412]	; (c001f4c <HAL_RCC_OscConfig+0x9a0>)
 c001db0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 c001db4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c001db6:	f7fe fe69 	bl	c000a8c <HAL_GetTick>
 c001dba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c001dbc:	e00e      	b.n	c001ddc <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 c001dbe:	f7fe fe65 	bl	c000a8c <HAL_GetTick>
 c001dc2:	4602      	mov	r2, r0
 c001dc4:	693b      	ldr	r3, [r7, #16]
 c001dc6:	1ad3      	subs	r3, r2, r3
 c001dc8:	2b02      	cmp	r3, #2
 c001dca:	d907      	bls.n	c001ddc <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c001dcc:	4b5f      	ldr	r3, [pc, #380]	; (c001f4c <HAL_RCC_OscConfig+0x9a0>)
 c001dce:	681b      	ldr	r3, [r3, #0]
 c001dd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c001dd4:	2b00      	cmp	r3, #0
 c001dd6:	d001      	beq.n	c001ddc <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 c001dd8:	2303      	movs	r3, #3
 c001dda:	e0b3      	b.n	c001f44 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c001ddc:	4b5b      	ldr	r3, [pc, #364]	; (c001f4c <HAL_RCC_OscConfig+0x9a0>)
 c001dde:	681b      	ldr	r3, [r3, #0]
 c001de0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c001de4:	2b00      	cmp	r3, #0
 c001de6:	d1ea      	bne.n	c001dbe <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 c001de8:	4b58      	ldr	r3, [pc, #352]	; (c001f4c <HAL_RCC_OscConfig+0x9a0>)
 c001dea:	68da      	ldr	r2, [r3, #12]
 c001dec:	4b58      	ldr	r3, [pc, #352]	; (c001f50 <HAL_RCC_OscConfig+0x9a4>)
 c001dee:	4013      	ands	r3, r2
 c001df0:	687a      	ldr	r2, [r7, #4]
 c001df2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 c001df4:	687a      	ldr	r2, [r7, #4]
 c001df6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 c001df8:	3a01      	subs	r2, #1
 c001dfa:	0112      	lsls	r2, r2, #4
 c001dfc:	4311      	orrs	r1, r2
 c001dfe:	687a      	ldr	r2, [r7, #4]
 c001e00:	6b92      	ldr	r2, [r2, #56]	; 0x38
 c001e02:	0212      	lsls	r2, r2, #8
 c001e04:	4311      	orrs	r1, r2
 c001e06:	687a      	ldr	r2, [r7, #4]
 c001e08:	6c12      	ldr	r2, [r2, #64]	; 0x40
 c001e0a:	0852      	lsrs	r2, r2, #1
 c001e0c:	3a01      	subs	r2, #1
 c001e0e:	0552      	lsls	r2, r2, #21
 c001e10:	4311      	orrs	r1, r2
 c001e12:	687a      	ldr	r2, [r7, #4]
 c001e14:	6c52      	ldr	r2, [r2, #68]	; 0x44
 c001e16:	0852      	lsrs	r2, r2, #1
 c001e18:	3a01      	subs	r2, #1
 c001e1a:	0652      	lsls	r2, r2, #25
 c001e1c:	4311      	orrs	r1, r2
 c001e1e:	687a      	ldr	r2, [r7, #4]
 c001e20:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 c001e22:	06d2      	lsls	r2, r2, #27
 c001e24:	430a      	orrs	r2, r1
 c001e26:	4949      	ldr	r1, [pc, #292]	; (c001f4c <HAL_RCC_OscConfig+0x9a0>)
 c001e28:	4313      	orrs	r3, r2
 c001e2a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 c001e2c:	4b47      	ldr	r3, [pc, #284]	; (c001f4c <HAL_RCC_OscConfig+0x9a0>)
 c001e2e:	681b      	ldr	r3, [r3, #0]
 c001e30:	4a46      	ldr	r2, [pc, #280]	; (c001f4c <HAL_RCC_OscConfig+0x9a0>)
 c001e32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 c001e36:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 c001e38:	4b44      	ldr	r3, [pc, #272]	; (c001f4c <HAL_RCC_OscConfig+0x9a0>)
 c001e3a:	68db      	ldr	r3, [r3, #12]
 c001e3c:	4a43      	ldr	r2, [pc, #268]	; (c001f4c <HAL_RCC_OscConfig+0x9a0>)
 c001e3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 c001e42:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c001e44:	f7fe fe22 	bl	c000a8c <HAL_GetTick>
 c001e48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c001e4a:	e00e      	b.n	c001e6a <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 c001e4c:	f7fe fe1e 	bl	c000a8c <HAL_GetTick>
 c001e50:	4602      	mov	r2, r0
 c001e52:	693b      	ldr	r3, [r7, #16]
 c001e54:	1ad3      	subs	r3, r2, r3
 c001e56:	2b02      	cmp	r3, #2
 c001e58:	d907      	bls.n	c001e6a <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c001e5a:	4b3c      	ldr	r3, [pc, #240]	; (c001f4c <HAL_RCC_OscConfig+0x9a0>)
 c001e5c:	681b      	ldr	r3, [r3, #0]
 c001e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c001e62:	2b00      	cmp	r3, #0
 c001e64:	d101      	bne.n	c001e6a <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 c001e66:	2303      	movs	r3, #3
 c001e68:	e06c      	b.n	c001f44 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c001e6a:	4b38      	ldr	r3, [pc, #224]	; (c001f4c <HAL_RCC_OscConfig+0x9a0>)
 c001e6c:	681b      	ldr	r3, [r3, #0]
 c001e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c001e72:	2b00      	cmp	r3, #0
 c001e74:	d0ea      	beq.n	c001e4c <HAL_RCC_OscConfig+0x8a0>
 c001e76:	e064      	b.n	c001f42 <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 c001e78:	4b34      	ldr	r3, [pc, #208]	; (c001f4c <HAL_RCC_OscConfig+0x9a0>)
 c001e7a:	681b      	ldr	r3, [r3, #0]
 c001e7c:	4a33      	ldr	r2, [pc, #204]	; (c001f4c <HAL_RCC_OscConfig+0x9a0>)
 c001e7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 c001e82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c001e84:	f7fe fe02 	bl	c000a8c <HAL_GetTick>
 c001e88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c001e8a:	e00e      	b.n	c001eaa <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 c001e8c:	f7fe fdfe 	bl	c000a8c <HAL_GetTick>
 c001e90:	4602      	mov	r2, r0
 c001e92:	693b      	ldr	r3, [r7, #16]
 c001e94:	1ad3      	subs	r3, r2, r3
 c001e96:	2b02      	cmp	r3, #2
 c001e98:	d907      	bls.n	c001eaa <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c001e9a:	4b2c      	ldr	r3, [pc, #176]	; (c001f4c <HAL_RCC_OscConfig+0x9a0>)
 c001e9c:	681b      	ldr	r3, [r3, #0]
 c001e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c001ea2:	2b00      	cmp	r3, #0
 c001ea4:	d001      	beq.n	c001eaa <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 c001ea6:	2303      	movs	r3, #3
 c001ea8:	e04c      	b.n	c001f44 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c001eaa:	4b28      	ldr	r3, [pc, #160]	; (c001f4c <HAL_RCC_OscConfig+0x9a0>)
 c001eac:	681b      	ldr	r3, [r3, #0]
 c001eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c001eb2:	2b00      	cmp	r3, #0
 c001eb4:	d1ea      	bne.n	c001e8c <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 c001eb6:	4b25      	ldr	r3, [pc, #148]	; (c001f4c <HAL_RCC_OscConfig+0x9a0>)
 c001eb8:	68da      	ldr	r2, [r3, #12]
 c001eba:	4924      	ldr	r1, [pc, #144]	; (c001f4c <HAL_RCC_OscConfig+0x9a0>)
 c001ebc:	4b25      	ldr	r3, [pc, #148]	; (c001f54 <HAL_RCC_OscConfig+0x9a8>)
 c001ebe:	4013      	ands	r3, r2
 c001ec0:	60cb      	str	r3, [r1, #12]
 c001ec2:	e03e      	b.n	c001f42 <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 c001ec4:	687b      	ldr	r3, [r7, #4]
 c001ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c001ec8:	2b01      	cmp	r3, #1
 c001eca:	d101      	bne.n	c001ed0 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 c001ecc:	2301      	movs	r3, #1
 c001ece:	e039      	b.n	c001f44 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 c001ed0:	4b1e      	ldr	r3, [pc, #120]	; (c001f4c <HAL_RCC_OscConfig+0x9a0>)
 c001ed2:	68db      	ldr	r3, [r3, #12]
 c001ed4:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 c001ed6:	697b      	ldr	r3, [r7, #20]
 c001ed8:	f003 0203 	and.w	r2, r3, #3
 c001edc:	687b      	ldr	r3, [r7, #4]
 c001ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c001ee0:	429a      	cmp	r2, r3
 c001ee2:	d12c      	bne.n	c001f3e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 c001ee4:	697b      	ldr	r3, [r7, #20]
 c001ee6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 c001eea:	687b      	ldr	r3, [r7, #4]
 c001eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c001eee:	3b01      	subs	r3, #1
 c001ef0:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 c001ef2:	429a      	cmp	r2, r3
 c001ef4:	d123      	bne.n	c001f3e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 c001ef6:	697b      	ldr	r3, [r7, #20]
 c001ef8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 c001efc:	687b      	ldr	r3, [r7, #4]
 c001efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c001f00:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 c001f02:	429a      	cmp	r2, r3
 c001f04:	d11b      	bne.n	c001f3e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 c001f06:	697b      	ldr	r3, [r7, #20]
 c001f08:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 c001f0c:	687b      	ldr	r3, [r7, #4]
 c001f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c001f10:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 c001f12:	429a      	cmp	r2, r3
 c001f14:	d113      	bne.n	c001f3e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 c001f16:	697b      	ldr	r3, [r7, #20]
 c001f18:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 c001f1c:	687b      	ldr	r3, [r7, #4]
 c001f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 c001f20:	085b      	lsrs	r3, r3, #1
 c001f22:	3b01      	subs	r3, #1
 c001f24:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 c001f26:	429a      	cmp	r2, r3
 c001f28:	d109      	bne.n	c001f3e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 c001f2a:	697b      	ldr	r3, [r7, #20]
 c001f2c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 c001f30:	687b      	ldr	r3, [r7, #4]
 c001f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c001f34:	085b      	lsrs	r3, r3, #1
 c001f36:	3b01      	subs	r3, #1
 c001f38:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 c001f3a:	429a      	cmp	r2, r3
 c001f3c:	d001      	beq.n	c001f42 <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 c001f3e:	2301      	movs	r3, #1
 c001f40:	e000      	b.n	c001f44 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 c001f42:	2300      	movs	r3, #0
}
 c001f44:	4618      	mov	r0, r3
 c001f46:	3720      	adds	r7, #32
 c001f48:	46bd      	mov	sp, r7
 c001f4a:	bd80      	pop	{r7, pc}
 c001f4c:	50021000 	.word	0x50021000
 c001f50:	019f800c 	.word	0x019f800c
 c001f54:	feeefffc 	.word	0xfeeefffc

0c001f58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 c001f58:	b580      	push	{r7, lr}
 c001f5a:	b086      	sub	sp, #24
 c001f5c:	af00      	add	r7, sp, #0
 c001f5e:	6078      	str	r0, [r7, #4]
 c001f60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 c001f62:	2300      	movs	r3, #0
 c001f64:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 c001f66:	687b      	ldr	r3, [r7, #4]
 c001f68:	2b00      	cmp	r3, #0
 c001f6a:	d101      	bne.n	c001f70 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 c001f6c:	2301      	movs	r3, #1
 c001f6e:	e11c      	b.n	c0021aa <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 c001f70:	4b90      	ldr	r3, [pc, #576]	; (c0021b4 <HAL_RCC_ClockConfig+0x25c>)
 c001f72:	681b      	ldr	r3, [r3, #0]
 c001f74:	f003 030f 	and.w	r3, r3, #15
 c001f78:	683a      	ldr	r2, [r7, #0]
 c001f7a:	429a      	cmp	r2, r3
 c001f7c:	d910      	bls.n	c001fa0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 c001f7e:	4b8d      	ldr	r3, [pc, #564]	; (c0021b4 <HAL_RCC_ClockConfig+0x25c>)
 c001f80:	681b      	ldr	r3, [r3, #0]
 c001f82:	f023 020f 	bic.w	r2, r3, #15
 c001f86:	498b      	ldr	r1, [pc, #556]	; (c0021b4 <HAL_RCC_ClockConfig+0x25c>)
 c001f88:	683b      	ldr	r3, [r7, #0]
 c001f8a:	4313      	orrs	r3, r2
 c001f8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 c001f8e:	4b89      	ldr	r3, [pc, #548]	; (c0021b4 <HAL_RCC_ClockConfig+0x25c>)
 c001f90:	681b      	ldr	r3, [r3, #0]
 c001f92:	f003 030f 	and.w	r3, r3, #15
 c001f96:	683a      	ldr	r2, [r7, #0]
 c001f98:	429a      	cmp	r2, r3
 c001f9a:	d001      	beq.n	c001fa0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 c001f9c:	2301      	movs	r3, #1
 c001f9e:	e104      	b.n	c0021aa <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 c001fa0:	687b      	ldr	r3, [r7, #4]
 c001fa2:	681b      	ldr	r3, [r3, #0]
 c001fa4:	f003 0302 	and.w	r3, r3, #2
 c001fa8:	2b00      	cmp	r3, #0
 c001faa:	d010      	beq.n	c001fce <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 c001fac:	687b      	ldr	r3, [r7, #4]
 c001fae:	689a      	ldr	r2, [r3, #8]
 c001fb0:	4b81      	ldr	r3, [pc, #516]	; (c0021b8 <HAL_RCC_ClockConfig+0x260>)
 c001fb2:	689b      	ldr	r3, [r3, #8]
 c001fb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 c001fb8:	429a      	cmp	r2, r3
 c001fba:	d908      	bls.n	c001fce <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 c001fbc:	4b7e      	ldr	r3, [pc, #504]	; (c0021b8 <HAL_RCC_ClockConfig+0x260>)
 c001fbe:	689b      	ldr	r3, [r3, #8]
 c001fc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 c001fc4:	687b      	ldr	r3, [r7, #4]
 c001fc6:	689b      	ldr	r3, [r3, #8]
 c001fc8:	497b      	ldr	r1, [pc, #492]	; (c0021b8 <HAL_RCC_ClockConfig+0x260>)
 c001fca:	4313      	orrs	r3, r2
 c001fcc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 c001fce:	687b      	ldr	r3, [r7, #4]
 c001fd0:	681b      	ldr	r3, [r3, #0]
 c001fd2:	f003 0301 	and.w	r3, r3, #1
 c001fd6:	2b00      	cmp	r3, #0
 c001fd8:	f000 8085 	beq.w	c0020e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 c001fdc:	687b      	ldr	r3, [r7, #4]
 c001fde:	685b      	ldr	r3, [r3, #4]
 c001fe0:	2b03      	cmp	r3, #3
 c001fe2:	d11f      	bne.n	c002024 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c001fe4:	4b74      	ldr	r3, [pc, #464]	; (c0021b8 <HAL_RCC_ClockConfig+0x260>)
 c001fe6:	681b      	ldr	r3, [r3, #0]
 c001fe8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c001fec:	2b00      	cmp	r3, #0
 c001fee:	d101      	bne.n	c001ff4 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 c001ff0:	2301      	movs	r3, #1
 c001ff2:	e0da      	b.n	c0021aa <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 c001ff4:	f000 fb12 	bl	c00261c <RCC_GetSysClockFreqFromPLLSource>
 c001ff8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 c001ffa:	693b      	ldr	r3, [r7, #16]
 c001ffc:	4a6f      	ldr	r2, [pc, #444]	; (c0021bc <HAL_RCC_ClockConfig+0x264>)
 c001ffe:	4293      	cmp	r3, r2
 c002000:	d947      	bls.n	c002092 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 c002002:	4b6d      	ldr	r3, [pc, #436]	; (c0021b8 <HAL_RCC_ClockConfig+0x260>)
 c002004:	689b      	ldr	r3, [r3, #8]
 c002006:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 c00200a:	2b00      	cmp	r3, #0
 c00200c:	d141      	bne.n	c002092 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 c00200e:	4b6a      	ldr	r3, [pc, #424]	; (c0021b8 <HAL_RCC_ClockConfig+0x260>)
 c002010:	689b      	ldr	r3, [r3, #8]
 c002012:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 c002016:	4a68      	ldr	r2, [pc, #416]	; (c0021b8 <HAL_RCC_ClockConfig+0x260>)
 c002018:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c00201c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 c00201e:	2380      	movs	r3, #128	; 0x80
 c002020:	617b      	str	r3, [r7, #20]
 c002022:	e036      	b.n	c002092 <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 c002024:	687b      	ldr	r3, [r7, #4]
 c002026:	685b      	ldr	r3, [r3, #4]
 c002028:	2b02      	cmp	r3, #2
 c00202a:	d107      	bne.n	c00203c <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c00202c:	4b62      	ldr	r3, [pc, #392]	; (c0021b8 <HAL_RCC_ClockConfig+0x260>)
 c00202e:	681b      	ldr	r3, [r3, #0]
 c002030:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c002034:	2b00      	cmp	r3, #0
 c002036:	d115      	bne.n	c002064 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 c002038:	2301      	movs	r3, #1
 c00203a:	e0b6      	b.n	c0021aa <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 c00203c:	687b      	ldr	r3, [r7, #4]
 c00203e:	685b      	ldr	r3, [r3, #4]
 c002040:	2b00      	cmp	r3, #0
 c002042:	d107      	bne.n	c002054 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c002044:	4b5c      	ldr	r3, [pc, #368]	; (c0021b8 <HAL_RCC_ClockConfig+0x260>)
 c002046:	681b      	ldr	r3, [r3, #0]
 c002048:	f003 0302 	and.w	r3, r3, #2
 c00204c:	2b00      	cmp	r3, #0
 c00204e:	d109      	bne.n	c002064 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 c002050:	2301      	movs	r3, #1
 c002052:	e0aa      	b.n	c0021aa <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c002054:	4b58      	ldr	r3, [pc, #352]	; (c0021b8 <HAL_RCC_ClockConfig+0x260>)
 c002056:	681b      	ldr	r3, [r3, #0]
 c002058:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c00205c:	2b00      	cmp	r3, #0
 c00205e:	d101      	bne.n	c002064 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 c002060:	2301      	movs	r3, #1
 c002062:	e0a2      	b.n	c0021aa <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 c002064:	f000 f8b0 	bl	c0021c8 <HAL_RCC_GetSysClockFreq>
 c002068:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 c00206a:	693b      	ldr	r3, [r7, #16]
 c00206c:	4a53      	ldr	r2, [pc, #332]	; (c0021bc <HAL_RCC_ClockConfig+0x264>)
 c00206e:	4293      	cmp	r3, r2
 c002070:	d90f      	bls.n	c002092 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 c002072:	4b51      	ldr	r3, [pc, #324]	; (c0021b8 <HAL_RCC_ClockConfig+0x260>)
 c002074:	689b      	ldr	r3, [r3, #8]
 c002076:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 c00207a:	2b00      	cmp	r3, #0
 c00207c:	d109      	bne.n	c002092 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 c00207e:	4b4e      	ldr	r3, [pc, #312]	; (c0021b8 <HAL_RCC_ClockConfig+0x260>)
 c002080:	689b      	ldr	r3, [r3, #8]
 c002082:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 c002086:	4a4c      	ldr	r2, [pc, #304]	; (c0021b8 <HAL_RCC_ClockConfig+0x260>)
 c002088:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c00208c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 c00208e:	2380      	movs	r3, #128	; 0x80
 c002090:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 c002092:	4b49      	ldr	r3, [pc, #292]	; (c0021b8 <HAL_RCC_ClockConfig+0x260>)
 c002094:	689b      	ldr	r3, [r3, #8]
 c002096:	f023 0203 	bic.w	r2, r3, #3
 c00209a:	687b      	ldr	r3, [r7, #4]
 c00209c:	685b      	ldr	r3, [r3, #4]
 c00209e:	4946      	ldr	r1, [pc, #280]	; (c0021b8 <HAL_RCC_ClockConfig+0x260>)
 c0020a0:	4313      	orrs	r3, r2
 c0020a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 c0020a4:	f7fe fcf2 	bl	c000a8c <HAL_GetTick>
 c0020a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 c0020aa:	e013      	b.n	c0020d4 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 c0020ac:	f7fe fcee 	bl	c000a8c <HAL_GetTick>
 c0020b0:	4602      	mov	r2, r0
 c0020b2:	68fb      	ldr	r3, [r7, #12]
 c0020b4:	1ad3      	subs	r3, r2, r3
 c0020b6:	f241 3288 	movw	r2, #5000	; 0x1388
 c0020ba:	4293      	cmp	r3, r2
 c0020bc:	d90a      	bls.n	c0020d4 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 c0020be:	4b3e      	ldr	r3, [pc, #248]	; (c0021b8 <HAL_RCC_ClockConfig+0x260>)
 c0020c0:	689b      	ldr	r3, [r3, #8]
 c0020c2:	f003 020c 	and.w	r2, r3, #12
 c0020c6:	687b      	ldr	r3, [r7, #4]
 c0020c8:	685b      	ldr	r3, [r3, #4]
 c0020ca:	009b      	lsls	r3, r3, #2
 c0020cc:	429a      	cmp	r2, r3
 c0020ce:	d001      	beq.n	c0020d4 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 c0020d0:	2303      	movs	r3, #3
 c0020d2:	e06a      	b.n	c0021aa <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 c0020d4:	4b38      	ldr	r3, [pc, #224]	; (c0021b8 <HAL_RCC_ClockConfig+0x260>)
 c0020d6:	689b      	ldr	r3, [r3, #8]
 c0020d8:	f003 020c 	and.w	r2, r3, #12
 c0020dc:	687b      	ldr	r3, [r7, #4]
 c0020de:	685b      	ldr	r3, [r3, #4]
 c0020e0:	009b      	lsls	r3, r3, #2
 c0020e2:	429a      	cmp	r2, r3
 c0020e4:	d1e2      	bne.n	c0020ac <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 c0020e6:	697b      	ldr	r3, [r7, #20]
 c0020e8:	2b80      	cmp	r3, #128	; 0x80
 c0020ea:	d105      	bne.n	c0020f8 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 c0020ec:	4b32      	ldr	r3, [pc, #200]	; (c0021b8 <HAL_RCC_ClockConfig+0x260>)
 c0020ee:	689b      	ldr	r3, [r3, #8]
 c0020f0:	4a31      	ldr	r2, [pc, #196]	; (c0021b8 <HAL_RCC_ClockConfig+0x260>)
 c0020f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 c0020f6:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 c0020f8:	687b      	ldr	r3, [r7, #4]
 c0020fa:	681b      	ldr	r3, [r3, #0]
 c0020fc:	f003 0302 	and.w	r3, r3, #2
 c002100:	2b00      	cmp	r3, #0
 c002102:	d010      	beq.n	c002126 <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 c002104:	687b      	ldr	r3, [r7, #4]
 c002106:	689a      	ldr	r2, [r3, #8]
 c002108:	4b2b      	ldr	r3, [pc, #172]	; (c0021b8 <HAL_RCC_ClockConfig+0x260>)
 c00210a:	689b      	ldr	r3, [r3, #8]
 c00210c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 c002110:	429a      	cmp	r2, r3
 c002112:	d208      	bcs.n	c002126 <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 c002114:	4b28      	ldr	r3, [pc, #160]	; (c0021b8 <HAL_RCC_ClockConfig+0x260>)
 c002116:	689b      	ldr	r3, [r3, #8]
 c002118:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 c00211c:	687b      	ldr	r3, [r7, #4]
 c00211e:	689b      	ldr	r3, [r3, #8]
 c002120:	4925      	ldr	r1, [pc, #148]	; (c0021b8 <HAL_RCC_ClockConfig+0x260>)
 c002122:	4313      	orrs	r3, r2
 c002124:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 c002126:	4b23      	ldr	r3, [pc, #140]	; (c0021b4 <HAL_RCC_ClockConfig+0x25c>)
 c002128:	681b      	ldr	r3, [r3, #0]
 c00212a:	f003 030f 	and.w	r3, r3, #15
 c00212e:	683a      	ldr	r2, [r7, #0]
 c002130:	429a      	cmp	r2, r3
 c002132:	d210      	bcs.n	c002156 <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 c002134:	4b1f      	ldr	r3, [pc, #124]	; (c0021b4 <HAL_RCC_ClockConfig+0x25c>)
 c002136:	681b      	ldr	r3, [r3, #0]
 c002138:	f023 020f 	bic.w	r2, r3, #15
 c00213c:	491d      	ldr	r1, [pc, #116]	; (c0021b4 <HAL_RCC_ClockConfig+0x25c>)
 c00213e:	683b      	ldr	r3, [r7, #0]
 c002140:	4313      	orrs	r3, r2
 c002142:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 c002144:	4b1b      	ldr	r3, [pc, #108]	; (c0021b4 <HAL_RCC_ClockConfig+0x25c>)
 c002146:	681b      	ldr	r3, [r3, #0]
 c002148:	f003 030f 	and.w	r3, r3, #15
 c00214c:	683a      	ldr	r2, [r7, #0]
 c00214e:	429a      	cmp	r2, r3
 c002150:	d001      	beq.n	c002156 <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 c002152:	2301      	movs	r3, #1
 c002154:	e029      	b.n	c0021aa <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 c002156:	687b      	ldr	r3, [r7, #4]
 c002158:	681b      	ldr	r3, [r3, #0]
 c00215a:	f003 0304 	and.w	r3, r3, #4
 c00215e:	2b00      	cmp	r3, #0
 c002160:	d008      	beq.n	c002174 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 c002162:	4b15      	ldr	r3, [pc, #84]	; (c0021b8 <HAL_RCC_ClockConfig+0x260>)
 c002164:	689b      	ldr	r3, [r3, #8]
 c002166:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 c00216a:	687b      	ldr	r3, [r7, #4]
 c00216c:	68db      	ldr	r3, [r3, #12]
 c00216e:	4912      	ldr	r1, [pc, #72]	; (c0021b8 <HAL_RCC_ClockConfig+0x260>)
 c002170:	4313      	orrs	r3, r2
 c002172:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 c002174:	687b      	ldr	r3, [r7, #4]
 c002176:	681b      	ldr	r3, [r3, #0]
 c002178:	f003 0308 	and.w	r3, r3, #8
 c00217c:	2b00      	cmp	r3, #0
 c00217e:	d009      	beq.n	c002194 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 c002180:	4b0d      	ldr	r3, [pc, #52]	; (c0021b8 <HAL_RCC_ClockConfig+0x260>)
 c002182:	689b      	ldr	r3, [r3, #8]
 c002184:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 c002188:	687b      	ldr	r3, [r7, #4]
 c00218a:	691b      	ldr	r3, [r3, #16]
 c00218c:	00db      	lsls	r3, r3, #3
 c00218e:	490a      	ldr	r1, [pc, #40]	; (c0021b8 <HAL_RCC_ClockConfig+0x260>)
 c002190:	4313      	orrs	r3, r2
 c002192:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 c002194:	f000 f8b4 	bl	c002300 <HAL_RCC_GetHCLKFreq>
 c002198:	4603      	mov	r3, r0
 c00219a:	4a09      	ldr	r2, [pc, #36]	; (c0021c0 <HAL_RCC_ClockConfig+0x268>)
 c00219c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 c00219e:	4b09      	ldr	r3, [pc, #36]	; (c0021c4 <HAL_RCC_ClockConfig+0x26c>)
 c0021a0:	681b      	ldr	r3, [r3, #0]
 c0021a2:	4618      	mov	r0, r3
 c0021a4:	f7fe fc22 	bl	c0009ec <HAL_InitTick>
 c0021a8:	4603      	mov	r3, r0
}
 c0021aa:	4618      	mov	r0, r3
 c0021ac:	3718      	adds	r7, #24
 c0021ae:	46bd      	mov	sp, r7
 c0021b0:	bd80      	pop	{r7, pc}
 c0021b2:	bf00      	nop
 c0021b4:	50022000 	.word	0x50022000
 c0021b8:	50021000 	.word	0x50021000
 c0021bc:	04c4b400 	.word	0x04c4b400
 c0021c0:	30000008 	.word	0x30000008
 c0021c4:	3000000c 	.word	0x3000000c

0c0021c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 c0021c8:	b480      	push	{r7}
 c0021ca:	b089      	sub	sp, #36	; 0x24
 c0021cc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 c0021ce:	2300      	movs	r3, #0
 c0021d0:	61fb      	str	r3, [r7, #28]
 c0021d2:	2300      	movs	r3, #0
 c0021d4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 c0021d6:	4b47      	ldr	r3, [pc, #284]	; (c0022f4 <HAL_RCC_GetSysClockFreq+0x12c>)
 c0021d8:	689b      	ldr	r3, [r3, #8]
 c0021da:	f003 030c 	and.w	r3, r3, #12
 c0021de:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 c0021e0:	4b44      	ldr	r3, [pc, #272]	; (c0022f4 <HAL_RCC_GetSysClockFreq+0x12c>)
 c0021e2:	68db      	ldr	r3, [r3, #12]
 c0021e4:	f003 0303 	and.w	r3, r3, #3
 c0021e8:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 c0021ea:	693b      	ldr	r3, [r7, #16]
 c0021ec:	2b00      	cmp	r3, #0
 c0021ee:	d005      	beq.n	c0021fc <HAL_RCC_GetSysClockFreq+0x34>
 c0021f0:	693b      	ldr	r3, [r7, #16]
 c0021f2:	2b0c      	cmp	r3, #12
 c0021f4:	d121      	bne.n	c00223a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 c0021f6:	68fb      	ldr	r3, [r7, #12]
 c0021f8:	2b01      	cmp	r3, #1
 c0021fa:	d11e      	bne.n	c00223a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 c0021fc:	4b3d      	ldr	r3, [pc, #244]	; (c0022f4 <HAL_RCC_GetSysClockFreq+0x12c>)
 c0021fe:	681b      	ldr	r3, [r3, #0]
 c002200:	f003 0308 	and.w	r3, r3, #8
 c002204:	2b00      	cmp	r3, #0
 c002206:	d107      	bne.n	c002218 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 c002208:	4b3a      	ldr	r3, [pc, #232]	; (c0022f4 <HAL_RCC_GetSysClockFreq+0x12c>)
 c00220a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c00220e:	0a1b      	lsrs	r3, r3, #8
 c002210:	f003 030f 	and.w	r3, r3, #15
 c002214:	61fb      	str	r3, [r7, #28]
 c002216:	e005      	b.n	c002224 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 c002218:	4b36      	ldr	r3, [pc, #216]	; (c0022f4 <HAL_RCC_GetSysClockFreq+0x12c>)
 c00221a:	681b      	ldr	r3, [r3, #0]
 c00221c:	091b      	lsrs	r3, r3, #4
 c00221e:	f003 030f 	and.w	r3, r3, #15
 c002222:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 c002224:	4a34      	ldr	r2, [pc, #208]	; (c0022f8 <HAL_RCC_GetSysClockFreq+0x130>)
 c002226:	69fb      	ldr	r3, [r7, #28]
 c002228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c00222c:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c00222e:	693b      	ldr	r3, [r7, #16]
 c002230:	2b00      	cmp	r3, #0
 c002232:	d10d      	bne.n	c002250 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 c002234:	69fb      	ldr	r3, [r7, #28]
 c002236:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c002238:	e00a      	b.n	c002250 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 c00223a:	693b      	ldr	r3, [r7, #16]
 c00223c:	2b04      	cmp	r3, #4
 c00223e:	d102      	bne.n	c002246 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 c002240:	4b2e      	ldr	r3, [pc, #184]	; (c0022fc <HAL_RCC_GetSysClockFreq+0x134>)
 c002242:	61bb      	str	r3, [r7, #24]
 c002244:	e004      	b.n	c002250 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 c002246:	693b      	ldr	r3, [r7, #16]
 c002248:	2b08      	cmp	r3, #8
 c00224a:	d101      	bne.n	c002250 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 c00224c:	4b2b      	ldr	r3, [pc, #172]	; (c0022fc <HAL_RCC_GetSysClockFreq+0x134>)
 c00224e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 c002250:	693b      	ldr	r3, [r7, #16]
 c002252:	2b0c      	cmp	r3, #12
 c002254:	d146      	bne.n	c0022e4 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 c002256:	4b27      	ldr	r3, [pc, #156]	; (c0022f4 <HAL_RCC_GetSysClockFreq+0x12c>)
 c002258:	68db      	ldr	r3, [r3, #12]
 c00225a:	f003 0303 	and.w	r3, r3, #3
 c00225e:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 c002260:	4b24      	ldr	r3, [pc, #144]	; (c0022f4 <HAL_RCC_GetSysClockFreq+0x12c>)
 c002262:	68db      	ldr	r3, [r3, #12]
 c002264:	091b      	lsrs	r3, r3, #4
 c002266:	f003 030f 	and.w	r3, r3, #15
 c00226a:	3301      	adds	r3, #1
 c00226c:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 c00226e:	68bb      	ldr	r3, [r7, #8]
 c002270:	2b02      	cmp	r3, #2
 c002272:	d003      	beq.n	c00227c <HAL_RCC_GetSysClockFreq+0xb4>
 c002274:	68bb      	ldr	r3, [r7, #8]
 c002276:	2b03      	cmp	r3, #3
 c002278:	d00d      	beq.n	c002296 <HAL_RCC_GetSysClockFreq+0xce>
 c00227a:	e019      	b.n	c0022b0 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c00227c:	4a1f      	ldr	r2, [pc, #124]	; (c0022fc <HAL_RCC_GetSysClockFreq+0x134>)
 c00227e:	687b      	ldr	r3, [r7, #4]
 c002280:	fbb2 f3f3 	udiv	r3, r2, r3
 c002284:	4a1b      	ldr	r2, [pc, #108]	; (c0022f4 <HAL_RCC_GetSysClockFreq+0x12c>)
 c002286:	68d2      	ldr	r2, [r2, #12]
 c002288:	0a12      	lsrs	r2, r2, #8
 c00228a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c00228e:	fb02 f303 	mul.w	r3, r2, r3
 c002292:	617b      	str	r3, [r7, #20]
        break;
 c002294:	e019      	b.n	c0022ca <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c002296:	4a19      	ldr	r2, [pc, #100]	; (c0022fc <HAL_RCC_GetSysClockFreq+0x134>)
 c002298:	687b      	ldr	r3, [r7, #4]
 c00229a:	fbb2 f3f3 	udiv	r3, r2, r3
 c00229e:	4a15      	ldr	r2, [pc, #84]	; (c0022f4 <HAL_RCC_GetSysClockFreq+0x12c>)
 c0022a0:	68d2      	ldr	r2, [r2, #12]
 c0022a2:	0a12      	lsrs	r2, r2, #8
 c0022a4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c0022a8:	fb02 f303 	mul.w	r3, r2, r3
 c0022ac:	617b      	str	r3, [r7, #20]
        break;
 c0022ae:	e00c      	b.n	c0022ca <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c0022b0:	69fa      	ldr	r2, [r7, #28]
 c0022b2:	687b      	ldr	r3, [r7, #4]
 c0022b4:	fbb2 f3f3 	udiv	r3, r2, r3
 c0022b8:	4a0e      	ldr	r2, [pc, #56]	; (c0022f4 <HAL_RCC_GetSysClockFreq+0x12c>)
 c0022ba:	68d2      	ldr	r2, [r2, #12]
 c0022bc:	0a12      	lsrs	r2, r2, #8
 c0022be:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c0022c2:	fb02 f303 	mul.w	r3, r2, r3
 c0022c6:	617b      	str	r3, [r7, #20]
        break;
 c0022c8:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 c0022ca:	4b0a      	ldr	r3, [pc, #40]	; (c0022f4 <HAL_RCC_GetSysClockFreq+0x12c>)
 c0022cc:	68db      	ldr	r3, [r3, #12]
 c0022ce:	0e5b      	lsrs	r3, r3, #25
 c0022d0:	f003 0303 	and.w	r3, r3, #3
 c0022d4:	3301      	adds	r3, #1
 c0022d6:	005b      	lsls	r3, r3, #1
 c0022d8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 c0022da:	697a      	ldr	r2, [r7, #20]
 c0022dc:	683b      	ldr	r3, [r7, #0]
 c0022de:	fbb2 f3f3 	udiv	r3, r2, r3
 c0022e2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 c0022e4:	69bb      	ldr	r3, [r7, #24]
}
 c0022e6:	4618      	mov	r0, r3
 c0022e8:	3724      	adds	r7, #36	; 0x24
 c0022ea:	46bd      	mov	sp, r7
 c0022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0022f0:	4770      	bx	lr
 c0022f2:	bf00      	nop
 c0022f4:	50021000 	.word	0x50021000
 c0022f8:	0c00bb8c 	.word	0x0c00bb8c
 c0022fc:	00f42400 	.word	0x00f42400

0c002300 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 c002300:	b580      	push	{r7, lr}
 c002302:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 c002304:	f7ff ff60 	bl	c0021c8 <HAL_RCC_GetSysClockFreq>
 c002308:	4602      	mov	r2, r0
 c00230a:	4b05      	ldr	r3, [pc, #20]	; (c002320 <HAL_RCC_GetHCLKFreq+0x20>)
 c00230c:	689b      	ldr	r3, [r3, #8]
 c00230e:	091b      	lsrs	r3, r3, #4
 c002310:	f003 030f 	and.w	r3, r3, #15
 c002314:	4903      	ldr	r1, [pc, #12]	; (c002324 <HAL_RCC_GetHCLKFreq+0x24>)
 c002316:	5ccb      	ldrb	r3, [r1, r3]
 c002318:	fa22 f303 	lsr.w	r3, r2, r3
}
 c00231c:	4618      	mov	r0, r3
 c00231e:	bd80      	pop	{r7, pc}
 c002320:	50021000 	.word	0x50021000
 c002324:	0c00bb74 	.word	0x0c00bb74

0c002328 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 c002328:	b580      	push	{r7, lr}
 c00232a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 c00232c:	f7ff ffe8 	bl	c002300 <HAL_RCC_GetHCLKFreq>
 c002330:	4602      	mov	r2, r0
 c002332:	4b05      	ldr	r3, [pc, #20]	; (c002348 <HAL_RCC_GetPCLK1Freq+0x20>)
 c002334:	689b      	ldr	r3, [r3, #8]
 c002336:	0a1b      	lsrs	r3, r3, #8
 c002338:	f003 0307 	and.w	r3, r3, #7
 c00233c:	4903      	ldr	r1, [pc, #12]	; (c00234c <HAL_RCC_GetPCLK1Freq+0x24>)
 c00233e:	5ccb      	ldrb	r3, [r1, r3]
 c002340:	fa22 f303 	lsr.w	r3, r2, r3
}
 c002344:	4618      	mov	r0, r3
 c002346:	bd80      	pop	{r7, pc}
 c002348:	50021000 	.word	0x50021000
 c00234c:	0c00bb84 	.word	0x0c00bb84

0c002350 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 c002350:	b580      	push	{r7, lr}
 c002352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 c002354:	f7ff ffd4 	bl	c002300 <HAL_RCC_GetHCLKFreq>
 c002358:	4602      	mov	r2, r0
 c00235a:	4b05      	ldr	r3, [pc, #20]	; (c002370 <HAL_RCC_GetPCLK2Freq+0x20>)
 c00235c:	689b      	ldr	r3, [r3, #8]
 c00235e:	0adb      	lsrs	r3, r3, #11
 c002360:	f003 0307 	and.w	r3, r3, #7
 c002364:	4903      	ldr	r1, [pc, #12]	; (c002374 <HAL_RCC_GetPCLK2Freq+0x24>)
 c002366:	5ccb      	ldrb	r3, [r1, r3]
 c002368:	fa22 f303 	lsr.w	r3, r2, r3
}
 c00236c:	4618      	mov	r0, r3
 c00236e:	bd80      	pop	{r7, pc}
 c002370:	50021000 	.word	0x50021000
 c002374:	0c00bb84 	.word	0x0c00bb84

0c002378 <HAL_RCC_GetOscConfig>:
  * @param  RCC_OscInitStruct  pointer to an RCC_OscInitTypeDef structure that
  *         will be configured.
  * @retval None
  */
void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 c002378:	b480      	push	{r7}
 c00237a:	b083      	sub	sp, #12
 c00237c:	af00      	add	r7, sp, #0
 c00237e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != (void *)NULL);

  /* Set all possible values for the Oscillator type parameter ---------------*/
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_MSI | \
 c002380:	687b      	ldr	r3, [r7, #4]
 c002382:	223f      	movs	r2, #63	; 0x3f
 c002384:	601a      	str	r2, [r3, #0]
                                      RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSI48;

  /* Get the HSE configuration -----------------------------------------------*/
  if ((RCC->CR & RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 c002386:	4b72      	ldr	r3, [pc, #456]	; (c002550 <HAL_RCC_GetOscConfig+0x1d8>)
 c002388:	681b      	ldr	r3, [r3, #0]
 c00238a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 c00238e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 c002392:	d104      	bne.n	c00239e <HAL_RCC_GetOscConfig+0x26>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 c002394:	687b      	ldr	r3, [r7, #4]
 c002396:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 c00239a:	605a      	str	r2, [r3, #4]
 c00239c:	e00e      	b.n	c0023bc <HAL_RCC_GetOscConfig+0x44>
  }
  else if ((RCC->CR & RCC_CR_HSEON) == RCC_CR_HSEON)
 c00239e:	4b6c      	ldr	r3, [pc, #432]	; (c002550 <HAL_RCC_GetOscConfig+0x1d8>)
 c0023a0:	681b      	ldr	r3, [r3, #0]
 c0023a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 c0023a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 c0023aa:	d104      	bne.n	c0023b6 <HAL_RCC_GetOscConfig+0x3e>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 c0023ac:	687b      	ldr	r3, [r7, #4]
 c0023ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 c0023b2:	605a      	str	r2, [r3, #4]
 c0023b4:	e002      	b.n	c0023bc <HAL_RCC_GetOscConfig+0x44>
  }
  else
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 c0023b6:	687b      	ldr	r3, [r7, #4]
 c0023b8:	2200      	movs	r2, #0
 c0023ba:	605a      	str	r2, [r3, #4]
  }

  /* Get the MSI configuration -----------------------------------------------*/
  if ((RCC->CR & RCC_CR_MSION) == RCC_CR_MSION)
 c0023bc:	4b64      	ldr	r3, [pc, #400]	; (c002550 <HAL_RCC_GetOscConfig+0x1d8>)
 c0023be:	681b      	ldr	r3, [r3, #0]
 c0023c0:	f003 0301 	and.w	r3, r3, #1
 c0023c4:	2b01      	cmp	r3, #1
 c0023c6:	d103      	bne.n	c0023d0 <HAL_RCC_GetOscConfig+0x58>
  {
    RCC_OscInitStruct->MSIState = RCC_MSI_ON;
 c0023c8:	687b      	ldr	r3, [r7, #4]
 c0023ca:	2201      	movs	r2, #1
 c0023cc:	61da      	str	r2, [r3, #28]
 c0023ce:	e002      	b.n	c0023d6 <HAL_RCC_GetOscConfig+0x5e>
  }
  else
  {
    RCC_OscInitStruct->MSIState = RCC_MSI_OFF;
 c0023d0:	687b      	ldr	r3, [r7, #4]
 c0023d2:	2200      	movs	r2, #0
 c0023d4:	61da      	str	r2, [r3, #28]
  }

  RCC_OscInitStruct->MSICalibrationValue = (uint32_t)((RCC->ICSCR & RCC_ICSCR_MSITRIM) >> RCC_ICSCR_MSITRIM_Pos);
 c0023d6:	4b5e      	ldr	r3, [pc, #376]	; (c002550 <HAL_RCC_GetOscConfig+0x1d8>)
 c0023d8:	685b      	ldr	r3, [r3, #4]
 c0023da:	0a1b      	lsrs	r3, r3, #8
 c0023dc:	b2da      	uxtb	r2, r3
 c0023de:	687b      	ldr	r3, [r7, #4]
 c0023e0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct->MSIClockRange = (uint32_t)((RCC->CR & RCC_CR_MSIRANGE));
 c0023e2:	4b5b      	ldr	r3, [pc, #364]	; (c002550 <HAL_RCC_GetOscConfig+0x1d8>)
 c0023e4:	681b      	ldr	r3, [r3, #0]
 c0023e6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 c0023ea:	687b      	ldr	r3, [r7, #4]
 c0023ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Get the HSI configuration -----------------------------------------------*/
  if ((RCC->CR & RCC_CR_HSION) == RCC_CR_HSION)
 c0023ee:	4b58      	ldr	r3, [pc, #352]	; (c002550 <HAL_RCC_GetOscConfig+0x1d8>)
 c0023f0:	681b      	ldr	r3, [r3, #0]
 c0023f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c0023f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 c0023fa:	d104      	bne.n	c002406 <HAL_RCC_GetOscConfig+0x8e>
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 c0023fc:	687b      	ldr	r3, [r7, #4]
 c0023fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 c002402:	60da      	str	r2, [r3, #12]
 c002404:	e002      	b.n	c00240c <HAL_RCC_GetOscConfig+0x94>
  }
  else
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 c002406:	687b      	ldr	r3, [r7, #4]
 c002408:	2200      	movs	r2, #0
 c00240a:	60da      	str	r2, [r3, #12]
  }

  RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->ICSCR & RCC_ICSCR_HSITRIM) >> RCC_ICSCR_HSITRIM_Pos);
 c00240c:	4b50      	ldr	r3, [pc, #320]	; (c002550 <HAL_RCC_GetOscConfig+0x1d8>)
 c00240e:	685b      	ldr	r3, [r3, #4]
 c002410:	0e1b      	lsrs	r3, r3, #24
 c002412:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 c002416:	687b      	ldr	r3, [r7, #4]
 c002418:	611a      	str	r2, [r3, #16]

  /* Get the LSE configuration -----------------------------------------------*/
  if ((RCC->BDCR & RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 c00241a:	4b4d      	ldr	r3, [pc, #308]	; (c002550 <HAL_RCC_GetOscConfig+0x1d8>)
 c00241c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c002420:	f003 0304 	and.w	r3, r3, #4
 c002424:	2b04      	cmp	r3, #4
 c002426:	d10e      	bne.n	c002446 <HAL_RCC_GetOscConfig+0xce>
  {
    if ((RCC->BDCR & RCC_BDCR_LSESYSEN) == RCC_BDCR_LSESYSEN)
 c002428:	4b49      	ldr	r3, [pc, #292]	; (c002550 <HAL_RCC_GetOscConfig+0x1d8>)
 c00242a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c00242e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c002432:	2b80      	cmp	r3, #128	; 0x80
 c002434:	d103      	bne.n	c00243e <HAL_RCC_GetOscConfig+0xc6>
    {
      RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 c002436:	687b      	ldr	r3, [r7, #4]
 c002438:	2285      	movs	r2, #133	; 0x85
 c00243a:	609a      	str	r2, [r3, #8]
 c00243c:	e01c      	b.n	c002478 <HAL_RCC_GetOscConfig+0x100>
    }
    else
    {
      RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS_RTC_ONLY;
 c00243e:	687b      	ldr	r3, [r7, #4]
 c002440:	2205      	movs	r2, #5
 c002442:	609a      	str	r2, [r3, #8]
 c002444:	e018      	b.n	c002478 <HAL_RCC_GetOscConfig+0x100>
    }
  }
  else if ((RCC->BDCR & RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 c002446:	4b42      	ldr	r3, [pc, #264]	; (c002550 <HAL_RCC_GetOscConfig+0x1d8>)
 c002448:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c00244c:	f003 0301 	and.w	r3, r3, #1
 c002450:	2b01      	cmp	r3, #1
 c002452:	d10e      	bne.n	c002472 <HAL_RCC_GetOscConfig+0xfa>
  {
    if ((RCC->BDCR & RCC_BDCR_LSESYSEN) == RCC_BDCR_LSESYSEN)
 c002454:	4b3e      	ldr	r3, [pc, #248]	; (c002550 <HAL_RCC_GetOscConfig+0x1d8>)
 c002456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c00245a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c00245e:	2b80      	cmp	r3, #128	; 0x80
 c002460:	d103      	bne.n	c00246a <HAL_RCC_GetOscConfig+0xf2>
    {
      RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 c002462:	687b      	ldr	r3, [r7, #4]
 c002464:	2281      	movs	r2, #129	; 0x81
 c002466:	609a      	str	r2, [r3, #8]
 c002468:	e006      	b.n	c002478 <HAL_RCC_GetOscConfig+0x100>
    }
    else
    {
      RCC_OscInitStruct->LSEState = RCC_LSE_ON_RTC_ONLY;
 c00246a:	687b      	ldr	r3, [r7, #4]
 c00246c:	2201      	movs	r2, #1
 c00246e:	609a      	str	r2, [r3, #8]
 c002470:	e002      	b.n	c002478 <HAL_RCC_GetOscConfig+0x100>
    }
  }
  else
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 c002472:	687b      	ldr	r3, [r7, #4]
 c002474:	2200      	movs	r2, #0
 c002476:	609a      	str	r2, [r3, #8]
  }

  /* Get the LSI configuration -----------------------------------------------*/
  if ((RCC->CSR & RCC_CSR_LSION) == RCC_CSR_LSION)
 c002478:	4b35      	ldr	r3, [pc, #212]	; (c002550 <HAL_RCC_GetOscConfig+0x1d8>)
 c00247a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c00247e:	f003 0301 	and.w	r3, r3, #1
 c002482:	2b01      	cmp	r3, #1
 c002484:	d103      	bne.n	c00248e <HAL_RCC_GetOscConfig+0x116>
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 c002486:	687b      	ldr	r3, [r7, #4]
 c002488:	2201      	movs	r2, #1
 c00248a:	615a      	str	r2, [r3, #20]
 c00248c:	e002      	b.n	c002494 <HAL_RCC_GetOscConfig+0x11c>
  }
  else
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
 c00248e:	687b      	ldr	r3, [r7, #4]
 c002490:	2200      	movs	r2, #0
 c002492:	615a      	str	r2, [r3, #20]
  }

  if ((RCC->CSR & RCC_CSR_LSIPRE) == RCC_CSR_LSIPRE)
 c002494:	4b2e      	ldr	r3, [pc, #184]	; (c002550 <HAL_RCC_GetOscConfig+0x1d8>)
 c002496:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c00249a:	f003 0310 	and.w	r3, r3, #16
 c00249e:	2b10      	cmp	r3, #16
 c0024a0:	d103      	bne.n	c0024aa <HAL_RCC_GetOscConfig+0x132>
  {
    RCC_OscInitStruct->LSIDiv = RCC_LSI_DIV128;
 c0024a2:	687b      	ldr	r3, [r7, #4]
 c0024a4:	2210      	movs	r2, #16
 c0024a6:	619a      	str	r2, [r3, #24]
 c0024a8:	e002      	b.n	c0024b0 <HAL_RCC_GetOscConfig+0x138>
  }
  else
  {
    RCC_OscInitStruct->LSIDiv = RCC_LSI_DIV1;
 c0024aa:	687b      	ldr	r3, [r7, #4]
 c0024ac:	2200      	movs	r2, #0
 c0024ae:	619a      	str	r2, [r3, #24]
  }

  /* Get the HSI48 configuration ---------------------------------------------*/
  if ((RCC->CRRCR & RCC_CRRCR_HSI48ON) == RCC_CRRCR_HSI48ON)
 c0024b0:	4b27      	ldr	r3, [pc, #156]	; (c002550 <HAL_RCC_GetOscConfig+0x1d8>)
 c0024b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c0024b6:	f003 0301 	and.w	r3, r3, #1
 c0024ba:	2b01      	cmp	r3, #1
 c0024bc:	d103      	bne.n	c0024c6 <HAL_RCC_GetOscConfig+0x14e>
  {
    RCC_OscInitStruct->HSI48State = RCC_HSI48_ON;
 c0024be:	687b      	ldr	r3, [r7, #4]
 c0024c0:	2201      	movs	r2, #1
 c0024c2:	629a      	str	r2, [r3, #40]	; 0x28
 c0024c4:	e002      	b.n	c0024cc <HAL_RCC_GetOscConfig+0x154>
  }
  else
  {
    RCC_OscInitStruct->HSI48State = RCC_HSI48_OFF;
 c0024c6:	687b      	ldr	r3, [r7, #4]
 c0024c8:	2200      	movs	r2, #0
 c0024ca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Get the PLL configuration -----------------------------------------------*/
  if ((RCC->CR & RCC_CR_PLLON) == RCC_CR_PLLON)
 c0024cc:	4b20      	ldr	r3, [pc, #128]	; (c002550 <HAL_RCC_GetOscConfig+0x1d8>)
 c0024ce:	681b      	ldr	r3, [r3, #0]
 c0024d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 c0024d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 c0024d8:	d103      	bne.n	c0024e2 <HAL_RCC_GetOscConfig+0x16a>
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 c0024da:	687b      	ldr	r3, [r7, #4]
 c0024dc:	2202      	movs	r2, #2
 c0024de:	62da      	str	r2, [r3, #44]	; 0x2c
 c0024e0:	e002      	b.n	c0024e8 <HAL_RCC_GetOscConfig+0x170>
  }
  else
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 c0024e2:	687b      	ldr	r3, [r7, #4]
 c0024e4:	2201      	movs	r2, #1
 c0024e6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 c0024e8:	4b19      	ldr	r3, [pc, #100]	; (c002550 <HAL_RCC_GetOscConfig+0x1d8>)
 c0024ea:	68db      	ldr	r3, [r3, #12]
 c0024ec:	f003 0203 	and.w	r2, r3, #3
 c0024f0:	687b      	ldr	r3, [r7, #4]
 c0024f2:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct->PLL.PLLM = (uint32_t)(((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U);
 c0024f4:	4b16      	ldr	r3, [pc, #88]	; (c002550 <HAL_RCC_GetOscConfig+0x1d8>)
 c0024f6:	68db      	ldr	r3, [r3, #12]
 c0024f8:	091b      	lsrs	r3, r3, #4
 c0024fa:	f003 030f 	and.w	r3, r3, #15
 c0024fe:	1c5a      	adds	r2, r3, #1
 c002500:	687b      	ldr	r3, [r7, #4]
 c002502:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct->PLL.PLLN = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c002504:	4b12      	ldr	r3, [pc, #72]	; (c002550 <HAL_RCC_GetOscConfig+0x1d8>)
 c002506:	68db      	ldr	r3, [r3, #12]
 c002508:	0a1b      	lsrs	r3, r3, #8
 c00250a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 c00250e:	687b      	ldr	r3, [r7, #4]
 c002510:	639a      	str	r2, [r3, #56]	; 0x38
  RCC_OscInitStruct->PLL.PLLQ = (uint32_t)((((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 c002512:	4b0f      	ldr	r3, [pc, #60]	; (c002550 <HAL_RCC_GetOscConfig+0x1d8>)
 c002514:	68db      	ldr	r3, [r3, #12]
 c002516:	0d5b      	lsrs	r3, r3, #21
 c002518:	f003 0303 	and.w	r3, r3, #3
 c00251c:	3301      	adds	r3, #1
 c00251e:	005a      	lsls	r2, r3, #1
 c002520:	687b      	ldr	r3, [r7, #4]
 c002522:	641a      	str	r2, [r3, #64]	; 0x40
  RCC_OscInitStruct->PLL.PLLR = (uint32_t)((((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) << 1U);
 c002524:	4b0a      	ldr	r3, [pc, #40]	; (c002550 <HAL_RCC_GetOscConfig+0x1d8>)
 c002526:	68db      	ldr	r3, [r3, #12]
 c002528:	0e5b      	lsrs	r3, r3, #25
 c00252a:	f003 0303 	and.w	r3, r3, #3
 c00252e:	3301      	adds	r3, #1
 c002530:	005a      	lsls	r2, r3, #1
 c002532:	687b      	ldr	r3, [r7, #4]
 c002534:	645a      	str	r2, [r3, #68]	; 0x44
  RCC_OscInitStruct->PLL.PLLP = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos);
 c002536:	4b06      	ldr	r3, [pc, #24]	; (c002550 <HAL_RCC_GetOscConfig+0x1d8>)
 c002538:	68db      	ldr	r3, [r3, #12]
 c00253a:	0edb      	lsrs	r3, r3, #27
 c00253c:	f003 021f 	and.w	r2, r3, #31
 c002540:	687b      	ldr	r3, [r7, #4]
 c002542:	63da      	str	r2, [r3, #60]	; 0x3c
}
 c002544:	bf00      	nop
 c002546:	370c      	adds	r7, #12
 c002548:	46bd      	mov	sp, r7
 c00254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00254e:	4770      	bx	lr
 c002550:	50021000 	.word	0x50021000

0c002554 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 c002554:	b580      	push	{r7, lr}
 c002556:	b086      	sub	sp, #24
 c002558:	af00      	add	r7, sp, #0
 c00255a:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 c00255c:	2300      	movs	r3, #0
 c00255e:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 c002560:	4b2c      	ldr	r3, [pc, #176]	; (c002614 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c002562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c002564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c002568:	2b00      	cmp	r3, #0
 c00256a:	d003      	beq.n	c002574 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 c00256c:	f7fe ff80 	bl	c001470 <HAL_PWREx_GetVoltageRange>
 c002570:	6138      	str	r0, [r7, #16]
 c002572:	e014      	b.n	c00259e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 c002574:	4b27      	ldr	r3, [pc, #156]	; (c002614 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c002576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c002578:	4a26      	ldr	r2, [pc, #152]	; (c002614 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c00257a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c00257e:	6593      	str	r3, [r2, #88]	; 0x58
 c002580:	4b24      	ldr	r3, [pc, #144]	; (c002614 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c002582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c002584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c002588:	60fb      	str	r3, [r7, #12]
 c00258a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 c00258c:	f7fe ff70 	bl	c001470 <HAL_PWREx_GetVoltageRange>
 c002590:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 c002592:	4b20      	ldr	r3, [pc, #128]	; (c002614 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c002594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c002596:	4a1f      	ldr	r2, [pc, #124]	; (c002614 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c002598:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c00259c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 c00259e:	693b      	ldr	r3, [r7, #16]
 c0025a0:	2b00      	cmp	r3, #0
 c0025a2:	d003      	beq.n	c0025ac <RCC_SetFlashLatencyFromMSIRange+0x58>
 c0025a4:	693b      	ldr	r3, [r7, #16]
 c0025a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c0025aa:	d10b      	bne.n	c0025c4 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 c0025ac:	687b      	ldr	r3, [r7, #4]
 c0025ae:	2b80      	cmp	r3, #128	; 0x80
 c0025b0:	d919      	bls.n	c0025e6 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 c0025b2:	687b      	ldr	r3, [r7, #4]
 c0025b4:	2ba0      	cmp	r3, #160	; 0xa0
 c0025b6:	d902      	bls.n	c0025be <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 c0025b8:	2302      	movs	r3, #2
 c0025ba:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 c0025bc:	e013      	b.n	c0025e6 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 c0025be:	2301      	movs	r3, #1
 c0025c0:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 c0025c2:	e010      	b.n	c0025e6 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 c0025c4:	687b      	ldr	r3, [r7, #4]
 c0025c6:	2b80      	cmp	r3, #128	; 0x80
 c0025c8:	d902      	bls.n	c0025d0 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 c0025ca:	2303      	movs	r3, #3
 c0025cc:	617b      	str	r3, [r7, #20]
 c0025ce:	e00a      	b.n	c0025e6 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 c0025d0:	687b      	ldr	r3, [r7, #4]
 c0025d2:	2b80      	cmp	r3, #128	; 0x80
 c0025d4:	d102      	bne.n	c0025dc <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 c0025d6:	2302      	movs	r3, #2
 c0025d8:	617b      	str	r3, [r7, #20]
 c0025da:	e004      	b.n	c0025e6 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 c0025dc:	687b      	ldr	r3, [r7, #4]
 c0025de:	2b70      	cmp	r3, #112	; 0x70
 c0025e0:	d101      	bne.n	c0025e6 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 c0025e2:	2301      	movs	r3, #1
 c0025e4:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 c0025e6:	4b0c      	ldr	r3, [pc, #48]	; (c002618 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 c0025e8:	681b      	ldr	r3, [r3, #0]
 c0025ea:	f023 020f 	bic.w	r2, r3, #15
 c0025ee:	490a      	ldr	r1, [pc, #40]	; (c002618 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 c0025f0:	697b      	ldr	r3, [r7, #20]
 c0025f2:	4313      	orrs	r3, r2
 c0025f4:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 c0025f6:	4b08      	ldr	r3, [pc, #32]	; (c002618 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 c0025f8:	681b      	ldr	r3, [r3, #0]
 c0025fa:	f003 030f 	and.w	r3, r3, #15
 c0025fe:	697a      	ldr	r2, [r7, #20]
 c002600:	429a      	cmp	r2, r3
 c002602:	d001      	beq.n	c002608 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 c002604:	2301      	movs	r3, #1
 c002606:	e000      	b.n	c00260a <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 c002608:	2300      	movs	r3, #0
}
 c00260a:	4618      	mov	r0, r3
 c00260c:	3718      	adds	r7, #24
 c00260e:	46bd      	mov	sp, r7
 c002610:	bd80      	pop	{r7, pc}
 c002612:	bf00      	nop
 c002614:	50021000 	.word	0x50021000
 c002618:	50022000 	.word	0x50022000

0c00261c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 c00261c:	b480      	push	{r7}
 c00261e:	b087      	sub	sp, #28
 c002620:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 c002622:	4b31      	ldr	r3, [pc, #196]	; (c0026e8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 c002624:	68db      	ldr	r3, [r3, #12]
 c002626:	f003 0303 	and.w	r3, r3, #3
 c00262a:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 c00262c:	4b2e      	ldr	r3, [pc, #184]	; (c0026e8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 c00262e:	68db      	ldr	r3, [r3, #12]
 c002630:	091b      	lsrs	r3, r3, #4
 c002632:	f003 030f 	and.w	r3, r3, #15
 c002636:	3301      	adds	r3, #1
 c002638:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 c00263a:	68fb      	ldr	r3, [r7, #12]
 c00263c:	2b03      	cmp	r3, #3
 c00263e:	d015      	beq.n	c00266c <RCC_GetSysClockFreqFromPLLSource+0x50>
 c002640:	68fb      	ldr	r3, [r7, #12]
 c002642:	2b03      	cmp	r3, #3
 c002644:	d839      	bhi.n	c0026ba <RCC_GetSysClockFreqFromPLLSource+0x9e>
 c002646:	68fb      	ldr	r3, [r7, #12]
 c002648:	2b01      	cmp	r3, #1
 c00264a:	d01c      	beq.n	c002686 <RCC_GetSysClockFreqFromPLLSource+0x6a>
 c00264c:	68fb      	ldr	r3, [r7, #12]
 c00264e:	2b02      	cmp	r3, #2
 c002650:	d133      	bne.n	c0026ba <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c002652:	4a26      	ldr	r2, [pc, #152]	; (c0026ec <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 c002654:	68bb      	ldr	r3, [r7, #8]
 c002656:	fbb2 f3f3 	udiv	r3, r2, r3
 c00265a:	4a23      	ldr	r2, [pc, #140]	; (c0026e8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 c00265c:	68d2      	ldr	r2, [r2, #12]
 c00265e:	0a12      	lsrs	r2, r2, #8
 c002660:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c002664:	fb02 f303 	mul.w	r3, r2, r3
 c002668:	613b      	str	r3, [r7, #16]
      break;
 c00266a:	e029      	b.n	c0026c0 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c00266c:	4a1f      	ldr	r2, [pc, #124]	; (c0026ec <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 c00266e:	68bb      	ldr	r3, [r7, #8]
 c002670:	fbb2 f3f3 	udiv	r3, r2, r3
 c002674:	4a1c      	ldr	r2, [pc, #112]	; (c0026e8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 c002676:	68d2      	ldr	r2, [r2, #12]
 c002678:	0a12      	lsrs	r2, r2, #8
 c00267a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c00267e:	fb02 f303 	mul.w	r3, r2, r3
 c002682:	613b      	str	r3, [r7, #16]
      break;
 c002684:	e01c      	b.n	c0026c0 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 c002686:	4b18      	ldr	r3, [pc, #96]	; (c0026e8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 c002688:	681b      	ldr	r3, [r3, #0]
 c00268a:	f003 0308 	and.w	r3, r3, #8
 c00268e:	2b00      	cmp	r3, #0
 c002690:	d107      	bne.n	c0026a2 <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 c002692:	4b15      	ldr	r3, [pc, #84]	; (c0026e8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 c002694:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c002698:	0a1b      	lsrs	r3, r3, #8
 c00269a:	f003 030f 	and.w	r3, r3, #15
 c00269e:	617b      	str	r3, [r7, #20]
 c0026a0:	e005      	b.n	c0026ae <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 c0026a2:	4b11      	ldr	r3, [pc, #68]	; (c0026e8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 c0026a4:	681b      	ldr	r3, [r3, #0]
 c0026a6:	091b      	lsrs	r3, r3, #4
 c0026a8:	f003 030f 	and.w	r3, r3, #15
 c0026ac:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 c0026ae:	4a10      	ldr	r2, [pc, #64]	; (c0026f0 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 c0026b0:	697b      	ldr	r3, [r7, #20]
 c0026b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c0026b6:	613b      	str	r3, [r7, #16]
        break;
 c0026b8:	e002      	b.n	c0026c0 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 c0026ba:	2300      	movs	r3, #0
 c0026bc:	613b      	str	r3, [r7, #16]
      break;
 c0026be:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 c0026c0:	4b09      	ldr	r3, [pc, #36]	; (c0026e8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 c0026c2:	68db      	ldr	r3, [r3, #12]
 c0026c4:	0e5b      	lsrs	r3, r3, #25
 c0026c6:	f003 0303 	and.w	r3, r3, #3
 c0026ca:	3301      	adds	r3, #1
 c0026cc:	005b      	lsls	r3, r3, #1
 c0026ce:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 c0026d0:	693a      	ldr	r2, [r7, #16]
 c0026d2:	687b      	ldr	r3, [r7, #4]
 c0026d4:	fbb2 f3f3 	udiv	r3, r2, r3
 c0026d8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 c0026da:	683b      	ldr	r3, [r7, #0]
}
 c0026dc:	4618      	mov	r0, r3
 c0026de:	371c      	adds	r7, #28
 c0026e0:	46bd      	mov	sp, r7
 c0026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0026e6:	4770      	bx	lr
 c0026e8:	50021000 	.word	0x50021000
 c0026ec:	00f42400 	.word	0x00f42400
 c0026f0:	0c00bb8c 	.word	0x0c00bb8c

0c0026f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 c0026f4:	b580      	push	{r7, lr}
 c0026f6:	b088      	sub	sp, #32
 c0026f8:	af00      	add	r7, sp, #0
 c0026fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 c0026fc:	2300      	movs	r3, #0
 c0026fe:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 c002700:	2300      	movs	r3, #0
 c002702:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 c002704:	687b      	ldr	r3, [r7, #4]
 c002706:	681b      	ldr	r3, [r3, #0]
 c002708:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c00270c:	2b00      	cmp	r3, #0
 c00270e:	d040      	beq.n	c002792 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 c002710:	687b      	ldr	r3, [r7, #4]
 c002712:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 c002714:	2b80      	cmp	r3, #128	; 0x80
 c002716:	d02a      	beq.n	c00276e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 c002718:	2b80      	cmp	r3, #128	; 0x80
 c00271a:	d825      	bhi.n	c002768 <HAL_RCCEx_PeriphCLKConfig+0x74>
 c00271c:	2b60      	cmp	r3, #96	; 0x60
 c00271e:	d026      	beq.n	c00276e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 c002720:	2b60      	cmp	r3, #96	; 0x60
 c002722:	d821      	bhi.n	c002768 <HAL_RCCEx_PeriphCLKConfig+0x74>
 c002724:	2b40      	cmp	r3, #64	; 0x40
 c002726:	d006      	beq.n	c002736 <HAL_RCCEx_PeriphCLKConfig+0x42>
 c002728:	2b40      	cmp	r3, #64	; 0x40
 c00272a:	d81d      	bhi.n	c002768 <HAL_RCCEx_PeriphCLKConfig+0x74>
 c00272c:	2b00      	cmp	r3, #0
 c00272e:	d009      	beq.n	c002744 <HAL_RCCEx_PeriphCLKConfig+0x50>
 c002730:	2b20      	cmp	r3, #32
 c002732:	d010      	beq.n	c002756 <HAL_RCCEx_PeriphCLKConfig+0x62>
 c002734:	e018      	b.n	c002768 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 c002736:	4b8f      	ldr	r3, [pc, #572]	; (c002974 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c002738:	68db      	ldr	r3, [r3, #12]
 c00273a:	4a8e      	ldr	r2, [pc, #568]	; (c002974 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c00273c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c002740:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 c002742:	e015      	b.n	c002770 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 c002744:	687b      	ldr	r3, [r7, #4]
 c002746:	3304      	adds	r3, #4
 c002748:	2100      	movs	r1, #0
 c00274a:	4618      	mov	r0, r3
 c00274c:	f001 faf4 	bl	c003d38 <RCCEx_PLLSAI1_Config>
 c002750:	4603      	mov	r3, r0
 c002752:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 c002754:	e00c      	b.n	c002770 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 c002756:	687b      	ldr	r3, [r7, #4]
 c002758:	3320      	adds	r3, #32
 c00275a:	2100      	movs	r1, #0
 c00275c:	4618      	mov	r0, r3
 c00275e:	f001 fbd1 	bl	c003f04 <RCCEx_PLLSAI2_Config>
 c002762:	4603      	mov	r3, r0
 c002764:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 c002766:	e003      	b.n	c002770 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c002768:	2301      	movs	r3, #1
 c00276a:	77fb      	strb	r3, [r7, #31]
        break;
 c00276c:	e000      	b.n	c002770 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 c00276e:	bf00      	nop
    }

    if (ret == HAL_OK)
 c002770:	7ffb      	ldrb	r3, [r7, #31]
 c002772:	2b00      	cmp	r3, #0
 c002774:	d10b      	bne.n	c00278e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 c002776:	4b7f      	ldr	r3, [pc, #508]	; (c002974 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c002778:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c00277c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 c002780:	687b      	ldr	r3, [r7, #4]
 c002782:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 c002784:	497b      	ldr	r1, [pc, #492]	; (c002974 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c002786:	4313      	orrs	r3, r2
 c002788:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 c00278c:	e001      	b.n	c002792 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c00278e:	7ffb      	ldrb	r3, [r7, #31]
 c002790:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 c002792:	687b      	ldr	r3, [r7, #4]
 c002794:	681b      	ldr	r3, [r3, #0]
 c002796:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 c00279a:	2b00      	cmp	r3, #0
 c00279c:	d047      	beq.n	c00282e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 c00279e:	687b      	ldr	r3, [r7, #4]
 c0027a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 c0027a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c0027a6:	d030      	beq.n	c00280a <HAL_RCCEx_PeriphCLKConfig+0x116>
 c0027a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c0027ac:	d82a      	bhi.n	c002804 <HAL_RCCEx_PeriphCLKConfig+0x110>
 c0027ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c0027b2:	d02a      	beq.n	c00280a <HAL_RCCEx_PeriphCLKConfig+0x116>
 c0027b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c0027b8:	d824      	bhi.n	c002804 <HAL_RCCEx_PeriphCLKConfig+0x110>
 c0027ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c0027be:	d008      	beq.n	c0027d2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 c0027c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c0027c4:	d81e      	bhi.n	c002804 <HAL_RCCEx_PeriphCLKConfig+0x110>
 c0027c6:	2b00      	cmp	r3, #0
 c0027c8:	d00a      	beq.n	c0027e0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 c0027ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 c0027ce:	d010      	beq.n	c0027f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 c0027d0:	e018      	b.n	c002804 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 c0027d2:	4b68      	ldr	r3, [pc, #416]	; (c002974 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0027d4:	68db      	ldr	r3, [r3, #12]
 c0027d6:	4a67      	ldr	r2, [pc, #412]	; (c002974 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0027d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c0027dc:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 c0027de:	e015      	b.n	c00280c <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 c0027e0:	687b      	ldr	r3, [r7, #4]
 c0027e2:	3304      	adds	r3, #4
 c0027e4:	2100      	movs	r1, #0
 c0027e6:	4618      	mov	r0, r3
 c0027e8:	f001 faa6 	bl	c003d38 <RCCEx_PLLSAI1_Config>
 c0027ec:	4603      	mov	r3, r0
 c0027ee:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 c0027f0:	e00c      	b.n	c00280c <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 c0027f2:	687b      	ldr	r3, [r7, #4]
 c0027f4:	3320      	adds	r3, #32
 c0027f6:	2100      	movs	r1, #0
 c0027f8:	4618      	mov	r0, r3
 c0027fa:	f001 fb83 	bl	c003f04 <RCCEx_PLLSAI2_Config>
 c0027fe:	4603      	mov	r3, r0
 c002800:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 c002802:	e003      	b.n	c00280c <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c002804:	2301      	movs	r3, #1
 c002806:	77fb      	strb	r3, [r7, #31]
        break;
 c002808:	e000      	b.n	c00280c <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 c00280a:	bf00      	nop
    }

    if (ret == HAL_OK)
 c00280c:	7ffb      	ldrb	r3, [r7, #31]
 c00280e:	2b00      	cmp	r3, #0
 c002810:	d10b      	bne.n	c00282a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 c002812:	4b58      	ldr	r3, [pc, #352]	; (c002974 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c002814:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c002818:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 c00281c:	687b      	ldr	r3, [r7, #4]
 c00281e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 c002820:	4954      	ldr	r1, [pc, #336]	; (c002974 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c002822:	4313      	orrs	r3, r2
 c002824:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 c002828:	e001      	b.n	c00282e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c00282a:	7ffb      	ldrb	r3, [r7, #31]
 c00282c:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 c00282e:	687b      	ldr	r3, [r7, #4]
 c002830:	681b      	ldr	r3, [r3, #0]
 c002832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c002836:	2b00      	cmp	r3, #0
 c002838:	f000 80ab 	beq.w	c002992 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 c00283c:	2300      	movs	r3, #0
 c00283e:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 c002840:	4b4c      	ldr	r3, [pc, #304]	; (c002974 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c002842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c002844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c002848:	2b00      	cmp	r3, #0
 c00284a:	d10d      	bne.n	c002868 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 c00284c:	4b49      	ldr	r3, [pc, #292]	; (c002974 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c00284e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c002850:	4a48      	ldr	r2, [pc, #288]	; (c002974 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c002852:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c002856:	6593      	str	r3, [r2, #88]	; 0x58
 c002858:	4b46      	ldr	r3, [pc, #280]	; (c002974 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c00285a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c00285c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c002860:	60fb      	str	r3, [r7, #12]
 c002862:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 c002864:	2301      	movs	r3, #1
 c002866:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 c002868:	4b43      	ldr	r3, [pc, #268]	; (c002978 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 c00286a:	681b      	ldr	r3, [r3, #0]
 c00286c:	4a42      	ldr	r2, [pc, #264]	; (c002978 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 c00286e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 c002872:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 c002874:	f7fe f90a 	bl	c000a8c <HAL_GetTick>
 c002878:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 c00287a:	e00f      	b.n	c00289c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 c00287c:	f7fe f906 	bl	c000a8c <HAL_GetTick>
 c002880:	4602      	mov	r2, r0
 c002882:	693b      	ldr	r3, [r7, #16]
 c002884:	1ad3      	subs	r3, r2, r3
 c002886:	2b02      	cmp	r3, #2
 c002888:	d908      	bls.n	c00289c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 c00288a:	4b3b      	ldr	r3, [pc, #236]	; (c002978 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 c00288c:	681b      	ldr	r3, [r3, #0]
 c00288e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c002892:	2b00      	cmp	r3, #0
 c002894:	d109      	bne.n	c0028aa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 c002896:	2303      	movs	r3, #3
 c002898:	77fb      	strb	r3, [r7, #31]
        }
        break;
 c00289a:	e006      	b.n	c0028aa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 c00289c:	4b36      	ldr	r3, [pc, #216]	; (c002978 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 c00289e:	681b      	ldr	r3, [r3, #0]
 c0028a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c0028a4:	2b00      	cmp	r3, #0
 c0028a6:	d0e9      	beq.n	c00287c <HAL_RCCEx_PeriphCLKConfig+0x188>
 c0028a8:	e000      	b.n	c0028ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 c0028aa:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 c0028ac:	7ffb      	ldrb	r3, [r7, #31]
 c0028ae:	2b00      	cmp	r3, #0
 c0028b0:	d164      	bne.n	c00297c <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 c0028b2:	4b30      	ldr	r3, [pc, #192]	; (c002974 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0028b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0028b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 c0028bc:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 c0028be:	69bb      	ldr	r3, [r7, #24]
 c0028c0:	2b00      	cmp	r3, #0
 c0028c2:	d01f      	beq.n	c002904 <HAL_RCCEx_PeriphCLKConfig+0x210>
 c0028c4:	687b      	ldr	r3, [r7, #4]
 c0028c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0028ca:	69ba      	ldr	r2, [r7, #24]
 c0028cc:	429a      	cmp	r2, r3
 c0028ce:	d019      	beq.n	c002904 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 c0028d0:	4b28      	ldr	r3, [pc, #160]	; (c002974 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0028d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0028d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 c0028da:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 c0028dc:	4b25      	ldr	r3, [pc, #148]	; (c002974 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0028de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0028e2:	4a24      	ldr	r2, [pc, #144]	; (c002974 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0028e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c0028e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 c0028ec:	4b21      	ldr	r3, [pc, #132]	; (c002974 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0028ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0028f2:	4a20      	ldr	r2, [pc, #128]	; (c002974 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0028f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 c0028f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 c0028fc:	4a1d      	ldr	r2, [pc, #116]	; (c002974 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0028fe:	69bb      	ldr	r3, [r7, #24]
 c002900:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 c002904:	69bb      	ldr	r3, [r7, #24]
 c002906:	f003 0301 	and.w	r3, r3, #1
 c00290a:	2b00      	cmp	r3, #0
 c00290c:	d01f      	beq.n	c00294e <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c00290e:	f7fe f8bd 	bl	c000a8c <HAL_GetTick>
 c002912:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c002914:	e012      	b.n	c00293c <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c002916:	f7fe f8b9 	bl	c000a8c <HAL_GetTick>
 c00291a:	4602      	mov	r2, r0
 c00291c:	693b      	ldr	r3, [r7, #16]
 c00291e:	1ad3      	subs	r3, r2, r3
 c002920:	f241 3288 	movw	r2, #5000	; 0x1388
 c002924:	4293      	cmp	r3, r2
 c002926:	d909      	bls.n	c00293c <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c002928:	4b12      	ldr	r3, [pc, #72]	; (c002974 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c00292a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c00292e:	f003 0302 	and.w	r3, r3, #2
 c002932:	2b00      	cmp	r3, #0
 c002934:	d10a      	bne.n	c00294c <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 c002936:	2303      	movs	r3, #3
 c002938:	77fb      	strb	r3, [r7, #31]
            }
            break;
 c00293a:	e007      	b.n	c00294c <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c00293c:	4b0d      	ldr	r3, [pc, #52]	; (c002974 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c00293e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c002942:	f003 0302 	and.w	r3, r3, #2
 c002946:	2b00      	cmp	r3, #0
 c002948:	d0e5      	beq.n	c002916 <HAL_RCCEx_PeriphCLKConfig+0x222>
 c00294a:	e000      	b.n	c00294e <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 c00294c:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 c00294e:	7ffb      	ldrb	r3, [r7, #31]
 c002950:	2b00      	cmp	r3, #0
 c002952:	d10c      	bne.n	c00296e <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 c002954:	4b07      	ldr	r3, [pc, #28]	; (c002974 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c002956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c00295a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 c00295e:	687b      	ldr	r3, [r7, #4]
 c002960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c002964:	4903      	ldr	r1, [pc, #12]	; (c002974 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c002966:	4313      	orrs	r3, r2
 c002968:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 c00296c:	e008      	b.n	c002980 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 c00296e:	7ffb      	ldrb	r3, [r7, #31]
 c002970:	77bb      	strb	r3, [r7, #30]
 c002972:	e005      	b.n	c002980 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 c002974:	50021000 	.word	0x50021000
 c002978:	50007000 	.word	0x50007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 c00297c:	7ffb      	ldrb	r3, [r7, #31]
 c00297e:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 c002980:	7dfb      	ldrb	r3, [r7, #23]
 c002982:	2b01      	cmp	r3, #1
 c002984:	d105      	bne.n	c002992 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 c002986:	4b9c      	ldr	r3, [pc, #624]	; (c002bf8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c002988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c00298a:	4a9b      	ldr	r2, [pc, #620]	; (c002bf8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c00298c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c002990:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 c002992:	687b      	ldr	r3, [r7, #4]
 c002994:	681b      	ldr	r3, [r3, #0]
 c002996:	f003 0301 	and.w	r3, r3, #1
 c00299a:	2b00      	cmp	r3, #0
 c00299c:	d00a      	beq.n	c0029b4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 c00299e:	4b96      	ldr	r3, [pc, #600]	; (c002bf8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0029a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0029a4:	f023 0203 	bic.w	r2, r3, #3
 c0029a8:	687b      	ldr	r3, [r7, #4]
 c0029aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c0029ac:	4992      	ldr	r1, [pc, #584]	; (c002bf8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0029ae:	4313      	orrs	r3, r2
 c0029b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 c0029b4:	687b      	ldr	r3, [r7, #4]
 c0029b6:	681b      	ldr	r3, [r3, #0]
 c0029b8:	f003 0302 	and.w	r3, r3, #2
 c0029bc:	2b00      	cmp	r3, #0
 c0029be:	d00a      	beq.n	c0029d6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 c0029c0:	4b8d      	ldr	r3, [pc, #564]	; (c002bf8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0029c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0029c6:	f023 020c 	bic.w	r2, r3, #12
 c0029ca:	687b      	ldr	r3, [r7, #4]
 c0029cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c0029ce:	498a      	ldr	r1, [pc, #552]	; (c002bf8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0029d0:	4313      	orrs	r3, r2
 c0029d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 c0029d6:	687b      	ldr	r3, [r7, #4]
 c0029d8:	681b      	ldr	r3, [r3, #0]
 c0029da:	f003 0304 	and.w	r3, r3, #4
 c0029de:	2b00      	cmp	r3, #0
 c0029e0:	d00a      	beq.n	c0029f8 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 c0029e2:	4b85      	ldr	r3, [pc, #532]	; (c002bf8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0029e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0029e8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 c0029ec:	687b      	ldr	r3, [r7, #4]
 c0029ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c0029f0:	4981      	ldr	r1, [pc, #516]	; (c002bf8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0029f2:	4313      	orrs	r3, r2
 c0029f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 c0029f8:	687b      	ldr	r3, [r7, #4]
 c0029fa:	681b      	ldr	r3, [r3, #0]
 c0029fc:	f003 0308 	and.w	r3, r3, #8
 c002a00:	2b00      	cmp	r3, #0
 c002a02:	d00a      	beq.n	c002a1a <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 c002a04:	4b7c      	ldr	r3, [pc, #496]	; (c002bf8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c002a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c002a0a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 c002a0e:	687b      	ldr	r3, [r7, #4]
 c002a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 c002a12:	4979      	ldr	r1, [pc, #484]	; (c002bf8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c002a14:	4313      	orrs	r3, r2
 c002a16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 c002a1a:	687b      	ldr	r3, [r7, #4]
 c002a1c:	681b      	ldr	r3, [r3, #0]
 c002a1e:	f003 0310 	and.w	r3, r3, #16
 c002a22:	2b00      	cmp	r3, #0
 c002a24:	d00a      	beq.n	c002a3c <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 c002a26:	4b74      	ldr	r3, [pc, #464]	; (c002bf8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c002a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c002a2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 c002a30:	687b      	ldr	r3, [r7, #4]
 c002a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c002a34:	4970      	ldr	r1, [pc, #448]	; (c002bf8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c002a36:	4313      	orrs	r3, r2
 c002a38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 c002a3c:	687b      	ldr	r3, [r7, #4]
 c002a3e:	681b      	ldr	r3, [r3, #0]
 c002a40:	f003 0320 	and.w	r3, r3, #32
 c002a44:	2b00      	cmp	r3, #0
 c002a46:	d00a      	beq.n	c002a5e <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 c002a48:	4b6b      	ldr	r3, [pc, #428]	; (c002bf8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c002a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c002a4e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 c002a52:	687b      	ldr	r3, [r7, #4]
 c002a54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c002a56:	4968      	ldr	r1, [pc, #416]	; (c002bf8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c002a58:	4313      	orrs	r3, r2
 c002a5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 c002a5e:	687b      	ldr	r3, [r7, #4]
 c002a60:	681b      	ldr	r3, [r3, #0]
 c002a62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 c002a66:	2b00      	cmp	r3, #0
 c002a68:	d00a      	beq.n	c002a80 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 c002a6a:	4b63      	ldr	r3, [pc, #396]	; (c002bf8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c002a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c002a70:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 c002a74:	687b      	ldr	r3, [r7, #4]
 c002a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c002a78:	495f      	ldr	r1, [pc, #380]	; (c002bf8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c002a7a:	4313      	orrs	r3, r2
 c002a7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 c002a80:	687b      	ldr	r3, [r7, #4]
 c002a82:	681b      	ldr	r3, [r3, #0]
 c002a84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c002a88:	2b00      	cmp	r3, #0
 c002a8a:	d00a      	beq.n	c002aa2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 c002a8c:	4b5a      	ldr	r3, [pc, #360]	; (c002bf8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c002a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c002a92:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 c002a96:	687b      	ldr	r3, [r7, #4]
 c002a98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c002a9a:	4957      	ldr	r1, [pc, #348]	; (c002bf8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c002a9c:	4313      	orrs	r3, r2
 c002a9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 c002aa2:	687b      	ldr	r3, [r7, #4]
 c002aa4:	681b      	ldr	r3, [r3, #0]
 c002aa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 c002aaa:	2b00      	cmp	r3, #0
 c002aac:	d00a      	beq.n	c002ac4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 c002aae:	4b52      	ldr	r3, [pc, #328]	; (c002bf8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c002ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c002ab4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 c002ab8:	687b      	ldr	r3, [r7, #4]
 c002aba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 c002abc:	494e      	ldr	r1, [pc, #312]	; (c002bf8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c002abe:	4313      	orrs	r3, r2
 c002ac0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 c002ac4:	687b      	ldr	r3, [r7, #4]
 c002ac6:	681b      	ldr	r3, [r3, #0]
 c002ac8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c002acc:	2b00      	cmp	r3, #0
 c002ace:	d031      	beq.n	c002b34 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 c002ad0:	687b      	ldr	r3, [r7, #4]
 c002ad2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 c002ad4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 c002ad8:	d00e      	beq.n	c002af8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 c002ada:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 c002ade:	d814      	bhi.n	c002b0a <HAL_RCCEx_PeriphCLKConfig+0x416>
 c002ae0:	2b00      	cmp	r3, #0
 c002ae2:	d015      	beq.n	c002b10 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 c002ae4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 c002ae8:	d10f      	bne.n	c002b0a <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c002aea:	4b43      	ldr	r3, [pc, #268]	; (c002bf8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c002aec:	68db      	ldr	r3, [r3, #12]
 c002aee:	4a42      	ldr	r2, [pc, #264]	; (c002bf8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c002af0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c002af4:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 c002af6:	e00c      	b.n	c002b12 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 c002af8:	687b      	ldr	r3, [r7, #4]
 c002afa:	3304      	adds	r3, #4
 c002afc:	2100      	movs	r1, #0
 c002afe:	4618      	mov	r0, r3
 c002b00:	f001 f91a 	bl	c003d38 <RCCEx_PLLSAI1_Config>
 c002b04:	4603      	mov	r3, r0
 c002b06:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 c002b08:	e003      	b.n	c002b12 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 c002b0a:	2301      	movs	r3, #1
 c002b0c:	77fb      	strb	r3, [r7, #31]
        break;
 c002b0e:	e000      	b.n	c002b12 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 c002b10:	bf00      	nop
    }

    if (ret == HAL_OK)
 c002b12:	7ffb      	ldrb	r3, [r7, #31]
 c002b14:	2b00      	cmp	r3, #0
 c002b16:	d10b      	bne.n	c002b30 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 c002b18:	4b37      	ldr	r3, [pc, #220]	; (c002bf8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c002b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c002b1e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 c002b22:	687b      	ldr	r3, [r7, #4]
 c002b24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 c002b26:	4934      	ldr	r1, [pc, #208]	; (c002bf8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c002b28:	4313      	orrs	r3, r2
 c002b2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 c002b2e:	e001      	b.n	c002b34 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c002b30:	7ffb      	ldrb	r3, [r7, #31]
 c002b32:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 c002b34:	687b      	ldr	r3, [r7, #4]
 c002b36:	681b      	ldr	r3, [r3, #0]
 c002b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c002b3c:	2b00      	cmp	r3, #0
 c002b3e:	d00a      	beq.n	c002b56 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 c002b40:	4b2d      	ldr	r3, [pc, #180]	; (c002bf8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c002b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c002b46:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 c002b4a:	687b      	ldr	r3, [r7, #4]
 c002b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c002b4e:	492a      	ldr	r1, [pc, #168]	; (c002bf8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c002b50:	4313      	orrs	r3, r2
 c002b52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 c002b56:	687b      	ldr	r3, [r7, #4]
 c002b58:	681b      	ldr	r3, [r3, #0]
 c002b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c002b5e:	2b00      	cmp	r3, #0
 c002b60:	d00a      	beq.n	c002b78 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 c002b62:	4b25      	ldr	r3, [pc, #148]	; (c002bf8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c002b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c002b68:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 c002b6c:	687b      	ldr	r3, [r7, #4]
 c002b6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 c002b70:	4921      	ldr	r1, [pc, #132]	; (c002bf8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c002b72:	4313      	orrs	r3, r2
 c002b74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 c002b78:	687b      	ldr	r3, [r7, #4]
 c002b7a:	681b      	ldr	r3, [r3, #0]
 c002b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c002b80:	2b00      	cmp	r3, #0
 c002b82:	d00a      	beq.n	c002b9a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 c002b84:	4b1c      	ldr	r3, [pc, #112]	; (c002bf8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c002b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c002b8a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 c002b8e:	687b      	ldr	r3, [r7, #4]
 c002b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 c002b92:	4919      	ldr	r1, [pc, #100]	; (c002bf8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c002b94:	4313      	orrs	r3, r2
 c002b96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 c002b9a:	687b      	ldr	r3, [r7, #4]
 c002b9c:	681b      	ldr	r3, [r3, #0]
 c002b9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 c002ba2:	2b00      	cmp	r3, #0
 c002ba4:	d00a      	beq.n	c002bbc <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 c002ba6:	4b14      	ldr	r3, [pc, #80]	; (c002bf8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c002ba8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c002bac:	f023 0203 	bic.w	r2, r3, #3
 c002bb0:	687b      	ldr	r3, [r7, #4]
 c002bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c002bb4:	4910      	ldr	r1, [pc, #64]	; (c002bf8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c002bb6:	4313      	orrs	r3, r2
 c002bb8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 c002bbc:	687b      	ldr	r3, [r7, #4]
 c002bbe:	681b      	ldr	r3, [r3, #0]
 c002bc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 c002bc4:	2b00      	cmp	r3, #0
 c002bc6:	d02b      	beq.n	c002c20 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 c002bc8:	4b0b      	ldr	r3, [pc, #44]	; (c002bf8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c002bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c002bce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 c002bd2:	687b      	ldr	r3, [r7, #4]
 c002bd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 c002bd6:	4908      	ldr	r1, [pc, #32]	; (c002bf8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c002bd8:	4313      	orrs	r3, r2
 c002bda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 c002bde:	687b      	ldr	r3, [r7, #4]
 c002be0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 c002be2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 c002be6:	d109      	bne.n	c002bfc <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c002be8:	4b03      	ldr	r3, [pc, #12]	; (c002bf8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c002bea:	68db      	ldr	r3, [r3, #12]
 c002bec:	4a02      	ldr	r2, [pc, #8]	; (c002bf8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c002bee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c002bf2:	60d3      	str	r3, [r2, #12]
 c002bf4:	e014      	b.n	c002c20 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 c002bf6:	bf00      	nop
 c002bf8:	50021000 	.word	0x50021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 c002bfc:	687b      	ldr	r3, [r7, #4]
 c002bfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 c002c00:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 c002c04:	d10c      	bne.n	c002c20 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 c002c06:	687b      	ldr	r3, [r7, #4]
 c002c08:	3304      	adds	r3, #4
 c002c0a:	2101      	movs	r1, #1
 c002c0c:	4618      	mov	r0, r3
 c002c0e:	f001 f893 	bl	c003d38 <RCCEx_PLLSAI1_Config>
 c002c12:	4603      	mov	r3, r0
 c002c14:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 c002c16:	7ffb      	ldrb	r3, [r7, #31]
 c002c18:	2b00      	cmp	r3, #0
 c002c1a:	d001      	beq.n	c002c20 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 c002c1c:	7ffb      	ldrb	r3, [r7, #31]
 c002c1e:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 c002c20:	687b      	ldr	r3, [r7, #4]
 c002c22:	681b      	ldr	r3, [r3, #0]
 c002c24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 c002c28:	2b00      	cmp	r3, #0
 c002c2a:	d04a      	beq.n	c002cc2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 c002c2c:	687b      	ldr	r3, [r7, #4]
 c002c2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c002c30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 c002c34:	d108      	bne.n	c002c48 <HAL_RCCEx_PeriphCLKConfig+0x554>
 c002c36:	4b70      	ldr	r3, [pc, #448]	; (c002df8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c002c38:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c002c3c:	4a6e      	ldr	r2, [pc, #440]	; (c002df8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c002c3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 c002c42:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 c002c46:	e012      	b.n	c002c6e <HAL_RCCEx_PeriphCLKConfig+0x57a>
 c002c48:	4b6b      	ldr	r3, [pc, #428]	; (c002df8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c002c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c002c4e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 c002c52:	687b      	ldr	r3, [r7, #4]
 c002c54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c002c56:	4968      	ldr	r1, [pc, #416]	; (c002df8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c002c58:	4313      	orrs	r3, r2
 c002c5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 c002c5e:	4b66      	ldr	r3, [pc, #408]	; (c002df8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c002c60:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c002c64:	4a64      	ldr	r2, [pc, #400]	; (c002df8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c002c66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 c002c6a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 c002c6e:	687b      	ldr	r3, [r7, #4]
 c002c70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c002c72:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 c002c76:	d10d      	bne.n	c002c94 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 c002c78:	687b      	ldr	r3, [r7, #4]
 c002c7a:	3304      	adds	r3, #4
 c002c7c:	2101      	movs	r1, #1
 c002c7e:	4618      	mov	r0, r3
 c002c80:	f001 f85a 	bl	c003d38 <RCCEx_PLLSAI1_Config>
 c002c84:	4603      	mov	r3, r0
 c002c86:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 c002c88:	7ffb      	ldrb	r3, [r7, #31]
 c002c8a:	2b00      	cmp	r3, #0
 c002c8c:	d019      	beq.n	c002cc2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 c002c8e:	7ffb      	ldrb	r3, [r7, #31]
 c002c90:	77bb      	strb	r3, [r7, #30]
 c002c92:	e016      	b.n	c002cc2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 c002c94:	687b      	ldr	r3, [r7, #4]
 c002c96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c002c98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 c002c9c:	d106      	bne.n	c002cac <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c002c9e:	4b56      	ldr	r3, [pc, #344]	; (c002df8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c002ca0:	68db      	ldr	r3, [r3, #12]
 c002ca2:	4a55      	ldr	r2, [pc, #340]	; (c002df8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c002ca4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c002ca8:	60d3      	str	r3, [r2, #12]
 c002caa:	e00a      	b.n	c002cc2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 c002cac:	687b      	ldr	r3, [r7, #4]
 c002cae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c002cb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 c002cb4:	d105      	bne.n	c002cc2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 c002cb6:	4b50      	ldr	r3, [pc, #320]	; (c002df8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c002cb8:	68db      	ldr	r3, [r3, #12]
 c002cba:	4a4f      	ldr	r2, [pc, #316]	; (c002df8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c002cbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c002cc0:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 c002cc2:	687b      	ldr	r3, [r7, #4]
 c002cc4:	681b      	ldr	r3, [r3, #0]
 c002cc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 c002cca:	2b00      	cmp	r3, #0
 c002ccc:	d028      	beq.n	c002d20 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 c002cce:	4b4a      	ldr	r3, [pc, #296]	; (c002df8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c002cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c002cd4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 c002cd8:	687b      	ldr	r3, [r7, #4]
 c002cda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 c002cdc:	4946      	ldr	r1, [pc, #280]	; (c002df8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c002cde:	4313      	orrs	r3, r2
 c002ce0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 c002ce4:	687b      	ldr	r3, [r7, #4]
 c002ce6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 c002ce8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 c002cec:	d106      	bne.n	c002cfc <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c002cee:	4b42      	ldr	r3, [pc, #264]	; (c002df8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c002cf0:	68db      	ldr	r3, [r3, #12]
 c002cf2:	4a41      	ldr	r2, [pc, #260]	; (c002df8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c002cf4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c002cf8:	60d3      	str	r3, [r2, #12]
 c002cfa:	e011      	b.n	c002d20 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 c002cfc:	687b      	ldr	r3, [r7, #4]
 c002cfe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 c002d00:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 c002d04:	d10c      	bne.n	c002d20 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 c002d06:	687b      	ldr	r3, [r7, #4]
 c002d08:	3304      	adds	r3, #4
 c002d0a:	2101      	movs	r1, #1
 c002d0c:	4618      	mov	r0, r3
 c002d0e:	f001 f813 	bl	c003d38 <RCCEx_PLLSAI1_Config>
 c002d12:	4603      	mov	r3, r0
 c002d14:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 c002d16:	7ffb      	ldrb	r3, [r7, #31]
 c002d18:	2b00      	cmp	r3, #0
 c002d1a:	d001      	beq.n	c002d20 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 c002d1c:	7ffb      	ldrb	r3, [r7, #31]
 c002d1e:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 c002d20:	687b      	ldr	r3, [r7, #4]
 c002d22:	681b      	ldr	r3, [r3, #0]
 c002d24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 c002d28:	2b00      	cmp	r3, #0
 c002d2a:	d01e      	beq.n	c002d6a <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 c002d2c:	4b32      	ldr	r3, [pc, #200]	; (c002df8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c002d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c002d32:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 c002d36:	687b      	ldr	r3, [r7, #4]
 c002d38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 c002d3c:	492e      	ldr	r1, [pc, #184]	; (c002df8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c002d3e:	4313      	orrs	r3, r2
 c002d40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 c002d44:	687b      	ldr	r3, [r7, #4]
 c002d46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 c002d4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 c002d4e:	d10c      	bne.n	c002d6a <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 c002d50:	687b      	ldr	r3, [r7, #4]
 c002d52:	3304      	adds	r3, #4
 c002d54:	2102      	movs	r1, #2
 c002d56:	4618      	mov	r0, r3
 c002d58:	f000 ffee 	bl	c003d38 <RCCEx_PLLSAI1_Config>
 c002d5c:	4603      	mov	r3, r0
 c002d5e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 c002d60:	7ffb      	ldrb	r3, [r7, #31]
 c002d62:	2b00      	cmp	r3, #0
 c002d64:	d001      	beq.n	c002d6a <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 c002d66:	7ffb      	ldrb	r3, [r7, #31]
 c002d68:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 c002d6a:	687b      	ldr	r3, [r7, #4]
 c002d6c:	681b      	ldr	r3, [r3, #0]
 c002d6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 c002d72:	2b00      	cmp	r3, #0
 c002d74:	d00b      	beq.n	c002d8e <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 c002d76:	4b20      	ldr	r3, [pc, #128]	; (c002df8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c002d78:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c002d7c:	f023 0204 	bic.w	r2, r3, #4
 c002d80:	687b      	ldr	r3, [r7, #4]
 c002d82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 c002d86:	491c      	ldr	r1, [pc, #112]	; (c002df8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c002d88:	4313      	orrs	r3, r2
 c002d8a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 c002d8e:	687b      	ldr	r3, [r7, #4]
 c002d90:	681b      	ldr	r3, [r3, #0]
 c002d92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 c002d96:	2b00      	cmp	r3, #0
 c002d98:	d00b      	beq.n	c002db2 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 c002d9a:	4b17      	ldr	r3, [pc, #92]	; (c002df8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c002d9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c002da0:	f023 0218 	bic.w	r2, r3, #24
 c002da4:	687b      	ldr	r3, [r7, #4]
 c002da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c002daa:	4913      	ldr	r1, [pc, #76]	; (c002df8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c002dac:	4313      	orrs	r3, r2
 c002dae:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 c002db2:	687b      	ldr	r3, [r7, #4]
 c002db4:	681b      	ldr	r3, [r3, #0]
 c002db6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 c002dba:	2b00      	cmp	r3, #0
 c002dbc:	d017      	beq.n	c002dee <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 c002dbe:	4b0e      	ldr	r3, [pc, #56]	; (c002df8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c002dc0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c002dc4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 c002dc8:	687b      	ldr	r3, [r7, #4]
 c002dca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c002dce:	490a      	ldr	r1, [pc, #40]	; (c002df8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c002dd0:	4313      	orrs	r3, r2
 c002dd2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 c002dd6:	687b      	ldr	r3, [r7, #4]
 c002dd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c002ddc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 c002de0:	d105      	bne.n	c002dee <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c002de2:	4b05      	ldr	r3, [pc, #20]	; (c002df8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c002de4:	68db      	ldr	r3, [r3, #12]
 c002de6:	4a04      	ldr	r2, [pc, #16]	; (c002df8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c002de8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c002dec:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 c002dee:	7fbb      	ldrb	r3, [r7, #30]
}
 c002df0:	4618      	mov	r0, r3
 c002df2:	3720      	adds	r7, #32
 c002df4:	46bd      	mov	sp, r7
 c002df6:	bd80      	pop	{r7, pc}
 c002df8:	50021000 	.word	0x50021000

0c002dfc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  *            @arg @ref RCC_PERIPHCLK_FDCAN  FDCAN peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 c002dfc:	b580      	push	{r7, lr}
 c002dfe:	b088      	sub	sp, #32
 c002e00:	af00      	add	r7, sp, #0
 c002e02:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;   /* Default is 0 */
 c002e04:	2300      	movs	r3, #0
 c002e06:	61fb      	str	r3, [r7, #28]
  uint32_t pll_oscsource;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 c002e08:	687b      	ldr	r3, [r7, #4]
 c002e0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 c002e0e:	d13e      	bne.n	c002e8e <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 c002e10:	4b45      	ldr	r3, [pc, #276]	; (c002f28 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 c002e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c002e16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 c002e1a:	60fb      	str	r3, [r7, #12]

    switch (srcclk)
 c002e1c:	68fb      	ldr	r3, [r7, #12]
 c002e1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c002e22:	d028      	beq.n	c002e76 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 c002e24:	68fb      	ldr	r3, [r7, #12]
 c002e26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c002e2a:	f200 8771 	bhi.w	c003d10 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
 c002e2e:	68fb      	ldr	r3, [r7, #12]
 c002e30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 c002e34:	d005      	beq.n	c002e42 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 c002e36:	68fb      	ldr	r3, [r7, #12]
 c002e38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c002e3c:	d00e      	beq.n	c002e5c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
          frequency = HSE_VALUE / 32U;
        }
        break;
      default:
        /* No clock source, frequency default init at 0 */
        break;
 c002e3e:	f000 bf67 	b.w	c003d10 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 c002e42:	4b39      	ldr	r3, [pc, #228]	; (c002f28 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 c002e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c002e48:	f003 0302 	and.w	r3, r3, #2
 c002e4c:	2b02      	cmp	r3, #2
 c002e4e:	f040 8761 	bne.w	c003d14 <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
          frequency = LSE_VALUE;
 c002e52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 c002e56:	61fb      	str	r3, [r7, #28]
        break;
 c002e58:	f000 bf5c 	b.w	c003d14 <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 c002e5c:	4b32      	ldr	r3, [pc, #200]	; (c002f28 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 c002e5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c002e62:	f003 0302 	and.w	r3, r3, #2
 c002e66:	2b02      	cmp	r3, #2
 c002e68:	f040 8756 	bne.w	c003d18 <HAL_RCCEx_GetPeriphCLKFreq+0xf1c>
          frequency = LSI_VALUE;
 c002e6c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 c002e70:	61fb      	str	r3, [r7, #28]
        break;
 c002e72:	f000 bf51 	b.w	c003d18 <HAL_RCCEx_GetPeriphCLKFreq+0xf1c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 c002e76:	4b2c      	ldr	r3, [pc, #176]	; (c002f28 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 c002e78:	681b      	ldr	r3, [r3, #0]
 c002e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c002e7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 c002e82:	f040 874b 	bne.w	c003d1c <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
          frequency = HSE_VALUE / 32U;
 c002e86:	4b29      	ldr	r3, [pc, #164]	; (c002f2c <HAL_RCCEx_GetPeriphCLKFreq+0x130>)
 c002e88:	61fb      	str	r3, [r7, #28]
        break;
 c002e8a:	f000 bf47 	b.w	c003d1c <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 c002e8e:	4b26      	ldr	r3, [pc, #152]	; (c002f28 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 c002e90:	68db      	ldr	r3, [r3, #12]
 c002e92:	f003 0303 	and.w	r3, r3, #3
 c002e96:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch (pll_oscsource)
 c002e98:	693b      	ldr	r3, [r7, #16]
 c002e9a:	2b03      	cmp	r3, #3
 c002e9c:	d036      	beq.n	c002f0c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 c002e9e:	693b      	ldr	r3, [r7, #16]
 c002ea0:	2b03      	cmp	r3, #3
 c002ea2:	d849      	bhi.n	c002f38 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 c002ea4:	693b      	ldr	r3, [r7, #16]
 c002ea6:	2b01      	cmp	r3, #1
 c002ea8:	d003      	beq.n	c002eb2 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 c002eaa:	693b      	ldr	r3, [r7, #16]
 c002eac:	2b02      	cmp	r3, #2
 c002eae:	d020      	beq.n	c002ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 c002eb0:	e042      	b.n	c002f38 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {
      case RCC_PLLSOURCE_MSI:   /* MSI ? */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 c002eb2:	4b1d      	ldr	r3, [pc, #116]	; (c002f28 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 c002eb4:	681b      	ldr	r3, [r3, #0]
 c002eb6:	f003 0302 	and.w	r3, r3, #2
 c002eba:	2b02      	cmp	r3, #2
 c002ebc:	d116      	bne.n	c002eec <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
        {
          /*MSI frequency range in HZ*/
          pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 c002ebe:	4b1a      	ldr	r3, [pc, #104]	; (c002f28 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 c002ec0:	681b      	ldr	r3, [r3, #0]
 c002ec2:	f003 0308 	and.w	r3, r3, #8
 c002ec6:	2b00      	cmp	r3, #0
 c002ec8:	d005      	beq.n	c002ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 c002eca:	4b17      	ldr	r3, [pc, #92]	; (c002f28 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 c002ecc:	681b      	ldr	r3, [r3, #0]
 c002ece:	091b      	lsrs	r3, r3, #4
 c002ed0:	f003 030f 	and.w	r3, r3, #15
 c002ed4:	e005      	b.n	c002ee2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 c002ed6:	4b14      	ldr	r3, [pc, #80]	; (c002f28 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 c002ed8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c002edc:	0a1b      	lsrs	r3, r3, #8
 c002ede:	f003 030f 	and.w	r3, r3, #15
 c002ee2:	4a13      	ldr	r2, [pc, #76]	; (c002f30 <HAL_RCCEx_GetPeriphCLKFreq+0x134>)
 c002ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c002ee8:	61bb      	str	r3, [r7, #24]
        }
        else
        {
          pllvco = 0U;
        }
        break;
 c002eea:	e028      	b.n	c002f3e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          pllvco = 0U;
 c002eec:	2300      	movs	r3, #0
 c002eee:	61bb      	str	r3, [r7, #24]
        break;
 c002ef0:	e025      	b.n	c002f3e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      case RCC_PLLSOURCE_HSI:   /* HSI ? */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 c002ef2:	4b0d      	ldr	r3, [pc, #52]	; (c002f28 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 c002ef4:	681b      	ldr	r3, [r3, #0]
 c002ef6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c002efa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c002efe:	d102      	bne.n	c002f06 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
        {
          pllvco = HSI_VALUE;
 c002f00:	4b0c      	ldr	r3, [pc, #48]	; (c002f34 <HAL_RCCEx_GetPeriphCLKFreq+0x138>)
 c002f02:	61bb      	str	r3, [r7, #24]
        }
        else
        {
          pllvco = 0U;
        }
        break;
 c002f04:	e01b      	b.n	c002f3e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          pllvco = 0U;
 c002f06:	2300      	movs	r3, #0
 c002f08:	61bb      	str	r3, [r7, #24]
        break;
 c002f0a:	e018      	b.n	c002f3e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      case RCC_PLLSOURCE_HSE:   /* HSE ? */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 c002f0c:	4b06      	ldr	r3, [pc, #24]	; (c002f28 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 c002f0e:	681b      	ldr	r3, [r3, #0]
 c002f10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c002f14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 c002f18:	d102      	bne.n	c002f20 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          pllvco = HSE_VALUE;
 c002f1a:	4b06      	ldr	r3, [pc, #24]	; (c002f34 <HAL_RCCEx_GetPeriphCLKFreq+0x138>)
 c002f1c:	61bb      	str	r3, [r7, #24]
        }
        else
        {
          pllvco = 0U;
        }
        break;
 c002f1e:	e00e      	b.n	c002f3e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          pllvco = 0U;
 c002f20:	2300      	movs	r3, #0
 c002f22:	61bb      	str	r3, [r7, #24]
        break;
 c002f24:	e00b      	b.n	c002f3e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 c002f26:	bf00      	nop
 c002f28:	50021000 	.word	0x50021000
 c002f2c:	0007a120 	.word	0x0007a120
 c002f30:	0c00bb8c 	.word	0x0c00bb8c
 c002f34:	00f42400 	.word	0x00f42400
      default:
        /* No source */
        pllvco = 0U;
 c002f38:	2300      	movs	r3, #0
 c002f3a:	61bb      	str	r3, [r7, #24]
        break;
 c002f3c:	bf00      	nop
    }

    switch (PeriphClk)
 c002f3e:	687b      	ldr	r3, [r7, #4]
 c002f40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 c002f44:	f000 8659 	beq.w	c003bfa <HAL_RCCEx_GetPeriphCLKFreq+0xdfe>
 c002f48:	687b      	ldr	r3, [r7, #4]
 c002f4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 c002f4e:	f200 86e7 	bhi.w	c003d20 <HAL_RCCEx_GetPeriphCLKFreq+0xf24>
 c002f52:	687b      	ldr	r3, [r7, #4]
 c002f54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 c002f58:	f000 8605 	beq.w	c003b66 <HAL_RCCEx_GetPeriphCLKFreq+0xd6a>
 c002f5c:	687b      	ldr	r3, [r7, #4]
 c002f5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 c002f62:	f200 86dd 	bhi.w	c003d20 <HAL_RCCEx_GetPeriphCLKFreq+0xf24>
 c002f66:	687b      	ldr	r3, [r7, #4]
 c002f68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 c002f6c:	f000 8468 	beq.w	c003840 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 c002f70:	687b      	ldr	r3, [r7, #4]
 c002f72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 c002f76:	f200 86d3 	bhi.w	c003d20 <HAL_RCCEx_GetPeriphCLKFreq+0xf24>
 c002f7a:	687b      	ldr	r3, [r7, #4]
 c002f7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 c002f80:	f000 8530 	beq.w	c0039e4 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
 c002f84:	687b      	ldr	r3, [r7, #4]
 c002f86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 c002f8a:	f200 86c9 	bhi.w	c003d20 <HAL_RCCEx_GetPeriphCLKFreq+0xf24>
 c002f8e:	687b      	ldr	r3, [r7, #4]
 c002f90:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 c002f94:	f000 8180 	beq.w	c003298 <HAL_RCCEx_GetPeriphCLKFreq+0x49c>
 c002f98:	687b      	ldr	r3, [r7, #4]
 c002f9a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 c002f9e:	f200 86bf 	bhi.w	c003d20 <HAL_RCCEx_GetPeriphCLKFreq+0xf24>
 c002fa2:	687b      	ldr	r3, [r7, #4]
 c002fa4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 c002fa8:	f000 80c2 	beq.w	c003130 <HAL_RCCEx_GetPeriphCLKFreq+0x334>
 c002fac:	687b      	ldr	r3, [r7, #4]
 c002fae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 c002fb2:	f200 86b5 	bhi.w	c003d20 <HAL_RCCEx_GetPeriphCLKFreq+0xf24>
 c002fb6:	687b      	ldr	r3, [r7, #4]
 c002fb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 c002fbc:	f000 842f 	beq.w	c00381e <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
 c002fc0:	687b      	ldr	r3, [r7, #4]
 c002fc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 c002fc6:	f200 86ab 	bhi.w	c003d20 <HAL_RCCEx_GetPeriphCLKFreq+0xf24>
 c002fca:	687b      	ldr	r3, [r7, #4]
 c002fcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 c002fd0:	f000 83e7 	beq.w	c0037a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 c002fd4:	687b      	ldr	r3, [r7, #4]
 c002fd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 c002fda:	f200 86a1 	bhi.w	c003d20 <HAL_RCCEx_GetPeriphCLKFreq+0xf24>
 c002fde:	687b      	ldr	r3, [r7, #4]
 c002fe0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 c002fe4:	f000 80a4 	beq.w	c003130 <HAL_RCCEx_GetPeriphCLKFreq+0x334>
 c002fe8:	687b      	ldr	r3, [r7, #4]
 c002fea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 c002fee:	f200 8697 	bhi.w	c003d20 <HAL_RCCEx_GetPeriphCLKFreq+0xf24>
 c002ff2:	687b      	ldr	r3, [r7, #4]
 c002ff4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 c002ff8:	f000 8092 	beq.w	c003120 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 c002ffc:	687b      	ldr	r3, [r7, #4]
 c002ffe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 c003002:	f200 868d 	bhi.w	c003d20 <HAL_RCCEx_GetPeriphCLKFreq+0xf24>
 c003006:	687b      	ldr	r3, [r7, #4]
 c003008:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 c00300c:	f000 8080 	beq.w	c003110 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 c003010:	687b      	ldr	r3, [r7, #4]
 c003012:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 c003016:	f200 8683 	bhi.w	c003d20 <HAL_RCCEx_GetPeriphCLKFreq+0xf24>
 c00301a:	687b      	ldr	r3, [r7, #4]
 c00301c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c003020:	f000 8553 	beq.w	c003aca <HAL_RCCEx_GetPeriphCLKFreq+0xcce>
 c003024:	687b      	ldr	r3, [r7, #4]
 c003026:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c00302a:	f200 8679 	bhi.w	c003d20 <HAL_RCCEx_GetPeriphCLKFreq+0xf24>
 c00302e:	687b      	ldr	r3, [r7, #4]
 c003030:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c003034:	f000 84ff 	beq.w	c003a36 <HAL_RCCEx_GetPeriphCLKFreq+0xc3a>
 c003038:	687b      	ldr	r3, [r7, #4]
 c00303a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c00303e:	f200 866f 	bhi.w	c003d20 <HAL_RCCEx_GetPeriphCLKFreq+0xf24>
 c003042:	687b      	ldr	r3, [r7, #4]
 c003044:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 c003048:	f000 84a0 	beq.w	c00398c <HAL_RCCEx_GetPeriphCLKFreq+0xb90>
 c00304c:	687b      	ldr	r3, [r7, #4]
 c00304e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 c003052:	f200 8665 	bhi.w	c003d20 <HAL_RCCEx_GetPeriphCLKFreq+0xf24>
 c003056:	687b      	ldr	r3, [r7, #4]
 c003058:	2b80      	cmp	r3, #128	; 0x80
 c00305a:	f000 846b 	beq.w	c003934 <HAL_RCCEx_GetPeriphCLKFreq+0xb38>
 c00305e:	687b      	ldr	r3, [r7, #4]
 c003060:	2b80      	cmp	r3, #128	; 0x80
 c003062:	f200 865d 	bhi.w	c003d20 <HAL_RCCEx_GetPeriphCLKFreq+0xf24>
 c003066:	687b      	ldr	r3, [r7, #4]
 c003068:	2b20      	cmp	r3, #32
 c00306a:	d84b      	bhi.n	c003104 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 c00306c:	687b      	ldr	r3, [r7, #4]
 c00306e:	2b00      	cmp	r3, #0
 c003070:	f000 8656 	beq.w	c003d20 <HAL_RCCEx_GetPeriphCLKFreq+0xf24>
 c003074:	687b      	ldr	r3, [r7, #4]
 c003076:	3b01      	subs	r3, #1
 c003078:	2b1f      	cmp	r3, #31
 c00307a:	f200 8651 	bhi.w	c003d20 <HAL_RCCEx_GetPeriphCLKFreq+0xf24>
 c00307e:	a201      	add	r2, pc, #4	; (adr r2, c003084 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 c003080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c003084:	0c00349d 	.word	0x0c00349d
 c003088:	0c003511 	.word	0x0c003511
 c00308c:	0c003d21 	.word	0x0c003d21
 c003090:	0c0035a3 	.word	0x0c0035a3
 c003094:	0c003d21 	.word	0x0c003d21
 c003098:	0c003d21 	.word	0x0c003d21
 c00309c:	0c003d21 	.word	0x0c003d21
 c0030a0:	0c00361b 	.word	0x0c00361b
 c0030a4:	0c003d21 	.word	0x0c003d21
 c0030a8:	0c003d21 	.word	0x0c003d21
 c0030ac:	0c003d21 	.word	0x0c003d21
 c0030b0:	0c003d21 	.word	0x0c003d21
 c0030b4:	0c003d21 	.word	0x0c003d21
 c0030b8:	0c003d21 	.word	0x0c003d21
 c0030bc:	0c003d21 	.word	0x0c003d21
 c0030c0:	0c00369f 	.word	0x0c00369f
 c0030c4:	0c003d21 	.word	0x0c003d21
 c0030c8:	0c003d21 	.word	0x0c003d21
 c0030cc:	0c003d21 	.word	0x0c003d21
 c0030d0:	0c003d21 	.word	0x0c003d21
 c0030d4:	0c003d21 	.word	0x0c003d21
 c0030d8:	0c003d21 	.word	0x0c003d21
 c0030dc:	0c003d21 	.word	0x0c003d21
 c0030e0:	0c003d21 	.word	0x0c003d21
 c0030e4:	0c003d21 	.word	0x0c003d21
 c0030e8:	0c003d21 	.word	0x0c003d21
 c0030ec:	0c003d21 	.word	0x0c003d21
 c0030f0:	0c003d21 	.word	0x0c003d21
 c0030f4:	0c003d21 	.word	0x0c003d21
 c0030f8:	0c003d21 	.word	0x0c003d21
 c0030fc:	0c003d21 	.word	0x0c003d21
 c003100:	0c003721 	.word	0x0c003721
 c003104:	687b      	ldr	r3, [r7, #4]
 c003106:	2b40      	cmp	r3, #64	; 0x40
 c003108:	f000 83e8 	beq.w	c0038dc <HAL_RCCEx_GetPeriphCLKFreq+0xae0>

        break;

      default:
        /* Unexpected case, frequency default init at 0 */
        break;
 c00310c:	f000 be08 	b.w	c003d20 <HAL_RCCEx_GetPeriphCLKFreq+0xf24>
        frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 c003110:	69b9      	ldr	r1, [r7, #24]
 c003112:	f44f 6000 	mov.w	r0, #2048	; 0x800
 c003116:	f001 f851 	bl	c0041bc <RCCEx_GetSAIxPeriphCLKFreq>
 c00311a:	61f8      	str	r0, [r7, #28]
        break;
 c00311c:	f000 be03 	b.w	c003d26 <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
        frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 c003120:	69b9      	ldr	r1, [r7, #24]
 c003122:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 c003126:	f001 f849 	bl	c0041bc <RCCEx_GetSAIxPeriphCLKFreq>
 c00312a:	61f8      	str	r0, [r7, #28]
        break;
 c00312c:	f000 bdfb 	b.w	c003d26 <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
        srcclk = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_CLK48MSEL);
 c003130:	4b9c      	ldr	r3, [pc, #624]	; (c0033a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 c003132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c003136:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 c00313a:	60fb      	str	r3, [r7, #12]
 c00313c:	68fb      	ldr	r3, [r7, #12]
 c00313e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 c003142:	d015      	beq.n	c003170 <HAL_RCCEx_GetPeriphCLKFreq+0x374>
 c003144:	68fb      	ldr	r3, [r7, #12]
 c003146:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 c00314a:	f200 8096 	bhi.w	c00327a <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
 c00314e:	68fb      	ldr	r3, [r7, #12]
 c003150:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 c003154:	d02a      	beq.n	c0031ac <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
 c003156:	68fb      	ldr	r3, [r7, #12]
 c003158:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 c00315c:	f200 808d 	bhi.w	c00327a <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
 c003160:	68fb      	ldr	r3, [r7, #12]
 c003162:	2b00      	cmp	r3, #0
 c003164:	d07f      	beq.n	c003266 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 c003166:	68fb      	ldr	r3, [r7, #12]
 c003168:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 c00316c:	d04b      	beq.n	c003206 <HAL_RCCEx_GetPeriphCLKFreq+0x40a>
            break;
 c00316e:	e084      	b.n	c00327a <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 c003170:	4b8c      	ldr	r3, [pc, #560]	; (c0033a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 c003172:	681b      	ldr	r3, [r3, #0]
 c003174:	f003 0302 	and.w	r3, r3, #2
 c003178:	2b02      	cmp	r3, #2
 c00317a:	f040 8081 	bne.w	c003280 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
              frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 c00317e:	4b89      	ldr	r3, [pc, #548]	; (c0033a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 c003180:	681b      	ldr	r3, [r3, #0]
 c003182:	f003 0308 	and.w	r3, r3, #8
 c003186:	2b00      	cmp	r3, #0
 c003188:	d005      	beq.n	c003196 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 c00318a:	4b86      	ldr	r3, [pc, #536]	; (c0033a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 c00318c:	681b      	ldr	r3, [r3, #0]
 c00318e:	091b      	lsrs	r3, r3, #4
 c003190:	f003 030f 	and.w	r3, r3, #15
 c003194:	e005      	b.n	c0031a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a6>
 c003196:	4b83      	ldr	r3, [pc, #524]	; (c0033a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 c003198:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c00319c:	0a1b      	lsrs	r3, r3, #8
 c00319e:	f003 030f 	and.w	r3, r3, #15
 c0031a2:	4a81      	ldr	r2, [pc, #516]	; (c0033a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 c0031a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c0031a8:	61fb      	str	r3, [r7, #28]
            break;
 c0031aa:	e069      	b.n	c003280 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 c0031ac:	4b7d      	ldr	r3, [pc, #500]	; (c0033a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 c0031ae:	681b      	ldr	r3, [r3, #0]
 c0031b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c0031b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 c0031b8:	d165      	bne.n	c003286 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
              if (HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 c0031ba:	4b7a      	ldr	r3, [pc, #488]	; (c0033a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 c0031bc:	68db      	ldr	r3, [r3, #12]
 c0031be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 c0031c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 c0031c6:	d15e      	bne.n	c003286 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
                pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 c0031c8:	4b76      	ldr	r3, [pc, #472]	; (c0033a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 c0031ca:	68db      	ldr	r3, [r3, #12]
 c0031cc:	091b      	lsrs	r3, r3, #4
 c0031ce:	f003 030f 	and.w	r3, r3, #15
 c0031d2:	3301      	adds	r3, #1
 c0031d4:	69ba      	ldr	r2, [r7, #24]
 c0031d6:	fbb2 f3f3 	udiv	r3, r2, r3
 c0031da:	61bb      	str	r3, [r7, #24]
                plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 c0031dc:	4b71      	ldr	r3, [pc, #452]	; (c0033a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 c0031de:	68db      	ldr	r3, [r3, #12]
 c0031e0:	0a1b      	lsrs	r3, r3, #8
 c0031e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 c0031e6:	60bb      	str	r3, [r7, #8]
                frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 c0031e8:	69bb      	ldr	r3, [r7, #24]
 c0031ea:	68ba      	ldr	r2, [r7, #8]
 c0031ec:	fb03 f202 	mul.w	r2, r3, r2
 c0031f0:	4b6c      	ldr	r3, [pc, #432]	; (c0033a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 c0031f2:	68db      	ldr	r3, [r3, #12]
 c0031f4:	0d5b      	lsrs	r3, r3, #21
 c0031f6:	f003 0303 	and.w	r3, r3, #3
 c0031fa:	3301      	adds	r3, #1
 c0031fc:	005b      	lsls	r3, r3, #1
 c0031fe:	fbb2 f3f3 	udiv	r3, r2, r3
 c003202:	61fb      	str	r3, [r7, #28]
            break;
 c003204:	e03f      	b.n	c003286 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 c003206:	4b67      	ldr	r3, [pc, #412]	; (c0033a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 c003208:	681b      	ldr	r3, [r3, #0]
 c00320a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 c00320e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 c003212:	d13b      	bne.n	c00328c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
              if (HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 c003214:	4b63      	ldr	r3, [pc, #396]	; (c0033a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 c003216:	691b      	ldr	r3, [r3, #16]
 c003218:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 c00321c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 c003220:	d134      	bne.n	c00328c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
                pllvco = RCCEx_PLLSAI1_GetVCOFreq();
 c003222:	f000 ff1b 	bl	c00405c <RCCEx_PLLSAI1_GetVCOFreq>
 c003226:	61b8      	str	r0, [r7, #24]
                pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 c003228:	4b5e      	ldr	r3, [pc, #376]	; (c0033a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 c00322a:	691b      	ldr	r3, [r3, #16]
 c00322c:	091b      	lsrs	r3, r3, #4
 c00322e:	f003 030f 	and.w	r3, r3, #15
 c003232:	3301      	adds	r3, #1
 c003234:	69ba      	ldr	r2, [r7, #24]
 c003236:	fbb2 f3f3 	udiv	r3, r2, r3
 c00323a:	61bb      	str	r3, [r7, #24]
                plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 c00323c:	4b59      	ldr	r3, [pc, #356]	; (c0033a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 c00323e:	691b      	ldr	r3, [r3, #16]
 c003240:	0a1b      	lsrs	r3, r3, #8
 c003242:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 c003246:	60bb      	str	r3, [r7, #8]
                frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U);
 c003248:	69bb      	ldr	r3, [r7, #24]
 c00324a:	68ba      	ldr	r2, [r7, #8]
 c00324c:	fb03 f202 	mul.w	r2, r3, r2
 c003250:	4b54      	ldr	r3, [pc, #336]	; (c0033a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 c003252:	691b      	ldr	r3, [r3, #16]
 c003254:	0d5b      	lsrs	r3, r3, #21
 c003256:	f003 0303 	and.w	r3, r3, #3
 c00325a:	3301      	adds	r3, #1
 c00325c:	005b      	lsls	r3, r3, #1
 c00325e:	fbb2 f3f3 	udiv	r3, r2, r3
 c003262:	61fb      	str	r3, [r7, #28]
            break;
 c003264:	e012      	b.n	c00328c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
            if (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 c003266:	4b4f      	ldr	r3, [pc, #316]	; (c0033a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 c003268:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c00326c:	f003 0302 	and.w	r3, r3, #2
 c003270:	2b02      	cmp	r3, #2
 c003272:	d10e      	bne.n	c003292 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
              frequency = HSI48_VALUE;
 c003274:	4b4d      	ldr	r3, [pc, #308]	; (c0033ac <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>)
 c003276:	61fb      	str	r3, [r7, #28]
            break;
 c003278:	e00b      	b.n	c003292 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
            break;
 c00327a:	bf00      	nop
 c00327c:	f000 bd53 	b.w	c003d26 <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
            break;
 c003280:	bf00      	nop
 c003282:	f000 bd50 	b.w	c003d26 <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
            break;
 c003286:	bf00      	nop
 c003288:	f000 bd4d 	b.w	c003d26 <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
            break;
 c00328c:	bf00      	nop
 c00328e:	f000 bd4a 	b.w	c003d26 <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
            break;
 c003292:	bf00      	nop
        break;
 c003294:	f000 bd47 	b.w	c003d26 <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
        if (HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL)) /* PLLP ? */
 c003298:	4b42      	ldr	r3, [pc, #264]	; (c0033a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 c00329a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c00329e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 c0032a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 c0032a6:	d13d      	bne.n	c003324 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 c0032a8:	4b3e      	ldr	r3, [pc, #248]	; (c0033a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 c0032aa:	681b      	ldr	r3, [r3, #0]
 c0032ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c0032b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 c0032b4:	f040 8536 	bne.w	c003d24 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
            if (HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 c0032b8:	4b3a      	ldr	r3, [pc, #232]	; (c0033a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 c0032ba:	68db      	ldr	r3, [r3, #12]
 c0032bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 c0032c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 c0032c4:	f040 852e 	bne.w	c003d24 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
              pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 c0032c8:	4b36      	ldr	r3, [pc, #216]	; (c0033a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 c0032ca:	68db      	ldr	r3, [r3, #12]
 c0032cc:	091b      	lsrs	r3, r3, #4
 c0032ce:	f003 030f 	and.w	r3, r3, #15
 c0032d2:	3301      	adds	r3, #1
 c0032d4:	69ba      	ldr	r2, [r7, #24]
 c0032d6:	fbb2 f3f3 	udiv	r3, r2, r3
 c0032da:	61bb      	str	r3, [r7, #24]
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 c0032dc:	4b31      	ldr	r3, [pc, #196]	; (c0033a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 c0032de:	68db      	ldr	r3, [r3, #12]
 c0032e0:	0a1b      	lsrs	r3, r3, #8
 c0032e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 c0032e6:	60bb      	str	r3, [r7, #8]
              pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 c0032e8:	4b2e      	ldr	r3, [pc, #184]	; (c0033a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 c0032ea:	68db      	ldr	r3, [r3, #12]
 c0032ec:	0edb      	lsrs	r3, r3, #27
 c0032ee:	f003 031f 	and.w	r3, r3, #31
 c0032f2:	617b      	str	r3, [r7, #20]
              if (pllp == 0U)
 c0032f4:	697b      	ldr	r3, [r7, #20]
 c0032f6:	2b00      	cmp	r3, #0
 c0032f8:	d10a      	bne.n	c003310 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
                if (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 c0032fa:	4b2a      	ldr	r3, [pc, #168]	; (c0033a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 c0032fc:	68db      	ldr	r3, [r3, #12]
 c0032fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c003302:	2b00      	cmp	r3, #0
 c003304:	d002      	beq.n	c00330c <HAL_RCCEx_GetPeriphCLKFreq+0x510>
                  pllp = 17U;
 c003306:	2311      	movs	r3, #17
 c003308:	617b      	str	r3, [r7, #20]
 c00330a:	e001      	b.n	c003310 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
                  pllp = 7U;
 c00330c:	2307      	movs	r3, #7
 c00330e:	617b      	str	r3, [r7, #20]
              frequency = (pllvco * plln) / pllp;
 c003310:	69bb      	ldr	r3, [r7, #24]
 c003312:	68ba      	ldr	r2, [r7, #8]
 c003314:	fb03 f202 	mul.w	r2, r3, r2
 c003318:	697b      	ldr	r3, [r7, #20]
 c00331a:	fbb2 f3f3 	udiv	r3, r2, r3
 c00331e:	61fb      	str	r3, [r7, #28]
        break;
 c003320:	f000 bd00 	b.w	c003d24 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
          srcclk = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_CLK48MSEL);
 c003324:	4b1f      	ldr	r3, [pc, #124]	; (c0033a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 c003326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c00332a:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 c00332e:	60fb      	str	r3, [r7, #12]
 c003330:	68fb      	ldr	r3, [r7, #12]
 c003332:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 c003336:	d016      	beq.n	c003366 <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 c003338:	68fb      	ldr	r3, [r7, #12]
 c00333a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 c00333e:	f200 809e 	bhi.w	c00347e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 c003342:	68fb      	ldr	r3, [r7, #12]
 c003344:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 c003348:	d032      	beq.n	c0033b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 c00334a:	68fb      	ldr	r3, [r7, #12]
 c00334c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 c003350:	f200 8095 	bhi.w	c00347e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 c003354:	68fb      	ldr	r3, [r7, #12]
 c003356:	2b00      	cmp	r3, #0
 c003358:	f000 8087 	beq.w	c00346a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 c00335c:	68fb      	ldr	r3, [r7, #12]
 c00335e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 c003362:	d052      	beq.n	c00340a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
              break;
 c003364:	e08b      	b.n	c00347e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
              if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 c003366:	4b0f      	ldr	r3, [pc, #60]	; (c0033a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 c003368:	681b      	ldr	r3, [r3, #0]
 c00336a:	f003 0302 	and.w	r3, r3, #2
 c00336e:	2b02      	cmp	r3, #2
 c003370:	f040 8088 	bne.w	c003484 <HAL_RCCEx_GetPeriphCLKFreq+0x688>
                frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 c003374:	4b0b      	ldr	r3, [pc, #44]	; (c0033a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 c003376:	681b      	ldr	r3, [r3, #0]
 c003378:	f003 0308 	and.w	r3, r3, #8
 c00337c:	2b00      	cmp	r3, #0
 c00337e:	d005      	beq.n	c00338c <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 c003380:	4b08      	ldr	r3, [pc, #32]	; (c0033a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 c003382:	681b      	ldr	r3, [r3, #0]
 c003384:	091b      	lsrs	r3, r3, #4
 c003386:	f003 030f 	and.w	r3, r3, #15
 c00338a:	e005      	b.n	c003398 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 c00338c:	4b05      	ldr	r3, [pc, #20]	; (c0033a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 c00338e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c003392:	0a1b      	lsrs	r3, r3, #8
 c003394:	f003 030f 	and.w	r3, r3, #15
 c003398:	4a03      	ldr	r2, [pc, #12]	; (c0033a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 c00339a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c00339e:	61fb      	str	r3, [r7, #28]
              break;
 c0033a0:	e070      	b.n	c003484 <HAL_RCCEx_GetPeriphCLKFreq+0x688>
 c0033a2:	bf00      	nop
 c0033a4:	50021000 	.word	0x50021000
 c0033a8:	0c00bb8c 	.word	0x0c00bb8c
 c0033ac:	02dc6c00 	.word	0x02dc6c00
              if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 c0033b0:	4baa      	ldr	r3, [pc, #680]	; (c00365c <HAL_RCCEx_GetPeriphCLKFreq+0x860>)
 c0033b2:	681b      	ldr	r3, [r3, #0]
 c0033b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c0033b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 c0033bc:	d165      	bne.n	c00348a <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
                if (HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 c0033be:	4ba7      	ldr	r3, [pc, #668]	; (c00365c <HAL_RCCEx_GetPeriphCLKFreq+0x860>)
 c0033c0:	68db      	ldr	r3, [r3, #12]
 c0033c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 c0033c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 c0033ca:	d15e      	bne.n	c00348a <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
                  pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 c0033cc:	4ba3      	ldr	r3, [pc, #652]	; (c00365c <HAL_RCCEx_GetPeriphCLKFreq+0x860>)
 c0033ce:	68db      	ldr	r3, [r3, #12]
 c0033d0:	091b      	lsrs	r3, r3, #4
 c0033d2:	f003 030f 	and.w	r3, r3, #15
 c0033d6:	3301      	adds	r3, #1
 c0033d8:	69ba      	ldr	r2, [r7, #24]
 c0033da:	fbb2 f3f3 	udiv	r3, r2, r3
 c0033de:	61bb      	str	r3, [r7, #24]
                  plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 c0033e0:	4b9e      	ldr	r3, [pc, #632]	; (c00365c <HAL_RCCEx_GetPeriphCLKFreq+0x860>)
 c0033e2:	68db      	ldr	r3, [r3, #12]
 c0033e4:	0a1b      	lsrs	r3, r3, #8
 c0033e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 c0033ea:	60bb      	str	r3, [r7, #8]
                  frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 c0033ec:	69bb      	ldr	r3, [r7, #24]
 c0033ee:	68ba      	ldr	r2, [r7, #8]
 c0033f0:	fb03 f202 	mul.w	r2, r3, r2
 c0033f4:	4b99      	ldr	r3, [pc, #612]	; (c00365c <HAL_RCCEx_GetPeriphCLKFreq+0x860>)
 c0033f6:	68db      	ldr	r3, [r3, #12]
 c0033f8:	0d5b      	lsrs	r3, r3, #21
 c0033fa:	f003 0303 	and.w	r3, r3, #3
 c0033fe:	3301      	adds	r3, #1
 c003400:	005b      	lsls	r3, r3, #1
 c003402:	fbb2 f3f3 	udiv	r3, r2, r3
 c003406:	61fb      	str	r3, [r7, #28]
              break;
 c003408:	e03f      	b.n	c00348a <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
              if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 c00340a:	4b94      	ldr	r3, [pc, #592]	; (c00365c <HAL_RCCEx_GetPeriphCLKFreq+0x860>)
 c00340c:	681b      	ldr	r3, [r3, #0]
 c00340e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 c003412:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 c003416:	d13b      	bne.n	c003490 <HAL_RCCEx_GetPeriphCLKFreq+0x694>
                if (HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 c003418:	4b90      	ldr	r3, [pc, #576]	; (c00365c <HAL_RCCEx_GetPeriphCLKFreq+0x860>)
 c00341a:	691b      	ldr	r3, [r3, #16]
 c00341c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 c003420:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 c003424:	d134      	bne.n	c003490 <HAL_RCCEx_GetPeriphCLKFreq+0x694>
                  pllvco = RCCEx_PLLSAI1_GetVCOFreq();
 c003426:	f000 fe19 	bl	c00405c <RCCEx_PLLSAI1_GetVCOFreq>
 c00342a:	61b8      	str	r0, [r7, #24]
                  pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 c00342c:	4b8b      	ldr	r3, [pc, #556]	; (c00365c <HAL_RCCEx_GetPeriphCLKFreq+0x860>)
 c00342e:	691b      	ldr	r3, [r3, #16]
 c003430:	091b      	lsrs	r3, r3, #4
 c003432:	f003 030f 	and.w	r3, r3, #15
 c003436:	3301      	adds	r3, #1
 c003438:	69ba      	ldr	r2, [r7, #24]
 c00343a:	fbb2 f3f3 	udiv	r3, r2, r3
 c00343e:	61bb      	str	r3, [r7, #24]
                  plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 c003440:	4b86      	ldr	r3, [pc, #536]	; (c00365c <HAL_RCCEx_GetPeriphCLKFreq+0x860>)
 c003442:	691b      	ldr	r3, [r3, #16]
 c003444:	0a1b      	lsrs	r3, r3, #8
 c003446:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 c00344a:	60bb      	str	r3, [r7, #8]
                  frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U);
 c00344c:	69bb      	ldr	r3, [r7, #24]
 c00344e:	68ba      	ldr	r2, [r7, #8]
 c003450:	fb03 f202 	mul.w	r2, r3, r2
 c003454:	4b81      	ldr	r3, [pc, #516]	; (c00365c <HAL_RCCEx_GetPeriphCLKFreq+0x860>)
 c003456:	691b      	ldr	r3, [r3, #16]
 c003458:	0d5b      	lsrs	r3, r3, #21
 c00345a:	f003 0303 	and.w	r3, r3, #3
 c00345e:	3301      	adds	r3, #1
 c003460:	005b      	lsls	r3, r3, #1
 c003462:	fbb2 f3f3 	udiv	r3, r2, r3
 c003466:	61fb      	str	r3, [r7, #28]
              break;
 c003468:	e012      	b.n	c003490 <HAL_RCCEx_GetPeriphCLKFreq+0x694>
              if (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 c00346a:	4b7c      	ldr	r3, [pc, #496]	; (c00365c <HAL_RCCEx_GetPeriphCLKFreq+0x860>)
 c00346c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c003470:	f003 0302 	and.w	r3, r3, #2
 c003474:	2b02      	cmp	r3, #2
 c003476:	d10e      	bne.n	c003496 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
                frequency = HSI48_VALUE;
 c003478:	4b79      	ldr	r3, [pc, #484]	; (c003660 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 c00347a:	61fb      	str	r3, [r7, #28]
              break;
 c00347c:	e00b      	b.n	c003496 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
              break;
 c00347e:	bf00      	nop
 c003480:	f000 bc50 	b.w	c003d24 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
              break;
 c003484:	bf00      	nop
 c003486:	f000 bc4d 	b.w	c003d24 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
              break;
 c00348a:	bf00      	nop
 c00348c:	f000 bc4a 	b.w	c003d24 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
              break;
 c003490:	bf00      	nop
 c003492:	f000 bc47 	b.w	c003d24 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
              break;
 c003496:	bf00      	nop
        break;
 c003498:	f000 bc44 	b.w	c003d24 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 c00349c:	4b6f      	ldr	r3, [pc, #444]	; (c00365c <HAL_RCCEx_GetPeriphCLKFreq+0x860>)
 c00349e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0034a2:	f003 0303 	and.w	r3, r3, #3
 c0034a6:	60fb      	str	r3, [r7, #12]
 c0034a8:	68fb      	ldr	r3, [r7, #12]
 c0034aa:	2b03      	cmp	r3, #3
 c0034ac:	d827      	bhi.n	c0034fe <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 c0034ae:	a201      	add	r2, pc, #4	; (adr r2, c0034b4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>)
 c0034b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c0034b4:	0c0034c5 	.word	0x0c0034c5
 c0034b8:	0c0034cd 	.word	0x0c0034cd
 c0034bc:	0c0034d5 	.word	0x0c0034d5
 c0034c0:	0c0034e9 	.word	0x0c0034e9
            frequency = HAL_RCC_GetPCLK2Freq();
 c0034c4:	f7fe ff44 	bl	c002350 <HAL_RCC_GetPCLK2Freq>
 c0034c8:	61f8      	str	r0, [r7, #28]
            break;
 c0034ca:	e01f      	b.n	c00350c <HAL_RCCEx_GetPeriphCLKFreq+0x710>
            frequency = HAL_RCC_GetSysClockFreq();
 c0034cc:	f7fe fe7c 	bl	c0021c8 <HAL_RCC_GetSysClockFreq>
 c0034d0:	61f8      	str	r0, [r7, #28]
            break;
 c0034d2:	e01b      	b.n	c00350c <HAL_RCCEx_GetPeriphCLKFreq+0x710>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 c0034d4:	4b61      	ldr	r3, [pc, #388]	; (c00365c <HAL_RCCEx_GetPeriphCLKFreq+0x860>)
 c0034d6:	681b      	ldr	r3, [r3, #0]
 c0034d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c0034dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c0034e0:	d110      	bne.n	c003504 <HAL_RCCEx_GetPeriphCLKFreq+0x708>
              frequency = HSI_VALUE;
 c0034e2:	4b60      	ldr	r3, [pc, #384]	; (c003664 <HAL_RCCEx_GetPeriphCLKFreq+0x868>)
 c0034e4:	61fb      	str	r3, [r7, #28]
            break;
 c0034e6:	e00d      	b.n	c003504 <HAL_RCCEx_GetPeriphCLKFreq+0x708>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 c0034e8:	4b5c      	ldr	r3, [pc, #368]	; (c00365c <HAL_RCCEx_GetPeriphCLKFreq+0x860>)
 c0034ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0034ee:	f003 0302 	and.w	r3, r3, #2
 c0034f2:	2b02      	cmp	r3, #2
 c0034f4:	d109      	bne.n	c00350a <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
              frequency = LSE_VALUE;
 c0034f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 c0034fa:	61fb      	str	r3, [r7, #28]
            break;
 c0034fc:	e005      	b.n	c00350a <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
            break;
 c0034fe:	bf00      	nop
 c003500:	f000 bc11 	b.w	c003d26 <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
            break;
 c003504:	bf00      	nop
 c003506:	f000 bc0e 	b.w	c003d26 <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
            break;
 c00350a:	bf00      	nop
        break;
 c00350c:	f000 bc0b 	b.w	c003d26 <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 c003510:	4b52      	ldr	r3, [pc, #328]	; (c00365c <HAL_RCCEx_GetPeriphCLKFreq+0x860>)
 c003512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c003516:	f003 030c 	and.w	r3, r3, #12
 c00351a:	60fb      	str	r3, [r7, #12]
 c00351c:	68fb      	ldr	r3, [r7, #12]
 c00351e:	2b0c      	cmp	r3, #12
 c003520:	d839      	bhi.n	c003596 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 c003522:	a201      	add	r2, pc, #4	; (adr r2, c003528 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>)
 c003524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c003528:	0c00355d 	.word	0x0c00355d
 c00352c:	0c003597 	.word	0x0c003597
 c003530:	0c003597 	.word	0x0c003597
 c003534:	0c003597 	.word	0x0c003597
 c003538:	0c003565 	.word	0x0c003565
 c00353c:	0c003597 	.word	0x0c003597
 c003540:	0c003597 	.word	0x0c003597
 c003544:	0c003597 	.word	0x0c003597
 c003548:	0c00356d 	.word	0x0c00356d
 c00354c:	0c003597 	.word	0x0c003597
 c003550:	0c003597 	.word	0x0c003597
 c003554:	0c003597 	.word	0x0c003597
 c003558:	0c003581 	.word	0x0c003581
            frequency = HAL_RCC_GetPCLK1Freq();
 c00355c:	f7fe fee4 	bl	c002328 <HAL_RCC_GetPCLK1Freq>
 c003560:	61f8      	str	r0, [r7, #28]
            break;
 c003562:	e01d      	b.n	c0035a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            frequency = HAL_RCC_GetSysClockFreq();
 c003564:	f7fe fe30 	bl	c0021c8 <HAL_RCC_GetSysClockFreq>
 c003568:	61f8      	str	r0, [r7, #28]
            break;
 c00356a:	e019      	b.n	c0035a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 c00356c:	4b3b      	ldr	r3, [pc, #236]	; (c00365c <HAL_RCCEx_GetPeriphCLKFreq+0x860>)
 c00356e:	681b      	ldr	r3, [r3, #0]
 c003570:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c003574:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c003578:	d10f      	bne.n	c00359a <HAL_RCCEx_GetPeriphCLKFreq+0x79e>
              frequency = HSI_VALUE;
 c00357a:	4b3a      	ldr	r3, [pc, #232]	; (c003664 <HAL_RCCEx_GetPeriphCLKFreq+0x868>)
 c00357c:	61fb      	str	r3, [r7, #28]
            break;
 c00357e:	e00c      	b.n	c00359a <HAL_RCCEx_GetPeriphCLKFreq+0x79e>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 c003580:	4b36      	ldr	r3, [pc, #216]	; (c00365c <HAL_RCCEx_GetPeriphCLKFreq+0x860>)
 c003582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c003586:	f003 0302 	and.w	r3, r3, #2
 c00358a:	2b02      	cmp	r3, #2
 c00358c:	d107      	bne.n	c00359e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
              frequency = LSE_VALUE;
 c00358e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 c003592:	61fb      	str	r3, [r7, #28]
            break;
 c003594:	e003      	b.n	c00359e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
            break;
 c003596:	bf00      	nop
 c003598:	e3c5      	b.n	c003d26 <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
            break;
 c00359a:	bf00      	nop
 c00359c:	e3c3      	b.n	c003d26 <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
            break;
 c00359e:	bf00      	nop
        break;
 c0035a0:	e3c1      	b.n	c003d26 <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 c0035a2:	4b2e      	ldr	r3, [pc, #184]	; (c00365c <HAL_RCCEx_GetPeriphCLKFreq+0x860>)
 c0035a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0035a8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 c0035ac:	60fb      	str	r3, [r7, #12]
 c0035ae:	68fb      	ldr	r3, [r7, #12]
 c0035b0:	2b30      	cmp	r3, #48	; 0x30
 c0035b2:	d021      	beq.n	c0035f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>
 c0035b4:	68fb      	ldr	r3, [r7, #12]
 c0035b6:	2b30      	cmp	r3, #48	; 0x30
 c0035b8:	d829      	bhi.n	c00360e <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 c0035ba:	68fb      	ldr	r3, [r7, #12]
 c0035bc:	2b20      	cmp	r3, #32
 c0035be:	d011      	beq.n	c0035e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
 c0035c0:	68fb      	ldr	r3, [r7, #12]
 c0035c2:	2b20      	cmp	r3, #32
 c0035c4:	d823      	bhi.n	c00360e <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 c0035c6:	68fb      	ldr	r3, [r7, #12]
 c0035c8:	2b00      	cmp	r3, #0
 c0035ca:	d003      	beq.n	c0035d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>
 c0035cc:	68fb      	ldr	r3, [r7, #12]
 c0035ce:	2b10      	cmp	r3, #16
 c0035d0:	d004      	beq.n	c0035dc <HAL_RCCEx_GetPeriphCLKFreq+0x7e0>
            break;
 c0035d2:	e01c      	b.n	c00360e <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            frequency = HAL_RCC_GetPCLK1Freq();
 c0035d4:	f7fe fea8 	bl	c002328 <HAL_RCC_GetPCLK1Freq>
 c0035d8:	61f8      	str	r0, [r7, #28]
            break;
 c0035da:	e01d      	b.n	c003618 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
            frequency = HAL_RCC_GetSysClockFreq();
 c0035dc:	f7fe fdf4 	bl	c0021c8 <HAL_RCC_GetSysClockFreq>
 c0035e0:	61f8      	str	r0, [r7, #28]
            break;
 c0035e2:	e019      	b.n	c003618 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 c0035e4:	4b1d      	ldr	r3, [pc, #116]	; (c00365c <HAL_RCCEx_GetPeriphCLKFreq+0x860>)
 c0035e6:	681b      	ldr	r3, [r3, #0]
 c0035e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c0035ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c0035f0:	d10f      	bne.n	c003612 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
              frequency = HSI_VALUE;
 c0035f2:	4b1c      	ldr	r3, [pc, #112]	; (c003664 <HAL_RCCEx_GetPeriphCLKFreq+0x868>)
 c0035f4:	61fb      	str	r3, [r7, #28]
            break;
 c0035f6:	e00c      	b.n	c003612 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 c0035f8:	4b18      	ldr	r3, [pc, #96]	; (c00365c <HAL_RCCEx_GetPeriphCLKFreq+0x860>)
 c0035fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0035fe:	f003 0302 	and.w	r3, r3, #2
 c003602:	2b02      	cmp	r3, #2
 c003604:	d107      	bne.n	c003616 <HAL_RCCEx_GetPeriphCLKFreq+0x81a>
              frequency = LSE_VALUE;
 c003606:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 c00360a:	61fb      	str	r3, [r7, #28]
            break;
 c00360c:	e003      	b.n	c003616 <HAL_RCCEx_GetPeriphCLKFreq+0x81a>
            break;
 c00360e:	bf00      	nop
 c003610:	e389      	b.n	c003d26 <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
            break;
 c003612:	bf00      	nop
 c003614:	e387      	b.n	c003d26 <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
            break;
 c003616:	bf00      	nop
        break;
 c003618:	e385      	b.n	c003d26 <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 c00361a:	4b10      	ldr	r3, [pc, #64]	; (c00365c <HAL_RCCEx_GetPeriphCLKFreq+0x860>)
 c00361c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c003620:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 c003624:	60fb      	str	r3, [r7, #12]
 c003626:	68fb      	ldr	r3, [r7, #12]
 c003628:	2bc0      	cmp	r3, #192	; 0xc0
 c00362a:	d027      	beq.n	c00367c <HAL_RCCEx_GetPeriphCLKFreq+0x880>
 c00362c:	68fb      	ldr	r3, [r7, #12]
 c00362e:	2bc0      	cmp	r3, #192	; 0xc0
 c003630:	d82f      	bhi.n	c003692 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
 c003632:	68fb      	ldr	r3, [r7, #12]
 c003634:	2b80      	cmp	r3, #128	; 0x80
 c003636:	d017      	beq.n	c003668 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>
 c003638:	68fb      	ldr	r3, [r7, #12]
 c00363a:	2b80      	cmp	r3, #128	; 0x80
 c00363c:	d829      	bhi.n	c003692 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
 c00363e:	68fb      	ldr	r3, [r7, #12]
 c003640:	2b00      	cmp	r3, #0
 c003642:	d003      	beq.n	c00364c <HAL_RCCEx_GetPeriphCLKFreq+0x850>
 c003644:	68fb      	ldr	r3, [r7, #12]
 c003646:	2b40      	cmp	r3, #64	; 0x40
 c003648:	d004      	beq.n	c003654 <HAL_RCCEx_GetPeriphCLKFreq+0x858>
            break;
 c00364a:	e022      	b.n	c003692 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HAL_RCC_GetPCLK1Freq();
 c00364c:	f7fe fe6c 	bl	c002328 <HAL_RCC_GetPCLK1Freq>
 c003650:	61f8      	str	r0, [r7, #28]
            break;
 c003652:	e023      	b.n	c00369c <HAL_RCCEx_GetPeriphCLKFreq+0x8a0>
            frequency = HAL_RCC_GetSysClockFreq();
 c003654:	f7fe fdb8 	bl	c0021c8 <HAL_RCC_GetSysClockFreq>
 c003658:	61f8      	str	r0, [r7, #28]
            break;
 c00365a:	e01f      	b.n	c00369c <HAL_RCCEx_GetPeriphCLKFreq+0x8a0>
 c00365c:	50021000 	.word	0x50021000
 c003660:	02dc6c00 	.word	0x02dc6c00
 c003664:	00f42400 	.word	0x00f42400
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 c003668:	4b99      	ldr	r3, [pc, #612]	; (c0038d0 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 c00366a:	681b      	ldr	r3, [r3, #0]
 c00366c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c003670:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c003674:	d10f      	bne.n	c003696 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
              frequency = HSI_VALUE;
 c003676:	4b97      	ldr	r3, [pc, #604]	; (c0038d4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 c003678:	61fb      	str	r3, [r7, #28]
            break;
 c00367a:	e00c      	b.n	c003696 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 c00367c:	4b94      	ldr	r3, [pc, #592]	; (c0038d0 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 c00367e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c003682:	f003 0302 	and.w	r3, r3, #2
 c003686:	2b02      	cmp	r3, #2
 c003688:	d107      	bne.n	c00369a <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
              frequency = LSE_VALUE;
 c00368a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 c00368e:	61fb      	str	r3, [r7, #28]
            break;
 c003690:	e003      	b.n	c00369a <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
            break;
 c003692:	bf00      	nop
 c003694:	e347      	b.n	c003d26 <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
            break;
 c003696:	bf00      	nop
 c003698:	e345      	b.n	c003d26 <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
            break;
 c00369a:	bf00      	nop
        break;
 c00369c:	e343      	b.n	c003d26 <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 c00369e:	4b8c      	ldr	r3, [pc, #560]	; (c0038d0 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 c0036a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0036a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 c0036a8:	60fb      	str	r3, [r7, #12]
 c0036aa:	68fb      	ldr	r3, [r7, #12]
 c0036ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c0036b0:	d025      	beq.n	c0036fe <HAL_RCCEx_GetPeriphCLKFreq+0x902>
 c0036b2:	68fb      	ldr	r3, [r7, #12]
 c0036b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c0036b8:	d82c      	bhi.n	c003714 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 c0036ba:	68fb      	ldr	r3, [r7, #12]
 c0036bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c0036c0:	d013      	beq.n	c0036ea <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
 c0036c2:	68fb      	ldr	r3, [r7, #12]
 c0036c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c0036c8:	d824      	bhi.n	c003714 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 c0036ca:	68fb      	ldr	r3, [r7, #12]
 c0036cc:	2b00      	cmp	r3, #0
 c0036ce:	d004      	beq.n	c0036da <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 c0036d0:	68fb      	ldr	r3, [r7, #12]
 c0036d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 c0036d6:	d004      	beq.n	c0036e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
            break;
 c0036d8:	e01c      	b.n	c003714 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
            frequency = HAL_RCC_GetPCLK1Freq();
 c0036da:	f7fe fe25 	bl	c002328 <HAL_RCC_GetPCLK1Freq>
 c0036de:	61f8      	str	r0, [r7, #28]
            break;
 c0036e0:	e01d      	b.n	c00371e <HAL_RCCEx_GetPeriphCLKFreq+0x922>
            frequency = HAL_RCC_GetSysClockFreq();
 c0036e2:	f7fe fd71 	bl	c0021c8 <HAL_RCC_GetSysClockFreq>
 c0036e6:	61f8      	str	r0, [r7, #28]
            break;
 c0036e8:	e019      	b.n	c00371e <HAL_RCCEx_GetPeriphCLKFreq+0x922>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 c0036ea:	4b79      	ldr	r3, [pc, #484]	; (c0038d0 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 c0036ec:	681b      	ldr	r3, [r3, #0]
 c0036ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c0036f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c0036f6:	d10f      	bne.n	c003718 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
              frequency = HSI_VALUE;
 c0036f8:	4b76      	ldr	r3, [pc, #472]	; (c0038d4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 c0036fa:	61fb      	str	r3, [r7, #28]
            break;
 c0036fc:	e00c      	b.n	c003718 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 c0036fe:	4b74      	ldr	r3, [pc, #464]	; (c0038d0 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 c003700:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c003704:	f003 0302 	and.w	r3, r3, #2
 c003708:	2b02      	cmp	r3, #2
 c00370a:	d107      	bne.n	c00371c <HAL_RCCEx_GetPeriphCLKFreq+0x920>
              frequency = LSE_VALUE;
 c00370c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 c003710:	61fb      	str	r3, [r7, #28]
            break;
 c003712:	e003      	b.n	c00371c <HAL_RCCEx_GetPeriphCLKFreq+0x920>
            break;
 c003714:	bf00      	nop
 c003716:	e306      	b.n	c003d26 <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
            break;
 c003718:	bf00      	nop
 c00371a:	e304      	b.n	c003d26 <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
            break;
 c00371c:	bf00      	nop
        break;
 c00371e:	e302      	b.n	c003d26 <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 c003720:	4b6b      	ldr	r3, [pc, #428]	; (c0038d0 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 c003722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c003726:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 c00372a:	60fb      	str	r3, [r7, #12]
 c00372c:	68fb      	ldr	r3, [r7, #12]
 c00372e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 c003732:	d025      	beq.n	c003780 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
 c003734:	68fb      	ldr	r3, [r7, #12]
 c003736:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 c00373a:	d82c      	bhi.n	c003796 <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
 c00373c:	68fb      	ldr	r3, [r7, #12]
 c00373e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 c003742:	d013      	beq.n	c00376c <HAL_RCCEx_GetPeriphCLKFreq+0x970>
 c003744:	68fb      	ldr	r3, [r7, #12]
 c003746:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 c00374a:	d824      	bhi.n	c003796 <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
 c00374c:	68fb      	ldr	r3, [r7, #12]
 c00374e:	2b00      	cmp	r3, #0
 c003750:	d004      	beq.n	c00375c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 c003752:	68fb      	ldr	r3, [r7, #12]
 c003754:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c003758:	d004      	beq.n	c003764 <HAL_RCCEx_GetPeriphCLKFreq+0x968>
            break;
 c00375a:	e01c      	b.n	c003796 <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
            frequency = HAL_RCC_GetPCLK1Freq();
 c00375c:	f7fe fde4 	bl	c002328 <HAL_RCC_GetPCLK1Freq>
 c003760:	61f8      	str	r0, [r7, #28]
            break;
 c003762:	e01d      	b.n	c0037a0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
            frequency = HAL_RCC_GetSysClockFreq();
 c003764:	f7fe fd30 	bl	c0021c8 <HAL_RCC_GetSysClockFreq>
 c003768:	61f8      	str	r0, [r7, #28]
            break;
 c00376a:	e019      	b.n	c0037a0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 c00376c:	4b58      	ldr	r3, [pc, #352]	; (c0038d0 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 c00376e:	681b      	ldr	r3, [r3, #0]
 c003770:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c003774:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c003778:	d10f      	bne.n	c00379a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
              frequency = HSI_VALUE;
 c00377a:	4b56      	ldr	r3, [pc, #344]	; (c0038d4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 c00377c:	61fb      	str	r3, [r7, #28]
            break;
 c00377e:	e00c      	b.n	c00379a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 c003780:	4b53      	ldr	r3, [pc, #332]	; (c0038d0 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 c003782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c003786:	f003 0302 	and.w	r3, r3, #2
 c00378a:	2b02      	cmp	r3, #2
 c00378c:	d107      	bne.n	c00379e <HAL_RCCEx_GetPeriphCLKFreq+0x9a2>
              frequency = LSE_VALUE;
 c00378e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 c003792:	61fb      	str	r3, [r7, #28]
            break;
 c003794:	e003      	b.n	c00379e <HAL_RCCEx_GetPeriphCLKFreq+0x9a2>
            break;
 c003796:	bf00      	nop
 c003798:	e2c5      	b.n	c003d26 <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
            break;
 c00379a:	bf00      	nop
 c00379c:	e2c3      	b.n	c003d26 <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
            break;
 c00379e:	bf00      	nop
        break;
 c0037a0:	e2c1      	b.n	c003d26 <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 c0037a2:	4b4b      	ldr	r3, [pc, #300]	; (c0038d0 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 c0037a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0037a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 c0037ac:	60fb      	str	r3, [r7, #12]
 c0037ae:	68fb      	ldr	r3, [r7, #12]
 c0037b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 c0037b4:	d007      	beq.n	c0037c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ca>
 c0037b6:	68fb      	ldr	r3, [r7, #12]
 c0037b8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 c0037bc:	d12b      	bne.n	c003816 <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
            frequency = HAL_RCC_GetSysClockFreq();
 c0037be:	f7fe fd03 	bl	c0021c8 <HAL_RCC_GetSysClockFreq>
 c0037c2:	61f8      	str	r0, [r7, #28]
            break;
 c0037c4:	e02a      	b.n	c00381c <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
            if (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U)
 c0037c6:	4b42      	ldr	r3, [pc, #264]	; (c0038d0 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 c0037c8:	691b      	ldr	r3, [r3, #16]
 c0037ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 c0037ce:	2b00      	cmp	r3, #0
 c0037d0:	d023      	beq.n	c00381a <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
              pllvco = RCCEx_PLLSAI1_GetVCOFreq();
 c0037d2:	f000 fc43 	bl	c00405c <RCCEx_PLLSAI1_GetVCOFreq>
 c0037d6:	61b8      	str	r0, [r7, #24]
              pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 c0037d8:	4b3d      	ldr	r3, [pc, #244]	; (c0038d0 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 c0037da:	691b      	ldr	r3, [r3, #16]
 c0037dc:	091b      	lsrs	r3, r3, #4
 c0037de:	f003 030f 	and.w	r3, r3, #15
 c0037e2:	3301      	adds	r3, #1
 c0037e4:	69ba      	ldr	r2, [r7, #24]
 c0037e6:	fbb2 f3f3 	udiv	r3, r2, r3
 c0037ea:	61bb      	str	r3, [r7, #24]
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 c0037ec:	4b38      	ldr	r3, [pc, #224]	; (c0038d0 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 c0037ee:	691b      	ldr	r3, [r3, #16]
 c0037f0:	0a1b      	lsrs	r3, r3, #8
 c0037f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 c0037f6:	60bb      	str	r3, [r7, #8]
              frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U);
 c0037f8:	69bb      	ldr	r3, [r7, #24]
 c0037fa:	68ba      	ldr	r2, [r7, #8]
 c0037fc:	fb03 f202 	mul.w	r2, r3, r2
 c003800:	4b33      	ldr	r3, [pc, #204]	; (c0038d0 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 c003802:	691b      	ldr	r3, [r3, #16]
 c003804:	0e5b      	lsrs	r3, r3, #25
 c003806:	f003 0303 	and.w	r3, r3, #3
 c00380a:	3301      	adds	r3, #1
 c00380c:	005b      	lsls	r3, r3, #1
 c00380e:	fbb2 f3f3 	udiv	r3, r2, r3
 c003812:	61fb      	str	r3, [r7, #28]
            break;
 c003814:	e001      	b.n	c00381a <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
            break;
 c003816:	bf00      	nop
 c003818:	e285      	b.n	c003d26 <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
            break;
 c00381a:	bf00      	nop
        break;
 c00381c:	e283      	b.n	c003d26 <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 c00381e:	4b2c      	ldr	r3, [pc, #176]	; (c0038d0 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 c003820:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c003824:	f003 0304 	and.w	r3, r3, #4
 c003828:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 c00382a:	68fb      	ldr	r3, [r7, #12]
 c00382c:	2b00      	cmp	r3, #0
 c00382e:	d103      	bne.n	c003838 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
          frequency = HAL_RCC_GetPCLK2Freq();
 c003830:	f7fe fd8e 	bl	c002350 <HAL_RCC_GetPCLK2Freq>
 c003834:	61f8      	str	r0, [r7, #28]
        break;
 c003836:	e276      	b.n	c003d26 <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
          frequency = HAL_RCC_GetSysClockFreq();
 c003838:	f7fe fcc6 	bl	c0021c8 <HAL_RCC_GetSysClockFreq>
 c00383c:	61f8      	str	r0, [r7, #28]
        break;
 c00383e:	e272      	b.n	c003d26 <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 c003840:	4b23      	ldr	r3, [pc, #140]	; (c0038d0 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 c003842:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c003846:	f003 0318 	and.w	r3, r3, #24
 c00384a:	60fb      	str	r3, [r7, #12]
 c00384c:	68fb      	ldr	r3, [r7, #12]
 c00384e:	2b10      	cmp	r3, #16
 c003850:	d010      	beq.n	c003874 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 c003852:	68fb      	ldr	r3, [r7, #12]
 c003854:	2b10      	cmp	r3, #16
 c003856:	d834      	bhi.n	c0038c2 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 c003858:	68fb      	ldr	r3, [r7, #12]
 c00385a:	2b00      	cmp	r3, #0
 c00385c:	d003      	beq.n	c003866 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 c00385e:	68fb      	ldr	r3, [r7, #12]
 c003860:	2b08      	cmp	r3, #8
 c003862:	d024      	beq.n	c0038ae <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
            break;
 c003864:	e02d      	b.n	c0038c2 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
            frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 c003866:	69b9      	ldr	r1, [r7, #24]
 c003868:	f44f 6000 	mov.w	r0, #2048	; 0x800
 c00386c:	f000 fca6 	bl	c0041bc <RCCEx_GetSAIxPeriphCLKFreq>
 c003870:	61f8      	str	r0, [r7, #28]
            break;
 c003872:	e02b      	b.n	c0038cc <HAL_RCCEx_GetPeriphCLKFreq+0xad0>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 c003874:	4b16      	ldr	r3, [pc, #88]	; (c0038d0 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 c003876:	681b      	ldr	r3, [r3, #0]
 c003878:	f003 0302 	and.w	r3, r3, #2
 c00387c:	2b02      	cmp	r3, #2
 c00387e:	d122      	bne.n	c0038c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaca>
              frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 c003880:	4b13      	ldr	r3, [pc, #76]	; (c0038d0 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 c003882:	681b      	ldr	r3, [r3, #0]
 c003884:	f003 0308 	and.w	r3, r3, #8
 c003888:	2b00      	cmp	r3, #0
 c00388a:	d005      	beq.n	c003898 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 c00388c:	4b10      	ldr	r3, [pc, #64]	; (c0038d0 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 c00388e:	681b      	ldr	r3, [r3, #0]
 c003890:	091b      	lsrs	r3, r3, #4
 c003892:	f003 030f 	and.w	r3, r3, #15
 c003896:	e005      	b.n	c0038a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>
 c003898:	4b0d      	ldr	r3, [pc, #52]	; (c0038d0 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 c00389a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c00389e:	0a1b      	lsrs	r3, r3, #8
 c0038a0:	f003 030f 	and.w	r3, r3, #15
 c0038a4:	4a0c      	ldr	r2, [pc, #48]	; (c0038d8 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 c0038a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c0038aa:	61fb      	str	r3, [r7, #28]
            break;
 c0038ac:	e00b      	b.n	c0038c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaca>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 c0038ae:	4b08      	ldr	r3, [pc, #32]	; (c0038d0 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 c0038b0:	681b      	ldr	r3, [r3, #0]
 c0038b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c0038b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c0038ba:	d106      	bne.n	c0038ca <HAL_RCCEx_GetPeriphCLKFreq+0xace>
              frequency = HSI_VALUE;
 c0038bc:	4b05      	ldr	r3, [pc, #20]	; (c0038d4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 c0038be:	61fb      	str	r3, [r7, #28]
            break;
 c0038c0:	e003      	b.n	c0038ca <HAL_RCCEx_GetPeriphCLKFreq+0xace>
            break;
 c0038c2:	bf00      	nop
 c0038c4:	e22f      	b.n	c003d26 <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
            break;
 c0038c6:	bf00      	nop
 c0038c8:	e22d      	b.n	c003d26 <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
            break;
 c0038ca:	bf00      	nop
        break;
 c0038cc:	e22b      	b.n	c003d26 <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
 c0038ce:	bf00      	nop
 c0038d0:	50021000 	.word	0x50021000
 c0038d4:	00f42400 	.word	0x00f42400
 c0038d8:	0c00bb8c 	.word	0x0c00bb8c
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 c0038dc:	4b96      	ldr	r3, [pc, #600]	; (c003b38 <HAL_RCCEx_GetPeriphCLKFreq+0xd3c>)
 c0038de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0038e2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 c0038e6:	60fb      	str	r3, [r7, #12]
 c0038e8:	68fb      	ldr	r3, [r7, #12]
 c0038ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 c0038ee:	d013      	beq.n	c003918 <HAL_RCCEx_GetPeriphCLKFreq+0xb1c>
 c0038f0:	68fb      	ldr	r3, [r7, #12]
 c0038f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 c0038f6:	d819      	bhi.n	c00392c <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 c0038f8:	68fb      	ldr	r3, [r7, #12]
 c0038fa:	2b00      	cmp	r3, #0
 c0038fc:	d004      	beq.n	c003908 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 c0038fe:	68fb      	ldr	r3, [r7, #12]
 c003900:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 c003904:	d004      	beq.n	c003910 <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
            break;
 c003906:	e011      	b.n	c00392c <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
            frequency = HAL_RCC_GetPCLK1Freq();
 c003908:	f7fe fd0e 	bl	c002328 <HAL_RCC_GetPCLK1Freq>
 c00390c:	61f8      	str	r0, [r7, #28]
            break;
 c00390e:	e010      	b.n	c003932 <HAL_RCCEx_GetPeriphCLKFreq+0xb36>
            frequency = HAL_RCC_GetSysClockFreq();
 c003910:	f7fe fc5a 	bl	c0021c8 <HAL_RCC_GetSysClockFreq>
 c003914:	61f8      	str	r0, [r7, #28]
            break;
 c003916:	e00c      	b.n	c003932 <HAL_RCCEx_GetPeriphCLKFreq+0xb36>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 c003918:	4b87      	ldr	r3, [pc, #540]	; (c003b38 <HAL_RCCEx_GetPeriphCLKFreq+0xd3c>)
 c00391a:	681b      	ldr	r3, [r3, #0]
 c00391c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c003920:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c003924:	d104      	bne.n	c003930 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>
              frequency = HSI_VALUE;
 c003926:	4b85      	ldr	r3, [pc, #532]	; (c003b3c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 c003928:	61fb      	str	r3, [r7, #28]
            break;
 c00392a:	e001      	b.n	c003930 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>
            break;
 c00392c:	bf00      	nop
 c00392e:	e1fa      	b.n	c003d26 <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
            break;
 c003930:	bf00      	nop
        break;
 c003932:	e1f8      	b.n	c003d26 <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 c003934:	4b80      	ldr	r3, [pc, #512]	; (c003b38 <HAL_RCCEx_GetPeriphCLKFreq+0xd3c>)
 c003936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c00393a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 c00393e:	60fb      	str	r3, [r7, #12]
 c003940:	68fb      	ldr	r3, [r7, #12]
 c003942:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c003946:	d013      	beq.n	c003970 <HAL_RCCEx_GetPeriphCLKFreq+0xb74>
 c003948:	68fb      	ldr	r3, [r7, #12]
 c00394a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c00394e:	d819      	bhi.n	c003984 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
 c003950:	68fb      	ldr	r3, [r7, #12]
 c003952:	2b00      	cmp	r3, #0
 c003954:	d004      	beq.n	c003960 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 c003956:	68fb      	ldr	r3, [r7, #12]
 c003958:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 c00395c:	d004      	beq.n	c003968 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
            break;
 c00395e:	e011      	b.n	c003984 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
            frequency = HAL_RCC_GetPCLK1Freq();
 c003960:	f7fe fce2 	bl	c002328 <HAL_RCC_GetPCLK1Freq>
 c003964:	61f8      	str	r0, [r7, #28]
            break;
 c003966:	e010      	b.n	c00398a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
            frequency = HAL_RCC_GetSysClockFreq();
 c003968:	f7fe fc2e 	bl	c0021c8 <HAL_RCC_GetSysClockFreq>
 c00396c:	61f8      	str	r0, [r7, #28]
            break;
 c00396e:	e00c      	b.n	c00398a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 c003970:	4b71      	ldr	r3, [pc, #452]	; (c003b38 <HAL_RCCEx_GetPeriphCLKFreq+0xd3c>)
 c003972:	681b      	ldr	r3, [r3, #0]
 c003974:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c003978:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c00397c:	d104      	bne.n	c003988 <HAL_RCCEx_GetPeriphCLKFreq+0xb8c>
              frequency = HSI_VALUE;
 c00397e:	4b6f      	ldr	r3, [pc, #444]	; (c003b3c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 c003980:	61fb      	str	r3, [r7, #28]
            break;
 c003982:	e001      	b.n	c003988 <HAL_RCCEx_GetPeriphCLKFreq+0xb8c>
            break;
 c003984:	bf00      	nop
 c003986:	e1ce      	b.n	c003d26 <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
            break;
 c003988:	bf00      	nop
        break;
 c00398a:	e1cc      	b.n	c003d26 <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 c00398c:	4b6a      	ldr	r3, [pc, #424]	; (c003b38 <HAL_RCCEx_GetPeriphCLKFreq+0xd3c>)
 c00398e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c003992:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 c003996:	60fb      	str	r3, [r7, #12]
 c003998:	68fb      	ldr	r3, [r7, #12]
 c00399a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 c00399e:	d013      	beq.n	c0039c8 <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
 c0039a0:	68fb      	ldr	r3, [r7, #12]
 c0039a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 c0039a6:	d819      	bhi.n	c0039dc <HAL_RCCEx_GetPeriphCLKFreq+0xbe0>
 c0039a8:	68fb      	ldr	r3, [r7, #12]
 c0039aa:	2b00      	cmp	r3, #0
 c0039ac:	d004      	beq.n	c0039b8 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 c0039ae:	68fb      	ldr	r3, [r7, #12]
 c0039b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 c0039b4:	d004      	beq.n	c0039c0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
            break;
 c0039b6:	e011      	b.n	c0039dc <HAL_RCCEx_GetPeriphCLKFreq+0xbe0>
            frequency = HAL_RCC_GetPCLK1Freq();
 c0039b8:	f7fe fcb6 	bl	c002328 <HAL_RCC_GetPCLK1Freq>
 c0039bc:	61f8      	str	r0, [r7, #28]
            break;
 c0039be:	e010      	b.n	c0039e2 <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
            frequency = HAL_RCC_GetSysClockFreq();
 c0039c0:	f7fe fc02 	bl	c0021c8 <HAL_RCC_GetSysClockFreq>
 c0039c4:	61f8      	str	r0, [r7, #28]
            break;
 c0039c6:	e00c      	b.n	c0039e2 <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 c0039c8:	4b5b      	ldr	r3, [pc, #364]	; (c003b38 <HAL_RCCEx_GetPeriphCLKFreq+0xd3c>)
 c0039ca:	681b      	ldr	r3, [r3, #0]
 c0039cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c0039d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c0039d4:	d104      	bne.n	c0039e0 <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
              frequency = HSI_VALUE;
 c0039d6:	4b59      	ldr	r3, [pc, #356]	; (c003b3c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 c0039d8:	61fb      	str	r3, [r7, #28]
            break;
 c0039da:	e001      	b.n	c0039e0 <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
            break;
 c0039dc:	bf00      	nop
 c0039de:	e1a2      	b.n	c003d26 <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
            break;
 c0039e0:	bf00      	nop
        break;
 c0039e2:	e1a0      	b.n	c003d26 <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 c0039e4:	4b54      	ldr	r3, [pc, #336]	; (c003b38 <HAL_RCCEx_GetPeriphCLKFreq+0xd3c>)
 c0039e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c0039ea:	f003 0303 	and.w	r3, r3, #3
 c0039ee:	60fb      	str	r3, [r7, #12]
 c0039f0:	68fb      	ldr	r3, [r7, #12]
 c0039f2:	2b02      	cmp	r3, #2
 c0039f4:	d011      	beq.n	c003a1a <HAL_RCCEx_GetPeriphCLKFreq+0xc1e>
 c0039f6:	68fb      	ldr	r3, [r7, #12]
 c0039f8:	2b02      	cmp	r3, #2
 c0039fa:	d818      	bhi.n	c003a2e <HAL_RCCEx_GetPeriphCLKFreq+0xc32>
 c0039fc:	68fb      	ldr	r3, [r7, #12]
 c0039fe:	2b00      	cmp	r3, #0
 c003a00:	d003      	beq.n	c003a0a <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 c003a02:	68fb      	ldr	r3, [r7, #12]
 c003a04:	2b01      	cmp	r3, #1
 c003a06:	d004      	beq.n	c003a12 <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
            break;
 c003a08:	e011      	b.n	c003a2e <HAL_RCCEx_GetPeriphCLKFreq+0xc32>
            frequency = HAL_RCC_GetPCLK1Freq();
 c003a0a:	f7fe fc8d 	bl	c002328 <HAL_RCC_GetPCLK1Freq>
 c003a0e:	61f8      	str	r0, [r7, #28]
            break;
 c003a10:	e010      	b.n	c003a34 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
            frequency = HAL_RCC_GetSysClockFreq();
 c003a12:	f7fe fbd9 	bl	c0021c8 <HAL_RCC_GetSysClockFreq>
 c003a16:	61f8      	str	r0, [r7, #28]
            break;
 c003a18:	e00c      	b.n	c003a34 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 c003a1a:	4b47      	ldr	r3, [pc, #284]	; (c003b38 <HAL_RCCEx_GetPeriphCLKFreq+0xd3c>)
 c003a1c:	681b      	ldr	r3, [r3, #0]
 c003a1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c003a22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c003a26:	d104      	bne.n	c003a32 <HAL_RCCEx_GetPeriphCLKFreq+0xc36>
              frequency = HSI_VALUE;
 c003a28:	4b44      	ldr	r3, [pc, #272]	; (c003b3c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 c003a2a:	61fb      	str	r3, [r7, #28]
            break;
 c003a2c:	e001      	b.n	c003a32 <HAL_RCCEx_GetPeriphCLKFreq+0xc36>
            break;
 c003a2e:	bf00      	nop
 c003a30:	e179      	b.n	c003d26 <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
            break;
 c003a32:	bf00      	nop
        break;
 c003a34:	e177      	b.n	c003d26 <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 c003a36:	4b40      	ldr	r3, [pc, #256]	; (c003b38 <HAL_RCCEx_GetPeriphCLKFreq+0xd3c>)
 c003a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c003a3c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 c003a40:	60fb      	str	r3, [r7, #12]
 c003a42:	68fb      	ldr	r3, [r7, #12]
 c003a44:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 c003a48:	d02c      	beq.n	c003aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
 c003a4a:	68fb      	ldr	r3, [r7, #12]
 c003a4c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 c003a50:	d833      	bhi.n	c003aba <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
 c003a52:	68fb      	ldr	r3, [r7, #12]
 c003a54:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 c003a58:	d01a      	beq.n	c003a90 <HAL_RCCEx_GetPeriphCLKFreq+0xc94>
 c003a5a:	68fb      	ldr	r3, [r7, #12]
 c003a5c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 c003a60:	d82b      	bhi.n	c003aba <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
 c003a62:	68fb      	ldr	r3, [r7, #12]
 c003a64:	2b00      	cmp	r3, #0
 c003a66:	d004      	beq.n	c003a72 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
 c003a68:	68fb      	ldr	r3, [r7, #12]
 c003a6a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 c003a6e:	d004      	beq.n	c003a7a <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
            break;
 c003a70:	e023      	b.n	c003aba <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
            frequency = HAL_RCC_GetPCLK1Freq();
 c003a72:	f7fe fc59 	bl	c002328 <HAL_RCC_GetPCLK1Freq>
 c003a76:	61f8      	str	r0, [r7, #28]
            break;
 c003a78:	e026      	b.n	c003ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xccc>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 c003a7a:	4b2f      	ldr	r3, [pc, #188]	; (c003b38 <HAL_RCCEx_GetPeriphCLKFreq+0xd3c>)
 c003a7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c003a80:	f003 0302 	and.w	r3, r3, #2
 c003a84:	2b02      	cmp	r3, #2
 c003a86:	d11a      	bne.n	c003abe <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
              frequency = LSI_VALUE;
 c003a88:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 c003a8c:	61fb      	str	r3, [r7, #28]
            break;
 c003a8e:	e016      	b.n	c003abe <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 c003a90:	4b29      	ldr	r3, [pc, #164]	; (c003b38 <HAL_RCCEx_GetPeriphCLKFreq+0xd3c>)
 c003a92:	681b      	ldr	r3, [r3, #0]
 c003a94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c003a98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c003a9c:	d111      	bne.n	c003ac2 <HAL_RCCEx_GetPeriphCLKFreq+0xcc6>
              frequency = HSI_VALUE;
 c003a9e:	4b27      	ldr	r3, [pc, #156]	; (c003b3c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 c003aa0:	61fb      	str	r3, [r7, #28]
            break;
 c003aa2:	e00e      	b.n	c003ac2 <HAL_RCCEx_GetPeriphCLKFreq+0xcc6>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 c003aa4:	4b24      	ldr	r3, [pc, #144]	; (c003b38 <HAL_RCCEx_GetPeriphCLKFreq+0xd3c>)
 c003aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c003aaa:	f003 0302 	and.w	r3, r3, #2
 c003aae:	2b02      	cmp	r3, #2
 c003ab0:	d109      	bne.n	c003ac6 <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
              frequency = LSE_VALUE;
 c003ab2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 c003ab6:	61fb      	str	r3, [r7, #28]
            break;
 c003ab8:	e005      	b.n	c003ac6 <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
            break;
 c003aba:	bf00      	nop
 c003abc:	e133      	b.n	c003d26 <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
            break;
 c003abe:	bf00      	nop
 c003ac0:	e131      	b.n	c003d26 <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
            break;
 c003ac2:	bf00      	nop
 c003ac4:	e12f      	b.n	c003d26 <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
            break;
 c003ac6:	bf00      	nop
        break;
 c003ac8:	e12d      	b.n	c003d26 <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 c003aca:	4b1b      	ldr	r3, [pc, #108]	; (c003b38 <HAL_RCCEx_GetPeriphCLKFreq+0xd3c>)
 c003acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c003ad0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 c003ad4:	60fb      	str	r3, [r7, #12]
 c003ad6:	68fb      	ldr	r3, [r7, #12]
 c003ad8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 c003adc:	d030      	beq.n	c003b40 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
 c003ade:	68fb      	ldr	r3, [r7, #12]
 c003ae0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 c003ae4:	d837      	bhi.n	c003b56 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 c003ae6:	68fb      	ldr	r3, [r7, #12]
 c003ae8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 c003aec:	d01a      	beq.n	c003b24 <HAL_RCCEx_GetPeriphCLKFreq+0xd28>
 c003aee:	68fb      	ldr	r3, [r7, #12]
 c003af0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 c003af4:	d82f      	bhi.n	c003b56 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 c003af6:	68fb      	ldr	r3, [r7, #12]
 c003af8:	2b00      	cmp	r3, #0
 c003afa:	d004      	beq.n	c003b06 <HAL_RCCEx_GetPeriphCLKFreq+0xd0a>
 c003afc:	68fb      	ldr	r3, [r7, #12]
 c003afe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 c003b02:	d004      	beq.n	c003b0e <HAL_RCCEx_GetPeriphCLKFreq+0xd12>
            break;
 c003b04:	e027      	b.n	c003b56 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
            frequency = HAL_RCC_GetPCLK1Freq();
 c003b06:	f7fe fc0f 	bl	c002328 <HAL_RCC_GetPCLK1Freq>
 c003b0a:	61f8      	str	r0, [r7, #28]
            break;
 c003b0c:	e02a      	b.n	c003b64 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 c003b0e:	4b0a      	ldr	r3, [pc, #40]	; (c003b38 <HAL_RCCEx_GetPeriphCLKFreq+0xd3c>)
 c003b10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c003b14:	f003 0302 	and.w	r3, r3, #2
 c003b18:	2b02      	cmp	r3, #2
 c003b1a:	d11e      	bne.n	c003b5a <HAL_RCCEx_GetPeriphCLKFreq+0xd5e>
              frequency = LSI_VALUE;
 c003b1c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 c003b20:	61fb      	str	r3, [r7, #28]
            break;
 c003b22:	e01a      	b.n	c003b5a <HAL_RCCEx_GetPeriphCLKFreq+0xd5e>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 c003b24:	4b04      	ldr	r3, [pc, #16]	; (c003b38 <HAL_RCCEx_GetPeriphCLKFreq+0xd3c>)
 c003b26:	681b      	ldr	r3, [r3, #0]
 c003b28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c003b2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c003b30:	d115      	bne.n	c003b5e <HAL_RCCEx_GetPeriphCLKFreq+0xd62>
              frequency = HSI_VALUE;
 c003b32:	4b02      	ldr	r3, [pc, #8]	; (c003b3c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 c003b34:	61fb      	str	r3, [r7, #28]
            break;
 c003b36:	e012      	b.n	c003b5e <HAL_RCCEx_GetPeriphCLKFreq+0xd62>
 c003b38:	50021000 	.word	0x50021000
 c003b3c:	00f42400 	.word	0x00f42400
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 c003b40:	4b7b      	ldr	r3, [pc, #492]	; (c003d30 <HAL_RCCEx_GetPeriphCLKFreq+0xf34>)
 c003b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c003b46:	f003 0302 	and.w	r3, r3, #2
 c003b4a:	2b02      	cmp	r3, #2
 c003b4c:	d109      	bne.n	c003b62 <HAL_RCCEx_GetPeriphCLKFreq+0xd66>
              frequency = LSE_VALUE;
 c003b4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 c003b52:	61fb      	str	r3, [r7, #28]
            break;
 c003b54:	e005      	b.n	c003b62 <HAL_RCCEx_GetPeriphCLKFreq+0xd66>
            break;
 c003b56:	bf00      	nop
 c003b58:	e0e5      	b.n	c003d26 <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
            break;
 c003b5a:	bf00      	nop
 c003b5c:	e0e3      	b.n	c003d26 <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
            break;
 c003b5e:	bf00      	nop
 c003b60:	e0e1      	b.n	c003d26 <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
            break;
 c003b62:	bf00      	nop
        break;
 c003b64:	e0df      	b.n	c003d26 <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 c003b66:	4b72      	ldr	r3, [pc, #456]	; (c003d30 <HAL_RCCEx_GetPeriphCLKFreq+0xf34>)
 c003b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c003b6c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 c003b70:	60fb      	str	r3, [r7, #12]
 c003b72:	68fb      	ldr	r3, [r7, #12]
 c003b74:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 c003b78:	d02c      	beq.n	c003bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xdd8>
 c003b7a:	68fb      	ldr	r3, [r7, #12]
 c003b7c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 c003b80:	d833      	bhi.n	c003bea <HAL_RCCEx_GetPeriphCLKFreq+0xdee>
 c003b82:	68fb      	ldr	r3, [r7, #12]
 c003b84:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 c003b88:	d01a      	beq.n	c003bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xdc4>
 c003b8a:	68fb      	ldr	r3, [r7, #12]
 c003b8c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 c003b90:	d82b      	bhi.n	c003bea <HAL_RCCEx_GetPeriphCLKFreq+0xdee>
 c003b92:	68fb      	ldr	r3, [r7, #12]
 c003b94:	2b00      	cmp	r3, #0
 c003b96:	d004      	beq.n	c003ba2 <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
 c003b98:	68fb      	ldr	r3, [r7, #12]
 c003b9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 c003b9e:	d004      	beq.n	c003baa <HAL_RCCEx_GetPeriphCLKFreq+0xdae>
            break;
 c003ba0:	e023      	b.n	c003bea <HAL_RCCEx_GetPeriphCLKFreq+0xdee>
            frequency = HAL_RCC_GetPCLK1Freq();
 c003ba2:	f7fe fbc1 	bl	c002328 <HAL_RCC_GetPCLK1Freq>
 c003ba6:	61f8      	str	r0, [r7, #28]
            break;
 c003ba8:	e026      	b.n	c003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 c003baa:	4b61      	ldr	r3, [pc, #388]	; (c003d30 <HAL_RCCEx_GetPeriphCLKFreq+0xf34>)
 c003bac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c003bb0:	f003 0302 	and.w	r3, r3, #2
 c003bb4:	2b02      	cmp	r3, #2
 c003bb6:	d11a      	bne.n	c003bee <HAL_RCCEx_GetPeriphCLKFreq+0xdf2>
              frequency = LSI_VALUE;
 c003bb8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 c003bbc:	61fb      	str	r3, [r7, #28]
            break;
 c003bbe:	e016      	b.n	c003bee <HAL_RCCEx_GetPeriphCLKFreq+0xdf2>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 c003bc0:	4b5b      	ldr	r3, [pc, #364]	; (c003d30 <HAL_RCCEx_GetPeriphCLKFreq+0xf34>)
 c003bc2:	681b      	ldr	r3, [r3, #0]
 c003bc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c003bc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c003bcc:	d111      	bne.n	c003bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
              frequency = HSI_VALUE;
 c003bce:	4b59      	ldr	r3, [pc, #356]	; (c003d34 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 c003bd0:	61fb      	str	r3, [r7, #28]
            break;
 c003bd2:	e00e      	b.n	c003bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 c003bd4:	4b56      	ldr	r3, [pc, #344]	; (c003d30 <HAL_RCCEx_GetPeriphCLKFreq+0xf34>)
 c003bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c003bda:	f003 0302 	and.w	r3, r3, #2
 c003bde:	2b02      	cmp	r3, #2
 c003be0:	d109      	bne.n	c003bf6 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
              frequency = LSE_VALUE;
 c003be2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 c003be6:	61fb      	str	r3, [r7, #28]
            break;
 c003be8:	e005      	b.n	c003bf6 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
            break;
 c003bea:	bf00      	nop
 c003bec:	e09b      	b.n	c003d26 <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
            break;
 c003bee:	bf00      	nop
 c003bf0:	e099      	b.n	c003d26 <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
            break;
 c003bf2:	bf00      	nop
 c003bf4:	e097      	b.n	c003d26 <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
            break;
 c003bf6:	bf00      	nop
        break;
 c003bf8:	e095      	b.n	c003d26 <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 c003bfa:	4b4d      	ldr	r3, [pc, #308]	; (c003d30 <HAL_RCCEx_GetPeriphCLKFreq+0xf34>)
 c003bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c003c00:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 c003c04:	60fb      	str	r3, [r7, #12]
 c003c06:	68fb      	ldr	r3, [r7, #12]
 c003c08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 c003c0c:	d042      	beq.n	c003c94 <HAL_RCCEx_GetPeriphCLKFreq+0xe98>
 c003c0e:	68fb      	ldr	r3, [r7, #12]
 c003c10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 c003c14:	d874      	bhi.n	c003d00 <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
 c003c16:	68fb      	ldr	r3, [r7, #12]
 c003c18:	2b00      	cmp	r3, #0
 c003c1a:	d004      	beq.n	c003c26 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 c003c1c:	68fb      	ldr	r3, [r7, #12]
 c003c1e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 c003c22:	d00a      	beq.n	c003c3a <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
            break;
 c003c24:	e06c      	b.n	c003d00 <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 c003c26:	4b42      	ldr	r3, [pc, #264]	; (c003d30 <HAL_RCCEx_GetPeriphCLKFreq+0xf34>)
 c003c28:	681b      	ldr	r3, [r3, #0]
 c003c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c003c2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 c003c32:	d167      	bne.n	c003d04 <HAL_RCCEx_GetPeriphCLKFreq+0xf08>
              frequency = HSE_VALUE;
 c003c34:	4b3f      	ldr	r3, [pc, #252]	; (c003d34 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 c003c36:	61fb      	str	r3, [r7, #28]
            break;
 c003c38:	e064      	b.n	c003d04 <HAL_RCCEx_GetPeriphCLKFreq+0xf08>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 c003c3a:	4b3d      	ldr	r3, [pc, #244]	; (c003d30 <HAL_RCCEx_GetPeriphCLKFreq+0xf34>)
 c003c3c:	681b      	ldr	r3, [r3, #0]
 c003c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c003c42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 c003c46:	d15f      	bne.n	c003d08 <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
              if (HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 c003c48:	4b39      	ldr	r3, [pc, #228]	; (c003d30 <HAL_RCCEx_GetPeriphCLKFreq+0xf34>)
 c003c4a:	68db      	ldr	r3, [r3, #12]
 c003c4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 c003c50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 c003c54:	d158      	bne.n	c003d08 <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
                pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 c003c56:	4b36      	ldr	r3, [pc, #216]	; (c003d30 <HAL_RCCEx_GetPeriphCLKFreq+0xf34>)
 c003c58:	68db      	ldr	r3, [r3, #12]
 c003c5a:	091b      	lsrs	r3, r3, #4
 c003c5c:	f003 030f 	and.w	r3, r3, #15
 c003c60:	3301      	adds	r3, #1
 c003c62:	69ba      	ldr	r2, [r7, #24]
 c003c64:	fbb2 f3f3 	udiv	r3, r2, r3
 c003c68:	61bb      	str	r3, [r7, #24]
                plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 c003c6a:	4b31      	ldr	r3, [pc, #196]	; (c003d30 <HAL_RCCEx_GetPeriphCLKFreq+0xf34>)
 c003c6c:	68db      	ldr	r3, [r3, #12]
 c003c6e:	0a1b      	lsrs	r3, r3, #8
 c003c70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 c003c74:	60bb      	str	r3, [r7, #8]
                frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 c003c76:	69bb      	ldr	r3, [r7, #24]
 c003c78:	68ba      	ldr	r2, [r7, #8]
 c003c7a:	fb03 f202 	mul.w	r2, r3, r2
 c003c7e:	4b2c      	ldr	r3, [pc, #176]	; (c003d30 <HAL_RCCEx_GetPeriphCLKFreq+0xf34>)
 c003c80:	68db      	ldr	r3, [r3, #12]
 c003c82:	0d5b      	lsrs	r3, r3, #21
 c003c84:	f003 0303 	and.w	r3, r3, #3
 c003c88:	3301      	adds	r3, #1
 c003c8a:	005b      	lsls	r3, r3, #1
 c003c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 c003c90:	61fb      	str	r3, [r7, #28]
            break;
 c003c92:	e039      	b.n	c003d08 <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
            if (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U)
 c003c94:	4b26      	ldr	r3, [pc, #152]	; (c003d30 <HAL_RCCEx_GetPeriphCLKFreq+0xf34>)
 c003c96:	691b      	ldr	r3, [r3, #16]
 c003c98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 c003c9c:	2b00      	cmp	r3, #0
 c003c9e:	d035      	beq.n	c003d0c <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
              pllvco = RCCEx_PLLSAI1_GetVCOFreq();
 c003ca0:	f000 f9dc 	bl	c00405c <RCCEx_PLLSAI1_GetVCOFreq>
 c003ca4:	61b8      	str	r0, [r7, #24]
              pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 c003ca6:	4b22      	ldr	r3, [pc, #136]	; (c003d30 <HAL_RCCEx_GetPeriphCLKFreq+0xf34>)
 c003ca8:	691b      	ldr	r3, [r3, #16]
 c003caa:	091b      	lsrs	r3, r3, #4
 c003cac:	f003 030f 	and.w	r3, r3, #15
 c003cb0:	3301      	adds	r3, #1
 c003cb2:	69ba      	ldr	r2, [r7, #24]
 c003cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 c003cb8:	61bb      	str	r3, [r7, #24]
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 c003cba:	4b1d      	ldr	r3, [pc, #116]	; (c003d30 <HAL_RCCEx_GetPeriphCLKFreq+0xf34>)
 c003cbc:	691b      	ldr	r3, [r3, #16]
 c003cbe:	0a1b      	lsrs	r3, r3, #8
 c003cc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 c003cc4:	60bb      	str	r3, [r7, #8]
              pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 c003cc6:	4b1a      	ldr	r3, [pc, #104]	; (c003d30 <HAL_RCCEx_GetPeriphCLKFreq+0xf34>)
 c003cc8:	691b      	ldr	r3, [r3, #16]
 c003cca:	0edb      	lsrs	r3, r3, #27
 c003ccc:	f003 031f 	and.w	r3, r3, #31
 c003cd0:	617b      	str	r3, [r7, #20]
              if (pllp == 0U)
 c003cd2:	697b      	ldr	r3, [r7, #20]
 c003cd4:	2b00      	cmp	r3, #0
 c003cd6:	d10a      	bne.n	c003cee <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
                if (READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 c003cd8:	4b15      	ldr	r3, [pc, #84]	; (c003d30 <HAL_RCCEx_GetPeriphCLKFreq+0xf34>)
 c003cda:	691b      	ldr	r3, [r3, #16]
 c003cdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c003ce0:	2b00      	cmp	r3, #0
 c003ce2:	d002      	beq.n	c003cea <HAL_RCCEx_GetPeriphCLKFreq+0xeee>
                  pllp = 17U;
 c003ce4:	2311      	movs	r3, #17
 c003ce6:	617b      	str	r3, [r7, #20]
 c003ce8:	e001      	b.n	c003cee <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
                  pllp = 7U;
 c003cea:	2307      	movs	r3, #7
 c003cec:	617b      	str	r3, [r7, #20]
              frequency = (pllvco * plln) / pllp;
 c003cee:	69bb      	ldr	r3, [r7, #24]
 c003cf0:	68ba      	ldr	r2, [r7, #8]
 c003cf2:	fb03 f202 	mul.w	r2, r3, r2
 c003cf6:	697b      	ldr	r3, [r7, #20]
 c003cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 c003cfc:	61fb      	str	r3, [r7, #28]
            break;
 c003cfe:	e005      	b.n	c003d0c <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
            break;
 c003d00:	bf00      	nop
 c003d02:	e010      	b.n	c003d26 <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
            break;
 c003d04:	bf00      	nop
 c003d06:	e00e      	b.n	c003d26 <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
            break;
 c003d08:	bf00      	nop
 c003d0a:	e00c      	b.n	c003d26 <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
            break;
 c003d0c:	bf00      	nop
        break;
 c003d0e:	e00a      	b.n	c003d26 <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
        break;
 c003d10:	bf00      	nop
 c003d12:	e008      	b.n	c003d26 <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
        break;
 c003d14:	bf00      	nop
 c003d16:	e006      	b.n	c003d26 <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
        break;
 c003d18:	bf00      	nop
 c003d1a:	e004      	b.n	c003d26 <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
        break;
 c003d1c:	bf00      	nop
 c003d1e:	e002      	b.n	c003d26 <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
        break;
 c003d20:	bf00      	nop
 c003d22:	e000      	b.n	c003d26 <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
        break;
 c003d24:	bf00      	nop
    }
  }

  return (frequency);
 c003d26:	69fb      	ldr	r3, [r7, #28]
}
 c003d28:	4618      	mov	r0, r3
 c003d2a:	3720      	adds	r7, #32
 c003d2c:	46bd      	mov	sp, r7
 c003d2e:	bd80      	pop	{r7, pc}
 c003d30:	50021000 	.word	0x50021000
 c003d34:	00f42400 	.word	0x00f42400

0c003d38 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 c003d38:	b580      	push	{r7, lr}
 c003d3a:	b084      	sub	sp, #16
 c003d3c:	af00      	add	r7, sp, #0
 c003d3e:	6078      	str	r0, [r7, #4]
 c003d40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 c003d42:	2300      	movs	r3, #0
 c003d44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 c003d46:	687b      	ldr	r3, [r7, #4]
 c003d48:	681b      	ldr	r3, [r3, #0]
 c003d4a:	2b03      	cmp	r3, #3
 c003d4c:	d018      	beq.n	c003d80 <RCCEx_PLLSAI1_Config+0x48>
 c003d4e:	2b03      	cmp	r3, #3
 c003d50:	d81f      	bhi.n	c003d92 <RCCEx_PLLSAI1_Config+0x5a>
 c003d52:	2b01      	cmp	r3, #1
 c003d54:	d002      	beq.n	c003d5c <RCCEx_PLLSAI1_Config+0x24>
 c003d56:	2b02      	cmp	r3, #2
 c003d58:	d009      	beq.n	c003d6e <RCCEx_PLLSAI1_Config+0x36>
 c003d5a:	e01a      	b.n	c003d92 <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 c003d5c:	4b65      	ldr	r3, [pc, #404]	; (c003ef4 <RCCEx_PLLSAI1_Config+0x1bc>)
 c003d5e:	681b      	ldr	r3, [r3, #0]
 c003d60:	f003 0302 	and.w	r3, r3, #2
 c003d64:	2b00      	cmp	r3, #0
 c003d66:	d117      	bne.n	c003d98 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 c003d68:	2301      	movs	r3, #1
 c003d6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c003d6c:	e014      	b.n	c003d98 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 c003d6e:	4b61      	ldr	r3, [pc, #388]	; (c003ef4 <RCCEx_PLLSAI1_Config+0x1bc>)
 c003d70:	681b      	ldr	r3, [r3, #0]
 c003d72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c003d76:	2b00      	cmp	r3, #0
 c003d78:	d110      	bne.n	c003d9c <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 c003d7a:	2301      	movs	r3, #1
 c003d7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c003d7e:	e00d      	b.n	c003d9c <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 c003d80:	4b5c      	ldr	r3, [pc, #368]	; (c003ef4 <RCCEx_PLLSAI1_Config+0x1bc>)
 c003d82:	681b      	ldr	r3, [r3, #0]
 c003d84:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 c003d88:	2b00      	cmp	r3, #0
 c003d8a:	d109      	bne.n	c003da0 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 c003d8c:	2301      	movs	r3, #1
 c003d8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c003d90:	e006      	b.n	c003da0 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 c003d92:	2301      	movs	r3, #1
 c003d94:	73fb      	strb	r3, [r7, #15]
      break;
 c003d96:	e004      	b.n	c003da2 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 c003d98:	bf00      	nop
 c003d9a:	e002      	b.n	c003da2 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 c003d9c:	bf00      	nop
 c003d9e:	e000      	b.n	c003da2 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 c003da0:	bf00      	nop
  }

  if (status == HAL_OK)
 c003da2:	7bfb      	ldrb	r3, [r7, #15]
 c003da4:	2b00      	cmp	r3, #0
 c003da6:	f040 809f 	bne.w	c003ee8 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 c003daa:	4b52      	ldr	r3, [pc, #328]	; (c003ef4 <RCCEx_PLLSAI1_Config+0x1bc>)
 c003dac:	681b      	ldr	r3, [r3, #0]
 c003dae:	4a51      	ldr	r2, [pc, #324]	; (c003ef4 <RCCEx_PLLSAI1_Config+0x1bc>)
 c003db0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 c003db4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 c003db6:	f7fc fe69 	bl	c000a8c <HAL_GetTick>
 c003dba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 c003dbc:	e00f      	b.n	c003dde <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 c003dbe:	f7fc fe65 	bl	c000a8c <HAL_GetTick>
 c003dc2:	4602      	mov	r2, r0
 c003dc4:	68bb      	ldr	r3, [r7, #8]
 c003dc6:	1ad3      	subs	r3, r2, r3
 c003dc8:	2b02      	cmp	r3, #2
 c003dca:	d908      	bls.n	c003dde <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 c003dcc:	4b49      	ldr	r3, [pc, #292]	; (c003ef4 <RCCEx_PLLSAI1_Config+0x1bc>)
 c003dce:	681b      	ldr	r3, [r3, #0]
 c003dd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 c003dd4:	2b00      	cmp	r3, #0
 c003dd6:	d009      	beq.n	c003dec <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 c003dd8:	2303      	movs	r3, #3
 c003dda:	73fb      	strb	r3, [r7, #15]
        }
        break;
 c003ddc:	e006      	b.n	c003dec <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 c003dde:	4b45      	ldr	r3, [pc, #276]	; (c003ef4 <RCCEx_PLLSAI1_Config+0x1bc>)
 c003de0:	681b      	ldr	r3, [r3, #0]
 c003de2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 c003de6:	2b00      	cmp	r3, #0
 c003de8:	d1e9      	bne.n	c003dbe <RCCEx_PLLSAI1_Config+0x86>
 c003dea:	e000      	b.n	c003dee <RCCEx_PLLSAI1_Config+0xb6>
        break;
 c003dec:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 c003dee:	7bfb      	ldrb	r3, [r7, #15]
 c003df0:	2b00      	cmp	r3, #0
 c003df2:	d179      	bne.n	c003ee8 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 c003df4:	683b      	ldr	r3, [r7, #0]
 c003df6:	2b00      	cmp	r3, #0
 c003df8:	d116      	bne.n	c003e28 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 c003dfa:	4b3e      	ldr	r3, [pc, #248]	; (c003ef4 <RCCEx_PLLSAI1_Config+0x1bc>)
 c003dfc:	691a      	ldr	r2, [r3, #16]
 c003dfe:	4b3e      	ldr	r3, [pc, #248]	; (c003ef8 <RCCEx_PLLSAI1_Config+0x1c0>)
 c003e00:	4013      	ands	r3, r2
 c003e02:	687a      	ldr	r2, [r7, #4]
 c003e04:	6892      	ldr	r2, [r2, #8]
 c003e06:	0211      	lsls	r1, r2, #8
 c003e08:	687a      	ldr	r2, [r7, #4]
 c003e0a:	68d2      	ldr	r2, [r2, #12]
 c003e0c:	06d2      	lsls	r2, r2, #27
 c003e0e:	4311      	orrs	r1, r2
 c003e10:	687a      	ldr	r2, [r7, #4]
 c003e12:	6852      	ldr	r2, [r2, #4]
 c003e14:	3a01      	subs	r2, #1
 c003e16:	0112      	lsls	r2, r2, #4
 c003e18:	4311      	orrs	r1, r2
 c003e1a:	687a      	ldr	r2, [r7, #4]
 c003e1c:	6812      	ldr	r2, [r2, #0]
 c003e1e:	430a      	orrs	r2, r1
 c003e20:	4934      	ldr	r1, [pc, #208]	; (c003ef4 <RCCEx_PLLSAI1_Config+0x1bc>)
 c003e22:	4313      	orrs	r3, r2
 c003e24:	610b      	str	r3, [r1, #16]
 c003e26:	e033      	b.n	c003e90 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 c003e28:	683b      	ldr	r3, [r7, #0]
 c003e2a:	2b01      	cmp	r3, #1
 c003e2c:	d118      	bne.n	c003e60 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 c003e2e:	4b31      	ldr	r3, [pc, #196]	; (c003ef4 <RCCEx_PLLSAI1_Config+0x1bc>)
 c003e30:	691a      	ldr	r2, [r3, #16]
 c003e32:	4b32      	ldr	r3, [pc, #200]	; (c003efc <RCCEx_PLLSAI1_Config+0x1c4>)
 c003e34:	4013      	ands	r3, r2
 c003e36:	687a      	ldr	r2, [r7, #4]
 c003e38:	6892      	ldr	r2, [r2, #8]
 c003e3a:	0211      	lsls	r1, r2, #8
 c003e3c:	687a      	ldr	r2, [r7, #4]
 c003e3e:	6912      	ldr	r2, [r2, #16]
 c003e40:	0852      	lsrs	r2, r2, #1
 c003e42:	3a01      	subs	r2, #1
 c003e44:	0552      	lsls	r2, r2, #21
 c003e46:	4311      	orrs	r1, r2
 c003e48:	687a      	ldr	r2, [r7, #4]
 c003e4a:	6852      	ldr	r2, [r2, #4]
 c003e4c:	3a01      	subs	r2, #1
 c003e4e:	0112      	lsls	r2, r2, #4
 c003e50:	4311      	orrs	r1, r2
 c003e52:	687a      	ldr	r2, [r7, #4]
 c003e54:	6812      	ldr	r2, [r2, #0]
 c003e56:	430a      	orrs	r2, r1
 c003e58:	4926      	ldr	r1, [pc, #152]	; (c003ef4 <RCCEx_PLLSAI1_Config+0x1bc>)
 c003e5a:	4313      	orrs	r3, r2
 c003e5c:	610b      	str	r3, [r1, #16]
 c003e5e:	e017      	b.n	c003e90 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 c003e60:	4b24      	ldr	r3, [pc, #144]	; (c003ef4 <RCCEx_PLLSAI1_Config+0x1bc>)
 c003e62:	691a      	ldr	r2, [r3, #16]
 c003e64:	4b26      	ldr	r3, [pc, #152]	; (c003f00 <RCCEx_PLLSAI1_Config+0x1c8>)
 c003e66:	4013      	ands	r3, r2
 c003e68:	687a      	ldr	r2, [r7, #4]
 c003e6a:	6892      	ldr	r2, [r2, #8]
 c003e6c:	0211      	lsls	r1, r2, #8
 c003e6e:	687a      	ldr	r2, [r7, #4]
 c003e70:	6952      	ldr	r2, [r2, #20]
 c003e72:	0852      	lsrs	r2, r2, #1
 c003e74:	3a01      	subs	r2, #1
 c003e76:	0652      	lsls	r2, r2, #25
 c003e78:	4311      	orrs	r1, r2
 c003e7a:	687a      	ldr	r2, [r7, #4]
 c003e7c:	6852      	ldr	r2, [r2, #4]
 c003e7e:	3a01      	subs	r2, #1
 c003e80:	0112      	lsls	r2, r2, #4
 c003e82:	4311      	orrs	r1, r2
 c003e84:	687a      	ldr	r2, [r7, #4]
 c003e86:	6812      	ldr	r2, [r2, #0]
 c003e88:	430a      	orrs	r2, r1
 c003e8a:	491a      	ldr	r1, [pc, #104]	; (c003ef4 <RCCEx_PLLSAI1_Config+0x1bc>)
 c003e8c:	4313      	orrs	r3, r2
 c003e8e:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 c003e90:	4b18      	ldr	r3, [pc, #96]	; (c003ef4 <RCCEx_PLLSAI1_Config+0x1bc>)
 c003e92:	681b      	ldr	r3, [r3, #0]
 c003e94:	4a17      	ldr	r2, [pc, #92]	; (c003ef4 <RCCEx_PLLSAI1_Config+0x1bc>)
 c003e96:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 c003e9a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c003e9c:	f7fc fdf6 	bl	c000a8c <HAL_GetTick>
 c003ea0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 c003ea2:	e00f      	b.n	c003ec4 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 c003ea4:	f7fc fdf2 	bl	c000a8c <HAL_GetTick>
 c003ea8:	4602      	mov	r2, r0
 c003eaa:	68bb      	ldr	r3, [r7, #8]
 c003eac:	1ad3      	subs	r3, r2, r3
 c003eae:	2b02      	cmp	r3, #2
 c003eb0:	d908      	bls.n	c003ec4 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 c003eb2:	4b10      	ldr	r3, [pc, #64]	; (c003ef4 <RCCEx_PLLSAI1_Config+0x1bc>)
 c003eb4:	681b      	ldr	r3, [r3, #0]
 c003eb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 c003eba:	2b00      	cmp	r3, #0
 c003ebc:	d109      	bne.n	c003ed2 <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 c003ebe:	2303      	movs	r3, #3
 c003ec0:	73fb      	strb	r3, [r7, #15]
          }
          break;
 c003ec2:	e006      	b.n	c003ed2 <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 c003ec4:	4b0b      	ldr	r3, [pc, #44]	; (c003ef4 <RCCEx_PLLSAI1_Config+0x1bc>)
 c003ec6:	681b      	ldr	r3, [r3, #0]
 c003ec8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 c003ecc:	2b00      	cmp	r3, #0
 c003ece:	d0e9      	beq.n	c003ea4 <RCCEx_PLLSAI1_Config+0x16c>
 c003ed0:	e000      	b.n	c003ed4 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 c003ed2:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 c003ed4:	7bfb      	ldrb	r3, [r7, #15]
 c003ed6:	2b00      	cmp	r3, #0
 c003ed8:	d106      	bne.n	c003ee8 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 c003eda:	4b06      	ldr	r3, [pc, #24]	; (c003ef4 <RCCEx_PLLSAI1_Config+0x1bc>)
 c003edc:	691a      	ldr	r2, [r3, #16]
 c003ede:	687b      	ldr	r3, [r7, #4]
 c003ee0:	699b      	ldr	r3, [r3, #24]
 c003ee2:	4904      	ldr	r1, [pc, #16]	; (c003ef4 <RCCEx_PLLSAI1_Config+0x1bc>)
 c003ee4:	4313      	orrs	r3, r2
 c003ee6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 c003ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 c003eea:	4618      	mov	r0, r3
 c003eec:	3710      	adds	r7, #16
 c003eee:	46bd      	mov	sp, r7
 c003ef0:	bd80      	pop	{r7, pc}
 c003ef2:	bf00      	nop
 c003ef4:	50021000 	.word	0x50021000
 c003ef8:	07ff800c 	.word	0x07ff800c
 c003efc:	ff9f800c 	.word	0xff9f800c
 c003f00:	f9ff800c 	.word	0xf9ff800c

0c003f04 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 c003f04:	b580      	push	{r7, lr}
 c003f06:	b084      	sub	sp, #16
 c003f08:	af00      	add	r7, sp, #0
 c003f0a:	6078      	str	r0, [r7, #4]
 c003f0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 c003f0e:	2300      	movs	r3, #0
 c003f10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 c003f12:	687b      	ldr	r3, [r7, #4]
 c003f14:	681b      	ldr	r3, [r3, #0]
 c003f16:	2b03      	cmp	r3, #3
 c003f18:	d018      	beq.n	c003f4c <RCCEx_PLLSAI2_Config+0x48>
 c003f1a:	2b03      	cmp	r3, #3
 c003f1c:	d81f      	bhi.n	c003f5e <RCCEx_PLLSAI2_Config+0x5a>
 c003f1e:	2b01      	cmp	r3, #1
 c003f20:	d002      	beq.n	c003f28 <RCCEx_PLLSAI2_Config+0x24>
 c003f22:	2b02      	cmp	r3, #2
 c003f24:	d009      	beq.n	c003f3a <RCCEx_PLLSAI2_Config+0x36>
 c003f26:	e01a      	b.n	c003f5e <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 c003f28:	4b4a      	ldr	r3, [pc, #296]	; (c004054 <RCCEx_PLLSAI2_Config+0x150>)
 c003f2a:	681b      	ldr	r3, [r3, #0]
 c003f2c:	f003 0302 	and.w	r3, r3, #2
 c003f30:	2b00      	cmp	r3, #0
 c003f32:	d117      	bne.n	c003f64 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 c003f34:	2301      	movs	r3, #1
 c003f36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c003f38:	e014      	b.n	c003f64 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 c003f3a:	4b46      	ldr	r3, [pc, #280]	; (c004054 <RCCEx_PLLSAI2_Config+0x150>)
 c003f3c:	681b      	ldr	r3, [r3, #0]
 c003f3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c003f42:	2b00      	cmp	r3, #0
 c003f44:	d110      	bne.n	c003f68 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 c003f46:	2301      	movs	r3, #1
 c003f48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c003f4a:	e00d      	b.n	c003f68 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 c003f4c:	4b41      	ldr	r3, [pc, #260]	; (c004054 <RCCEx_PLLSAI2_Config+0x150>)
 c003f4e:	681b      	ldr	r3, [r3, #0]
 c003f50:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 c003f54:	2b00      	cmp	r3, #0
 c003f56:	d109      	bne.n	c003f6c <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 c003f58:	2301      	movs	r3, #1
 c003f5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c003f5c:	e006      	b.n	c003f6c <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 c003f5e:	2301      	movs	r3, #1
 c003f60:	73fb      	strb	r3, [r7, #15]
      break;
 c003f62:	e004      	b.n	c003f6e <RCCEx_PLLSAI2_Config+0x6a>
      break;
 c003f64:	bf00      	nop
 c003f66:	e002      	b.n	c003f6e <RCCEx_PLLSAI2_Config+0x6a>
      break;
 c003f68:	bf00      	nop
 c003f6a:	e000      	b.n	c003f6e <RCCEx_PLLSAI2_Config+0x6a>
      break;
 c003f6c:	bf00      	nop
  }

  if (status == HAL_OK)
 c003f6e:	7bfb      	ldrb	r3, [r7, #15]
 c003f70:	2b00      	cmp	r3, #0
 c003f72:	d169      	bne.n	c004048 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 c003f74:	4b37      	ldr	r3, [pc, #220]	; (c004054 <RCCEx_PLLSAI2_Config+0x150>)
 c003f76:	681b      	ldr	r3, [r3, #0]
 c003f78:	4a36      	ldr	r2, [pc, #216]	; (c004054 <RCCEx_PLLSAI2_Config+0x150>)
 c003f7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c003f7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 c003f80:	f7fc fd84 	bl	c000a8c <HAL_GetTick>
 c003f84:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 c003f86:	e00f      	b.n	c003fa8 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 c003f88:	f7fc fd80 	bl	c000a8c <HAL_GetTick>
 c003f8c:	4602      	mov	r2, r0
 c003f8e:	68bb      	ldr	r3, [r7, #8]
 c003f90:	1ad3      	subs	r3, r2, r3
 c003f92:	2b02      	cmp	r3, #2
 c003f94:	d908      	bls.n	c003fa8 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 c003f96:	4b2f      	ldr	r3, [pc, #188]	; (c004054 <RCCEx_PLLSAI2_Config+0x150>)
 c003f98:	681b      	ldr	r3, [r3, #0]
 c003f9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 c003f9e:	2b00      	cmp	r3, #0
 c003fa0:	d009      	beq.n	c003fb6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 c003fa2:	2303      	movs	r3, #3
 c003fa4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 c003fa6:	e006      	b.n	c003fb6 <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 c003fa8:	4b2a      	ldr	r3, [pc, #168]	; (c004054 <RCCEx_PLLSAI2_Config+0x150>)
 c003faa:	681b      	ldr	r3, [r3, #0]
 c003fac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 c003fb0:	2b00      	cmp	r3, #0
 c003fb2:	d1e9      	bne.n	c003f88 <RCCEx_PLLSAI2_Config+0x84>
 c003fb4:	e000      	b.n	c003fb8 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 c003fb6:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 c003fb8:	7bfb      	ldrb	r3, [r7, #15]
 c003fba:	2b00      	cmp	r3, #0
 c003fbc:	d144      	bne.n	c004048 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 c003fbe:	683b      	ldr	r3, [r7, #0]
 c003fc0:	2b00      	cmp	r3, #0
 c003fc2:	d115      	bne.n	c003ff0 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 c003fc4:	4b23      	ldr	r3, [pc, #140]	; (c004054 <RCCEx_PLLSAI2_Config+0x150>)
 c003fc6:	695a      	ldr	r2, [r3, #20]
 c003fc8:	4b23      	ldr	r3, [pc, #140]	; (c004058 <RCCEx_PLLSAI2_Config+0x154>)
 c003fca:	4013      	ands	r3, r2
 c003fcc:	687a      	ldr	r2, [r7, #4]
 c003fce:	6892      	ldr	r2, [r2, #8]
 c003fd0:	0211      	lsls	r1, r2, #8
 c003fd2:	687a      	ldr	r2, [r7, #4]
 c003fd4:	68d2      	ldr	r2, [r2, #12]
 c003fd6:	06d2      	lsls	r2, r2, #27
 c003fd8:	4311      	orrs	r1, r2
 c003fda:	687a      	ldr	r2, [r7, #4]
 c003fdc:	6852      	ldr	r2, [r2, #4]
 c003fde:	3a01      	subs	r2, #1
 c003fe0:	0112      	lsls	r2, r2, #4
 c003fe2:	4311      	orrs	r1, r2
 c003fe4:	687a      	ldr	r2, [r7, #4]
 c003fe6:	6812      	ldr	r2, [r2, #0]
 c003fe8:	430a      	orrs	r2, r1
 c003fea:	491a      	ldr	r1, [pc, #104]	; (c004054 <RCCEx_PLLSAI2_Config+0x150>)
 c003fec:	4313      	orrs	r3, r2
 c003fee:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 c003ff0:	4b18      	ldr	r3, [pc, #96]	; (c004054 <RCCEx_PLLSAI2_Config+0x150>)
 c003ff2:	681b      	ldr	r3, [r3, #0]
 c003ff4:	4a17      	ldr	r2, [pc, #92]	; (c004054 <RCCEx_PLLSAI2_Config+0x150>)
 c003ff6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c003ffa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c003ffc:	f7fc fd46 	bl	c000a8c <HAL_GetTick>
 c004000:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 c004002:	e00f      	b.n	c004024 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 c004004:	f7fc fd42 	bl	c000a8c <HAL_GetTick>
 c004008:	4602      	mov	r2, r0
 c00400a:	68bb      	ldr	r3, [r7, #8]
 c00400c:	1ad3      	subs	r3, r2, r3
 c00400e:	2b02      	cmp	r3, #2
 c004010:	d908      	bls.n	c004024 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 c004012:	4b10      	ldr	r3, [pc, #64]	; (c004054 <RCCEx_PLLSAI2_Config+0x150>)
 c004014:	681b      	ldr	r3, [r3, #0]
 c004016:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 c00401a:	2b00      	cmp	r3, #0
 c00401c:	d109      	bne.n	c004032 <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 c00401e:	2303      	movs	r3, #3
 c004020:	73fb      	strb	r3, [r7, #15]
          }
          break;
 c004022:	e006      	b.n	c004032 <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 c004024:	4b0b      	ldr	r3, [pc, #44]	; (c004054 <RCCEx_PLLSAI2_Config+0x150>)
 c004026:	681b      	ldr	r3, [r3, #0]
 c004028:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 c00402c:	2b00      	cmp	r3, #0
 c00402e:	d0e9      	beq.n	c004004 <RCCEx_PLLSAI2_Config+0x100>
 c004030:	e000      	b.n	c004034 <RCCEx_PLLSAI2_Config+0x130>
          break;
 c004032:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 c004034:	7bfb      	ldrb	r3, [r7, #15]
 c004036:	2b00      	cmp	r3, #0
 c004038:	d106      	bne.n	c004048 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 c00403a:	4b06      	ldr	r3, [pc, #24]	; (c004054 <RCCEx_PLLSAI2_Config+0x150>)
 c00403c:	695a      	ldr	r2, [r3, #20]
 c00403e:	687b      	ldr	r3, [r7, #4]
 c004040:	691b      	ldr	r3, [r3, #16]
 c004042:	4904      	ldr	r1, [pc, #16]	; (c004054 <RCCEx_PLLSAI2_Config+0x150>)
 c004044:	4313      	orrs	r3, r2
 c004046:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 c004048:	7bfb      	ldrb	r3, [r7, #15]
}
 c00404a:	4618      	mov	r0, r3
 c00404c:	3710      	adds	r7, #16
 c00404e:	46bd      	mov	sp, r7
 c004050:	bd80      	pop	{r7, pc}
 c004052:	bf00      	nop
 c004054:	50021000 	.word	0x50021000
 c004058:	07ff800c 	.word	0x07ff800c

0c00405c <RCCEx_PLLSAI1_GetVCOFreq>:
/**
  * @brief  Get the PLLSAI1 input VCO frequency.
  * @retval pllvco frequency in Hz
  */
static uint32_t RCCEx_PLLSAI1_GetVCOFreq(void)
{
 c00405c:	b480      	push	{r7}
 c00405e:	b083      	sub	sp, #12
 c004060:	af00      	add	r7, sp, #0
  uint32_t pllvco = 0U;
 c004062:	2300      	movs	r3, #0
 c004064:	607b      	str	r3, [r7, #4]

  switch (READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1SRC))
 c004066:	4b26      	ldr	r3, [pc, #152]	; (c004100 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 c004068:	691b      	ldr	r3, [r3, #16]
 c00406a:	f003 0303 	and.w	r3, r3, #3
 c00406e:	2b03      	cmp	r3, #3
 c004070:	d02d      	beq.n	c0040ce <RCCEx_PLLSAI1_GetVCOFreq+0x72>
 c004072:	2b03      	cmp	r3, #3
 c004074:	d835      	bhi.n	c0040e2 <RCCEx_PLLSAI1_GetVCOFreq+0x86>
 c004076:	2b01      	cmp	r3, #1
 c004078:	d002      	beq.n	c004080 <RCCEx_PLLSAI1_GetVCOFreq+0x24>
 c00407a:	2b02      	cmp	r3, #2
 c00407c:	d01d      	beq.n	c0040ba <RCCEx_PLLSAI1_GetVCOFreq+0x5e>
        /* pllvco already set as 0 */
      }
      break;
    default:
      /* pllvco already set as 0 */
      break;
 c00407e:	e030      	b.n	c0040e2 <RCCEx_PLLSAI1_GetVCOFreq+0x86>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 c004080:	4b1f      	ldr	r3, [pc, #124]	; (c004100 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 c004082:	681b      	ldr	r3, [r3, #0]
 c004084:	f003 0302 	and.w	r3, r3, #2
 c004088:	2b02      	cmp	r3, #2
 c00408a:	d12c      	bne.n	c0040e6 <RCCEx_PLLSAI1_GetVCOFreq+0x8a>
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 c00408c:	4b1c      	ldr	r3, [pc, #112]	; (c004100 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 c00408e:	681b      	ldr	r3, [r3, #0]
 c004090:	f003 0308 	and.w	r3, r3, #8
 c004094:	2b00      	cmp	r3, #0
 c004096:	d005      	beq.n	c0040a4 <RCCEx_PLLSAI1_GetVCOFreq+0x48>
 c004098:	4b19      	ldr	r3, [pc, #100]	; (c004100 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 c00409a:	681b      	ldr	r3, [r3, #0]
 c00409c:	091b      	lsrs	r3, r3, #4
 c00409e:	f003 030f 	and.w	r3, r3, #15
 c0040a2:	e005      	b.n	c0040b0 <RCCEx_PLLSAI1_GetVCOFreq+0x54>
 c0040a4:	4b16      	ldr	r3, [pc, #88]	; (c004100 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 c0040a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c0040aa:	0a1b      	lsrs	r3, r3, #8
 c0040ac:	f003 030f 	and.w	r3, r3, #15
 c0040b0:	4a14      	ldr	r2, [pc, #80]	; (c004104 <RCCEx_PLLSAI1_GetVCOFreq+0xa8>)
 c0040b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c0040b6:	607b      	str	r3, [r7, #4]
      break;
 c0040b8:	e015      	b.n	c0040e6 <RCCEx_PLLSAI1_GetVCOFreq+0x8a>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 c0040ba:	4b11      	ldr	r3, [pc, #68]	; (c004100 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 c0040bc:	681b      	ldr	r3, [r3, #0]
 c0040be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c0040c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c0040c6:	d110      	bne.n	c0040ea <RCCEx_PLLSAI1_GetVCOFreq+0x8e>
        pllvco = HSI_VALUE;
 c0040c8:	4b0f      	ldr	r3, [pc, #60]	; (c004108 <RCCEx_PLLSAI1_GetVCOFreq+0xac>)
 c0040ca:	607b      	str	r3, [r7, #4]
      break;
 c0040cc:	e00d      	b.n	c0040ea <RCCEx_PLLSAI1_GetVCOFreq+0x8e>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 c0040ce:	4b0c      	ldr	r3, [pc, #48]	; (c004100 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 c0040d0:	681b      	ldr	r3, [r3, #0]
 c0040d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c0040d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 c0040da:	d108      	bne.n	c0040ee <RCCEx_PLLSAI1_GetVCOFreq+0x92>
        pllvco = HSE_VALUE;
 c0040dc:	4b0a      	ldr	r3, [pc, #40]	; (c004108 <RCCEx_PLLSAI1_GetVCOFreq+0xac>)
 c0040de:	607b      	str	r3, [r7, #4]
      break;
 c0040e0:	e005      	b.n	c0040ee <RCCEx_PLLSAI1_GetVCOFreq+0x92>
      break;
 c0040e2:	bf00      	nop
 c0040e4:	e004      	b.n	c0040f0 <RCCEx_PLLSAI1_GetVCOFreq+0x94>
      break;
 c0040e6:	bf00      	nop
 c0040e8:	e002      	b.n	c0040f0 <RCCEx_PLLSAI1_GetVCOFreq+0x94>
      break;
 c0040ea:	bf00      	nop
 c0040ec:	e000      	b.n	c0040f0 <RCCEx_PLLSAI1_GetVCOFreq+0x94>
      break;
 c0040ee:	bf00      	nop
  }

  return pllvco;
 c0040f0:	687b      	ldr	r3, [r7, #4]
}
 c0040f2:	4618      	mov	r0, r3
 c0040f4:	370c      	adds	r7, #12
 c0040f6:	46bd      	mov	sp, r7
 c0040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0040fc:	4770      	bx	lr
 c0040fe:	bf00      	nop
 c004100:	50021000 	.word	0x50021000
 c004104:	0c00bb8c 	.word	0x0c00bb8c
 c004108:	00f42400 	.word	0x00f42400

0c00410c <RCCEx_PLLSAI2_GetVCOFreq>:
/**
  * @brief  Get the PLLSAI2 input VCO frequency.
  * @retval pllvco frequency in Hz
  */
static uint32_t RCCEx_PLLSAI2_GetVCOFreq(void)
{
 c00410c:	b480      	push	{r7}
 c00410e:	b083      	sub	sp, #12
 c004110:	af00      	add	r7, sp, #0
  uint32_t pllvco = 0U;
 c004112:	2300      	movs	r3, #0
 c004114:	607b      	str	r3, [r7, #4]

  switch (READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2SRC))
 c004116:	4b26      	ldr	r3, [pc, #152]	; (c0041b0 <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 c004118:	695b      	ldr	r3, [r3, #20]
 c00411a:	f003 0303 	and.w	r3, r3, #3
 c00411e:	2b03      	cmp	r3, #3
 c004120:	d02d      	beq.n	c00417e <RCCEx_PLLSAI2_GetVCOFreq+0x72>
 c004122:	2b03      	cmp	r3, #3
 c004124:	d835      	bhi.n	c004192 <RCCEx_PLLSAI2_GetVCOFreq+0x86>
 c004126:	2b01      	cmp	r3, #1
 c004128:	d002      	beq.n	c004130 <RCCEx_PLLSAI2_GetVCOFreq+0x24>
 c00412a:	2b02      	cmp	r3, #2
 c00412c:	d01d      	beq.n	c00416a <RCCEx_PLLSAI2_GetVCOFreq+0x5e>
        /* pllvco already set as 0 */
      }
      break;
    default:
      /* pllvco already set as 0 */
      break;
 c00412e:	e030      	b.n	c004192 <RCCEx_PLLSAI2_GetVCOFreq+0x86>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 c004130:	4b1f      	ldr	r3, [pc, #124]	; (c0041b0 <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 c004132:	681b      	ldr	r3, [r3, #0]
 c004134:	f003 0302 	and.w	r3, r3, #2
 c004138:	2b02      	cmp	r3, #2
 c00413a:	d12c      	bne.n	c004196 <RCCEx_PLLSAI2_GetVCOFreq+0x8a>
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 c00413c:	4b1c      	ldr	r3, [pc, #112]	; (c0041b0 <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 c00413e:	681b      	ldr	r3, [r3, #0]
 c004140:	f003 0308 	and.w	r3, r3, #8
 c004144:	2b00      	cmp	r3, #0
 c004146:	d005      	beq.n	c004154 <RCCEx_PLLSAI2_GetVCOFreq+0x48>
 c004148:	4b19      	ldr	r3, [pc, #100]	; (c0041b0 <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 c00414a:	681b      	ldr	r3, [r3, #0]
 c00414c:	091b      	lsrs	r3, r3, #4
 c00414e:	f003 030f 	and.w	r3, r3, #15
 c004152:	e005      	b.n	c004160 <RCCEx_PLLSAI2_GetVCOFreq+0x54>
 c004154:	4b16      	ldr	r3, [pc, #88]	; (c0041b0 <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 c004156:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c00415a:	0a1b      	lsrs	r3, r3, #8
 c00415c:	f003 030f 	and.w	r3, r3, #15
 c004160:	4a14      	ldr	r2, [pc, #80]	; (c0041b4 <RCCEx_PLLSAI2_GetVCOFreq+0xa8>)
 c004162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c004166:	607b      	str	r3, [r7, #4]
      break;
 c004168:	e015      	b.n	c004196 <RCCEx_PLLSAI2_GetVCOFreq+0x8a>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 c00416a:	4b11      	ldr	r3, [pc, #68]	; (c0041b0 <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 c00416c:	681b      	ldr	r3, [r3, #0]
 c00416e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c004172:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c004176:	d110      	bne.n	c00419a <RCCEx_PLLSAI2_GetVCOFreq+0x8e>
        pllvco = HSI_VALUE;
 c004178:	4b0f      	ldr	r3, [pc, #60]	; (c0041b8 <RCCEx_PLLSAI2_GetVCOFreq+0xac>)
 c00417a:	607b      	str	r3, [r7, #4]
      break;
 c00417c:	e00d      	b.n	c00419a <RCCEx_PLLSAI2_GetVCOFreq+0x8e>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 c00417e:	4b0c      	ldr	r3, [pc, #48]	; (c0041b0 <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 c004180:	681b      	ldr	r3, [r3, #0]
 c004182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c004186:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 c00418a:	d108      	bne.n	c00419e <RCCEx_PLLSAI2_GetVCOFreq+0x92>
        pllvco = HSE_VALUE;
 c00418c:	4b0a      	ldr	r3, [pc, #40]	; (c0041b8 <RCCEx_PLLSAI2_GetVCOFreq+0xac>)
 c00418e:	607b      	str	r3, [r7, #4]
      break;
 c004190:	e005      	b.n	c00419e <RCCEx_PLLSAI2_GetVCOFreq+0x92>
      break;
 c004192:	bf00      	nop
 c004194:	e004      	b.n	c0041a0 <RCCEx_PLLSAI2_GetVCOFreq+0x94>
      break;
 c004196:	bf00      	nop
 c004198:	e002      	b.n	c0041a0 <RCCEx_PLLSAI2_GetVCOFreq+0x94>
      break;
 c00419a:	bf00      	nop
 c00419c:	e000      	b.n	c0041a0 <RCCEx_PLLSAI2_GetVCOFreq+0x94>
      break;
 c00419e:	bf00      	nop
  }

  return pllvco;
 c0041a0:	687b      	ldr	r3, [r7, #4]
}
 c0041a2:	4618      	mov	r0, r3
 c0041a4:	370c      	adds	r7, #12
 c0041a6:	46bd      	mov	sp, r7
 c0041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0041ac:	4770      	bx	lr
 c0041ae:	bf00      	nop
 c0041b0:	50021000 	.word	0x50021000
 c0041b4:	0c00bb8c 	.word	0x0c00bb8c
 c0041b8:	00f42400 	.word	0x00f42400

0c0041bc <RCCEx_GetSAIxPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_SAI2  SAI2 peripheral clock
  * @param  InputFrequency pllvco frequency in Hz
  * @retval Frequency in Hz
  */
static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 c0041bc:	b580      	push	{r7, lr}
 c0041be:	b088      	sub	sp, #32
 c0041c0:	af00      	add	r7, sp, #0
 c0041c2:	6078      	str	r0, [r7, #4]
 c0041c4:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 c0041c6:	2300      	movs	r3, #0
 c0041c8:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk, pllvco, plln, pllp;    /* no init needed */

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 c0041ca:	687b      	ldr	r3, [r7, #4]
 c0041cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 c0041d0:	d10c      	bne.n	c0041ec <RCCEx_GetSAIxPeriphCLKFreq+0x30>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 c0041d2:	4b78      	ldr	r3, [pc, #480]	; (c0043b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 c0041d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c0041d8:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 c0041dc:	61bb      	str	r3, [r7, #24]

    if (srcclk == RCC_SAI1CLKSOURCE_PIN)
 c0041de:	69bb      	ldr	r3, [r7, #24]
 c0041e0:	2b60      	cmp	r3, #96	; 0x60
 c0041e2:	d110      	bne.n	c004206 <RCCEx_GetSAIxPeriphCLKFreq+0x4a>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 c0041e4:	f64b 3380 	movw	r3, #48000	; 0xbb80
 c0041e8:	61fb      	str	r3, [r7, #28]
 c0041ea:	e00c      	b.n	c004206 <RCCEx_GetSAIxPeriphCLKFreq+0x4a>
    }
    /* Else, PLL clock output to check below */
  }
  else /* RCC_PERIPHCLK_SAI2 */
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 c0041ec:	4b71      	ldr	r3, [pc, #452]	; (c0043b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 c0041ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c0041f2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 c0041f6:	61bb      	str	r3, [r7, #24]

    if (srcclk == RCC_SAI2CLKSOURCE_PIN)
 c0041f8:	69bb      	ldr	r3, [r7, #24]
 c0041fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c0041fe:	d102      	bne.n	c004206 <RCCEx_GetSAIxPeriphCLKFreq+0x4a>
    {
      frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 c004200:	f64b 3380 	movw	r3, #48000	; 0xbb80
 c004204:	61fb      	str	r3, [r7, #28]
    }
    /* Else, PLL clock output to check below */
  }

  if (frequency == 0U)
 c004206:	69fb      	ldr	r3, [r7, #28]
 c004208:	2b00      	cmp	r3, #0
 c00420a:	f040 80cd 	bne.w	c0043a8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
  {
    pllvco = InputFrequency;
 c00420e:	683b      	ldr	r3, [r7, #0]
 c004210:	613b      	str	r3, [r7, #16]

    if ((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 c004212:	69bb      	ldr	r3, [r7, #24]
 c004214:	2b40      	cmp	r3, #64	; 0x40
 c004216:	d003      	beq.n	c004220 <RCCEx_GetSAIxPeriphCLKFreq+0x64>
 c004218:	69bb      	ldr	r3, [r7, #24]
 c00421a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c00421e:	d13b      	bne.n	c004298 <RCCEx_GetSAIxPeriphCLKFreq+0xdc>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 c004220:	4b64      	ldr	r3, [pc, #400]	; (c0043b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 c004222:	681b      	ldr	r3, [r3, #0]
 c004224:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c004228:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 c00422c:	f040 80bb 	bne.w	c0043a6 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      {
        if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U)
 c004230:	4b60      	ldr	r3, [pc, #384]	; (c0043b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 c004232:	68db      	ldr	r3, [r3, #12]
 c004234:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 c004238:	2b00      	cmp	r3, #0
 c00423a:	f000 80b4 	beq.w	c0043a6 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
        {
          /* f(PLL Source) / PLLM */
          pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 c00423e:	4b5d      	ldr	r3, [pc, #372]	; (c0043b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 c004240:	68db      	ldr	r3, [r3, #12]
 c004242:	091b      	lsrs	r3, r3, #4
 c004244:	f003 030f 	and.w	r3, r3, #15
 c004248:	3301      	adds	r3, #1
 c00424a:	693a      	ldr	r2, [r7, #16]
 c00424c:	fbb2 f3f3 	udiv	r3, r2, r3
 c004250:	613b      	str	r3, [r7, #16]
          /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 c004252:	4b58      	ldr	r3, [pc, #352]	; (c0043b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 c004254:	68db      	ldr	r3, [r3, #12]
 c004256:	0a1b      	lsrs	r3, r3, #8
 c004258:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 c00425c:	60fb      	str	r3, [r7, #12]
          pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 c00425e:	4b55      	ldr	r3, [pc, #340]	; (c0043b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 c004260:	68db      	ldr	r3, [r3, #12]
 c004262:	0edb      	lsrs	r3, r3, #27
 c004264:	f003 031f 	and.w	r3, r3, #31
 c004268:	617b      	str	r3, [r7, #20]
          if (pllp == 0U)
 c00426a:	697b      	ldr	r3, [r7, #20]
 c00426c:	2b00      	cmp	r3, #0
 c00426e:	d10a      	bne.n	c004286 <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            if (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 c004270:	4b50      	ldr	r3, [pc, #320]	; (c0043b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 c004272:	68db      	ldr	r3, [r3, #12]
 c004274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c004278:	2b00      	cmp	r3, #0
 c00427a:	d002      	beq.n	c004282 <RCCEx_GetSAIxPeriphCLKFreq+0xc6>
            {
              pllp = 17U;
 c00427c:	2311      	movs	r3, #17
 c00427e:	617b      	str	r3, [r7, #20]
 c004280:	e001      	b.n	c004286 <RCCEx_GetSAIxPeriphCLKFreq+0xca>
            }
            else
            {
              pllp = 7U;
 c004282:	2307      	movs	r3, #7
 c004284:	617b      	str	r3, [r7, #20]
            }
          }
          frequency = (pllvco * plln) / pllp;
 c004286:	693b      	ldr	r3, [r7, #16]
 c004288:	68fa      	ldr	r2, [r7, #12]
 c00428a:	fb03 f202 	mul.w	r2, r3, r2
 c00428e:	697b      	ldr	r3, [r7, #20]
 c004290:	fbb2 f3f3 	udiv	r3, r2, r3
 c004294:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 c004296:	e086      	b.n	c0043a6 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
        }
      }
    }
    else if ((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 c004298:	69bb      	ldr	r3, [r7, #24]
 c00429a:	2b80      	cmp	r3, #128	; 0x80
 c00429c:	d003      	beq.n	c0042a6 <RCCEx_GetSAIxPeriphCLKFreq+0xea>
 c00429e:	69bb      	ldr	r3, [r7, #24]
 c0042a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c0042a4:	d109      	bne.n	c0042ba <RCCEx_GetSAIxPeriphCLKFreq+0xfe>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 c0042a6:	4b43      	ldr	r3, [pc, #268]	; (c0043b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 c0042a8:	681b      	ldr	r3, [r3, #0]
 c0042aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c0042ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c0042b2:	d179      	bne.n	c0043a8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      {
        frequency = HSI_VALUE;
 c0042b4:	4b40      	ldr	r3, [pc, #256]	; (c0043b8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 c0042b6:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 c0042b8:	e076      	b.n	c0043a8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      }
    }
    else if (srcclk == 0U) /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 c0042ba:	69bb      	ldr	r3, [r7, #24]
 c0042bc:	2b00      	cmp	r3, #0
 c0042be:	d135      	bne.n	c00432c <RCCEx_GetSAIxPeriphCLKFreq+0x170>
    {
      if (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U)
 c0042c0:	4b3c      	ldr	r3, [pc, #240]	; (c0043b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 c0042c2:	691b      	ldr	r3, [r3, #16]
 c0042c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 c0042c8:	2b00      	cmp	r3, #0
 c0042ca:	d06d      	beq.n	c0043a8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      {
        /* Get f(PLLSAI1 source) */
        pllvco = RCCEx_PLLSAI1_GetVCOFreq();
 c0042cc:	f7ff fec6 	bl	c00405c <RCCEx_PLLSAI1_GetVCOFreq>
 c0042d0:	6138      	str	r0, [r7, #16]
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 c0042d2:	4b38      	ldr	r3, [pc, #224]	; (c0043b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 c0042d4:	691b      	ldr	r3, [r3, #16]
 c0042d6:	091b      	lsrs	r3, r3, #4
 c0042d8:	f003 030f 	and.w	r3, r3, #15
 c0042dc:	3301      	adds	r3, #1
 c0042de:	693a      	ldr	r2, [r7, #16]
 c0042e0:	fbb2 f3f3 	udiv	r3, r2, r3
 c0042e4:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 c0042e6:	4b33      	ldr	r3, [pc, #204]	; (c0043b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 c0042e8:	691b      	ldr	r3, [r3, #16]
 c0042ea:	0a1b      	lsrs	r3, r3, #8
 c0042ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 c0042f0:	60fb      	str	r3, [r7, #12]
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 c0042f2:	4b30      	ldr	r3, [pc, #192]	; (c0043b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 c0042f4:	691b      	ldr	r3, [r3, #16]
 c0042f6:	0edb      	lsrs	r3, r3, #27
 c0042f8:	f003 031f 	and.w	r3, r3, #31
 c0042fc:	617b      	str	r3, [r7, #20]
        if (pllp == 0U)
 c0042fe:	697b      	ldr	r3, [r7, #20]
 c004300:	2b00      	cmp	r3, #0
 c004302:	d10a      	bne.n	c00431a <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
        {
          if (READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 c004304:	4b2b      	ldr	r3, [pc, #172]	; (c0043b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 c004306:	691b      	ldr	r3, [r3, #16]
 c004308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c00430c:	2b00      	cmp	r3, #0
 c00430e:	d002      	beq.n	c004316 <RCCEx_GetSAIxPeriphCLKFreq+0x15a>
          {
            pllp = 17U;
 c004310:	2311      	movs	r3, #17
 c004312:	617b      	str	r3, [r7, #20]
 c004314:	e001      	b.n	c00431a <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
          }
          else
          {
            pllp = 7U;
 c004316:	2307      	movs	r3, #7
 c004318:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 c00431a:	693b      	ldr	r3, [r7, #16]
 c00431c:	68fa      	ldr	r2, [r7, #12]
 c00431e:	fb03 f202 	mul.w	r2, r3, r2
 c004322:	697b      	ldr	r3, [r7, #20]
 c004324:	fbb2 f3f3 	udiv	r3, r2, r3
 c004328:	61fb      	str	r3, [r7, #28]
 c00432a:	e03d      	b.n	c0043a8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      }
    }
    else if ((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 c00432c:	69bb      	ldr	r3, [r7, #24]
 c00432e:	2b20      	cmp	r3, #32
 c004330:	d003      	beq.n	c00433a <RCCEx_GetSAIxPeriphCLKFreq+0x17e>
 c004332:	69bb      	ldr	r3, [r7, #24]
 c004334:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 c004338:	d136      	bne.n	c0043a8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U)
 c00433a:	4b1e      	ldr	r3, [pc, #120]	; (c0043b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 c00433c:	695b      	ldr	r3, [r3, #20]
 c00433e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 c004342:	2b00      	cmp	r3, #0
 c004344:	d030      	beq.n	c0043a8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      {
        /* Get f(PLLSAI2 source) */
        pllvco = RCCEx_PLLSAI2_GetVCOFreq();
 c004346:	f7ff fee1 	bl	c00410c <RCCEx_PLLSAI2_GetVCOFreq>
 c00434a:	6138      	str	r0, [r7, #16]
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 c00434c:	4b19      	ldr	r3, [pc, #100]	; (c0043b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 c00434e:	695b      	ldr	r3, [r3, #20]
 c004350:	091b      	lsrs	r3, r3, #4
 c004352:	f003 030f 	and.w	r3, r3, #15
 c004356:	3301      	adds	r3, #1
 c004358:	693a      	ldr	r2, [r7, #16]
 c00435a:	fbb2 f3f3 	udiv	r3, r2, r3
 c00435e:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 c004360:	4b14      	ldr	r3, [pc, #80]	; (c0043b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 c004362:	695b      	ldr	r3, [r3, #20]
 c004364:	0a1b      	lsrs	r3, r3, #8
 c004366:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 c00436a:	60fb      	str	r3, [r7, #12]
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 c00436c:	4b11      	ldr	r3, [pc, #68]	; (c0043b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 c00436e:	695b      	ldr	r3, [r3, #20]
 c004370:	0edb      	lsrs	r3, r3, #27
 c004372:	f003 031f 	and.w	r3, r3, #31
 c004376:	617b      	str	r3, [r7, #20]
        if (pllp == 0U)
 c004378:	697b      	ldr	r3, [r7, #20]
 c00437a:	2b00      	cmp	r3, #0
 c00437c:	d10a      	bne.n	c004394 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
        {
          if (READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 c00437e:	4b0d      	ldr	r3, [pc, #52]	; (c0043b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 c004380:	695b      	ldr	r3, [r3, #20]
 c004382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c004386:	2b00      	cmp	r3, #0
 c004388:	d002      	beq.n	c004390 <RCCEx_GetSAIxPeriphCLKFreq+0x1d4>
          {
            pllp = 17U;
 c00438a:	2311      	movs	r3, #17
 c00438c:	617b      	str	r3, [r7, #20]
 c00438e:	e001      	b.n	c004394 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
          }
          else
          {
            pllp = 7U;
 c004390:	2307      	movs	r3, #7
 c004392:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 c004394:	693b      	ldr	r3, [r7, #16]
 c004396:	68fa      	ldr	r2, [r7, #12]
 c004398:	fb03 f202 	mul.w	r2, r3, r2
 c00439c:	697b      	ldr	r3, [r7, #20]
 c00439e:	fbb2 f3f3 	udiv	r3, r2, r3
 c0043a2:	61fb      	str	r3, [r7, #28]
 c0043a4:	e000      	b.n	c0043a8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 c0043a6:	bf00      	nop
    {
      /* No clock source, frequency default init at 0 */
    }
  }

  return frequency;
 c0043a8:	69fb      	ldr	r3, [r7, #28]
}
 c0043aa:	4618      	mov	r0, r3
 c0043ac:	3720      	adds	r7, #32
 c0043ae:	46bd      	mov	sp, r7
 c0043b0:	bd80      	pop	{r7, pc}
 c0043b2:	bf00      	nop
 c0043b4:	50021000 	.word	0x50021000
 c0043b8:	00f42400 	.word	0x00f42400

0c0043bc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 c0043bc:	b580      	push	{r7, lr}
 c0043be:	b08a      	sub	sp, #40	; 0x28
 c0043c0:	af00      	add	r7, sp, #0
 c0043c2:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 c0043c4:	687b      	ldr	r3, [r7, #4]
 c0043c6:	2b00      	cmp	r3, #0
 c0043c8:	d101      	bne.n	c0043ce <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 c0043ca:	2301      	movs	r3, #1
 c0043cc:	e075      	b.n	c0044ba <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 c0043ce:	687b      	ldr	r3, [r7, #4]
 c0043d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 c0043d4:	b2db      	uxtb	r3, r3
 c0043d6:	2b00      	cmp	r3, #0
 c0043d8:	d105      	bne.n	c0043e6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 c0043da:	687b      	ldr	r3, [r7, #4]
 c0043dc:	2200      	movs	r2, #0
 c0043de:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 c0043e0:	6878      	ldr	r0, [r7, #4]
 c0043e2:	f000 f903 	bl	c0045ec <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 c0043e6:	687b      	ldr	r3, [r7, #4]
 c0043e8:	2204      	movs	r2, #4
 c0043ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 c0043ee:	6878      	ldr	r0, [r7, #4]
 c0043f0:	f000 f868 	bl	c0044c4 <HAL_SD_InitCard>
 c0043f4:	4603      	mov	r3, r0
 c0043f6:	2b00      	cmp	r3, #0
 c0043f8:	d001      	beq.n	c0043fe <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 c0043fa:	2301      	movs	r3, #1
 c0043fc:	e05d      	b.n	c0044ba <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 c0043fe:	f107 0308 	add.w	r3, r7, #8
 c004402:	4619      	mov	r1, r3
 c004404:	6878      	ldr	r0, [r7, #4]
 c004406:	f000 fdb7 	bl	c004f78 <HAL_SD_GetCardStatus>
 c00440a:	4603      	mov	r3, r0
 c00440c:	2b00      	cmp	r3, #0
 c00440e:	d001      	beq.n	c004414 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 c004410:	2301      	movs	r3, #1
 c004412:	e052      	b.n	c0044ba <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 c004414:	7e3b      	ldrb	r3, [r7, #24]
 c004416:	b2db      	uxtb	r3, r3
 c004418:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 c00441a:	7e7b      	ldrb	r3, [r7, #25]
 c00441c:	b2db      	uxtb	r3, r3
 c00441e:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 c004420:	687b      	ldr	r3, [r7, #4]
 c004422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c004424:	2b01      	cmp	r3, #1
 c004426:	d10a      	bne.n	c00443e <HAL_SD_Init+0x82>
 c004428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c00442a:	2b00      	cmp	r3, #0
 c00442c:	d102      	bne.n	c004434 <HAL_SD_Init+0x78>
 c00442e:	6a3b      	ldr	r3, [r7, #32]
 c004430:	2b00      	cmp	r3, #0
 c004432:	d004      	beq.n	c00443e <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 c004434:	687b      	ldr	r3, [r7, #4]
 c004436:	f44f 7200 	mov.w	r2, #512	; 0x200
 c00443a:	659a      	str	r2, [r3, #88]	; 0x58
 c00443c:	e00b      	b.n	c004456 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 c00443e:	687b      	ldr	r3, [r7, #4]
 c004440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c004442:	2b01      	cmp	r3, #1
 c004444:	d104      	bne.n	c004450 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 c004446:	687b      	ldr	r3, [r7, #4]
 c004448:	f44f 7280 	mov.w	r2, #256	; 0x100
 c00444c:	659a      	str	r2, [r3, #88]	; 0x58
 c00444e:	e002      	b.n	c004456 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 c004450:	687b      	ldr	r3, [r7, #4]
 c004452:	2200      	movs	r2, #0
 c004454:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 c004456:	687b      	ldr	r3, [r7, #4]
 c004458:	68db      	ldr	r3, [r3, #12]
 c00445a:	4619      	mov	r1, r3
 c00445c:	6878      	ldr	r0, [r7, #4]
 c00445e:	f000 fe75 	bl	c00514c <HAL_SD_ConfigWideBusOperation>
 c004462:	4603      	mov	r3, r0
 c004464:	2b00      	cmp	r3, #0
 c004466:	d001      	beq.n	c00446c <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 c004468:	2301      	movs	r3, #1
 c00446a:	e026      	b.n	c0044ba <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 c00446c:	f7fc fb0e 	bl	c000a8c <HAL_GetTick>
 c004470:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 c004472:	e011      	b.n	c004498 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 c004474:	f7fc fb0a 	bl	c000a8c <HAL_GetTick>
 c004478:	4602      	mov	r2, r0
 c00447a:	69fb      	ldr	r3, [r7, #28]
 c00447c:	1ad3      	subs	r3, r2, r3
 c00447e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 c004482:	d109      	bne.n	c004498 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 c004484:	687b      	ldr	r3, [r7, #4]
 c004486:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 c00448a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 c00448c:	687b      	ldr	r3, [r7, #4]
 c00448e:	2201      	movs	r2, #1
 c004490:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 c004494:	2303      	movs	r3, #3
 c004496:	e010      	b.n	c0044ba <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 c004498:	6878      	ldr	r0, [r7, #4]
 c00449a:	f000 ff67 	bl	c00536c <HAL_SD_GetCardState>
 c00449e:	4603      	mov	r3, r0
 c0044a0:	2b04      	cmp	r3, #4
 c0044a2:	d1e7      	bne.n	c004474 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 c0044a4:	687b      	ldr	r3, [r7, #4]
 c0044a6:	2200      	movs	r2, #0
 c0044a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 c0044aa:	687b      	ldr	r3, [r7, #4]
 c0044ac:	2200      	movs	r2, #0
 c0044ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 c0044b0:	687b      	ldr	r3, [r7, #4]
 c0044b2:	2201      	movs	r2, #1
 c0044b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 c0044b8:	2300      	movs	r3, #0
}
 c0044ba:	4618      	mov	r0, r3
 c0044bc:	3728      	adds	r7, #40	; 0x28
 c0044be:	46bd      	mov	sp, r7
 c0044c0:	bd80      	pop	{r7, pc}
	...

0c0044c4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 c0044c4:	b590      	push	{r4, r7, lr}
 c0044c6:	b08d      	sub	sp, #52	; 0x34
 c0044c8:	af02      	add	r7, sp, #8
 c0044ca:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 c0044cc:	2300      	movs	r3, #0
 c0044ce:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 c0044d0:	2300      	movs	r3, #0
 c0044d2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 c0044d4:	2300      	movs	r3, #0
 c0044d6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 c0044d8:	2300      	movs	r3, #0
 c0044da:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 c0044dc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 c0044e0:	f7fe fc8c 	bl	c002dfc <HAL_RCCEx_GetPeriphCLKFreq>
 c0044e4:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 c0044e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c0044e8:	2b00      	cmp	r3, #0
 c0044ea:	d109      	bne.n	c004500 <HAL_SD_InitCard+0x3c>
  {
    hsd->State = HAL_SD_STATE_READY;
 c0044ec:	687b      	ldr	r3, [r7, #4]
 c0044ee:	2201      	movs	r2, #1
 c0044f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 c0044f4:	687b      	ldr	r3, [r7, #4]
 c0044f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 c0044fa:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 c0044fc:	2301      	movs	r3, #1
 c0044fe:	e06a      	b.n	c0045d6 <HAL_SD_InitCard+0x112>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 c004500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c004502:	0a1b      	lsrs	r3, r3, #8
 c004504:	4a36      	ldr	r2, [pc, #216]	; (c0045e0 <HAL_SD_InitCard+0x11c>)
 c004506:	fba2 2303 	umull	r2, r3, r2, r3
 c00450a:	091b      	lsrs	r3, r3, #4
 c00450c:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 c00450e:	687b      	ldr	r3, [r7, #4]
 c004510:	681c      	ldr	r4, [r3, #0]
 c004512:	466a      	mov	r2, sp
 c004514:	f107 0318 	add.w	r3, r7, #24
 c004518:	e893 0003 	ldmia.w	r3, {r0, r1}
 c00451c:	e882 0003 	stmia.w	r2, {r0, r1}
 c004520:	f107 030c 	add.w	r3, r7, #12
 c004524:	cb0e      	ldmia	r3, {r1, r2, r3}
 c004526:	4620      	mov	r0, r4
 c004528:	f001 fdc2 	bl	c0060b0 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 c00452c:	687b      	ldr	r3, [r7, #4]
 c00452e:	681b      	ldr	r3, [r3, #0]
 c004530:	4618      	mov	r0, r3
 c004532:	f001 fe05 	bl	c006140 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 c004536:	69fb      	ldr	r3, [r7, #28]
 c004538:	005b      	lsls	r3, r3, #1
 c00453a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 c00453c:	fbb2 f3f3 	udiv	r3, r2, r3
 c004540:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 c004542:	4a28      	ldr	r2, [pc, #160]	; (c0045e4 <HAL_SD_InitCard+0x120>)
 c004544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c004546:	fbb2 f3f3 	udiv	r3, r2, r3
 c00454a:	3301      	adds	r3, #1
 c00454c:	4618      	mov	r0, r3
 c00454e:	f7fc faa9 	bl	c000aa4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 c004552:	6878      	ldr	r0, [r7, #4]
 c004554:	f000 fff8 	bl	c005548 <SD_PowerON>
 c004558:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 c00455a:	6a3b      	ldr	r3, [r7, #32]
 c00455c:	2b00      	cmp	r3, #0
 c00455e:	d00b      	beq.n	c004578 <HAL_SD_InitCard+0xb4>
  {
    hsd->State = HAL_SD_STATE_READY;
 c004560:	687b      	ldr	r3, [r7, #4]
 c004562:	2201      	movs	r2, #1
 c004564:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 c004568:	687b      	ldr	r3, [r7, #4]
 c00456a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 c00456c:	6a3b      	ldr	r3, [r7, #32]
 c00456e:	431a      	orrs	r2, r3
 c004570:	687b      	ldr	r3, [r7, #4]
 c004572:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 c004574:	2301      	movs	r3, #1
 c004576:	e02e      	b.n	c0045d6 <HAL_SD_InitCard+0x112>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 c004578:	6878      	ldr	r0, [r7, #4]
 c00457a:	f000 ff17 	bl	c0053ac <SD_InitCard>
 c00457e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 c004580:	6a3b      	ldr	r3, [r7, #32]
 c004582:	2b00      	cmp	r3, #0
 c004584:	d00b      	beq.n	c00459e <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 c004586:	687b      	ldr	r3, [r7, #4]
 c004588:	2201      	movs	r2, #1
 c00458a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 c00458e:	687b      	ldr	r3, [r7, #4]
 c004590:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 c004592:	6a3b      	ldr	r3, [r7, #32]
 c004594:	431a      	orrs	r2, r3
 c004596:	687b      	ldr	r3, [r7, #4]
 c004598:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 c00459a:	2301      	movs	r3, #1
 c00459c:	e01b      	b.n	c0045d6 <HAL_SD_InitCard+0x112>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 c00459e:	687b      	ldr	r3, [r7, #4]
 c0045a0:	681b      	ldr	r3, [r3, #0]
 c0045a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 c0045a6:	4618      	mov	r0, r3
 c0045a8:	f001 fe60 	bl	c00626c <SDMMC_CmdBlockLength>
 c0045ac:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 c0045ae:	6a3b      	ldr	r3, [r7, #32]
 c0045b0:	2b00      	cmp	r3, #0
 c0045b2:	d00f      	beq.n	c0045d4 <HAL_SD_InitCard+0x110>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 c0045b4:	687b      	ldr	r3, [r7, #4]
 c0045b6:	681b      	ldr	r3, [r3, #0]
 c0045b8:	4a0b      	ldr	r2, [pc, #44]	; (c0045e8 <HAL_SD_InitCard+0x124>)
 c0045ba:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 c0045bc:	687b      	ldr	r3, [r7, #4]
 c0045be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 c0045c0:	6a3b      	ldr	r3, [r7, #32]
 c0045c2:	431a      	orrs	r2, r3
 c0045c4:	687b      	ldr	r3, [r7, #4]
 c0045c6:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 c0045c8:	687b      	ldr	r3, [r7, #4]
 c0045ca:	2201      	movs	r2, #1
 c0045cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 c0045d0:	2301      	movs	r3, #1
 c0045d2:	e000      	b.n	c0045d6 <HAL_SD_InitCard+0x112>
  }

  return HAL_OK;
 c0045d4:	2300      	movs	r3, #0
}
 c0045d6:	4618      	mov	r0, r3
 c0045d8:	372c      	adds	r7, #44	; 0x2c
 c0045da:	46bd      	mov	sp, r7
 c0045dc:	bd90      	pop	{r4, r7, pc}
 c0045de:	bf00      	nop
 c0045e0:	014f8b59 	.word	0x014f8b59
 c0045e4:	00012110 	.word	0x00012110
 c0045e8:	1fe00fff 	.word	0x1fe00fff

0c0045ec <HAL_SD_MspInit>:
  * @brief  Initializes the SD MSP.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
__weak void HAL_SD_MspInit(SD_HandleTypeDef *hsd)
{
 c0045ec:	b480      	push	{r7}
 c0045ee:	b083      	sub	sp, #12
 c0045f0:	af00      	add	r7, sp, #0
 c0045f2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_MspInit could be implemented in the user file
   */
}
 c0045f4:	bf00      	nop
 c0045f6:	370c      	adds	r7, #12
 c0045f8:	46bd      	mov	sp, r7
 c0045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0045fe:	4770      	bx	lr

0c004600 <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 c004600:	b580      	push	{r7, lr}
 c004602:	b092      	sub	sp, #72	; 0x48
 c004604:	af00      	add	r7, sp, #0
 c004606:	60f8      	str	r0, [r7, #12]
 c004608:	60b9      	str	r1, [r7, #8]
 c00460a:	607a      	str	r2, [r7, #4]
 c00460c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 c00460e:	f7fc fa3d 	bl	c000a8c <HAL_GetTick>
 c004612:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 c004614:	687b      	ldr	r3, [r7, #4]
 c004616:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 c004618:	68bb      	ldr	r3, [r7, #8]
 c00461a:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 c00461c:	68bb      	ldr	r3, [r7, #8]
 c00461e:	2b00      	cmp	r3, #0
 c004620:	d107      	bne.n	c004632 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 c004622:	68fb      	ldr	r3, [r7, #12]
 c004624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c004626:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 c00462a:	68fb      	ldr	r3, [r7, #12]
 c00462c:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 c00462e:	2301      	movs	r3, #1
 c004630:	e167      	b.n	c004902 <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 c004632:	68fb      	ldr	r3, [r7, #12]
 c004634:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 c004638:	b2db      	uxtb	r3, r3
 c00463a:	2b01      	cmp	r3, #1
 c00463c:	f040 815a 	bne.w	c0048f4 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 c004640:	68fb      	ldr	r3, [r7, #12]
 c004642:	2200      	movs	r2, #0
 c004644:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 c004646:	6bba      	ldr	r2, [r7, #56]	; 0x38
 c004648:	683b      	ldr	r3, [r7, #0]
 c00464a:	441a      	add	r2, r3
 c00464c:	68fb      	ldr	r3, [r7, #12]
 c00464e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 c004650:	429a      	cmp	r2, r3
 c004652:	d907      	bls.n	c004664 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 c004654:	68fb      	ldr	r3, [r7, #12]
 c004656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c004658:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 c00465c:	68fb      	ldr	r3, [r7, #12]
 c00465e:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 c004660:	2301      	movs	r3, #1
 c004662:	e14e      	b.n	c004902 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 c004664:	68fb      	ldr	r3, [r7, #12]
 c004666:	2203      	movs	r2, #3
 c004668:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 c00466c:	68fb      	ldr	r3, [r7, #12]
 c00466e:	681b      	ldr	r3, [r3, #0]
 c004670:	2200      	movs	r2, #0
 c004672:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 c004674:	68fb      	ldr	r3, [r7, #12]
 c004676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c004678:	2b01      	cmp	r3, #1
 c00467a:	d002      	beq.n	c004682 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 c00467c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c00467e:	025b      	lsls	r3, r3, #9
 c004680:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 c004682:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c004686:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 c004688:	683b      	ldr	r3, [r7, #0]
 c00468a:	025b      	lsls	r3, r3, #9
 c00468c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 c00468e:	2390      	movs	r3, #144	; 0x90
 c004690:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 c004692:	2302      	movs	r3, #2
 c004694:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 c004696:	2300      	movs	r3, #0
 c004698:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 c00469a:	2300      	movs	r3, #0
 c00469c:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 c00469e:	68fb      	ldr	r3, [r7, #12]
 c0046a0:	681b      	ldr	r3, [r3, #0]
 c0046a2:	f107 0214 	add.w	r2, r7, #20
 c0046a6:	4611      	mov	r1, r2
 c0046a8:	4618      	mov	r0, r3
 c0046aa:	f001 fdb3 	bl	c006214 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 c0046ae:	68fb      	ldr	r3, [r7, #12]
 c0046b0:	681b      	ldr	r3, [r3, #0]
 c0046b2:	68da      	ldr	r2, [r3, #12]
 c0046b4:	68fb      	ldr	r3, [r7, #12]
 c0046b6:	681b      	ldr	r3, [r3, #0]
 c0046b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 c0046bc:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 c0046be:	683b      	ldr	r3, [r7, #0]
 c0046c0:	2b01      	cmp	r3, #1
 c0046c2:	d90a      	bls.n	c0046da <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 c0046c4:	68fb      	ldr	r3, [r7, #12]
 c0046c6:	2202      	movs	r2, #2
 c0046c8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 c0046ca:	68fb      	ldr	r3, [r7, #12]
 c0046cc:	681b      	ldr	r3, [r3, #0]
 c0046ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 c0046d0:	4618      	mov	r0, r3
 c0046d2:	f001 fe11 	bl	c0062f8 <SDMMC_CmdReadMultiBlock>
 c0046d6:	6478      	str	r0, [r7, #68]	; 0x44
 c0046d8:	e009      	b.n	c0046ee <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 c0046da:	68fb      	ldr	r3, [r7, #12]
 c0046dc:	2201      	movs	r2, #1
 c0046de:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 c0046e0:	68fb      	ldr	r3, [r7, #12]
 c0046e2:	681b      	ldr	r3, [r3, #0]
 c0046e4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 c0046e6:	4618      	mov	r0, r3
 c0046e8:	f001 fde3 	bl	c0062b2 <SDMMC_CmdReadSingleBlock>
 c0046ec:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 c0046ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 c0046f0:	2b00      	cmp	r3, #0
 c0046f2:	d012      	beq.n	c00471a <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 c0046f4:	68fb      	ldr	r3, [r7, #12]
 c0046f6:	681b      	ldr	r3, [r3, #0]
 c0046f8:	4a84      	ldr	r2, [pc, #528]	; (c00490c <HAL_SD_ReadBlocks+0x30c>)
 c0046fa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 c0046fc:	68fb      	ldr	r3, [r7, #12]
 c0046fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 c004700:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 c004702:	431a      	orrs	r2, r3
 c004704:	68fb      	ldr	r3, [r7, #12]
 c004706:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 c004708:	68fb      	ldr	r3, [r7, #12]
 c00470a:	2201      	movs	r2, #1
 c00470c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 c004710:	68fb      	ldr	r3, [r7, #12]
 c004712:	2200      	movs	r2, #0
 c004714:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 c004716:	2301      	movs	r3, #1
 c004718:	e0f3      	b.n	c004902 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 c00471a:	69bb      	ldr	r3, [r7, #24]
 c00471c:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 c00471e:	e058      	b.n	c0047d2 <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 c004720:	68fb      	ldr	r3, [r7, #12]
 c004722:	681b      	ldr	r3, [r3, #0]
 c004724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c004726:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 c00472a:	2b00      	cmp	r3, #0
 c00472c:	d033      	beq.n	c004796 <HAL_SD_ReadBlocks+0x196>
 c00472e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 c004730:	2b1f      	cmp	r3, #31
 c004732:	d930      	bls.n	c004796 <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 c004734:	2300      	movs	r3, #0
 c004736:	643b      	str	r3, [r7, #64]	; 0x40
 c004738:	e027      	b.n	c00478a <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 c00473a:	68fb      	ldr	r3, [r7, #12]
 c00473c:	681b      	ldr	r3, [r3, #0]
 c00473e:	4618      	mov	r0, r3
 c004740:	f001 fce0 	bl	c006104 <SDMMC_ReadFIFO>
 c004744:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 c004746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c004748:	b2da      	uxtb	r2, r3
 c00474a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 c00474c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 c00474e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 c004750:	3301      	adds	r3, #1
 c004752:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 c004754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c004756:	0a1b      	lsrs	r3, r3, #8
 c004758:	b2da      	uxtb	r2, r3
 c00475a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 c00475c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 c00475e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 c004760:	3301      	adds	r3, #1
 c004762:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 c004764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c004766:	0c1b      	lsrs	r3, r3, #16
 c004768:	b2da      	uxtb	r2, r3
 c00476a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 c00476c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 c00476e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 c004770:	3301      	adds	r3, #1
 c004772:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 c004774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c004776:	0e1b      	lsrs	r3, r3, #24
 c004778:	b2da      	uxtb	r2, r3
 c00477a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 c00477c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 c00477e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 c004780:	3301      	adds	r3, #1
 c004782:	637b      	str	r3, [r7, #52]	; 0x34
        for (count = 0U; count < 8U; count++)
 c004784:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c004786:	3301      	adds	r3, #1
 c004788:	643b      	str	r3, [r7, #64]	; 0x40
 c00478a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c00478c:	2b07      	cmp	r3, #7
 c00478e:	d9d4      	bls.n	c00473a <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 c004790:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 c004792:	3b20      	subs	r3, #32
 c004794:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 c004796:	f7fc f979 	bl	c000a8c <HAL_GetTick>
 c00479a:	4602      	mov	r2, r0
 c00479c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c00479e:	1ad3      	subs	r3, r2, r3
 c0047a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 c0047a2:	429a      	cmp	r2, r3
 c0047a4:	d902      	bls.n	c0047ac <HAL_SD_ReadBlocks+0x1ac>
 c0047a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 c0047a8:	2b00      	cmp	r3, #0
 c0047aa:	d112      	bne.n	c0047d2 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 c0047ac:	68fb      	ldr	r3, [r7, #12]
 c0047ae:	681b      	ldr	r3, [r3, #0]
 c0047b0:	4a56      	ldr	r2, [pc, #344]	; (c00490c <HAL_SD_ReadBlocks+0x30c>)
 c0047b2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 c0047b4:	68fb      	ldr	r3, [r7, #12]
 c0047b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c0047b8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 c0047bc:	68fb      	ldr	r3, [r7, #12]
 c0047be:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 c0047c0:	68fb      	ldr	r3, [r7, #12]
 c0047c2:	2201      	movs	r2, #1
 c0047c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 c0047c8:	68fb      	ldr	r3, [r7, #12]
 c0047ca:	2200      	movs	r2, #0
 c0047cc:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 c0047ce:	2303      	movs	r3, #3
 c0047d0:	e097      	b.n	c004902 <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 c0047d2:	68fb      	ldr	r3, [r7, #12]
 c0047d4:	681b      	ldr	r3, [r3, #0]
 c0047d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c0047d8:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 c0047dc:	2b00      	cmp	r3, #0
 c0047de:	d09f      	beq.n	c004720 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 c0047e0:	68fb      	ldr	r3, [r7, #12]
 c0047e2:	681b      	ldr	r3, [r3, #0]
 c0047e4:	68da      	ldr	r2, [r3, #12]
 c0047e6:	68fb      	ldr	r3, [r7, #12]
 c0047e8:	681b      	ldr	r3, [r3, #0]
 c0047ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 c0047ee:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 c0047f0:	68fb      	ldr	r3, [r7, #12]
 c0047f2:	681b      	ldr	r3, [r3, #0]
 c0047f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c0047f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c0047fa:	2b00      	cmp	r3, #0
 c0047fc:	d022      	beq.n	c004844 <HAL_SD_ReadBlocks+0x244>
 c0047fe:	683b      	ldr	r3, [r7, #0]
 c004800:	2b01      	cmp	r3, #1
 c004802:	d91f      	bls.n	c004844 <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 c004804:	68fb      	ldr	r3, [r7, #12]
 c004806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c004808:	2b03      	cmp	r3, #3
 c00480a:	d01b      	beq.n	c004844 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 c00480c:	68fb      	ldr	r3, [r7, #12]
 c00480e:	681b      	ldr	r3, [r3, #0]
 c004810:	4618      	mov	r0, r3
 c004812:	f001 fddb 	bl	c0063cc <SDMMC_CmdStopTransfer>
 c004816:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 c004818:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 c00481a:	2b00      	cmp	r3, #0
 c00481c:	d012      	beq.n	c004844 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 c00481e:	68fb      	ldr	r3, [r7, #12]
 c004820:	681b      	ldr	r3, [r3, #0]
 c004822:	4a3a      	ldr	r2, [pc, #232]	; (c00490c <HAL_SD_ReadBlocks+0x30c>)
 c004824:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 c004826:	68fb      	ldr	r3, [r7, #12]
 c004828:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 c00482a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 c00482c:	431a      	orrs	r2, r3
 c00482e:	68fb      	ldr	r3, [r7, #12]
 c004830:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 c004832:	68fb      	ldr	r3, [r7, #12]
 c004834:	2201      	movs	r2, #1
 c004836:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 c00483a:	68fb      	ldr	r3, [r7, #12]
 c00483c:	2200      	movs	r2, #0
 c00483e:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 c004840:	2301      	movs	r3, #1
 c004842:	e05e      	b.n	c004902 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 c004844:	68fb      	ldr	r3, [r7, #12]
 c004846:	681b      	ldr	r3, [r3, #0]
 c004848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c00484a:	f003 0308 	and.w	r3, r3, #8
 c00484e:	2b00      	cmp	r3, #0
 c004850:	d012      	beq.n	c004878 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 c004852:	68fb      	ldr	r3, [r7, #12]
 c004854:	681b      	ldr	r3, [r3, #0]
 c004856:	4a2d      	ldr	r2, [pc, #180]	; (c00490c <HAL_SD_ReadBlocks+0x30c>)
 c004858:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 c00485a:	68fb      	ldr	r3, [r7, #12]
 c00485c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c00485e:	f043 0208 	orr.w	r2, r3, #8
 c004862:	68fb      	ldr	r3, [r7, #12]
 c004864:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 c004866:	68fb      	ldr	r3, [r7, #12]
 c004868:	2201      	movs	r2, #1
 c00486a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 c00486e:	68fb      	ldr	r3, [r7, #12]
 c004870:	2200      	movs	r2, #0
 c004872:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 c004874:	2301      	movs	r3, #1
 c004876:	e044      	b.n	c004902 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 c004878:	68fb      	ldr	r3, [r7, #12]
 c00487a:	681b      	ldr	r3, [r3, #0]
 c00487c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c00487e:	f003 0302 	and.w	r3, r3, #2
 c004882:	2b00      	cmp	r3, #0
 c004884:	d012      	beq.n	c0048ac <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 c004886:	68fb      	ldr	r3, [r7, #12]
 c004888:	681b      	ldr	r3, [r3, #0]
 c00488a:	4a20      	ldr	r2, [pc, #128]	; (c00490c <HAL_SD_ReadBlocks+0x30c>)
 c00488c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 c00488e:	68fb      	ldr	r3, [r7, #12]
 c004890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c004892:	f043 0202 	orr.w	r2, r3, #2
 c004896:	68fb      	ldr	r3, [r7, #12]
 c004898:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 c00489a:	68fb      	ldr	r3, [r7, #12]
 c00489c:	2201      	movs	r2, #1
 c00489e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 c0048a2:	68fb      	ldr	r3, [r7, #12]
 c0048a4:	2200      	movs	r2, #0
 c0048a6:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 c0048a8:	2301      	movs	r3, #1
 c0048aa:	e02a      	b.n	c004902 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 c0048ac:	68fb      	ldr	r3, [r7, #12]
 c0048ae:	681b      	ldr	r3, [r3, #0]
 c0048b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c0048b2:	f003 0320 	and.w	r3, r3, #32
 c0048b6:	2b00      	cmp	r3, #0
 c0048b8:	d012      	beq.n	c0048e0 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 c0048ba:	68fb      	ldr	r3, [r7, #12]
 c0048bc:	681b      	ldr	r3, [r3, #0]
 c0048be:	4a13      	ldr	r2, [pc, #76]	; (c00490c <HAL_SD_ReadBlocks+0x30c>)
 c0048c0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 c0048c2:	68fb      	ldr	r3, [r7, #12]
 c0048c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c0048c6:	f043 0220 	orr.w	r2, r3, #32
 c0048ca:	68fb      	ldr	r3, [r7, #12]
 c0048cc:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 c0048ce:	68fb      	ldr	r3, [r7, #12]
 c0048d0:	2201      	movs	r2, #1
 c0048d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 c0048d6:	68fb      	ldr	r3, [r7, #12]
 c0048d8:	2200      	movs	r2, #0
 c0048da:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 c0048dc:	2301      	movs	r3, #1
 c0048de:	e010      	b.n	c004902 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 c0048e0:	68fb      	ldr	r3, [r7, #12]
 c0048e2:	681b      	ldr	r3, [r3, #0]
 c0048e4:	4a0a      	ldr	r2, [pc, #40]	; (c004910 <HAL_SD_ReadBlocks+0x310>)
 c0048e6:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 c0048e8:	68fb      	ldr	r3, [r7, #12]
 c0048ea:	2201      	movs	r2, #1
 c0048ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 c0048f0:	2300      	movs	r3, #0
 c0048f2:	e006      	b.n	c004902 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 c0048f4:	68fb      	ldr	r3, [r7, #12]
 c0048f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c0048f8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 c0048fc:	68fb      	ldr	r3, [r7, #12]
 c0048fe:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 c004900:	2301      	movs	r3, #1
  }
}
 c004902:	4618      	mov	r0, r3
 c004904:	3748      	adds	r7, #72	; 0x48
 c004906:	46bd      	mov	sp, r7
 c004908:	bd80      	pop	{r7, pc}
 c00490a:	bf00      	nop
 c00490c:	1fe00fff 	.word	0x1fe00fff
 c004910:	18000f3a 	.word	0x18000f3a

0c004914 <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                     uint32_t Timeout)
{
 c004914:	b580      	push	{r7, lr}
 c004916:	b092      	sub	sp, #72	; 0x48
 c004918:	af00      	add	r7, sp, #0
 c00491a:	60f8      	str	r0, [r7, #12]
 c00491c:	60b9      	str	r1, [r7, #8]
 c00491e:	607a      	str	r2, [r7, #4]
 c004920:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 c004922:	f7fc f8b3 	bl	c000a8c <HAL_GetTick>
 c004926:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 c004928:	687b      	ldr	r3, [r7, #4]
 c00492a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 c00492c:	68bb      	ldr	r3, [r7, #8]
 c00492e:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 c004930:	68bb      	ldr	r3, [r7, #8]
 c004932:	2b00      	cmp	r3, #0
 c004934:	d107      	bne.n	c004946 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 c004936:	68fb      	ldr	r3, [r7, #12]
 c004938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c00493a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 c00493e:	68fb      	ldr	r3, [r7, #12]
 c004940:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 c004942:	2301      	movs	r3, #1
 c004944:	e16b      	b.n	c004c1e <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 c004946:	68fb      	ldr	r3, [r7, #12]
 c004948:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 c00494c:	b2db      	uxtb	r3, r3
 c00494e:	2b01      	cmp	r3, #1
 c004950:	f040 815e 	bne.w	c004c10 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 c004954:	68fb      	ldr	r3, [r7, #12]
 c004956:	2200      	movs	r2, #0
 c004958:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 c00495a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 c00495c:	683b      	ldr	r3, [r7, #0]
 c00495e:	441a      	add	r2, r3
 c004960:	68fb      	ldr	r3, [r7, #12]
 c004962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 c004964:	429a      	cmp	r2, r3
 c004966:	d907      	bls.n	c004978 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 c004968:	68fb      	ldr	r3, [r7, #12]
 c00496a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c00496c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 c004970:	68fb      	ldr	r3, [r7, #12]
 c004972:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 c004974:	2301      	movs	r3, #1
 c004976:	e152      	b.n	c004c1e <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 c004978:	68fb      	ldr	r3, [r7, #12]
 c00497a:	2203      	movs	r2, #3
 c00497c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 c004980:	68fb      	ldr	r3, [r7, #12]
 c004982:	681b      	ldr	r3, [r3, #0]
 c004984:	2200      	movs	r2, #0
 c004986:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 c004988:	68fb      	ldr	r3, [r7, #12]
 c00498a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c00498c:	2b01      	cmp	r3, #1
 c00498e:	d002      	beq.n	c004996 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 c004990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c004992:	025b      	lsls	r3, r3, #9
 c004994:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 c004996:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c00499a:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 c00499c:	683b      	ldr	r3, [r7, #0]
 c00499e:	025b      	lsls	r3, r3, #9
 c0049a0:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 c0049a2:	2390      	movs	r3, #144	; 0x90
 c0049a4:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 c0049a6:	2300      	movs	r3, #0
 c0049a8:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 c0049aa:	2300      	movs	r3, #0
 c0049ac:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 c0049ae:	2300      	movs	r3, #0
 c0049b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 c0049b2:	68fb      	ldr	r3, [r7, #12]
 c0049b4:	681b      	ldr	r3, [r3, #0]
 c0049b6:	f107 0218 	add.w	r2, r7, #24
 c0049ba:	4611      	mov	r1, r2
 c0049bc:	4618      	mov	r0, r3
 c0049be:	f001 fc29 	bl	c006214 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 c0049c2:	68fb      	ldr	r3, [r7, #12]
 c0049c4:	681b      	ldr	r3, [r3, #0]
 c0049c6:	68da      	ldr	r2, [r3, #12]
 c0049c8:	68fb      	ldr	r3, [r7, #12]
 c0049ca:	681b      	ldr	r3, [r3, #0]
 c0049cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 c0049d0:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 c0049d2:	683b      	ldr	r3, [r7, #0]
 c0049d4:	2b01      	cmp	r3, #1
 c0049d6:	d90a      	bls.n	c0049ee <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 c0049d8:	68fb      	ldr	r3, [r7, #12]
 c0049da:	2220      	movs	r2, #32
 c0049dc:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 c0049de:	68fb      	ldr	r3, [r7, #12]
 c0049e0:	681b      	ldr	r3, [r3, #0]
 c0049e2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 c0049e4:	4618      	mov	r0, r3
 c0049e6:	f001 fccd 	bl	c006384 <SDMMC_CmdWriteMultiBlock>
 c0049ea:	6478      	str	r0, [r7, #68]	; 0x44
 c0049ec:	e009      	b.n	c004a02 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 c0049ee:	68fb      	ldr	r3, [r7, #12]
 c0049f0:	2210      	movs	r2, #16
 c0049f2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 c0049f4:	68fb      	ldr	r3, [r7, #12]
 c0049f6:	681b      	ldr	r3, [r3, #0]
 c0049f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 c0049fa:	4618      	mov	r0, r3
 c0049fc:	f001 fc9f 	bl	c00633e <SDMMC_CmdWriteSingleBlock>
 c004a00:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 c004a02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 c004a04:	2b00      	cmp	r3, #0
 c004a06:	d012      	beq.n	c004a2e <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 c004a08:	68fb      	ldr	r3, [r7, #12]
 c004a0a:	681b      	ldr	r3, [r3, #0]
 c004a0c:	4a86      	ldr	r2, [pc, #536]	; (c004c28 <HAL_SD_WriteBlocks+0x314>)
 c004a0e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 c004a10:	68fb      	ldr	r3, [r7, #12]
 c004a12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 c004a14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 c004a16:	431a      	orrs	r2, r3
 c004a18:	68fb      	ldr	r3, [r7, #12]
 c004a1a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 c004a1c:	68fb      	ldr	r3, [r7, #12]
 c004a1e:	2201      	movs	r2, #1
 c004a20:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 c004a24:	68fb      	ldr	r3, [r7, #12]
 c004a26:	2200      	movs	r2, #0
 c004a28:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 c004a2a:	2301      	movs	r3, #1
 c004a2c:	e0f7      	b.n	c004c1e <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 c004a2e:	69fb      	ldr	r3, [r7, #28]
 c004a30:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 c004a32:	e05c      	b.n	c004aee <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 c004a34:	68fb      	ldr	r3, [r7, #12]
 c004a36:	681b      	ldr	r3, [r3, #0]
 c004a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c004a3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 c004a3e:	2b00      	cmp	r3, #0
 c004a40:	d037      	beq.n	c004ab2 <HAL_SD_WriteBlocks+0x19e>
 c004a42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 c004a44:	2b1f      	cmp	r3, #31
 c004a46:	d934      	bls.n	c004ab2 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 c004a48:	2300      	movs	r3, #0
 c004a4a:	643b      	str	r3, [r7, #64]	; 0x40
 c004a4c:	e02b      	b.n	c004aa6 <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 c004a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 c004a50:	781b      	ldrb	r3, [r3, #0]
 c004a52:	617b      	str	r3, [r7, #20]
          tempbuff++;
 c004a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 c004a56:	3301      	adds	r3, #1
 c004a58:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 c004a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 c004a5c:	781b      	ldrb	r3, [r3, #0]
 c004a5e:	021a      	lsls	r2, r3, #8
 c004a60:	697b      	ldr	r3, [r7, #20]
 c004a62:	4313      	orrs	r3, r2
 c004a64:	617b      	str	r3, [r7, #20]
          tempbuff++;
 c004a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 c004a68:	3301      	adds	r3, #1
 c004a6a:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 c004a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 c004a6e:	781b      	ldrb	r3, [r3, #0]
 c004a70:	041a      	lsls	r2, r3, #16
 c004a72:	697b      	ldr	r3, [r7, #20]
 c004a74:	4313      	orrs	r3, r2
 c004a76:	617b      	str	r3, [r7, #20]
          tempbuff++;
 c004a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 c004a7a:	3301      	adds	r3, #1
 c004a7c:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 c004a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 c004a80:	781b      	ldrb	r3, [r3, #0]
 c004a82:	061a      	lsls	r2, r3, #24
 c004a84:	697b      	ldr	r3, [r7, #20]
 c004a86:	4313      	orrs	r3, r2
 c004a88:	617b      	str	r3, [r7, #20]
          tempbuff++;
 c004a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 c004a8c:	3301      	adds	r3, #1
 c004a8e:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 c004a90:	68fb      	ldr	r3, [r7, #12]
 c004a92:	681b      	ldr	r3, [r3, #0]
 c004a94:	f107 0214 	add.w	r2, r7, #20
 c004a98:	4611      	mov	r1, r2
 c004a9a:	4618      	mov	r0, r3
 c004a9c:	f001 fb3f 	bl	c00611e <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 c004aa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c004aa2:	3301      	adds	r3, #1
 c004aa4:	643b      	str	r3, [r7, #64]	; 0x40
 c004aa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c004aa8:	2b07      	cmp	r3, #7
 c004aaa:	d9d0      	bls.n	c004a4e <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 c004aac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 c004aae:	3b20      	subs	r3, #32
 c004ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 c004ab2:	f7fb ffeb 	bl	c000a8c <HAL_GetTick>
 c004ab6:	4602      	mov	r2, r0
 c004ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c004aba:	1ad3      	subs	r3, r2, r3
 c004abc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 c004abe:	429a      	cmp	r2, r3
 c004ac0:	d902      	bls.n	c004ac8 <HAL_SD_WriteBlocks+0x1b4>
 c004ac2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 c004ac4:	2b00      	cmp	r3, #0
 c004ac6:	d112      	bne.n	c004aee <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 c004ac8:	68fb      	ldr	r3, [r7, #12]
 c004aca:	681b      	ldr	r3, [r3, #0]
 c004acc:	4a56      	ldr	r2, [pc, #344]	; (c004c28 <HAL_SD_WriteBlocks+0x314>)
 c004ace:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 c004ad0:	68fb      	ldr	r3, [r7, #12]
 c004ad2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 c004ad4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 c004ad6:	431a      	orrs	r2, r3
 c004ad8:	68fb      	ldr	r3, [r7, #12]
 c004ada:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 c004adc:	68fb      	ldr	r3, [r7, #12]
 c004ade:	2201      	movs	r2, #1
 c004ae0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 c004ae4:	68fb      	ldr	r3, [r7, #12]
 c004ae6:	2200      	movs	r2, #0
 c004ae8:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 c004aea:	2303      	movs	r3, #3
 c004aec:	e097      	b.n	c004c1e <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 c004aee:	68fb      	ldr	r3, [r7, #12]
 c004af0:	681b      	ldr	r3, [r3, #0]
 c004af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c004af4:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 c004af8:	2b00      	cmp	r3, #0
 c004afa:	d09b      	beq.n	c004a34 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 c004afc:	68fb      	ldr	r3, [r7, #12]
 c004afe:	681b      	ldr	r3, [r3, #0]
 c004b00:	68da      	ldr	r2, [r3, #12]
 c004b02:	68fb      	ldr	r3, [r7, #12]
 c004b04:	681b      	ldr	r3, [r3, #0]
 c004b06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 c004b0a:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 c004b0c:	68fb      	ldr	r3, [r7, #12]
 c004b0e:	681b      	ldr	r3, [r3, #0]
 c004b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c004b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c004b16:	2b00      	cmp	r3, #0
 c004b18:	d022      	beq.n	c004b60 <HAL_SD_WriteBlocks+0x24c>
 c004b1a:	683b      	ldr	r3, [r7, #0]
 c004b1c:	2b01      	cmp	r3, #1
 c004b1e:	d91f      	bls.n	c004b60 <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 c004b20:	68fb      	ldr	r3, [r7, #12]
 c004b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c004b24:	2b03      	cmp	r3, #3
 c004b26:	d01b      	beq.n	c004b60 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 c004b28:	68fb      	ldr	r3, [r7, #12]
 c004b2a:	681b      	ldr	r3, [r3, #0]
 c004b2c:	4618      	mov	r0, r3
 c004b2e:	f001 fc4d 	bl	c0063cc <SDMMC_CmdStopTransfer>
 c004b32:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 c004b34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 c004b36:	2b00      	cmp	r3, #0
 c004b38:	d012      	beq.n	c004b60 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 c004b3a:	68fb      	ldr	r3, [r7, #12]
 c004b3c:	681b      	ldr	r3, [r3, #0]
 c004b3e:	4a3a      	ldr	r2, [pc, #232]	; (c004c28 <HAL_SD_WriteBlocks+0x314>)
 c004b40:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 c004b42:	68fb      	ldr	r3, [r7, #12]
 c004b44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 c004b46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 c004b48:	431a      	orrs	r2, r3
 c004b4a:	68fb      	ldr	r3, [r7, #12]
 c004b4c:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 c004b4e:	68fb      	ldr	r3, [r7, #12]
 c004b50:	2201      	movs	r2, #1
 c004b52:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 c004b56:	68fb      	ldr	r3, [r7, #12]
 c004b58:	2200      	movs	r2, #0
 c004b5a:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 c004b5c:	2301      	movs	r3, #1
 c004b5e:	e05e      	b.n	c004c1e <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 c004b60:	68fb      	ldr	r3, [r7, #12]
 c004b62:	681b      	ldr	r3, [r3, #0]
 c004b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c004b66:	f003 0308 	and.w	r3, r3, #8
 c004b6a:	2b00      	cmp	r3, #0
 c004b6c:	d012      	beq.n	c004b94 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 c004b6e:	68fb      	ldr	r3, [r7, #12]
 c004b70:	681b      	ldr	r3, [r3, #0]
 c004b72:	4a2d      	ldr	r2, [pc, #180]	; (c004c28 <HAL_SD_WriteBlocks+0x314>)
 c004b74:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 c004b76:	68fb      	ldr	r3, [r7, #12]
 c004b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c004b7a:	f043 0208 	orr.w	r2, r3, #8
 c004b7e:	68fb      	ldr	r3, [r7, #12]
 c004b80:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 c004b82:	68fb      	ldr	r3, [r7, #12]
 c004b84:	2201      	movs	r2, #1
 c004b86:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 c004b8a:	68fb      	ldr	r3, [r7, #12]
 c004b8c:	2200      	movs	r2, #0
 c004b8e:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 c004b90:	2301      	movs	r3, #1
 c004b92:	e044      	b.n	c004c1e <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 c004b94:	68fb      	ldr	r3, [r7, #12]
 c004b96:	681b      	ldr	r3, [r3, #0]
 c004b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c004b9a:	f003 0302 	and.w	r3, r3, #2
 c004b9e:	2b00      	cmp	r3, #0
 c004ba0:	d012      	beq.n	c004bc8 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 c004ba2:	68fb      	ldr	r3, [r7, #12]
 c004ba4:	681b      	ldr	r3, [r3, #0]
 c004ba6:	4a20      	ldr	r2, [pc, #128]	; (c004c28 <HAL_SD_WriteBlocks+0x314>)
 c004ba8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 c004baa:	68fb      	ldr	r3, [r7, #12]
 c004bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c004bae:	f043 0202 	orr.w	r2, r3, #2
 c004bb2:	68fb      	ldr	r3, [r7, #12]
 c004bb4:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 c004bb6:	68fb      	ldr	r3, [r7, #12]
 c004bb8:	2201      	movs	r2, #1
 c004bba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 c004bbe:	68fb      	ldr	r3, [r7, #12]
 c004bc0:	2200      	movs	r2, #0
 c004bc2:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 c004bc4:	2301      	movs	r3, #1
 c004bc6:	e02a      	b.n	c004c1e <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 c004bc8:	68fb      	ldr	r3, [r7, #12]
 c004bca:	681b      	ldr	r3, [r3, #0]
 c004bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c004bce:	f003 0310 	and.w	r3, r3, #16
 c004bd2:	2b00      	cmp	r3, #0
 c004bd4:	d012      	beq.n	c004bfc <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 c004bd6:	68fb      	ldr	r3, [r7, #12]
 c004bd8:	681b      	ldr	r3, [r3, #0]
 c004bda:	4a13      	ldr	r2, [pc, #76]	; (c004c28 <HAL_SD_WriteBlocks+0x314>)
 c004bdc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 c004bde:	68fb      	ldr	r3, [r7, #12]
 c004be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c004be2:	f043 0210 	orr.w	r2, r3, #16
 c004be6:	68fb      	ldr	r3, [r7, #12]
 c004be8:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 c004bea:	68fb      	ldr	r3, [r7, #12]
 c004bec:	2201      	movs	r2, #1
 c004bee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 c004bf2:	68fb      	ldr	r3, [r7, #12]
 c004bf4:	2200      	movs	r2, #0
 c004bf6:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 c004bf8:	2301      	movs	r3, #1
 c004bfa:	e010      	b.n	c004c1e <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 c004bfc:	68fb      	ldr	r3, [r7, #12]
 c004bfe:	681b      	ldr	r3, [r3, #0]
 c004c00:	4a0a      	ldr	r2, [pc, #40]	; (c004c2c <HAL_SD_WriteBlocks+0x318>)
 c004c02:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 c004c04:	68fb      	ldr	r3, [r7, #12]
 c004c06:	2201      	movs	r2, #1
 c004c08:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 c004c0c:	2300      	movs	r3, #0
 c004c0e:	e006      	b.n	c004c1e <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 c004c10:	68fb      	ldr	r3, [r7, #12]
 c004c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c004c14:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 c004c18:	68fb      	ldr	r3, [r7, #12]
 c004c1a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 c004c1c:	2301      	movs	r3, #1
  }
}
 c004c1e:	4618      	mov	r0, r3
 c004c20:	3748      	adds	r7, #72	; 0x48
 c004c22:	46bd      	mov	sp, r7
 c004c24:	bd80      	pop	{r7, pc}
 c004c26:	bf00      	nop
 c004c28:	1fe00fff 	.word	0x1fe00fff
 c004c2c:	18000f3a 	.word	0x18000f3a

0c004c30 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 c004c30:	b480      	push	{r7}
 c004c32:	b083      	sub	sp, #12
 c004c34:	af00      	add	r7, sp, #0
 c004c36:	6078      	str	r0, [r7, #4]
 c004c38:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 c004c3a:	687b      	ldr	r3, [r7, #4]
 c004c3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c004c3e:	0f9b      	lsrs	r3, r3, #30
 c004c40:	b2da      	uxtb	r2, r3
 c004c42:	683b      	ldr	r3, [r7, #0]
 c004c44:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 c004c46:	687b      	ldr	r3, [r7, #4]
 c004c48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c004c4a:	0e9b      	lsrs	r3, r3, #26
 c004c4c:	b2db      	uxtb	r3, r3
 c004c4e:	f003 030f 	and.w	r3, r3, #15
 c004c52:	b2da      	uxtb	r2, r3
 c004c54:	683b      	ldr	r3, [r7, #0]
 c004c56:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 c004c58:	687b      	ldr	r3, [r7, #4]
 c004c5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c004c5c:	0e1b      	lsrs	r3, r3, #24
 c004c5e:	b2db      	uxtb	r3, r3
 c004c60:	f003 0303 	and.w	r3, r3, #3
 c004c64:	b2da      	uxtb	r2, r3
 c004c66:	683b      	ldr	r3, [r7, #0]
 c004c68:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 c004c6a:	687b      	ldr	r3, [r7, #4]
 c004c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c004c6e:	0c1b      	lsrs	r3, r3, #16
 c004c70:	b2da      	uxtb	r2, r3
 c004c72:	683b      	ldr	r3, [r7, #0]
 c004c74:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 c004c76:	687b      	ldr	r3, [r7, #4]
 c004c78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c004c7a:	0a1b      	lsrs	r3, r3, #8
 c004c7c:	b2da      	uxtb	r2, r3
 c004c7e:	683b      	ldr	r3, [r7, #0]
 c004c80:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 c004c82:	687b      	ldr	r3, [r7, #4]
 c004c84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c004c86:	b2da      	uxtb	r2, r3
 c004c88:	683b      	ldr	r3, [r7, #0]
 c004c8a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 c004c8c:	687b      	ldr	r3, [r7, #4]
 c004c8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c004c90:	0d1b      	lsrs	r3, r3, #20
 c004c92:	b29a      	uxth	r2, r3
 c004c94:	683b      	ldr	r3, [r7, #0]
 c004c96:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 c004c98:	687b      	ldr	r3, [r7, #4]
 c004c9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c004c9c:	0c1b      	lsrs	r3, r3, #16
 c004c9e:	b2db      	uxtb	r3, r3
 c004ca0:	f003 030f 	and.w	r3, r3, #15
 c004ca4:	b2da      	uxtb	r2, r3
 c004ca6:	683b      	ldr	r3, [r7, #0]
 c004ca8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 c004caa:	687b      	ldr	r3, [r7, #4]
 c004cac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c004cae:	0bdb      	lsrs	r3, r3, #15
 c004cb0:	b2db      	uxtb	r3, r3
 c004cb2:	f003 0301 	and.w	r3, r3, #1
 c004cb6:	b2da      	uxtb	r2, r3
 c004cb8:	683b      	ldr	r3, [r7, #0]
 c004cba:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 c004cbc:	687b      	ldr	r3, [r7, #4]
 c004cbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c004cc0:	0b9b      	lsrs	r3, r3, #14
 c004cc2:	b2db      	uxtb	r3, r3
 c004cc4:	f003 0301 	and.w	r3, r3, #1
 c004cc8:	b2da      	uxtb	r2, r3
 c004cca:	683b      	ldr	r3, [r7, #0]
 c004ccc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 c004cce:	687b      	ldr	r3, [r7, #4]
 c004cd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c004cd2:	0b5b      	lsrs	r3, r3, #13
 c004cd4:	b2db      	uxtb	r3, r3
 c004cd6:	f003 0301 	and.w	r3, r3, #1
 c004cda:	b2da      	uxtb	r2, r3
 c004cdc:	683b      	ldr	r3, [r7, #0]
 c004cde:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 c004ce0:	687b      	ldr	r3, [r7, #4]
 c004ce2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c004ce4:	0b1b      	lsrs	r3, r3, #12
 c004ce6:	b2db      	uxtb	r3, r3
 c004ce8:	f003 0301 	and.w	r3, r3, #1
 c004cec:	b2da      	uxtb	r2, r3
 c004cee:	683b      	ldr	r3, [r7, #0]
 c004cf0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 c004cf2:	683b      	ldr	r3, [r7, #0]
 c004cf4:	2200      	movs	r2, #0
 c004cf6:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 c004cf8:	687b      	ldr	r3, [r7, #4]
 c004cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c004cfc:	2b00      	cmp	r3, #0
 c004cfe:	d163      	bne.n	c004dc8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 c004d00:	687b      	ldr	r3, [r7, #4]
 c004d02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c004d04:	009a      	lsls	r2, r3, #2
 c004d06:	f640 73fc 	movw	r3, #4092	; 0xffc
 c004d0a:	4013      	ands	r3, r2
 c004d0c:	687a      	ldr	r2, [r7, #4]
 c004d0e:	6e52      	ldr	r2, [r2, #100]	; 0x64
 c004d10:	0f92      	lsrs	r2, r2, #30
 c004d12:	431a      	orrs	r2, r3
 c004d14:	683b      	ldr	r3, [r7, #0]
 c004d16:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 c004d18:	687b      	ldr	r3, [r7, #4]
 c004d1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 c004d1c:	0edb      	lsrs	r3, r3, #27
 c004d1e:	b2db      	uxtb	r3, r3
 c004d20:	f003 0307 	and.w	r3, r3, #7
 c004d24:	b2da      	uxtb	r2, r3
 c004d26:	683b      	ldr	r3, [r7, #0]
 c004d28:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 c004d2a:	687b      	ldr	r3, [r7, #4]
 c004d2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 c004d2e:	0e1b      	lsrs	r3, r3, #24
 c004d30:	b2db      	uxtb	r3, r3
 c004d32:	f003 0307 	and.w	r3, r3, #7
 c004d36:	b2da      	uxtb	r2, r3
 c004d38:	683b      	ldr	r3, [r7, #0]
 c004d3a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 c004d3c:	687b      	ldr	r3, [r7, #4]
 c004d3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 c004d40:	0d5b      	lsrs	r3, r3, #21
 c004d42:	b2db      	uxtb	r3, r3
 c004d44:	f003 0307 	and.w	r3, r3, #7
 c004d48:	b2da      	uxtb	r2, r3
 c004d4a:	683b      	ldr	r3, [r7, #0]
 c004d4c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 c004d4e:	687b      	ldr	r3, [r7, #4]
 c004d50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 c004d52:	0c9b      	lsrs	r3, r3, #18
 c004d54:	b2db      	uxtb	r3, r3
 c004d56:	f003 0307 	and.w	r3, r3, #7
 c004d5a:	b2da      	uxtb	r2, r3
 c004d5c:	683b      	ldr	r3, [r7, #0]
 c004d5e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 c004d60:	687b      	ldr	r3, [r7, #4]
 c004d62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 c004d64:	0bdb      	lsrs	r3, r3, #15
 c004d66:	b2db      	uxtb	r3, r3
 c004d68:	f003 0307 	and.w	r3, r3, #7
 c004d6c:	b2da      	uxtb	r2, r3
 c004d6e:	683b      	ldr	r3, [r7, #0]
 c004d70:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 c004d72:	683b      	ldr	r3, [r7, #0]
 c004d74:	691b      	ldr	r3, [r3, #16]
 c004d76:	1c5a      	adds	r2, r3, #1
 c004d78:	687b      	ldr	r3, [r7, #4]
 c004d7a:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 c004d7c:	683b      	ldr	r3, [r7, #0]
 c004d7e:	7e1b      	ldrb	r3, [r3, #24]
 c004d80:	b2db      	uxtb	r3, r3
 c004d82:	f003 0307 	and.w	r3, r3, #7
 c004d86:	3302      	adds	r3, #2
 c004d88:	2201      	movs	r2, #1
 c004d8a:	fa02 f303 	lsl.w	r3, r2, r3
 c004d8e:	687a      	ldr	r2, [r7, #4]
 c004d90:	6c92      	ldr	r2, [r2, #72]	; 0x48
 c004d92:	fb03 f202 	mul.w	r2, r3, r2
 c004d96:	687b      	ldr	r3, [r7, #4]
 c004d98:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 c004d9a:	683b      	ldr	r3, [r7, #0]
 c004d9c:	7a1b      	ldrb	r3, [r3, #8]
 c004d9e:	b2db      	uxtb	r3, r3
 c004da0:	f003 030f 	and.w	r3, r3, #15
 c004da4:	2201      	movs	r2, #1
 c004da6:	409a      	lsls	r2, r3
 c004da8:	687b      	ldr	r3, [r7, #4]
 c004daa:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 c004dac:	687b      	ldr	r3, [r7, #4]
 c004dae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c004db0:	687a      	ldr	r2, [r7, #4]
 c004db2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 c004db4:	0a52      	lsrs	r2, r2, #9
 c004db6:	fb03 f202 	mul.w	r2, r3, r2
 c004dba:	687b      	ldr	r3, [r7, #4]
 c004dbc:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 c004dbe:	687b      	ldr	r3, [r7, #4]
 c004dc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 c004dc4:	655a      	str	r2, [r3, #84]	; 0x54
 c004dc6:	e031      	b.n	c004e2c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 c004dc8:	687b      	ldr	r3, [r7, #4]
 c004dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c004dcc:	2b01      	cmp	r3, #1
 c004dce:	d11d      	bne.n	c004e0c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 c004dd0:	687b      	ldr	r3, [r7, #4]
 c004dd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c004dd4:	041b      	lsls	r3, r3, #16
 c004dd6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 c004dda:	687b      	ldr	r3, [r7, #4]
 c004ddc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 c004dde:	0c1b      	lsrs	r3, r3, #16
 c004de0:	431a      	orrs	r2, r3
 c004de2:	683b      	ldr	r3, [r7, #0]
 c004de4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 c004de6:	683b      	ldr	r3, [r7, #0]
 c004de8:	691b      	ldr	r3, [r3, #16]
 c004dea:	3301      	adds	r3, #1
 c004dec:	029a      	lsls	r2, r3, #10
 c004dee:	687b      	ldr	r3, [r7, #4]
 c004df0:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 c004df2:	687b      	ldr	r3, [r7, #4]
 c004df4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 c004df6:	687b      	ldr	r3, [r7, #4]
 c004df8:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 c004dfa:	687b      	ldr	r3, [r7, #4]
 c004dfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 c004e00:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 c004e02:	687b      	ldr	r3, [r7, #4]
 c004e04:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 c004e06:	687b      	ldr	r3, [r7, #4]
 c004e08:	655a      	str	r2, [r3, #84]	; 0x54
 c004e0a:	e00f      	b.n	c004e2c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 c004e0c:	687b      	ldr	r3, [r7, #4]
 c004e0e:	681b      	ldr	r3, [r3, #0]
 c004e10:	4a58      	ldr	r2, [pc, #352]	; (c004f74 <HAL_SD_GetCardCSD+0x344>)
 c004e12:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 c004e14:	687b      	ldr	r3, [r7, #4]
 c004e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c004e18:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 c004e1c:	687b      	ldr	r3, [r7, #4]
 c004e1e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 c004e20:	687b      	ldr	r3, [r7, #4]
 c004e22:	2201      	movs	r2, #1
 c004e24:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 c004e28:	2301      	movs	r3, #1
 c004e2a:	e09d      	b.n	c004f68 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 c004e2c:	687b      	ldr	r3, [r7, #4]
 c004e2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 c004e30:	0b9b      	lsrs	r3, r3, #14
 c004e32:	b2db      	uxtb	r3, r3
 c004e34:	f003 0301 	and.w	r3, r3, #1
 c004e38:	b2da      	uxtb	r2, r3
 c004e3a:	683b      	ldr	r3, [r7, #0]
 c004e3c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 c004e3e:	687b      	ldr	r3, [r7, #4]
 c004e40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 c004e42:	09db      	lsrs	r3, r3, #7
 c004e44:	b2db      	uxtb	r3, r3
 c004e46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 c004e4a:	b2da      	uxtb	r2, r3
 c004e4c:	683b      	ldr	r3, [r7, #0]
 c004e4e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 c004e50:	687b      	ldr	r3, [r7, #4]
 c004e52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 c004e54:	b2db      	uxtb	r3, r3
 c004e56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 c004e5a:	b2da      	uxtb	r2, r3
 c004e5c:	683b      	ldr	r3, [r7, #0]
 c004e5e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 c004e60:	687b      	ldr	r3, [r7, #4]
 c004e62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 c004e64:	0fdb      	lsrs	r3, r3, #31
 c004e66:	b2da      	uxtb	r2, r3
 c004e68:	683b      	ldr	r3, [r7, #0]
 c004e6a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 c004e6c:	687b      	ldr	r3, [r7, #4]
 c004e6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 c004e70:	0f5b      	lsrs	r3, r3, #29
 c004e72:	b2db      	uxtb	r3, r3
 c004e74:	f003 0303 	and.w	r3, r3, #3
 c004e78:	b2da      	uxtb	r2, r3
 c004e7a:	683b      	ldr	r3, [r7, #0]
 c004e7c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 c004e7e:	687b      	ldr	r3, [r7, #4]
 c004e80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 c004e82:	0e9b      	lsrs	r3, r3, #26
 c004e84:	b2db      	uxtb	r3, r3
 c004e86:	f003 0307 	and.w	r3, r3, #7
 c004e8a:	b2da      	uxtb	r2, r3
 c004e8c:	683b      	ldr	r3, [r7, #0]
 c004e8e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 c004e90:	687b      	ldr	r3, [r7, #4]
 c004e92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 c004e94:	0d9b      	lsrs	r3, r3, #22
 c004e96:	b2db      	uxtb	r3, r3
 c004e98:	f003 030f 	and.w	r3, r3, #15
 c004e9c:	b2da      	uxtb	r2, r3
 c004e9e:	683b      	ldr	r3, [r7, #0]
 c004ea0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 c004ea2:	687b      	ldr	r3, [r7, #4]
 c004ea4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 c004ea6:	0d5b      	lsrs	r3, r3, #21
 c004ea8:	b2db      	uxtb	r3, r3
 c004eaa:	f003 0301 	and.w	r3, r3, #1
 c004eae:	b2da      	uxtb	r2, r3
 c004eb0:	683b      	ldr	r3, [r7, #0]
 c004eb2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 c004eb6:	683b      	ldr	r3, [r7, #0]
 c004eb8:	2200      	movs	r2, #0
 c004eba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 c004ebe:	687b      	ldr	r3, [r7, #4]
 c004ec0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 c004ec2:	0c1b      	lsrs	r3, r3, #16
 c004ec4:	b2db      	uxtb	r3, r3
 c004ec6:	f003 0301 	and.w	r3, r3, #1
 c004eca:	b2da      	uxtb	r2, r3
 c004ecc:	683b      	ldr	r3, [r7, #0]
 c004ece:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 c004ed2:	687b      	ldr	r3, [r7, #4]
 c004ed4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 c004ed6:	0bdb      	lsrs	r3, r3, #15
 c004ed8:	b2db      	uxtb	r3, r3
 c004eda:	f003 0301 	and.w	r3, r3, #1
 c004ede:	b2da      	uxtb	r2, r3
 c004ee0:	683b      	ldr	r3, [r7, #0]
 c004ee2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 c004ee6:	687b      	ldr	r3, [r7, #4]
 c004ee8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 c004eea:	0b9b      	lsrs	r3, r3, #14
 c004eec:	b2db      	uxtb	r3, r3
 c004eee:	f003 0301 	and.w	r3, r3, #1
 c004ef2:	b2da      	uxtb	r2, r3
 c004ef4:	683b      	ldr	r3, [r7, #0]
 c004ef6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 c004efa:	687b      	ldr	r3, [r7, #4]
 c004efc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 c004efe:	0b5b      	lsrs	r3, r3, #13
 c004f00:	b2db      	uxtb	r3, r3
 c004f02:	f003 0301 	and.w	r3, r3, #1
 c004f06:	b2da      	uxtb	r2, r3
 c004f08:	683b      	ldr	r3, [r7, #0]
 c004f0a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 c004f0e:	687b      	ldr	r3, [r7, #4]
 c004f10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 c004f12:	0b1b      	lsrs	r3, r3, #12
 c004f14:	b2db      	uxtb	r3, r3
 c004f16:	f003 0301 	and.w	r3, r3, #1
 c004f1a:	b2da      	uxtb	r2, r3
 c004f1c:	683b      	ldr	r3, [r7, #0]
 c004f1e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 c004f22:	687b      	ldr	r3, [r7, #4]
 c004f24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 c004f26:	0a9b      	lsrs	r3, r3, #10
 c004f28:	b2db      	uxtb	r3, r3
 c004f2a:	f003 0303 	and.w	r3, r3, #3
 c004f2e:	b2da      	uxtb	r2, r3
 c004f30:	683b      	ldr	r3, [r7, #0]
 c004f32:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 c004f36:	687b      	ldr	r3, [r7, #4]
 c004f38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 c004f3a:	0a1b      	lsrs	r3, r3, #8
 c004f3c:	b2db      	uxtb	r3, r3
 c004f3e:	f003 0303 	and.w	r3, r3, #3
 c004f42:	b2da      	uxtb	r2, r3
 c004f44:	683b      	ldr	r3, [r7, #0]
 c004f46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 c004f4a:	687b      	ldr	r3, [r7, #4]
 c004f4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 c004f4e:	085b      	lsrs	r3, r3, #1
 c004f50:	b2db      	uxtb	r3, r3
 c004f52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 c004f56:	b2da      	uxtb	r2, r3
 c004f58:	683b      	ldr	r3, [r7, #0]
 c004f5a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 c004f5e:	683b      	ldr	r3, [r7, #0]
 c004f60:	2201      	movs	r2, #1
 c004f62:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 c004f66:	2300      	movs	r3, #0
}
 c004f68:	4618      	mov	r0, r3
 c004f6a:	370c      	adds	r7, #12
 c004f6c:	46bd      	mov	sp, r7
 c004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c004f72:	4770      	bx	lr
 c004f74:	1fe00fff 	.word	0x1fe00fff

0c004f78 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 c004f78:	b580      	push	{r7, lr}
 c004f7a:	b094      	sub	sp, #80	; 0x50
 c004f7c:	af00      	add	r7, sp, #0
 c004f7e:	6078      	str	r0, [r7, #4]
 c004f80:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 c004f82:	2300      	movs	r3, #0
 c004f84:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 c004f88:	687b      	ldr	r3, [r7, #4]
 c004f8a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 c004f8e:	b2db      	uxtb	r3, r3
 c004f90:	2b03      	cmp	r3, #3
 c004f92:	d101      	bne.n	c004f98 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 c004f94:	2301      	movs	r3, #1
 c004f96:	e0a7      	b.n	c0050e8 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 c004f98:	f107 0308 	add.w	r3, r7, #8
 c004f9c:	4619      	mov	r1, r3
 c004f9e:	6878      	ldr	r0, [r7, #4]
 c004fa0:	f000 fb60 	bl	c005664 <SD_SendSDStatus>
 c004fa4:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 c004fa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 c004fa8:	2b00      	cmp	r3, #0
 c004faa:	d011      	beq.n	c004fd0 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 c004fac:	687b      	ldr	r3, [r7, #4]
 c004fae:	681b      	ldr	r3, [r3, #0]
 c004fb0:	4a4f      	ldr	r2, [pc, #316]	; (c0050f0 <HAL_SD_GetCardStatus+0x178>)
 c004fb2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 c004fb4:	687b      	ldr	r3, [r7, #4]
 c004fb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 c004fb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 c004fba:	431a      	orrs	r2, r3
 c004fbc:	687b      	ldr	r3, [r7, #4]
 c004fbe:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 c004fc0:	687b      	ldr	r3, [r7, #4]
 c004fc2:	2201      	movs	r2, #1
 c004fc4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 c004fc8:	2301      	movs	r3, #1
 c004fca:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 c004fce:	e070      	b.n	c0050b2 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 c004fd0:	68bb      	ldr	r3, [r7, #8]
 c004fd2:	099b      	lsrs	r3, r3, #6
 c004fd4:	b2db      	uxtb	r3, r3
 c004fd6:	f003 0303 	and.w	r3, r3, #3
 c004fda:	b2da      	uxtb	r2, r3
 c004fdc:	683b      	ldr	r3, [r7, #0]
 c004fde:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 c004fe0:	68bb      	ldr	r3, [r7, #8]
 c004fe2:	095b      	lsrs	r3, r3, #5
 c004fe4:	b2db      	uxtb	r3, r3
 c004fe6:	f003 0301 	and.w	r3, r3, #1
 c004fea:	b2da      	uxtb	r2, r3
 c004fec:	683b      	ldr	r3, [r7, #0]
 c004fee:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 c004ff0:	68bb      	ldr	r3, [r7, #8]
 c004ff2:	0a1b      	lsrs	r3, r3, #8
 c004ff4:	b29b      	uxth	r3, r3
 c004ff6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 c004ffa:	b29a      	uxth	r2, r3
 c004ffc:	68bb      	ldr	r3, [r7, #8]
 c004ffe:	0e1b      	lsrs	r3, r3, #24
 c005000:	b29b      	uxth	r3, r3
 c005002:	4313      	orrs	r3, r2
 c005004:	b29a      	uxth	r2, r3
 c005006:	683b      	ldr	r3, [r7, #0]
 c005008:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 c00500a:	68fb      	ldr	r3, [r7, #12]
 c00500c:	061a      	lsls	r2, r3, #24
 c00500e:	68fb      	ldr	r3, [r7, #12]
 c005010:	021b      	lsls	r3, r3, #8
 c005012:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 c005016:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 c005018:	68fb      	ldr	r3, [r7, #12]
 c00501a:	0a1b      	lsrs	r3, r3, #8
 c00501c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 c005020:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 c005022:	68fb      	ldr	r3, [r7, #12]
 c005024:	0e1b      	lsrs	r3, r3, #24
 c005026:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 c005028:	683b      	ldr	r3, [r7, #0]
 c00502a:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 c00502c:	693b      	ldr	r3, [r7, #16]
 c00502e:	b2da      	uxtb	r2, r3
 c005030:	683b      	ldr	r3, [r7, #0]
 c005032:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 c005034:	693b      	ldr	r3, [r7, #16]
 c005036:	0a1b      	lsrs	r3, r3, #8
 c005038:	b2da      	uxtb	r2, r3
 c00503a:	683b      	ldr	r3, [r7, #0]
 c00503c:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 c00503e:	693b      	ldr	r3, [r7, #16]
 c005040:	0d1b      	lsrs	r3, r3, #20
 c005042:	b2db      	uxtb	r3, r3
 c005044:	f003 030f 	and.w	r3, r3, #15
 c005048:	b2da      	uxtb	r2, r3
 c00504a:	683b      	ldr	r3, [r7, #0]
 c00504c:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 c00504e:	693b      	ldr	r3, [r7, #16]
 c005050:	0c1b      	lsrs	r3, r3, #16
 c005052:	b29b      	uxth	r3, r3
 c005054:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 c005058:	b29a      	uxth	r2, r3
 c00505a:	697b      	ldr	r3, [r7, #20]
 c00505c:	b29b      	uxth	r3, r3
 c00505e:	b2db      	uxtb	r3, r3
 c005060:	b29b      	uxth	r3, r3
 c005062:	4313      	orrs	r3, r2
 c005064:	b29a      	uxth	r2, r3
 c005066:	683b      	ldr	r3, [r7, #0]
 c005068:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 c00506a:	697b      	ldr	r3, [r7, #20]
 c00506c:	0a9b      	lsrs	r3, r3, #10
 c00506e:	b2db      	uxtb	r3, r3
 c005070:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 c005074:	b2da      	uxtb	r2, r3
 c005076:	683b      	ldr	r3, [r7, #0]
 c005078:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 c00507a:	697b      	ldr	r3, [r7, #20]
 c00507c:	0a1b      	lsrs	r3, r3, #8
 c00507e:	b2db      	uxtb	r3, r3
 c005080:	f003 0303 	and.w	r3, r3, #3
 c005084:	b2da      	uxtb	r2, r3
 c005086:	683b      	ldr	r3, [r7, #0]
 c005088:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 c00508a:	697b      	ldr	r3, [r7, #20]
 c00508c:	091b      	lsrs	r3, r3, #4
 c00508e:	b2db      	uxtb	r3, r3
 c005090:	f003 030f 	and.w	r3, r3, #15
 c005094:	b2da      	uxtb	r2, r3
 c005096:	683b      	ldr	r3, [r7, #0]
 c005098:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 c00509a:	697b      	ldr	r3, [r7, #20]
 c00509c:	b2db      	uxtb	r3, r3
 c00509e:	f003 030f 	and.w	r3, r3, #15
 c0050a2:	b2da      	uxtb	r2, r3
 c0050a4:	683b      	ldr	r3, [r7, #0]
 c0050a6:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 c0050a8:	69bb      	ldr	r3, [r7, #24]
 c0050aa:	0e1b      	lsrs	r3, r3, #24
 c0050ac:	b2da      	uxtb	r2, r3
 c0050ae:	683b      	ldr	r3, [r7, #0]
 c0050b0:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 c0050b2:	687b      	ldr	r3, [r7, #4]
 c0050b4:	681b      	ldr	r3, [r3, #0]
 c0050b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 c0050ba:	4618      	mov	r0, r3
 c0050bc:	f001 f8d6 	bl	c00626c <SDMMC_CmdBlockLength>
 c0050c0:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 c0050c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 c0050c4:	2b00      	cmp	r3, #0
 c0050c6:	d00d      	beq.n	c0050e4 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 c0050c8:	687b      	ldr	r3, [r7, #4]
 c0050ca:	681b      	ldr	r3, [r3, #0]
 c0050cc:	4a08      	ldr	r2, [pc, #32]	; (c0050f0 <HAL_SD_GetCardStatus+0x178>)
 c0050ce:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 c0050d0:	687b      	ldr	r3, [r7, #4]
 c0050d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 c0050d4:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 c0050d6:	687b      	ldr	r3, [r7, #4]
 c0050d8:	2201      	movs	r2, #1
 c0050da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 c0050de:	2301      	movs	r3, #1
 c0050e0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 c0050e4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 c0050e8:	4618      	mov	r0, r3
 c0050ea:	3750      	adds	r7, #80	; 0x50
 c0050ec:	46bd      	mov	sp, r7
 c0050ee:	bd80      	pop	{r7, pc}
 c0050f0:	1fe00fff 	.word	0x1fe00fff

0c0050f4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 c0050f4:	b480      	push	{r7}
 c0050f6:	b083      	sub	sp, #12
 c0050f8:	af00      	add	r7, sp, #0
 c0050fa:	6078      	str	r0, [r7, #4]
 c0050fc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 c0050fe:	687b      	ldr	r3, [r7, #4]
 c005100:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 c005102:	683b      	ldr	r3, [r7, #0]
 c005104:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 c005106:	687b      	ldr	r3, [r7, #4]
 c005108:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 c00510a:	683b      	ldr	r3, [r7, #0]
 c00510c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 c00510e:	687b      	ldr	r3, [r7, #4]
 c005110:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 c005112:	683b      	ldr	r3, [r7, #0]
 c005114:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 c005116:	687b      	ldr	r3, [r7, #4]
 c005118:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 c00511a:	683b      	ldr	r3, [r7, #0]
 c00511c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 c00511e:	687b      	ldr	r3, [r7, #4]
 c005120:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 c005122:	683b      	ldr	r3, [r7, #0]
 c005124:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 c005126:	687b      	ldr	r3, [r7, #4]
 c005128:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 c00512a:	683b      	ldr	r3, [r7, #0]
 c00512c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 c00512e:	687b      	ldr	r3, [r7, #4]
 c005130:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 c005132:	683b      	ldr	r3, [r7, #0]
 c005134:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 c005136:	687b      	ldr	r3, [r7, #4]
 c005138:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 c00513a:	683b      	ldr	r3, [r7, #0]
 c00513c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 c00513e:	2300      	movs	r3, #0
}
 c005140:	4618      	mov	r0, r3
 c005142:	370c      	adds	r7, #12
 c005144:	46bd      	mov	sp, r7
 c005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00514a:	4770      	bx	lr

0c00514c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 c00514c:	b590      	push	{r4, r7, lr}
 c00514e:	b08d      	sub	sp, #52	; 0x34
 c005150:	af02      	add	r7, sp, #8
 c005152:	6078      	str	r0, [r7, #4]
 c005154:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 c005156:	2300      	movs	r3, #0
 c005158:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 c00515c:	687b      	ldr	r3, [r7, #4]
 c00515e:	2203      	movs	r2, #3
 c005160:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 c005164:	687b      	ldr	r3, [r7, #4]
 c005166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c005168:	2b03      	cmp	r3, #3
 c00516a:	d02e      	beq.n	c0051ca <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 c00516c:	683b      	ldr	r3, [r7, #0]
 c00516e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c005172:	d106      	bne.n	c005182 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 c005174:	687b      	ldr	r3, [r7, #4]
 c005176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c005178:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 c00517c:	687b      	ldr	r3, [r7, #4]
 c00517e:	635a      	str	r2, [r3, #52]	; 0x34
 c005180:	e029      	b.n	c0051d6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 c005182:	683b      	ldr	r3, [r7, #0]
 c005184:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 c005188:	d10a      	bne.n	c0051a0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 c00518a:	6878      	ldr	r0, [r7, #4]
 c00518c:	f000 fb62 	bl	c005854 <SD_WideBus_Enable>
 c005190:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 c005192:	687b      	ldr	r3, [r7, #4]
 c005194:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 c005196:	6a3b      	ldr	r3, [r7, #32]
 c005198:	431a      	orrs	r2, r3
 c00519a:	687b      	ldr	r3, [r7, #4]
 c00519c:	635a      	str	r2, [r3, #52]	; 0x34
 c00519e:	e01a      	b.n	c0051d6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 c0051a0:	683b      	ldr	r3, [r7, #0]
 c0051a2:	2b00      	cmp	r3, #0
 c0051a4:	d10a      	bne.n	c0051bc <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 c0051a6:	6878      	ldr	r0, [r7, #4]
 c0051a8:	f000 fb9f 	bl	c0058ea <SD_WideBus_Disable>
 c0051ac:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 c0051ae:	687b      	ldr	r3, [r7, #4]
 c0051b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 c0051b2:	6a3b      	ldr	r3, [r7, #32]
 c0051b4:	431a      	orrs	r2, r3
 c0051b6:	687b      	ldr	r3, [r7, #4]
 c0051b8:	635a      	str	r2, [r3, #52]	; 0x34
 c0051ba:	e00c      	b.n	c0051d6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 c0051bc:	687b      	ldr	r3, [r7, #4]
 c0051be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c0051c0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 c0051c4:	687b      	ldr	r3, [r7, #4]
 c0051c6:	635a      	str	r2, [r3, #52]	; 0x34
 c0051c8:	e005      	b.n	c0051d6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 c0051ca:	687b      	ldr	r3, [r7, #4]
 c0051cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c0051ce:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 c0051d2:	687b      	ldr	r3, [r7, #4]
 c0051d4:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 c0051d6:	687b      	ldr	r3, [r7, #4]
 c0051d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c0051da:	2b00      	cmp	r3, #0
 c0051dc:	d007      	beq.n	c0051ee <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 c0051de:	687b      	ldr	r3, [r7, #4]
 c0051e0:	681b      	ldr	r3, [r3, #0]
 c0051e2:	4a5e      	ldr	r2, [pc, #376]	; (c00535c <HAL_SD_ConfigWideBusOperation+0x210>)
 c0051e4:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 c0051e6:	2301      	movs	r3, #1
 c0051e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 c0051ec:	e094      	b.n	c005318 <HAL_SD_ConfigWideBusOperation+0x1cc>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 c0051ee:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 c0051f2:	f7fd fe03 	bl	c002dfc <HAL_RCCEx_GetPeriphCLKFreq>
 c0051f6:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 c0051f8:	69fb      	ldr	r3, [r7, #28]
 c0051fa:	2b00      	cmp	r3, #0
 c0051fc:	f000 8083 	beq.w	c005306 <HAL_SD_ConfigWideBusOperation+0x1ba>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 c005200:	687b      	ldr	r3, [r7, #4]
 c005202:	685b      	ldr	r3, [r3, #4]
 c005204:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 c005206:	687b      	ldr	r3, [r7, #4]
 c005208:	689b      	ldr	r3, [r3, #8]
 c00520a:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 c00520c:	683b      	ldr	r3, [r7, #0]
 c00520e:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 c005210:	687b      	ldr	r3, [r7, #4]
 c005212:	691b      	ldr	r3, [r3, #16]
 c005214:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 c005216:	687b      	ldr	r3, [r7, #4]
 c005218:	695a      	ldr	r2, [r3, #20]
 c00521a:	69fb      	ldr	r3, [r7, #28]
 c00521c:	4950      	ldr	r1, [pc, #320]	; (c005360 <HAL_SD_ConfigWideBusOperation+0x214>)
 c00521e:	fba1 1303 	umull	r1, r3, r1, r3
 c005222:	0e1b      	lsrs	r3, r3, #24
 c005224:	429a      	cmp	r2, r3
 c005226:	d303      	bcc.n	c005230 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 c005228:	687b      	ldr	r3, [r7, #4]
 c00522a:	695b      	ldr	r3, [r3, #20]
 c00522c:	61bb      	str	r3, [r7, #24]
 c00522e:	e05a      	b.n	c0052e6 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 c005230:	687b      	ldr	r3, [r7, #4]
 c005232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c005234:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c005238:	d103      	bne.n	c005242 <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 c00523a:	687b      	ldr	r3, [r7, #4]
 c00523c:	695b      	ldr	r3, [r3, #20]
 c00523e:	61bb      	str	r3, [r7, #24]
 c005240:	e051      	b.n	c0052e6 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 c005242:	687b      	ldr	r3, [r7, #4]
 c005244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c005246:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 c00524a:	d126      	bne.n	c00529a <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 c00524c:	687b      	ldr	r3, [r7, #4]
 c00524e:	695b      	ldr	r3, [r3, #20]
 c005250:	2b00      	cmp	r3, #0
 c005252:	d10e      	bne.n	c005272 <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 c005254:	69fb      	ldr	r3, [r7, #28]
 c005256:	4a43      	ldr	r2, [pc, #268]	; (c005364 <HAL_SD_ConfigWideBusOperation+0x218>)
 c005258:	4293      	cmp	r3, r2
 c00525a:	d906      	bls.n	c00526a <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 c00525c:	69fb      	ldr	r3, [r7, #28]
 c00525e:	4a40      	ldr	r2, [pc, #256]	; (c005360 <HAL_SD_ConfigWideBusOperation+0x214>)
 c005260:	fba2 2303 	umull	r2, r3, r2, r3
 c005264:	0e5b      	lsrs	r3, r3, #25
 c005266:	61bb      	str	r3, [r7, #24]
 c005268:	e03d      	b.n	c0052e6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 c00526a:	687b      	ldr	r3, [r7, #4]
 c00526c:	695b      	ldr	r3, [r3, #20]
 c00526e:	61bb      	str	r3, [r7, #24]
 c005270:	e039      	b.n	c0052e6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 c005272:	687b      	ldr	r3, [r7, #4]
 c005274:	695b      	ldr	r3, [r3, #20]
 c005276:	005b      	lsls	r3, r3, #1
 c005278:	69fa      	ldr	r2, [r7, #28]
 c00527a:	fbb2 f3f3 	udiv	r3, r2, r3
 c00527e:	4a39      	ldr	r2, [pc, #228]	; (c005364 <HAL_SD_ConfigWideBusOperation+0x218>)
 c005280:	4293      	cmp	r3, r2
 c005282:	d906      	bls.n	c005292 <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 c005284:	69fb      	ldr	r3, [r7, #28]
 c005286:	4a36      	ldr	r2, [pc, #216]	; (c005360 <HAL_SD_ConfigWideBusOperation+0x214>)
 c005288:	fba2 2303 	umull	r2, r3, r2, r3
 c00528c:	0e5b      	lsrs	r3, r3, #25
 c00528e:	61bb      	str	r3, [r7, #24]
 c005290:	e029      	b.n	c0052e6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 c005292:	687b      	ldr	r3, [r7, #4]
 c005294:	695b      	ldr	r3, [r3, #20]
 c005296:	61bb      	str	r3, [r7, #24]
 c005298:	e025      	b.n	c0052e6 <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 c00529a:	687b      	ldr	r3, [r7, #4]
 c00529c:	695b      	ldr	r3, [r3, #20]
 c00529e:	2b00      	cmp	r3, #0
 c0052a0:	d10e      	bne.n	c0052c0 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 c0052a2:	69fb      	ldr	r3, [r7, #28]
 c0052a4:	4a30      	ldr	r2, [pc, #192]	; (c005368 <HAL_SD_ConfigWideBusOperation+0x21c>)
 c0052a6:	4293      	cmp	r3, r2
 c0052a8:	d906      	bls.n	c0052b8 <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 c0052aa:	69fb      	ldr	r3, [r7, #28]
 c0052ac:	4a2c      	ldr	r2, [pc, #176]	; (c005360 <HAL_SD_ConfigWideBusOperation+0x214>)
 c0052ae:	fba2 2303 	umull	r2, r3, r2, r3
 c0052b2:	0e1b      	lsrs	r3, r3, #24
 c0052b4:	61bb      	str	r3, [r7, #24]
 c0052b6:	e016      	b.n	c0052e6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 c0052b8:	687b      	ldr	r3, [r7, #4]
 c0052ba:	695b      	ldr	r3, [r3, #20]
 c0052bc:	61bb      	str	r3, [r7, #24]
 c0052be:	e012      	b.n	c0052e6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 c0052c0:	687b      	ldr	r3, [r7, #4]
 c0052c2:	695b      	ldr	r3, [r3, #20]
 c0052c4:	005b      	lsls	r3, r3, #1
 c0052c6:	69fa      	ldr	r2, [r7, #28]
 c0052c8:	fbb2 f3f3 	udiv	r3, r2, r3
 c0052cc:	4a26      	ldr	r2, [pc, #152]	; (c005368 <HAL_SD_ConfigWideBusOperation+0x21c>)
 c0052ce:	4293      	cmp	r3, r2
 c0052d0:	d906      	bls.n	c0052e0 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 c0052d2:	69fb      	ldr	r3, [r7, #28]
 c0052d4:	4a22      	ldr	r2, [pc, #136]	; (c005360 <HAL_SD_ConfigWideBusOperation+0x214>)
 c0052d6:	fba2 2303 	umull	r2, r3, r2, r3
 c0052da:	0e1b      	lsrs	r3, r3, #24
 c0052dc:	61bb      	str	r3, [r7, #24]
 c0052de:	e002      	b.n	c0052e6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 c0052e0:	687b      	ldr	r3, [r7, #4]
 c0052e2:	695b      	ldr	r3, [r3, #20]
 c0052e4:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 c0052e6:	687b      	ldr	r3, [r7, #4]
 c0052e8:	681c      	ldr	r4, [r3, #0]
 c0052ea:	466a      	mov	r2, sp
 c0052ec:	f107 0314 	add.w	r3, r7, #20
 c0052f0:	e893 0003 	ldmia.w	r3, {r0, r1}
 c0052f4:	e882 0003 	stmia.w	r2, {r0, r1}
 c0052f8:	f107 0308 	add.w	r3, r7, #8
 c0052fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 c0052fe:	4620      	mov	r0, r4
 c005300:	f000 fed6 	bl	c0060b0 <SDMMC_Init>
 c005304:	e008      	b.n	c005318 <HAL_SD_ConfigWideBusOperation+0x1cc>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 c005306:	687b      	ldr	r3, [r7, #4]
 c005308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c00530a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 c00530e:	687b      	ldr	r3, [r7, #4]
 c005310:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 c005312:	2301      	movs	r3, #1
 c005314:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 c005318:	687b      	ldr	r3, [r7, #4]
 c00531a:	681b      	ldr	r3, [r3, #0]
 c00531c:	f44f 7100 	mov.w	r1, #512	; 0x200
 c005320:	4618      	mov	r0, r3
 c005322:	f000 ffa3 	bl	c00626c <SDMMC_CmdBlockLength>
 c005326:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 c005328:	6a3b      	ldr	r3, [r7, #32]
 c00532a:	2b00      	cmp	r3, #0
 c00532c:	d00c      	beq.n	c005348 <HAL_SD_ConfigWideBusOperation+0x1fc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 c00532e:	687b      	ldr	r3, [r7, #4]
 c005330:	681b      	ldr	r3, [r3, #0]
 c005332:	4a0a      	ldr	r2, [pc, #40]	; (c00535c <HAL_SD_ConfigWideBusOperation+0x210>)
 c005334:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 c005336:	687b      	ldr	r3, [r7, #4]
 c005338:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 c00533a:	6a3b      	ldr	r3, [r7, #32]
 c00533c:	431a      	orrs	r2, r3
 c00533e:	687b      	ldr	r3, [r7, #4]
 c005340:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 c005342:	2301      	movs	r3, #1
 c005344:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 c005348:	687b      	ldr	r3, [r7, #4]
 c00534a:	2201      	movs	r2, #1
 c00534c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 c005350:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 c005354:	4618      	mov	r0, r3
 c005356:	372c      	adds	r7, #44	; 0x2c
 c005358:	46bd      	mov	sp, r7
 c00535a:	bd90      	pop	{r4, r7, pc}
 c00535c:	1fe00fff 	.word	0x1fe00fff
 c005360:	55e63b89 	.word	0x55e63b89
 c005364:	02faf080 	.word	0x02faf080
 c005368:	017d7840 	.word	0x017d7840

0c00536c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 c00536c:	b580      	push	{r7, lr}
 c00536e:	b086      	sub	sp, #24
 c005370:	af00      	add	r7, sp, #0
 c005372:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 c005374:	2300      	movs	r3, #0
 c005376:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 c005378:	f107 030c 	add.w	r3, r7, #12
 c00537c:	4619      	mov	r1, r3
 c00537e:	6878      	ldr	r0, [r7, #4]
 c005380:	f000 fa40 	bl	c005804 <SD_SendStatus>
 c005384:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 c005386:	697b      	ldr	r3, [r7, #20]
 c005388:	2b00      	cmp	r3, #0
 c00538a:	d005      	beq.n	c005398 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 c00538c:	687b      	ldr	r3, [r7, #4]
 c00538e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 c005390:	697b      	ldr	r3, [r7, #20]
 c005392:	431a      	orrs	r2, r3
 c005394:	687b      	ldr	r3, [r7, #4]
 c005396:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 c005398:	68fb      	ldr	r3, [r7, #12]
 c00539a:	0a5b      	lsrs	r3, r3, #9
 c00539c:	f003 030f 	and.w	r3, r3, #15
 c0053a0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 c0053a2:	693b      	ldr	r3, [r7, #16]
}
 c0053a4:	4618      	mov	r0, r3
 c0053a6:	3718      	adds	r7, #24
 c0053a8:	46bd      	mov	sp, r7
 c0053aa:	bd80      	pop	{r7, pc}

0c0053ac <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 c0053ac:	b580      	push	{r7, lr}
 c0053ae:	b090      	sub	sp, #64	; 0x40
 c0053b0:	af00      	add	r7, sp, #0
 c0053b2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 c0053b4:	2300      	movs	r3, #0
 c0053b6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 c0053b8:	f7fb fb68 	bl	c000a8c <HAL_GetTick>
 c0053bc:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 c0053be:	687b      	ldr	r3, [r7, #4]
 c0053c0:	681b      	ldr	r3, [r3, #0]
 c0053c2:	4618      	mov	r0, r3
 c0053c4:	f000 fecd 	bl	c006162 <SDMMC_GetPowerState>
 c0053c8:	4603      	mov	r3, r0
 c0053ca:	2b00      	cmp	r3, #0
 c0053cc:	d102      	bne.n	c0053d4 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 c0053ce:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 c0053d2:	e0b5      	b.n	c005540 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 c0053d4:	687b      	ldr	r3, [r7, #4]
 c0053d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c0053d8:	2b03      	cmp	r3, #3
 c0053da:	d02e      	beq.n	c00543a <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 c0053dc:	687b      	ldr	r3, [r7, #4]
 c0053de:	681b      	ldr	r3, [r3, #0]
 c0053e0:	4618      	mov	r0, r3
 c0053e2:	f001 f918 	bl	c006616 <SDMMC_CmdSendCID>
 c0053e6:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 c0053e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c0053ea:	2b00      	cmp	r3, #0
 c0053ec:	d001      	beq.n	c0053f2 <SD_InitCard+0x46>
    {
      return errorstate;
 c0053ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c0053f0:	e0a6      	b.n	c005540 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 c0053f2:	687b      	ldr	r3, [r7, #4]
 c0053f4:	681b      	ldr	r3, [r3, #0]
 c0053f6:	2100      	movs	r1, #0
 c0053f8:	4618      	mov	r0, r3
 c0053fa:	f000 fef8 	bl	c0061ee <SDMMC_GetResponse>
 c0053fe:	4602      	mov	r2, r0
 c005400:	687b      	ldr	r3, [r7, #4]
 c005402:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 c005404:	687b      	ldr	r3, [r7, #4]
 c005406:	681b      	ldr	r3, [r3, #0]
 c005408:	2104      	movs	r1, #4
 c00540a:	4618      	mov	r0, r3
 c00540c:	f000 feef 	bl	c0061ee <SDMMC_GetResponse>
 c005410:	4602      	mov	r2, r0
 c005412:	687b      	ldr	r3, [r7, #4]
 c005414:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 c005416:	687b      	ldr	r3, [r7, #4]
 c005418:	681b      	ldr	r3, [r3, #0]
 c00541a:	2108      	movs	r1, #8
 c00541c:	4618      	mov	r0, r3
 c00541e:	f000 fee6 	bl	c0061ee <SDMMC_GetResponse>
 c005422:	4602      	mov	r2, r0
 c005424:	687b      	ldr	r3, [r7, #4]
 c005426:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 c005428:	687b      	ldr	r3, [r7, #4]
 c00542a:	681b      	ldr	r3, [r3, #0]
 c00542c:	210c      	movs	r1, #12
 c00542e:	4618      	mov	r0, r3
 c005430:	f000 fedd 	bl	c0061ee <SDMMC_GetResponse>
 c005434:	4602      	mov	r2, r0
 c005436:	687b      	ldr	r3, [r7, #4]
 c005438:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 c00543a:	687b      	ldr	r3, [r7, #4]
 c00543c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c00543e:	2b03      	cmp	r3, #3
 c005440:	d01d      	beq.n	c00547e <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 c005442:	e019      	b.n	c005478 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 c005444:	687b      	ldr	r3, [r7, #4]
 c005446:	681b      	ldr	r3, [r3, #0]
 c005448:	f107 020a 	add.w	r2, r7, #10
 c00544c:	4611      	mov	r1, r2
 c00544e:	4618      	mov	r0, r3
 c005450:	f001 f920 	bl	c006694 <SDMMC_CmdSetRelAdd>
 c005454:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 c005456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c005458:	2b00      	cmp	r3, #0
 c00545a:	d001      	beq.n	c005460 <SD_InitCard+0xb4>
      {
        return errorstate;
 c00545c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c00545e:	e06f      	b.n	c005540 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 c005460:	f7fb fb14 	bl	c000a8c <HAL_GetTick>
 c005464:	4602      	mov	r2, r0
 c005466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 c005468:	1ad3      	subs	r3, r2, r3
 c00546a:	f241 3287 	movw	r2, #4999	; 0x1387
 c00546e:	4293      	cmp	r3, r2
 c005470:	d902      	bls.n	c005478 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 c005472:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 c005476:	e063      	b.n	c005540 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 c005478:	897b      	ldrh	r3, [r7, #10]
 c00547a:	2b00      	cmp	r3, #0
 c00547c:	d0e2      	beq.n	c005444 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 c00547e:	687b      	ldr	r3, [r7, #4]
 c005480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c005482:	2b03      	cmp	r3, #3
 c005484:	d036      	beq.n	c0054f4 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 c005486:	897b      	ldrh	r3, [r7, #10]
 c005488:	461a      	mov	r2, r3
 c00548a:	687b      	ldr	r3, [r7, #4]
 c00548c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 c00548e:	687b      	ldr	r3, [r7, #4]
 c005490:	681a      	ldr	r2, [r3, #0]
 c005492:	687b      	ldr	r3, [r7, #4]
 c005494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c005496:	041b      	lsls	r3, r3, #16
 c005498:	4619      	mov	r1, r3
 c00549a:	4610      	mov	r0, r2
 c00549c:	f001 f8da 	bl	c006654 <SDMMC_CmdSendCSD>
 c0054a0:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 c0054a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c0054a4:	2b00      	cmp	r3, #0
 c0054a6:	d001      	beq.n	c0054ac <SD_InitCard+0x100>
    {
      return errorstate;
 c0054a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c0054aa:	e049      	b.n	c005540 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 c0054ac:	687b      	ldr	r3, [r7, #4]
 c0054ae:	681b      	ldr	r3, [r3, #0]
 c0054b0:	2100      	movs	r1, #0
 c0054b2:	4618      	mov	r0, r3
 c0054b4:	f000 fe9b 	bl	c0061ee <SDMMC_GetResponse>
 c0054b8:	4602      	mov	r2, r0
 c0054ba:	687b      	ldr	r3, [r7, #4]
 c0054bc:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 c0054be:	687b      	ldr	r3, [r7, #4]
 c0054c0:	681b      	ldr	r3, [r3, #0]
 c0054c2:	2104      	movs	r1, #4
 c0054c4:	4618      	mov	r0, r3
 c0054c6:	f000 fe92 	bl	c0061ee <SDMMC_GetResponse>
 c0054ca:	4602      	mov	r2, r0
 c0054cc:	687b      	ldr	r3, [r7, #4]
 c0054ce:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 c0054d0:	687b      	ldr	r3, [r7, #4]
 c0054d2:	681b      	ldr	r3, [r3, #0]
 c0054d4:	2108      	movs	r1, #8
 c0054d6:	4618      	mov	r0, r3
 c0054d8:	f000 fe89 	bl	c0061ee <SDMMC_GetResponse>
 c0054dc:	4602      	mov	r2, r0
 c0054de:	687b      	ldr	r3, [r7, #4]
 c0054e0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 c0054e2:	687b      	ldr	r3, [r7, #4]
 c0054e4:	681b      	ldr	r3, [r3, #0]
 c0054e6:	210c      	movs	r1, #12
 c0054e8:	4618      	mov	r0, r3
 c0054ea:	f000 fe80 	bl	c0061ee <SDMMC_GetResponse>
 c0054ee:	4602      	mov	r2, r0
 c0054f0:	687b      	ldr	r3, [r7, #4]
 c0054f2:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 c0054f4:	687b      	ldr	r3, [r7, #4]
 c0054f6:	681b      	ldr	r3, [r3, #0]
 c0054f8:	2104      	movs	r1, #4
 c0054fa:	4618      	mov	r0, r3
 c0054fc:	f000 fe77 	bl	c0061ee <SDMMC_GetResponse>
 c005500:	4603      	mov	r3, r0
 c005502:	0d1a      	lsrs	r2, r3, #20
 c005504:	687b      	ldr	r3, [r7, #4]
 c005506:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 c005508:	f107 030c 	add.w	r3, r7, #12
 c00550c:	4619      	mov	r1, r3
 c00550e:	6878      	ldr	r0, [r7, #4]
 c005510:	f7ff fb8e 	bl	c004c30 <HAL_SD_GetCardCSD>
 c005514:	4603      	mov	r3, r0
 c005516:	2b00      	cmp	r3, #0
 c005518:	d002      	beq.n	c005520 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 c00551a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 c00551e:	e00f      	b.n	c005540 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 c005520:	687b      	ldr	r3, [r7, #4]
 c005522:	681a      	ldr	r2, [r3, #0]
 c005524:	687b      	ldr	r3, [r7, #4]
 c005526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c005528:	041b      	lsls	r3, r3, #16
 c00552a:	4619      	mov	r1, r3
 c00552c:	4610      	mov	r0, r2
 c00552e:	f000 ff89 	bl	c006444 <SDMMC_CmdSelDesel>
 c005532:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 c005534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c005536:	2b00      	cmp	r3, #0
 c005538:	d001      	beq.n	c00553e <SD_InitCard+0x192>
  {
    return errorstate;
 c00553a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c00553c:	e000      	b.n	c005540 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 c00553e:	2300      	movs	r3, #0
}
 c005540:	4618      	mov	r0, r3
 c005542:	3740      	adds	r7, #64	; 0x40
 c005544:	46bd      	mov	sp, r7
 c005546:	bd80      	pop	{r7, pc}

0c005548 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 c005548:	b580      	push	{r7, lr}
 c00554a:	b086      	sub	sp, #24
 c00554c:	af00      	add	r7, sp, #0
 c00554e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 c005550:	2300      	movs	r3, #0
 c005552:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 c005554:	2300      	movs	r3, #0
 c005556:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 c005558:	2300      	movs	r3, #0
 c00555a:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 c00555c:	687b      	ldr	r3, [r7, #4]
 c00555e:	681b      	ldr	r3, [r3, #0]
 c005560:	4618      	mov	r0, r3
 c005562:	f000 ff92 	bl	c00648a <SDMMC_CmdGoIdleState>
 c005566:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 c005568:	68fb      	ldr	r3, [r7, #12]
 c00556a:	2b00      	cmp	r3, #0
 c00556c:	d001      	beq.n	c005572 <SD_PowerON+0x2a>
  {
    return errorstate;
 c00556e:	68fb      	ldr	r3, [r7, #12]
 c005570:	e072      	b.n	c005658 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 c005572:	687b      	ldr	r3, [r7, #4]
 c005574:	681b      	ldr	r3, [r3, #0]
 c005576:	4618      	mov	r0, r3
 c005578:	f000 ffa5 	bl	c0064c6 <SDMMC_CmdOperCond>
 c00557c:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 c00557e:	68fb      	ldr	r3, [r7, #12]
 c005580:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 c005584:	d10d      	bne.n	c0055a2 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 c005586:	687b      	ldr	r3, [r7, #4]
 c005588:	2200      	movs	r2, #0
 c00558a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 c00558c:	687b      	ldr	r3, [r7, #4]
 c00558e:	681b      	ldr	r3, [r3, #0]
 c005590:	4618      	mov	r0, r3
 c005592:	f000 ff7a 	bl	c00648a <SDMMC_CmdGoIdleState>
 c005596:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 c005598:	68fb      	ldr	r3, [r7, #12]
 c00559a:	2b00      	cmp	r3, #0
 c00559c:	d004      	beq.n	c0055a8 <SD_PowerON+0x60>
    {
      return errorstate;
 c00559e:	68fb      	ldr	r3, [r7, #12]
 c0055a0:	e05a      	b.n	c005658 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 c0055a2:	687b      	ldr	r3, [r7, #4]
 c0055a4:	2201      	movs	r2, #1
 c0055a6:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 c0055a8:	687b      	ldr	r3, [r7, #4]
 c0055aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c0055ac:	2b01      	cmp	r3, #1
 c0055ae:	d137      	bne.n	c005620 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 c0055b0:	687b      	ldr	r3, [r7, #4]
 c0055b2:	681b      	ldr	r3, [r3, #0]
 c0055b4:	2100      	movs	r1, #0
 c0055b6:	4618      	mov	r0, r3
 c0055b8:	f000 ffa5 	bl	c006506 <SDMMC_CmdAppCommand>
 c0055bc:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 c0055be:	68fb      	ldr	r3, [r7, #12]
 c0055c0:	2b00      	cmp	r3, #0
 c0055c2:	d02d      	beq.n	c005620 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 c0055c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 c0055c8:	e046      	b.n	c005658 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 c0055ca:	687b      	ldr	r3, [r7, #4]
 c0055cc:	681b      	ldr	r3, [r3, #0]
 c0055ce:	2100      	movs	r1, #0
 c0055d0:	4618      	mov	r0, r3
 c0055d2:	f000 ff98 	bl	c006506 <SDMMC_CmdAppCommand>
 c0055d6:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 c0055d8:	68fb      	ldr	r3, [r7, #12]
 c0055da:	2b00      	cmp	r3, #0
 c0055dc:	d001      	beq.n	c0055e2 <SD_PowerON+0x9a>
    {
      return errorstate;
 c0055de:	68fb      	ldr	r3, [r7, #12]
 c0055e0:	e03a      	b.n	c005658 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 c0055e2:	687b      	ldr	r3, [r7, #4]
 c0055e4:	681b      	ldr	r3, [r3, #0]
 c0055e6:	491e      	ldr	r1, [pc, #120]	; (c005660 <SD_PowerON+0x118>)
 c0055e8:	4618      	mov	r0, r3
 c0055ea:	f000 ffaf 	bl	c00654c <SDMMC_CmdAppOperCommand>
 c0055ee:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 c0055f0:	68fb      	ldr	r3, [r7, #12]
 c0055f2:	2b00      	cmp	r3, #0
 c0055f4:	d002      	beq.n	c0055fc <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 c0055f6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 c0055fa:	e02d      	b.n	c005658 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 c0055fc:	687b      	ldr	r3, [r7, #4]
 c0055fe:	681b      	ldr	r3, [r3, #0]
 c005600:	2100      	movs	r1, #0
 c005602:	4618      	mov	r0, r3
 c005604:	f000 fdf3 	bl	c0061ee <SDMMC_GetResponse>
 c005608:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 c00560a:	697b      	ldr	r3, [r7, #20]
 c00560c:	0fdb      	lsrs	r3, r3, #31
 c00560e:	2b01      	cmp	r3, #1
 c005610:	d101      	bne.n	c005616 <SD_PowerON+0xce>
 c005612:	2301      	movs	r3, #1
 c005614:	e000      	b.n	c005618 <SD_PowerON+0xd0>
 c005616:	2300      	movs	r3, #0
 c005618:	613b      	str	r3, [r7, #16]

    count++;
 c00561a:	68bb      	ldr	r3, [r7, #8]
 c00561c:	3301      	adds	r3, #1
 c00561e:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 c005620:	68bb      	ldr	r3, [r7, #8]
 c005622:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 c005626:	4293      	cmp	r3, r2
 c005628:	d802      	bhi.n	c005630 <SD_PowerON+0xe8>
 c00562a:	693b      	ldr	r3, [r7, #16]
 c00562c:	2b00      	cmp	r3, #0
 c00562e:	d0cc      	beq.n	c0055ca <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 c005630:	68bb      	ldr	r3, [r7, #8]
 c005632:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 c005636:	4293      	cmp	r3, r2
 c005638:	d902      	bls.n	c005640 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 c00563a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 c00563e:	e00b      	b.n	c005658 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 c005640:	687b      	ldr	r3, [r7, #4]
 c005642:	2200      	movs	r2, #0
 c005644:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 c005646:	697b      	ldr	r3, [r7, #20]
 c005648:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 c00564c:	2b00      	cmp	r3, #0
 c00564e:	d002      	beq.n	c005656 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 c005650:	687b      	ldr	r3, [r7, #4]
 c005652:	2201      	movs	r2, #1
 c005654:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 c005656:	2300      	movs	r3, #0
}
 c005658:	4618      	mov	r0, r3
 c00565a:	3718      	adds	r7, #24
 c00565c:	46bd      	mov	sp, r7
 c00565e:	bd80      	pop	{r7, pc}
 c005660:	c1100000 	.word	0xc1100000

0c005664 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 c005664:	b580      	push	{r7, lr}
 c005666:	b08c      	sub	sp, #48	; 0x30
 c005668:	af00      	add	r7, sp, #0
 c00566a:	6078      	str	r0, [r7, #4]
 c00566c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 c00566e:	f7fb fa0d 	bl	c000a8c <HAL_GetTick>
 c005672:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 c005674:	683b      	ldr	r3, [r7, #0]
 c005676:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 c005678:	687b      	ldr	r3, [r7, #4]
 c00567a:	681b      	ldr	r3, [r3, #0]
 c00567c:	2100      	movs	r1, #0
 c00567e:	4618      	mov	r0, r3
 c005680:	f000 fdb5 	bl	c0061ee <SDMMC_GetResponse>
 c005684:	4603      	mov	r3, r0
 c005686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c00568a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 c00568e:	d102      	bne.n	c005696 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 c005690:	f44f 6300 	mov.w	r3, #2048	; 0x800
 c005694:	e0b0      	b.n	c0057f8 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 c005696:	687b      	ldr	r3, [r7, #4]
 c005698:	681b      	ldr	r3, [r3, #0]
 c00569a:	2140      	movs	r1, #64	; 0x40
 c00569c:	4618      	mov	r0, r3
 c00569e:	f000 fde5 	bl	c00626c <SDMMC_CmdBlockLength>
 c0056a2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 c0056a4:	6a3b      	ldr	r3, [r7, #32]
 c0056a6:	2b00      	cmp	r3, #0
 c0056a8:	d005      	beq.n	c0056b6 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 c0056aa:	687b      	ldr	r3, [r7, #4]
 c0056ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 c0056ae:	687b      	ldr	r3, [r7, #4]
 c0056b0:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 c0056b2:	6a3b      	ldr	r3, [r7, #32]
 c0056b4:	e0a0      	b.n	c0057f8 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 c0056b6:	687b      	ldr	r3, [r7, #4]
 c0056b8:	681a      	ldr	r2, [r3, #0]
 c0056ba:	687b      	ldr	r3, [r7, #4]
 c0056bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c0056be:	041b      	lsls	r3, r3, #16
 c0056c0:	4619      	mov	r1, r3
 c0056c2:	4610      	mov	r0, r2
 c0056c4:	f000 ff1f 	bl	c006506 <SDMMC_CmdAppCommand>
 c0056c8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 c0056ca:	6a3b      	ldr	r3, [r7, #32]
 c0056cc:	2b00      	cmp	r3, #0
 c0056ce:	d005      	beq.n	c0056dc <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 c0056d0:	687b      	ldr	r3, [r7, #4]
 c0056d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 c0056d4:	687b      	ldr	r3, [r7, #4]
 c0056d6:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 c0056d8:	6a3b      	ldr	r3, [r7, #32]
 c0056da:	e08d      	b.n	c0057f8 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 c0056dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c0056e0:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 c0056e2:	2340      	movs	r3, #64	; 0x40
 c0056e4:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 c0056e6:	2360      	movs	r3, #96	; 0x60
 c0056e8:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 c0056ea:	2302      	movs	r3, #2
 c0056ec:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 c0056ee:	2300      	movs	r3, #0
 c0056f0:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 c0056f2:	2301      	movs	r3, #1
 c0056f4:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 c0056f6:	687b      	ldr	r3, [r7, #4]
 c0056f8:	681b      	ldr	r3, [r3, #0]
 c0056fa:	f107 0208 	add.w	r2, r7, #8
 c0056fe:	4611      	mov	r1, r2
 c005700:	4618      	mov	r0, r3
 c005702:	f000 fd87 	bl	c006214 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 c005706:	687b      	ldr	r3, [r7, #4]
 c005708:	681b      	ldr	r3, [r3, #0]
 c00570a:	4618      	mov	r0, r3
 c00570c:	f001 f807 	bl	c00671e <SDMMC_CmdStatusRegister>
 c005710:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 c005712:	6a3b      	ldr	r3, [r7, #32]
 c005714:	2b00      	cmp	r3, #0
 c005716:	d02b      	beq.n	c005770 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 c005718:	687b      	ldr	r3, [r7, #4]
 c00571a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 c00571c:	687b      	ldr	r3, [r7, #4]
 c00571e:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 c005720:	6a3b      	ldr	r3, [r7, #32]
 c005722:	e069      	b.n	c0057f8 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 c005724:	687b      	ldr	r3, [r7, #4]
 c005726:	681b      	ldr	r3, [r3, #0]
 c005728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c00572a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 c00572e:	2b00      	cmp	r3, #0
 c005730:	d013      	beq.n	c00575a <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 c005732:	2300      	movs	r3, #0
 c005734:	62fb      	str	r3, [r7, #44]	; 0x2c
 c005736:	e00d      	b.n	c005754 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 c005738:	687b      	ldr	r3, [r7, #4]
 c00573a:	681b      	ldr	r3, [r3, #0]
 c00573c:	4618      	mov	r0, r3
 c00573e:	f000 fce1 	bl	c006104 <SDMMC_ReadFIFO>
 c005742:	4602      	mov	r2, r0
 c005744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c005746:	601a      	str	r2, [r3, #0]
        pData++;
 c005748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c00574a:	3304      	adds	r3, #4
 c00574c:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 c00574e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c005750:	3301      	adds	r3, #1
 c005752:	62fb      	str	r3, [r7, #44]	; 0x2c
 c005754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c005756:	2b07      	cmp	r3, #7
 c005758:	d9ee      	bls.n	c005738 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 c00575a:	f7fb f997 	bl	c000a8c <HAL_GetTick>
 c00575e:	4602      	mov	r2, r0
 c005760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c005762:	1ad3      	subs	r3, r2, r3
 c005764:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 c005768:	d102      	bne.n	c005770 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 c00576a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 c00576e:	e043      	b.n	c0057f8 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 c005770:	687b      	ldr	r3, [r7, #4]
 c005772:	681b      	ldr	r3, [r3, #0]
 c005774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c005776:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 c00577a:	2b00      	cmp	r3, #0
 c00577c:	d0d2      	beq.n	c005724 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 c00577e:	687b      	ldr	r3, [r7, #4]
 c005780:	681b      	ldr	r3, [r3, #0]
 c005782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c005784:	f003 0308 	and.w	r3, r3, #8
 c005788:	2b00      	cmp	r3, #0
 c00578a:	d001      	beq.n	c005790 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 c00578c:	2308      	movs	r3, #8
 c00578e:	e033      	b.n	c0057f8 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 c005790:	687b      	ldr	r3, [r7, #4]
 c005792:	681b      	ldr	r3, [r3, #0]
 c005794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c005796:	f003 0302 	and.w	r3, r3, #2
 c00579a:	2b00      	cmp	r3, #0
 c00579c:	d001      	beq.n	c0057a2 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 c00579e:	2302      	movs	r3, #2
 c0057a0:	e02a      	b.n	c0057f8 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 c0057a2:	687b      	ldr	r3, [r7, #4]
 c0057a4:	681b      	ldr	r3, [r3, #0]
 c0057a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c0057a8:	f003 0320 	and.w	r3, r3, #32
 c0057ac:	2b00      	cmp	r3, #0
 c0057ae:	d017      	beq.n	c0057e0 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 c0057b0:	2320      	movs	r3, #32
 c0057b2:	e021      	b.n	c0057f8 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 c0057b4:	687b      	ldr	r3, [r7, #4]
 c0057b6:	681b      	ldr	r3, [r3, #0]
 c0057b8:	4618      	mov	r0, r3
 c0057ba:	f000 fca3 	bl	c006104 <SDMMC_ReadFIFO>
 c0057be:	4602      	mov	r2, r0
 c0057c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c0057c2:	601a      	str	r2, [r3, #0]
    pData++;
 c0057c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c0057c6:	3304      	adds	r3, #4
 c0057c8:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 c0057ca:	f7fb f95f 	bl	c000a8c <HAL_GetTick>
 c0057ce:	4602      	mov	r2, r0
 c0057d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c0057d2:	1ad3      	subs	r3, r2, r3
 c0057d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 c0057d8:	d102      	bne.n	c0057e0 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 c0057da:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 c0057de:	e00b      	b.n	c0057f8 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 c0057e0:	687b      	ldr	r3, [r7, #4]
 c0057e2:	681b      	ldr	r3, [r3, #0]
 c0057e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c0057e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 c0057ea:	2b00      	cmp	r3, #0
 c0057ec:	d1e2      	bne.n	c0057b4 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 c0057ee:	687b      	ldr	r3, [r7, #4]
 c0057f0:	681b      	ldr	r3, [r3, #0]
 c0057f2:	4a03      	ldr	r2, [pc, #12]	; (c005800 <SD_SendSDStatus+0x19c>)
 c0057f4:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 c0057f6:	2300      	movs	r3, #0
}
 c0057f8:	4618      	mov	r0, r3
 c0057fa:	3730      	adds	r7, #48	; 0x30
 c0057fc:	46bd      	mov	sp, r7
 c0057fe:	bd80      	pop	{r7, pc}
 c005800:	18000f3a 	.word	0x18000f3a

0c005804 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 c005804:	b580      	push	{r7, lr}
 c005806:	b084      	sub	sp, #16
 c005808:	af00      	add	r7, sp, #0
 c00580a:	6078      	str	r0, [r7, #4]
 c00580c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 c00580e:	683b      	ldr	r3, [r7, #0]
 c005810:	2b00      	cmp	r3, #0
 c005812:	d102      	bne.n	c00581a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 c005814:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 c005818:	e018      	b.n	c00584c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 c00581a:	687b      	ldr	r3, [r7, #4]
 c00581c:	681a      	ldr	r2, [r3, #0]
 c00581e:	687b      	ldr	r3, [r7, #4]
 c005820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c005822:	041b      	lsls	r3, r3, #16
 c005824:	4619      	mov	r1, r3
 c005826:	4610      	mov	r0, r2
 c005828:	f000 ff56 	bl	c0066d8 <SDMMC_CmdSendStatus>
 c00582c:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 c00582e:	68fb      	ldr	r3, [r7, #12]
 c005830:	2b00      	cmp	r3, #0
 c005832:	d001      	beq.n	c005838 <SD_SendStatus+0x34>
  {
    return errorstate;
 c005834:	68fb      	ldr	r3, [r7, #12]
 c005836:	e009      	b.n	c00584c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 c005838:	687b      	ldr	r3, [r7, #4]
 c00583a:	681b      	ldr	r3, [r3, #0]
 c00583c:	2100      	movs	r1, #0
 c00583e:	4618      	mov	r0, r3
 c005840:	f000 fcd5 	bl	c0061ee <SDMMC_GetResponse>
 c005844:	4602      	mov	r2, r0
 c005846:	683b      	ldr	r3, [r7, #0]
 c005848:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 c00584a:	2300      	movs	r3, #0
}
 c00584c:	4618      	mov	r0, r3
 c00584e:	3710      	adds	r7, #16
 c005850:	46bd      	mov	sp, r7
 c005852:	bd80      	pop	{r7, pc}

0c005854 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 c005854:	b580      	push	{r7, lr}
 c005856:	b086      	sub	sp, #24
 c005858:	af00      	add	r7, sp, #0
 c00585a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 c00585c:	2300      	movs	r3, #0
 c00585e:	60fb      	str	r3, [r7, #12]
 c005860:	2300      	movs	r3, #0
 c005862:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 c005864:	687b      	ldr	r3, [r7, #4]
 c005866:	681b      	ldr	r3, [r3, #0]
 c005868:	2100      	movs	r1, #0
 c00586a:	4618      	mov	r0, r3
 c00586c:	f000 fcbf 	bl	c0061ee <SDMMC_GetResponse>
 c005870:	4603      	mov	r3, r0
 c005872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c005876:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 c00587a:	d102      	bne.n	c005882 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 c00587c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 c005880:	e02f      	b.n	c0058e2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 c005882:	f107 030c 	add.w	r3, r7, #12
 c005886:	4619      	mov	r1, r3
 c005888:	6878      	ldr	r0, [r7, #4]
 c00588a:	f000 f879 	bl	c005980 <SD_FindSCR>
 c00588e:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 c005890:	697b      	ldr	r3, [r7, #20]
 c005892:	2b00      	cmp	r3, #0
 c005894:	d001      	beq.n	c00589a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 c005896:	697b      	ldr	r3, [r7, #20]
 c005898:	e023      	b.n	c0058e2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 c00589a:	693b      	ldr	r3, [r7, #16]
 c00589c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 c0058a0:	2b00      	cmp	r3, #0
 c0058a2:	d01c      	beq.n	c0058de <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 c0058a4:	687b      	ldr	r3, [r7, #4]
 c0058a6:	681a      	ldr	r2, [r3, #0]
 c0058a8:	687b      	ldr	r3, [r7, #4]
 c0058aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c0058ac:	041b      	lsls	r3, r3, #16
 c0058ae:	4619      	mov	r1, r3
 c0058b0:	4610      	mov	r0, r2
 c0058b2:	f000 fe28 	bl	c006506 <SDMMC_CmdAppCommand>
 c0058b6:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 c0058b8:	697b      	ldr	r3, [r7, #20]
 c0058ba:	2b00      	cmp	r3, #0
 c0058bc:	d001      	beq.n	c0058c2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 c0058be:	697b      	ldr	r3, [r7, #20]
 c0058c0:	e00f      	b.n	c0058e2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 c0058c2:	687b      	ldr	r3, [r7, #4]
 c0058c4:	681b      	ldr	r3, [r3, #0]
 c0058c6:	2102      	movs	r1, #2
 c0058c8:	4618      	mov	r0, r3
 c0058ca:	f000 fe5f 	bl	c00658c <SDMMC_CmdBusWidth>
 c0058ce:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 c0058d0:	697b      	ldr	r3, [r7, #20]
 c0058d2:	2b00      	cmp	r3, #0
 c0058d4:	d001      	beq.n	c0058da <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 c0058d6:	697b      	ldr	r3, [r7, #20]
 c0058d8:	e003      	b.n	c0058e2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 c0058da:	2300      	movs	r3, #0
 c0058dc:	e001      	b.n	c0058e2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 c0058de:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 c0058e2:	4618      	mov	r0, r3
 c0058e4:	3718      	adds	r7, #24
 c0058e6:	46bd      	mov	sp, r7
 c0058e8:	bd80      	pop	{r7, pc}

0c0058ea <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 c0058ea:	b580      	push	{r7, lr}
 c0058ec:	b086      	sub	sp, #24
 c0058ee:	af00      	add	r7, sp, #0
 c0058f0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 c0058f2:	2300      	movs	r3, #0
 c0058f4:	60fb      	str	r3, [r7, #12]
 c0058f6:	2300      	movs	r3, #0
 c0058f8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 c0058fa:	687b      	ldr	r3, [r7, #4]
 c0058fc:	681b      	ldr	r3, [r3, #0]
 c0058fe:	2100      	movs	r1, #0
 c005900:	4618      	mov	r0, r3
 c005902:	f000 fc74 	bl	c0061ee <SDMMC_GetResponse>
 c005906:	4603      	mov	r3, r0
 c005908:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c00590c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 c005910:	d102      	bne.n	c005918 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 c005912:	f44f 6300 	mov.w	r3, #2048	; 0x800
 c005916:	e02f      	b.n	c005978 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 c005918:	f107 030c 	add.w	r3, r7, #12
 c00591c:	4619      	mov	r1, r3
 c00591e:	6878      	ldr	r0, [r7, #4]
 c005920:	f000 f82e 	bl	c005980 <SD_FindSCR>
 c005924:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 c005926:	697b      	ldr	r3, [r7, #20]
 c005928:	2b00      	cmp	r3, #0
 c00592a:	d001      	beq.n	c005930 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 c00592c:	697b      	ldr	r3, [r7, #20]
 c00592e:	e023      	b.n	c005978 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 c005930:	693b      	ldr	r3, [r7, #16]
 c005932:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 c005936:	2b00      	cmp	r3, #0
 c005938:	d01c      	beq.n	c005974 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 c00593a:	687b      	ldr	r3, [r7, #4]
 c00593c:	681a      	ldr	r2, [r3, #0]
 c00593e:	687b      	ldr	r3, [r7, #4]
 c005940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c005942:	041b      	lsls	r3, r3, #16
 c005944:	4619      	mov	r1, r3
 c005946:	4610      	mov	r0, r2
 c005948:	f000 fddd 	bl	c006506 <SDMMC_CmdAppCommand>
 c00594c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 c00594e:	697b      	ldr	r3, [r7, #20]
 c005950:	2b00      	cmp	r3, #0
 c005952:	d001      	beq.n	c005958 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 c005954:	697b      	ldr	r3, [r7, #20]
 c005956:	e00f      	b.n	c005978 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 c005958:	687b      	ldr	r3, [r7, #4]
 c00595a:	681b      	ldr	r3, [r3, #0]
 c00595c:	2100      	movs	r1, #0
 c00595e:	4618      	mov	r0, r3
 c005960:	f000 fe14 	bl	c00658c <SDMMC_CmdBusWidth>
 c005964:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 c005966:	697b      	ldr	r3, [r7, #20]
 c005968:	2b00      	cmp	r3, #0
 c00596a:	d001      	beq.n	c005970 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 c00596c:	697b      	ldr	r3, [r7, #20]
 c00596e:	e003      	b.n	c005978 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 c005970:	2300      	movs	r3, #0
 c005972:	e001      	b.n	c005978 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 c005974:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 c005978:	4618      	mov	r0, r3
 c00597a:	3718      	adds	r7, #24
 c00597c:	46bd      	mov	sp, r7
 c00597e:	bd80      	pop	{r7, pc}

0c005980 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 c005980:	b580      	push	{r7, lr}
 c005982:	b08e      	sub	sp, #56	; 0x38
 c005984:	af00      	add	r7, sp, #0
 c005986:	6078      	str	r0, [r7, #4]
 c005988:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 c00598a:	f7fb f87f 	bl	c000a8c <HAL_GetTick>
 c00598e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 c005990:	2300      	movs	r3, #0
 c005992:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 c005994:	2300      	movs	r3, #0
 c005996:	60bb      	str	r3, [r7, #8]
 c005998:	2300      	movs	r3, #0
 c00599a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 c00599c:	683b      	ldr	r3, [r7, #0]
 c00599e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 c0059a0:	687b      	ldr	r3, [r7, #4]
 c0059a2:	681b      	ldr	r3, [r3, #0]
 c0059a4:	2108      	movs	r1, #8
 c0059a6:	4618      	mov	r0, r3
 c0059a8:	f000 fc60 	bl	c00626c <SDMMC_CmdBlockLength>
 c0059ac:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 c0059ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c0059b0:	2b00      	cmp	r3, #0
 c0059b2:	d001      	beq.n	c0059b8 <SD_FindSCR+0x38>
  {
    return errorstate;
 c0059b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c0059b6:	e0ad      	b.n	c005b14 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 c0059b8:	687b      	ldr	r3, [r7, #4]
 c0059ba:	681a      	ldr	r2, [r3, #0]
 c0059bc:	687b      	ldr	r3, [r7, #4]
 c0059be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c0059c0:	041b      	lsls	r3, r3, #16
 c0059c2:	4619      	mov	r1, r3
 c0059c4:	4610      	mov	r0, r2
 c0059c6:	f000 fd9e 	bl	c006506 <SDMMC_CmdAppCommand>
 c0059ca:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 c0059cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c0059ce:	2b00      	cmp	r3, #0
 c0059d0:	d001      	beq.n	c0059d6 <SD_FindSCR+0x56>
  {
    return errorstate;
 c0059d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c0059d4:	e09e      	b.n	c005b14 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 c0059d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c0059da:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 c0059dc:	2308      	movs	r3, #8
 c0059de:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 c0059e0:	2330      	movs	r3, #48	; 0x30
 c0059e2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 c0059e4:	2302      	movs	r3, #2
 c0059e6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 c0059e8:	2300      	movs	r3, #0
 c0059ea:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 c0059ec:	2301      	movs	r3, #1
 c0059ee:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 c0059f0:	687b      	ldr	r3, [r7, #4]
 c0059f2:	681b      	ldr	r3, [r3, #0]
 c0059f4:	f107 0210 	add.w	r2, r7, #16
 c0059f8:	4611      	mov	r1, r2
 c0059fa:	4618      	mov	r0, r3
 c0059fc:	f000 fc0a 	bl	c006214 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 c005a00:	687b      	ldr	r3, [r7, #4]
 c005a02:	681b      	ldr	r3, [r3, #0]
 c005a04:	4618      	mov	r0, r3
 c005a06:	f000 fde4 	bl	c0065d2 <SDMMC_CmdSendSCR>
 c005a0a:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 c005a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c005a0e:	2b00      	cmp	r3, #0
 c005a10:	d027      	beq.n	c005a62 <SD_FindSCR+0xe2>
  {
    return errorstate;
 c005a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c005a14:	e07e      	b.n	c005b14 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 c005a16:	687b      	ldr	r3, [r7, #4]
 c005a18:	681b      	ldr	r3, [r3, #0]
 c005a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c005a1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 c005a20:	2b00      	cmp	r3, #0
 c005a22:	d113      	bne.n	c005a4c <SD_FindSCR+0xcc>
 c005a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 c005a26:	2b00      	cmp	r3, #0
 c005a28:	d110      	bne.n	c005a4c <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 c005a2a:	687b      	ldr	r3, [r7, #4]
 c005a2c:	681b      	ldr	r3, [r3, #0]
 c005a2e:	4618      	mov	r0, r3
 c005a30:	f000 fb68 	bl	c006104 <SDMMC_ReadFIFO>
 c005a34:	4603      	mov	r3, r0
 c005a36:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 c005a38:	687b      	ldr	r3, [r7, #4]
 c005a3a:	681b      	ldr	r3, [r3, #0]
 c005a3c:	4618      	mov	r0, r3
 c005a3e:	f000 fb61 	bl	c006104 <SDMMC_ReadFIFO>
 c005a42:	4603      	mov	r3, r0
 c005a44:	60fb      	str	r3, [r7, #12]
      index++;
 c005a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 c005a48:	3301      	adds	r3, #1
 c005a4a:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 c005a4c:	f7fb f81e 	bl	c000a8c <HAL_GetTick>
 c005a50:	4602      	mov	r2, r0
 c005a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c005a54:	1ad3      	subs	r3, r2, r3
 c005a56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 c005a5a:	d102      	bne.n	c005a62 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 c005a5c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 c005a60:	e058      	b.n	c005b14 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 c005a62:	687b      	ldr	r3, [r7, #4]
 c005a64:	681b      	ldr	r3, [r3, #0]
 c005a66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 c005a68:	f240 532a 	movw	r3, #1322	; 0x52a
 c005a6c:	4013      	ands	r3, r2
 c005a6e:	2b00      	cmp	r3, #0
 c005a70:	d0d1      	beq.n	c005a16 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 c005a72:	687b      	ldr	r3, [r7, #4]
 c005a74:	681b      	ldr	r3, [r3, #0]
 c005a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c005a78:	f003 0308 	and.w	r3, r3, #8
 c005a7c:	2b00      	cmp	r3, #0
 c005a7e:	d005      	beq.n	c005a8c <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 c005a80:	687b      	ldr	r3, [r7, #4]
 c005a82:	681b      	ldr	r3, [r3, #0]
 c005a84:	2208      	movs	r2, #8
 c005a86:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 c005a88:	2308      	movs	r3, #8
 c005a8a:	e043      	b.n	c005b14 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 c005a8c:	687b      	ldr	r3, [r7, #4]
 c005a8e:	681b      	ldr	r3, [r3, #0]
 c005a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c005a92:	f003 0302 	and.w	r3, r3, #2
 c005a96:	2b00      	cmp	r3, #0
 c005a98:	d005      	beq.n	c005aa6 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 c005a9a:	687b      	ldr	r3, [r7, #4]
 c005a9c:	681b      	ldr	r3, [r3, #0]
 c005a9e:	2202      	movs	r2, #2
 c005aa0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 c005aa2:	2302      	movs	r3, #2
 c005aa4:	e036      	b.n	c005b14 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 c005aa6:	687b      	ldr	r3, [r7, #4]
 c005aa8:	681b      	ldr	r3, [r3, #0]
 c005aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c005aac:	f003 0320 	and.w	r3, r3, #32
 c005ab0:	2b00      	cmp	r3, #0
 c005ab2:	d005      	beq.n	c005ac0 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 c005ab4:	687b      	ldr	r3, [r7, #4]
 c005ab6:	681b      	ldr	r3, [r3, #0]
 c005ab8:	2220      	movs	r2, #32
 c005aba:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 c005abc:	2320      	movs	r3, #32
 c005abe:	e029      	b.n	c005b14 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 c005ac0:	687b      	ldr	r3, [r7, #4]
 c005ac2:	681b      	ldr	r3, [r3, #0]
 c005ac4:	4a15      	ldr	r2, [pc, #84]	; (c005b1c <SD_FindSCR+0x19c>)
 c005ac6:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 c005ac8:	68fb      	ldr	r3, [r7, #12]
 c005aca:	061a      	lsls	r2, r3, #24
 c005acc:	68fb      	ldr	r3, [r7, #12]
 c005ace:	021b      	lsls	r3, r3, #8
 c005ad0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 c005ad4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 c005ad6:	68fb      	ldr	r3, [r7, #12]
 c005ad8:	0a1b      	lsrs	r3, r3, #8
 c005ada:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 c005ade:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 c005ae0:	68fb      	ldr	r3, [r7, #12]
 c005ae2:	0e1b      	lsrs	r3, r3, #24
 c005ae4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 c005ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c005ae8:	601a      	str	r2, [r3, #0]
    scr++;
 c005aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c005aec:	3304      	adds	r3, #4
 c005aee:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 c005af0:	68bb      	ldr	r3, [r7, #8]
 c005af2:	061a      	lsls	r2, r3, #24
 c005af4:	68bb      	ldr	r3, [r7, #8]
 c005af6:	021b      	lsls	r3, r3, #8
 c005af8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 c005afc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 c005afe:	68bb      	ldr	r3, [r7, #8]
 c005b00:	0a1b      	lsrs	r3, r3, #8
 c005b02:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 c005b06:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 c005b08:	68bb      	ldr	r3, [r7, #8]
 c005b0a:	0e1b      	lsrs	r3, r3, #24
 c005b0c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 c005b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c005b10:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 c005b12:	2300      	movs	r3, #0
}
 c005b14:	4618      	mov	r0, r3
 c005b16:	3738      	adds	r7, #56	; 0x38
 c005b18:	46bd      	mov	sp, r7
 c005b1a:	bd80      	pop	{r7, pc}
 c005b1c:	18000f3a 	.word	0x18000f3a

0c005b20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 c005b20:	b580      	push	{r7, lr}
 c005b22:	b082      	sub	sp, #8
 c005b24:	af00      	add	r7, sp, #0
 c005b26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 c005b28:	687b      	ldr	r3, [r7, #4]
 c005b2a:	2b00      	cmp	r3, #0
 c005b2c:	d101      	bne.n	c005b32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 c005b2e:	2301      	movs	r3, #1
 c005b30:	e049      	b.n	c005bc6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 c005b32:	687b      	ldr	r3, [r7, #4]
 c005b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 c005b38:	b2db      	uxtb	r3, r3
 c005b3a:	2b00      	cmp	r3, #0
 c005b3c:	d106      	bne.n	c005b4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 c005b3e:	687b      	ldr	r3, [r7, #4]
 c005b40:	2200      	movs	r2, #0
 c005b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 c005b46:	6878      	ldr	r0, [r7, #4]
 c005b48:	f002 f95e 	bl	c007e08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 c005b4c:	687b      	ldr	r3, [r7, #4]
 c005b4e:	2202      	movs	r2, #2
 c005b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 c005b54:	687b      	ldr	r3, [r7, #4]
 c005b56:	681a      	ldr	r2, [r3, #0]
 c005b58:	687b      	ldr	r3, [r7, #4]
 c005b5a:	3304      	adds	r3, #4
 c005b5c:	4619      	mov	r1, r3
 c005b5e:	4610      	mov	r0, r2
 c005b60:	f000 f9ee 	bl	c005f40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 c005b64:	687b      	ldr	r3, [r7, #4]
 c005b66:	2201      	movs	r2, #1
 c005b68:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 c005b6c:	687b      	ldr	r3, [r7, #4]
 c005b6e:	2201      	movs	r2, #1
 c005b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 c005b74:	687b      	ldr	r3, [r7, #4]
 c005b76:	2201      	movs	r2, #1
 c005b78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 c005b7c:	687b      	ldr	r3, [r7, #4]
 c005b7e:	2201      	movs	r2, #1
 c005b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 c005b84:	687b      	ldr	r3, [r7, #4]
 c005b86:	2201      	movs	r2, #1
 c005b88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 c005b8c:	687b      	ldr	r3, [r7, #4]
 c005b8e:	2201      	movs	r2, #1
 c005b90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 c005b94:	687b      	ldr	r3, [r7, #4]
 c005b96:	2201      	movs	r2, #1
 c005b98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 c005b9c:	687b      	ldr	r3, [r7, #4]
 c005b9e:	2201      	movs	r2, #1
 c005ba0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 c005ba4:	687b      	ldr	r3, [r7, #4]
 c005ba6:	2201      	movs	r2, #1
 c005ba8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 c005bac:	687b      	ldr	r3, [r7, #4]
 c005bae:	2201      	movs	r2, #1
 c005bb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 c005bb4:	687b      	ldr	r3, [r7, #4]
 c005bb6:	2201      	movs	r2, #1
 c005bb8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 c005bbc:	687b      	ldr	r3, [r7, #4]
 c005bbe:	2201      	movs	r2, #1
 c005bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 c005bc4:	2300      	movs	r3, #0
}
 c005bc6:	4618      	mov	r0, r3
 c005bc8:	3708      	adds	r7, #8
 c005bca:	46bd      	mov	sp, r7
 c005bcc:	bd80      	pop	{r7, pc}
	...

0c005bd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 c005bd0:	b480      	push	{r7}
 c005bd2:	b085      	sub	sp, #20
 c005bd4:	af00      	add	r7, sp, #0
 c005bd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 c005bd8:	687b      	ldr	r3, [r7, #4]
 c005bda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 c005bde:	b2db      	uxtb	r3, r3
 c005be0:	2b01      	cmp	r3, #1
 c005be2:	d001      	beq.n	c005be8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 c005be4:	2301      	movs	r3, #1
 c005be6:	e04f      	b.n	c005c88 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 c005be8:	687b      	ldr	r3, [r7, #4]
 c005bea:	2202      	movs	r2, #2
 c005bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 c005bf0:	687b      	ldr	r3, [r7, #4]
 c005bf2:	681b      	ldr	r3, [r3, #0]
 c005bf4:	68da      	ldr	r2, [r3, #12]
 c005bf6:	687b      	ldr	r3, [r7, #4]
 c005bf8:	681b      	ldr	r3, [r3, #0]
 c005bfa:	f042 0201 	orr.w	r2, r2, #1
 c005bfe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 c005c00:	687b      	ldr	r3, [r7, #4]
 c005c02:	681b      	ldr	r3, [r3, #0]
 c005c04:	4a23      	ldr	r2, [pc, #140]	; (c005c94 <HAL_TIM_Base_Start_IT+0xc4>)
 c005c06:	4293      	cmp	r3, r2
 c005c08:	d01d      	beq.n	c005c46 <HAL_TIM_Base_Start_IT+0x76>
 c005c0a:	687b      	ldr	r3, [r7, #4]
 c005c0c:	681b      	ldr	r3, [r3, #0]
 c005c0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 c005c12:	d018      	beq.n	c005c46 <HAL_TIM_Base_Start_IT+0x76>
 c005c14:	687b      	ldr	r3, [r7, #4]
 c005c16:	681b      	ldr	r3, [r3, #0]
 c005c18:	4a1f      	ldr	r2, [pc, #124]	; (c005c98 <HAL_TIM_Base_Start_IT+0xc8>)
 c005c1a:	4293      	cmp	r3, r2
 c005c1c:	d013      	beq.n	c005c46 <HAL_TIM_Base_Start_IT+0x76>
 c005c1e:	687b      	ldr	r3, [r7, #4]
 c005c20:	681b      	ldr	r3, [r3, #0]
 c005c22:	4a1e      	ldr	r2, [pc, #120]	; (c005c9c <HAL_TIM_Base_Start_IT+0xcc>)
 c005c24:	4293      	cmp	r3, r2
 c005c26:	d00e      	beq.n	c005c46 <HAL_TIM_Base_Start_IT+0x76>
 c005c28:	687b      	ldr	r3, [r7, #4]
 c005c2a:	681b      	ldr	r3, [r3, #0]
 c005c2c:	4a1c      	ldr	r2, [pc, #112]	; (c005ca0 <HAL_TIM_Base_Start_IT+0xd0>)
 c005c2e:	4293      	cmp	r3, r2
 c005c30:	d009      	beq.n	c005c46 <HAL_TIM_Base_Start_IT+0x76>
 c005c32:	687b      	ldr	r3, [r7, #4]
 c005c34:	681b      	ldr	r3, [r3, #0]
 c005c36:	4a1b      	ldr	r2, [pc, #108]	; (c005ca4 <HAL_TIM_Base_Start_IT+0xd4>)
 c005c38:	4293      	cmp	r3, r2
 c005c3a:	d004      	beq.n	c005c46 <HAL_TIM_Base_Start_IT+0x76>
 c005c3c:	687b      	ldr	r3, [r7, #4]
 c005c3e:	681b      	ldr	r3, [r3, #0]
 c005c40:	4a19      	ldr	r2, [pc, #100]	; (c005ca8 <HAL_TIM_Base_Start_IT+0xd8>)
 c005c42:	4293      	cmp	r3, r2
 c005c44:	d115      	bne.n	c005c72 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 c005c46:	687b      	ldr	r3, [r7, #4]
 c005c48:	681b      	ldr	r3, [r3, #0]
 c005c4a:	689a      	ldr	r2, [r3, #8]
 c005c4c:	4b17      	ldr	r3, [pc, #92]	; (c005cac <HAL_TIM_Base_Start_IT+0xdc>)
 c005c4e:	4013      	ands	r3, r2
 c005c50:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 c005c52:	68fb      	ldr	r3, [r7, #12]
 c005c54:	2b06      	cmp	r3, #6
 c005c56:	d015      	beq.n	c005c84 <HAL_TIM_Base_Start_IT+0xb4>
 c005c58:	68fb      	ldr	r3, [r7, #12]
 c005c5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 c005c5e:	d011      	beq.n	c005c84 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 c005c60:	687b      	ldr	r3, [r7, #4]
 c005c62:	681b      	ldr	r3, [r3, #0]
 c005c64:	681a      	ldr	r2, [r3, #0]
 c005c66:	687b      	ldr	r3, [r7, #4]
 c005c68:	681b      	ldr	r3, [r3, #0]
 c005c6a:	f042 0201 	orr.w	r2, r2, #1
 c005c6e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 c005c70:	e008      	b.n	c005c84 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 c005c72:	687b      	ldr	r3, [r7, #4]
 c005c74:	681b      	ldr	r3, [r3, #0]
 c005c76:	681a      	ldr	r2, [r3, #0]
 c005c78:	687b      	ldr	r3, [r7, #4]
 c005c7a:	681b      	ldr	r3, [r3, #0]
 c005c7c:	f042 0201 	orr.w	r2, r2, #1
 c005c80:	601a      	str	r2, [r3, #0]
 c005c82:	e000      	b.n	c005c86 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 c005c84:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 c005c86:	2300      	movs	r3, #0
}
 c005c88:	4618      	mov	r0, r3
 c005c8a:	3714      	adds	r7, #20
 c005c8c:	46bd      	mov	sp, r7
 c005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c005c92:	4770      	bx	lr
 c005c94:	50012c00 	.word	0x50012c00
 c005c98:	50000400 	.word	0x50000400
 c005c9c:	50000800 	.word	0x50000800
 c005ca0:	50000c00 	.word	0x50000c00
 c005ca4:	50013400 	.word	0x50013400
 c005ca8:	50014000 	.word	0x50014000
 c005cac:	00010007 	.word	0x00010007

0c005cb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 c005cb0:	b580      	push	{r7, lr}
 c005cb2:	b082      	sub	sp, #8
 c005cb4:	af00      	add	r7, sp, #0
 c005cb6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 c005cb8:	687b      	ldr	r3, [r7, #4]
 c005cba:	681b      	ldr	r3, [r3, #0]
 c005cbc:	691b      	ldr	r3, [r3, #16]
 c005cbe:	f003 0302 	and.w	r3, r3, #2
 c005cc2:	2b02      	cmp	r3, #2
 c005cc4:	d122      	bne.n	c005d0c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 c005cc6:	687b      	ldr	r3, [r7, #4]
 c005cc8:	681b      	ldr	r3, [r3, #0]
 c005cca:	68db      	ldr	r3, [r3, #12]
 c005ccc:	f003 0302 	and.w	r3, r3, #2
 c005cd0:	2b02      	cmp	r3, #2
 c005cd2:	d11b      	bne.n	c005d0c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 c005cd4:	687b      	ldr	r3, [r7, #4]
 c005cd6:	681b      	ldr	r3, [r3, #0]
 c005cd8:	f06f 0202 	mvn.w	r2, #2
 c005cdc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 c005cde:	687b      	ldr	r3, [r7, #4]
 c005ce0:	2201      	movs	r2, #1
 c005ce2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 c005ce4:	687b      	ldr	r3, [r7, #4]
 c005ce6:	681b      	ldr	r3, [r3, #0]
 c005ce8:	699b      	ldr	r3, [r3, #24]
 c005cea:	f003 0303 	and.w	r3, r3, #3
 c005cee:	2b00      	cmp	r3, #0
 c005cf0:	d003      	beq.n	c005cfa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 c005cf2:	6878      	ldr	r0, [r7, #4]
 c005cf4:	f000 f905 	bl	c005f02 <HAL_TIM_IC_CaptureCallback>
 c005cf8:	e005      	b.n	c005d06 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 c005cfa:	6878      	ldr	r0, [r7, #4]
 c005cfc:	f000 f8f7 	bl	c005eee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 c005d00:	6878      	ldr	r0, [r7, #4]
 c005d02:	f000 f908 	bl	c005f16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 c005d06:	687b      	ldr	r3, [r7, #4]
 c005d08:	2200      	movs	r2, #0
 c005d0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 c005d0c:	687b      	ldr	r3, [r7, #4]
 c005d0e:	681b      	ldr	r3, [r3, #0]
 c005d10:	691b      	ldr	r3, [r3, #16]
 c005d12:	f003 0304 	and.w	r3, r3, #4
 c005d16:	2b04      	cmp	r3, #4
 c005d18:	d122      	bne.n	c005d60 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 c005d1a:	687b      	ldr	r3, [r7, #4]
 c005d1c:	681b      	ldr	r3, [r3, #0]
 c005d1e:	68db      	ldr	r3, [r3, #12]
 c005d20:	f003 0304 	and.w	r3, r3, #4
 c005d24:	2b04      	cmp	r3, #4
 c005d26:	d11b      	bne.n	c005d60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 c005d28:	687b      	ldr	r3, [r7, #4]
 c005d2a:	681b      	ldr	r3, [r3, #0]
 c005d2c:	f06f 0204 	mvn.w	r2, #4
 c005d30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 c005d32:	687b      	ldr	r3, [r7, #4]
 c005d34:	2202      	movs	r2, #2
 c005d36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 c005d38:	687b      	ldr	r3, [r7, #4]
 c005d3a:	681b      	ldr	r3, [r3, #0]
 c005d3c:	699b      	ldr	r3, [r3, #24]
 c005d3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 c005d42:	2b00      	cmp	r3, #0
 c005d44:	d003      	beq.n	c005d4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 c005d46:	6878      	ldr	r0, [r7, #4]
 c005d48:	f000 f8db 	bl	c005f02 <HAL_TIM_IC_CaptureCallback>
 c005d4c:	e005      	b.n	c005d5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 c005d4e:	6878      	ldr	r0, [r7, #4]
 c005d50:	f000 f8cd 	bl	c005eee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 c005d54:	6878      	ldr	r0, [r7, #4]
 c005d56:	f000 f8de 	bl	c005f16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 c005d5a:	687b      	ldr	r3, [r7, #4]
 c005d5c:	2200      	movs	r2, #0
 c005d5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 c005d60:	687b      	ldr	r3, [r7, #4]
 c005d62:	681b      	ldr	r3, [r3, #0]
 c005d64:	691b      	ldr	r3, [r3, #16]
 c005d66:	f003 0308 	and.w	r3, r3, #8
 c005d6a:	2b08      	cmp	r3, #8
 c005d6c:	d122      	bne.n	c005db4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 c005d6e:	687b      	ldr	r3, [r7, #4]
 c005d70:	681b      	ldr	r3, [r3, #0]
 c005d72:	68db      	ldr	r3, [r3, #12]
 c005d74:	f003 0308 	and.w	r3, r3, #8
 c005d78:	2b08      	cmp	r3, #8
 c005d7a:	d11b      	bne.n	c005db4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 c005d7c:	687b      	ldr	r3, [r7, #4]
 c005d7e:	681b      	ldr	r3, [r3, #0]
 c005d80:	f06f 0208 	mvn.w	r2, #8
 c005d84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 c005d86:	687b      	ldr	r3, [r7, #4]
 c005d88:	2204      	movs	r2, #4
 c005d8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 c005d8c:	687b      	ldr	r3, [r7, #4]
 c005d8e:	681b      	ldr	r3, [r3, #0]
 c005d90:	69db      	ldr	r3, [r3, #28]
 c005d92:	f003 0303 	and.w	r3, r3, #3
 c005d96:	2b00      	cmp	r3, #0
 c005d98:	d003      	beq.n	c005da2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 c005d9a:	6878      	ldr	r0, [r7, #4]
 c005d9c:	f000 f8b1 	bl	c005f02 <HAL_TIM_IC_CaptureCallback>
 c005da0:	e005      	b.n	c005dae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 c005da2:	6878      	ldr	r0, [r7, #4]
 c005da4:	f000 f8a3 	bl	c005eee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 c005da8:	6878      	ldr	r0, [r7, #4]
 c005daa:	f000 f8b4 	bl	c005f16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 c005dae:	687b      	ldr	r3, [r7, #4]
 c005db0:	2200      	movs	r2, #0
 c005db2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 c005db4:	687b      	ldr	r3, [r7, #4]
 c005db6:	681b      	ldr	r3, [r3, #0]
 c005db8:	691b      	ldr	r3, [r3, #16]
 c005dba:	f003 0310 	and.w	r3, r3, #16
 c005dbe:	2b10      	cmp	r3, #16
 c005dc0:	d122      	bne.n	c005e08 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 c005dc2:	687b      	ldr	r3, [r7, #4]
 c005dc4:	681b      	ldr	r3, [r3, #0]
 c005dc6:	68db      	ldr	r3, [r3, #12]
 c005dc8:	f003 0310 	and.w	r3, r3, #16
 c005dcc:	2b10      	cmp	r3, #16
 c005dce:	d11b      	bne.n	c005e08 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 c005dd0:	687b      	ldr	r3, [r7, #4]
 c005dd2:	681b      	ldr	r3, [r3, #0]
 c005dd4:	f06f 0210 	mvn.w	r2, #16
 c005dd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 c005dda:	687b      	ldr	r3, [r7, #4]
 c005ddc:	2208      	movs	r2, #8
 c005dde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 c005de0:	687b      	ldr	r3, [r7, #4]
 c005de2:	681b      	ldr	r3, [r3, #0]
 c005de4:	69db      	ldr	r3, [r3, #28]
 c005de6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 c005dea:	2b00      	cmp	r3, #0
 c005dec:	d003      	beq.n	c005df6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 c005dee:	6878      	ldr	r0, [r7, #4]
 c005df0:	f000 f887 	bl	c005f02 <HAL_TIM_IC_CaptureCallback>
 c005df4:	e005      	b.n	c005e02 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 c005df6:	6878      	ldr	r0, [r7, #4]
 c005df8:	f000 f879 	bl	c005eee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 c005dfc:	6878      	ldr	r0, [r7, #4]
 c005dfe:	f000 f88a 	bl	c005f16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 c005e02:	687b      	ldr	r3, [r7, #4]
 c005e04:	2200      	movs	r2, #0
 c005e06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 c005e08:	687b      	ldr	r3, [r7, #4]
 c005e0a:	681b      	ldr	r3, [r3, #0]
 c005e0c:	691b      	ldr	r3, [r3, #16]
 c005e0e:	f003 0301 	and.w	r3, r3, #1
 c005e12:	2b01      	cmp	r3, #1
 c005e14:	d10e      	bne.n	c005e34 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 c005e16:	687b      	ldr	r3, [r7, #4]
 c005e18:	681b      	ldr	r3, [r3, #0]
 c005e1a:	68db      	ldr	r3, [r3, #12]
 c005e1c:	f003 0301 	and.w	r3, r3, #1
 c005e20:	2b01      	cmp	r3, #1
 c005e22:	d107      	bne.n	c005e34 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 c005e24:	687b      	ldr	r3, [r7, #4]
 c005e26:	681b      	ldr	r3, [r3, #0]
 c005e28:	f06f 0201 	mvn.w	r2, #1
 c005e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 c005e2e:	6878      	ldr	r0, [r7, #4]
 c005e30:	f001 fb12 	bl	c007458 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 c005e34:	687b      	ldr	r3, [r7, #4]
 c005e36:	681b      	ldr	r3, [r3, #0]
 c005e38:	691b      	ldr	r3, [r3, #16]
 c005e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c005e3e:	2b80      	cmp	r3, #128	; 0x80
 c005e40:	d10e      	bne.n	c005e60 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 c005e42:	687b      	ldr	r3, [r7, #4]
 c005e44:	681b      	ldr	r3, [r3, #0]
 c005e46:	68db      	ldr	r3, [r3, #12]
 c005e48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c005e4c:	2b80      	cmp	r3, #128	; 0x80
 c005e4e:	d107      	bne.n	c005e60 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 c005e50:	687b      	ldr	r3, [r7, #4]
 c005e52:	681b      	ldr	r3, [r3, #0]
 c005e54:	f06f 0280 	mvn.w	r2, #128	; 0x80
 c005e58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 c005e5a:	6878      	ldr	r0, [r7, #4]
 c005e5c:	f000 f914 	bl	c006088 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 c005e60:	687b      	ldr	r3, [r7, #4]
 c005e62:	681b      	ldr	r3, [r3, #0]
 c005e64:	691b      	ldr	r3, [r3, #16]
 c005e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c005e6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 c005e6e:	d10e      	bne.n	c005e8e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 c005e70:	687b      	ldr	r3, [r7, #4]
 c005e72:	681b      	ldr	r3, [r3, #0]
 c005e74:	68db      	ldr	r3, [r3, #12]
 c005e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c005e7a:	2b80      	cmp	r3, #128	; 0x80
 c005e7c:	d107      	bne.n	c005e8e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 c005e7e:	687b      	ldr	r3, [r7, #4]
 c005e80:	681b      	ldr	r3, [r3, #0]
 c005e82:	f46f 7280 	mvn.w	r2, #256	; 0x100
 c005e86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 c005e88:	6878      	ldr	r0, [r7, #4]
 c005e8a:	f000 f907 	bl	c00609c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 c005e8e:	687b      	ldr	r3, [r7, #4]
 c005e90:	681b      	ldr	r3, [r3, #0]
 c005e92:	691b      	ldr	r3, [r3, #16]
 c005e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c005e98:	2b40      	cmp	r3, #64	; 0x40
 c005e9a:	d10e      	bne.n	c005eba <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 c005e9c:	687b      	ldr	r3, [r7, #4]
 c005e9e:	681b      	ldr	r3, [r3, #0]
 c005ea0:	68db      	ldr	r3, [r3, #12]
 c005ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c005ea6:	2b40      	cmp	r3, #64	; 0x40
 c005ea8:	d107      	bne.n	c005eba <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 c005eaa:	687b      	ldr	r3, [r7, #4]
 c005eac:	681b      	ldr	r3, [r3, #0]
 c005eae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 c005eb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 c005eb4:	6878      	ldr	r0, [r7, #4]
 c005eb6:	f000 f838 	bl	c005f2a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 c005eba:	687b      	ldr	r3, [r7, #4]
 c005ebc:	681b      	ldr	r3, [r3, #0]
 c005ebe:	691b      	ldr	r3, [r3, #16]
 c005ec0:	f003 0320 	and.w	r3, r3, #32
 c005ec4:	2b20      	cmp	r3, #32
 c005ec6:	d10e      	bne.n	c005ee6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 c005ec8:	687b      	ldr	r3, [r7, #4]
 c005eca:	681b      	ldr	r3, [r3, #0]
 c005ecc:	68db      	ldr	r3, [r3, #12]
 c005ece:	f003 0320 	and.w	r3, r3, #32
 c005ed2:	2b20      	cmp	r3, #32
 c005ed4:	d107      	bne.n	c005ee6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 c005ed6:	687b      	ldr	r3, [r7, #4]
 c005ed8:	681b      	ldr	r3, [r3, #0]
 c005eda:	f06f 0220 	mvn.w	r2, #32
 c005ede:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 c005ee0:	6878      	ldr	r0, [r7, #4]
 c005ee2:	f000 f8c7 	bl	c006074 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 c005ee6:	bf00      	nop
 c005ee8:	3708      	adds	r7, #8
 c005eea:	46bd      	mov	sp, r7
 c005eec:	bd80      	pop	{r7, pc}

0c005eee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 c005eee:	b480      	push	{r7}
 c005ef0:	b083      	sub	sp, #12
 c005ef2:	af00      	add	r7, sp, #0
 c005ef4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 c005ef6:	bf00      	nop
 c005ef8:	370c      	adds	r7, #12
 c005efa:	46bd      	mov	sp, r7
 c005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 c005f00:	4770      	bx	lr

0c005f02 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 c005f02:	b480      	push	{r7}
 c005f04:	b083      	sub	sp, #12
 c005f06:	af00      	add	r7, sp, #0
 c005f08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 c005f0a:	bf00      	nop
 c005f0c:	370c      	adds	r7, #12
 c005f0e:	46bd      	mov	sp, r7
 c005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 c005f14:	4770      	bx	lr

0c005f16 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 c005f16:	b480      	push	{r7}
 c005f18:	b083      	sub	sp, #12
 c005f1a:	af00      	add	r7, sp, #0
 c005f1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 c005f1e:	bf00      	nop
 c005f20:	370c      	adds	r7, #12
 c005f22:	46bd      	mov	sp, r7
 c005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 c005f28:	4770      	bx	lr

0c005f2a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 c005f2a:	b480      	push	{r7}
 c005f2c:	b083      	sub	sp, #12
 c005f2e:	af00      	add	r7, sp, #0
 c005f30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 c005f32:	bf00      	nop
 c005f34:	370c      	adds	r7, #12
 c005f36:	46bd      	mov	sp, r7
 c005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 c005f3c:	4770      	bx	lr
	...

0c005f40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 c005f40:	b480      	push	{r7}
 c005f42:	b085      	sub	sp, #20
 c005f44:	af00      	add	r7, sp, #0
 c005f46:	6078      	str	r0, [r7, #4]
 c005f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 c005f4a:	687b      	ldr	r3, [r7, #4]
 c005f4c:	681b      	ldr	r3, [r3, #0]
 c005f4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 c005f50:	687b      	ldr	r3, [r7, #4]
 c005f52:	4a40      	ldr	r2, [pc, #256]	; (c006054 <TIM_Base_SetConfig+0x114>)
 c005f54:	4293      	cmp	r3, r2
 c005f56:	d013      	beq.n	c005f80 <TIM_Base_SetConfig+0x40>
 c005f58:	687b      	ldr	r3, [r7, #4]
 c005f5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 c005f5e:	d00f      	beq.n	c005f80 <TIM_Base_SetConfig+0x40>
 c005f60:	687b      	ldr	r3, [r7, #4]
 c005f62:	4a3d      	ldr	r2, [pc, #244]	; (c006058 <TIM_Base_SetConfig+0x118>)
 c005f64:	4293      	cmp	r3, r2
 c005f66:	d00b      	beq.n	c005f80 <TIM_Base_SetConfig+0x40>
 c005f68:	687b      	ldr	r3, [r7, #4]
 c005f6a:	4a3c      	ldr	r2, [pc, #240]	; (c00605c <TIM_Base_SetConfig+0x11c>)
 c005f6c:	4293      	cmp	r3, r2
 c005f6e:	d007      	beq.n	c005f80 <TIM_Base_SetConfig+0x40>
 c005f70:	687b      	ldr	r3, [r7, #4]
 c005f72:	4a3b      	ldr	r2, [pc, #236]	; (c006060 <TIM_Base_SetConfig+0x120>)
 c005f74:	4293      	cmp	r3, r2
 c005f76:	d003      	beq.n	c005f80 <TIM_Base_SetConfig+0x40>
 c005f78:	687b      	ldr	r3, [r7, #4]
 c005f7a:	4a3a      	ldr	r2, [pc, #232]	; (c006064 <TIM_Base_SetConfig+0x124>)
 c005f7c:	4293      	cmp	r3, r2
 c005f7e:	d108      	bne.n	c005f92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 c005f80:	68fb      	ldr	r3, [r7, #12]
 c005f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 c005f86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 c005f88:	683b      	ldr	r3, [r7, #0]
 c005f8a:	685b      	ldr	r3, [r3, #4]
 c005f8c:	68fa      	ldr	r2, [r7, #12]
 c005f8e:	4313      	orrs	r3, r2
 c005f90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 c005f92:	687b      	ldr	r3, [r7, #4]
 c005f94:	4a2f      	ldr	r2, [pc, #188]	; (c006054 <TIM_Base_SetConfig+0x114>)
 c005f96:	4293      	cmp	r3, r2
 c005f98:	d01f      	beq.n	c005fda <TIM_Base_SetConfig+0x9a>
 c005f9a:	687b      	ldr	r3, [r7, #4]
 c005f9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 c005fa0:	d01b      	beq.n	c005fda <TIM_Base_SetConfig+0x9a>
 c005fa2:	687b      	ldr	r3, [r7, #4]
 c005fa4:	4a2c      	ldr	r2, [pc, #176]	; (c006058 <TIM_Base_SetConfig+0x118>)
 c005fa6:	4293      	cmp	r3, r2
 c005fa8:	d017      	beq.n	c005fda <TIM_Base_SetConfig+0x9a>
 c005faa:	687b      	ldr	r3, [r7, #4]
 c005fac:	4a2b      	ldr	r2, [pc, #172]	; (c00605c <TIM_Base_SetConfig+0x11c>)
 c005fae:	4293      	cmp	r3, r2
 c005fb0:	d013      	beq.n	c005fda <TIM_Base_SetConfig+0x9a>
 c005fb2:	687b      	ldr	r3, [r7, #4]
 c005fb4:	4a2a      	ldr	r2, [pc, #168]	; (c006060 <TIM_Base_SetConfig+0x120>)
 c005fb6:	4293      	cmp	r3, r2
 c005fb8:	d00f      	beq.n	c005fda <TIM_Base_SetConfig+0x9a>
 c005fba:	687b      	ldr	r3, [r7, #4]
 c005fbc:	4a29      	ldr	r2, [pc, #164]	; (c006064 <TIM_Base_SetConfig+0x124>)
 c005fbe:	4293      	cmp	r3, r2
 c005fc0:	d00b      	beq.n	c005fda <TIM_Base_SetConfig+0x9a>
 c005fc2:	687b      	ldr	r3, [r7, #4]
 c005fc4:	4a28      	ldr	r2, [pc, #160]	; (c006068 <TIM_Base_SetConfig+0x128>)
 c005fc6:	4293      	cmp	r3, r2
 c005fc8:	d007      	beq.n	c005fda <TIM_Base_SetConfig+0x9a>
 c005fca:	687b      	ldr	r3, [r7, #4]
 c005fcc:	4a27      	ldr	r2, [pc, #156]	; (c00606c <TIM_Base_SetConfig+0x12c>)
 c005fce:	4293      	cmp	r3, r2
 c005fd0:	d003      	beq.n	c005fda <TIM_Base_SetConfig+0x9a>
 c005fd2:	687b      	ldr	r3, [r7, #4]
 c005fd4:	4a26      	ldr	r2, [pc, #152]	; (c006070 <TIM_Base_SetConfig+0x130>)
 c005fd6:	4293      	cmp	r3, r2
 c005fd8:	d108      	bne.n	c005fec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 c005fda:	68fb      	ldr	r3, [r7, #12]
 c005fdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 c005fe0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 c005fe2:	683b      	ldr	r3, [r7, #0]
 c005fe4:	68db      	ldr	r3, [r3, #12]
 c005fe6:	68fa      	ldr	r2, [r7, #12]
 c005fe8:	4313      	orrs	r3, r2
 c005fea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 c005fec:	68fb      	ldr	r3, [r7, #12]
 c005fee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 c005ff2:	683b      	ldr	r3, [r7, #0]
 c005ff4:	695b      	ldr	r3, [r3, #20]
 c005ff6:	4313      	orrs	r3, r2
 c005ff8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 c005ffa:	687b      	ldr	r3, [r7, #4]
 c005ffc:	68fa      	ldr	r2, [r7, #12]
 c005ffe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 c006000:	683b      	ldr	r3, [r7, #0]
 c006002:	689a      	ldr	r2, [r3, #8]
 c006004:	687b      	ldr	r3, [r7, #4]
 c006006:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 c006008:	683b      	ldr	r3, [r7, #0]
 c00600a:	681a      	ldr	r2, [r3, #0]
 c00600c:	687b      	ldr	r3, [r7, #4]
 c00600e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 c006010:	687b      	ldr	r3, [r7, #4]
 c006012:	4a10      	ldr	r2, [pc, #64]	; (c006054 <TIM_Base_SetConfig+0x114>)
 c006014:	4293      	cmp	r3, r2
 c006016:	d00f      	beq.n	c006038 <TIM_Base_SetConfig+0xf8>
 c006018:	687b      	ldr	r3, [r7, #4]
 c00601a:	4a12      	ldr	r2, [pc, #72]	; (c006064 <TIM_Base_SetConfig+0x124>)
 c00601c:	4293      	cmp	r3, r2
 c00601e:	d00b      	beq.n	c006038 <TIM_Base_SetConfig+0xf8>
 c006020:	687b      	ldr	r3, [r7, #4]
 c006022:	4a11      	ldr	r2, [pc, #68]	; (c006068 <TIM_Base_SetConfig+0x128>)
 c006024:	4293      	cmp	r3, r2
 c006026:	d007      	beq.n	c006038 <TIM_Base_SetConfig+0xf8>
 c006028:	687b      	ldr	r3, [r7, #4]
 c00602a:	4a10      	ldr	r2, [pc, #64]	; (c00606c <TIM_Base_SetConfig+0x12c>)
 c00602c:	4293      	cmp	r3, r2
 c00602e:	d003      	beq.n	c006038 <TIM_Base_SetConfig+0xf8>
 c006030:	687b      	ldr	r3, [r7, #4]
 c006032:	4a0f      	ldr	r2, [pc, #60]	; (c006070 <TIM_Base_SetConfig+0x130>)
 c006034:	4293      	cmp	r3, r2
 c006036:	d103      	bne.n	c006040 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 c006038:	683b      	ldr	r3, [r7, #0]
 c00603a:	691a      	ldr	r2, [r3, #16]
 c00603c:	687b      	ldr	r3, [r7, #4]
 c00603e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 c006040:	687b      	ldr	r3, [r7, #4]
 c006042:	2201      	movs	r2, #1
 c006044:	615a      	str	r2, [r3, #20]
}
 c006046:	bf00      	nop
 c006048:	3714      	adds	r7, #20
 c00604a:	46bd      	mov	sp, r7
 c00604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c006050:	4770      	bx	lr
 c006052:	bf00      	nop
 c006054:	50012c00 	.word	0x50012c00
 c006058:	50000400 	.word	0x50000400
 c00605c:	50000800 	.word	0x50000800
 c006060:	50000c00 	.word	0x50000c00
 c006064:	50013400 	.word	0x50013400
 c006068:	50014000 	.word	0x50014000
 c00606c:	50014400 	.word	0x50014400
 c006070:	50014800 	.word	0x50014800

0c006074 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 c006074:	b480      	push	{r7}
 c006076:	b083      	sub	sp, #12
 c006078:	af00      	add	r7, sp, #0
 c00607a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 c00607c:	bf00      	nop
 c00607e:	370c      	adds	r7, #12
 c006080:	46bd      	mov	sp, r7
 c006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 c006086:	4770      	bx	lr

0c006088 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 c006088:	b480      	push	{r7}
 c00608a:	b083      	sub	sp, #12
 c00608c:	af00      	add	r7, sp, #0
 c00608e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 c006090:	bf00      	nop
 c006092:	370c      	adds	r7, #12
 c006094:	46bd      	mov	sp, r7
 c006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00609a:	4770      	bx	lr

0c00609c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 c00609c:	b480      	push	{r7}
 c00609e:	b083      	sub	sp, #12
 c0060a0:	af00      	add	r7, sp, #0
 c0060a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 c0060a4:	bf00      	nop
 c0060a6:	370c      	adds	r7, #12
 c0060a8:	46bd      	mov	sp, r7
 c0060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0060ae:	4770      	bx	lr

0c0060b0 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 c0060b0:	b084      	sub	sp, #16
 c0060b2:	b480      	push	{r7}
 c0060b4:	b085      	sub	sp, #20
 c0060b6:	af00      	add	r7, sp, #0
 c0060b8:	6078      	str	r0, [r7, #4]
 c0060ba:	f107 001c 	add.w	r0, r7, #28
 c0060be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 c0060c2:	2300      	movs	r3, #0
 c0060c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 c0060c6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 c0060c8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 c0060ca:	431a      	orrs	r2, r3
             Init.BusWide             | \
 c0060cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 c0060ce:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 c0060d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 c0060d2:	431a      	orrs	r2, r3
             Init.ClockDiv
 c0060d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 c0060d6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 c0060d8:	68fa      	ldr	r2, [r7, #12]
 c0060da:	4313      	orrs	r3, r2
 c0060dc:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 c0060de:	687b      	ldr	r3, [r7, #4]
 c0060e0:	685a      	ldr	r2, [r3, #4]
 c0060e2:	4b07      	ldr	r3, [pc, #28]	; (c006100 <SDMMC_Init+0x50>)
 c0060e4:	4013      	ands	r3, r2
 c0060e6:	68fa      	ldr	r2, [r7, #12]
 c0060e8:	431a      	orrs	r2, r3
 c0060ea:	687b      	ldr	r3, [r7, #4]
 c0060ec:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 c0060ee:	2300      	movs	r3, #0
}
 c0060f0:	4618      	mov	r0, r3
 c0060f2:	3714      	adds	r7, #20
 c0060f4:	46bd      	mov	sp, r7
 c0060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0060fa:	b004      	add	sp, #16
 c0060fc:	4770      	bx	lr
 c0060fe:	bf00      	nop
 c006100:	ffc02c00 	.word	0xffc02c00

0c006104 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 c006104:	b480      	push	{r7}
 c006106:	b083      	sub	sp, #12
 c006108:	af00      	add	r7, sp, #0
 c00610a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 c00610c:	687b      	ldr	r3, [r7, #4]
 c00610e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 c006112:	4618      	mov	r0, r3
 c006114:	370c      	adds	r7, #12
 c006116:	46bd      	mov	sp, r7
 c006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00611c:	4770      	bx	lr

0c00611e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 c00611e:	b480      	push	{r7}
 c006120:	b083      	sub	sp, #12
 c006122:	af00      	add	r7, sp, #0
 c006124:	6078      	str	r0, [r7, #4]
 c006126:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 c006128:	683b      	ldr	r3, [r7, #0]
 c00612a:	681a      	ldr	r2, [r3, #0]
 c00612c:	687b      	ldr	r3, [r7, #4]
 c00612e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 c006132:	2300      	movs	r3, #0
}
 c006134:	4618      	mov	r0, r3
 c006136:	370c      	adds	r7, #12
 c006138:	46bd      	mov	sp, r7
 c00613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00613e:	4770      	bx	lr

0c006140 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 c006140:	b480      	push	{r7}
 c006142:	b083      	sub	sp, #12
 c006144:	af00      	add	r7, sp, #0
 c006146:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 c006148:	687b      	ldr	r3, [r7, #4]
 c00614a:	681b      	ldr	r3, [r3, #0]
 c00614c:	f043 0203 	orr.w	r2, r3, #3
 c006150:	687b      	ldr	r3, [r7, #4]
 c006152:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 c006154:	2300      	movs	r3, #0
}
 c006156:	4618      	mov	r0, r3
 c006158:	370c      	adds	r7, #12
 c00615a:	46bd      	mov	sp, r7
 c00615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c006160:	4770      	bx	lr

0c006162 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 c006162:	b480      	push	{r7}
 c006164:	b083      	sub	sp, #12
 c006166:	af00      	add	r7, sp, #0
 c006168:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 c00616a:	687b      	ldr	r3, [r7, #4]
 c00616c:	681b      	ldr	r3, [r3, #0]
 c00616e:	f003 0303 	and.w	r3, r3, #3
}
 c006172:	4618      	mov	r0, r3
 c006174:	370c      	adds	r7, #12
 c006176:	46bd      	mov	sp, r7
 c006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00617c:	4770      	bx	lr
	...

0c006180 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 c006180:	b480      	push	{r7}
 c006182:	b085      	sub	sp, #20
 c006184:	af00      	add	r7, sp, #0
 c006186:	6078      	str	r0, [r7, #4]
 c006188:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 c00618a:	2300      	movs	r3, #0
 c00618c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 c00618e:	683b      	ldr	r3, [r7, #0]
 c006190:	681a      	ldr	r2, [r3, #0]
 c006192:	687b      	ldr	r3, [r7, #4]
 c006194:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 c006196:	683b      	ldr	r3, [r7, #0]
 c006198:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 c00619a:	683b      	ldr	r3, [r7, #0]
 c00619c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 c00619e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 c0061a0:	683b      	ldr	r3, [r7, #0]
 c0061a2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 c0061a4:	431a      	orrs	r2, r3
                       Command->CPSM);
 c0061a6:	683b      	ldr	r3, [r7, #0]
 c0061a8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 c0061aa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 c0061ac:	68fa      	ldr	r2, [r7, #12]
 c0061ae:	4313      	orrs	r3, r2
 c0061b0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 c0061b2:	687b      	ldr	r3, [r7, #4]
 c0061b4:	68da      	ldr	r2, [r3, #12]
 c0061b6:	4b06      	ldr	r3, [pc, #24]	; (c0061d0 <SDMMC_SendCommand+0x50>)
 c0061b8:	4013      	ands	r3, r2
 c0061ba:	68fa      	ldr	r2, [r7, #12]
 c0061bc:	431a      	orrs	r2, r3
 c0061be:	687b      	ldr	r3, [r7, #4]
 c0061c0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 c0061c2:	2300      	movs	r3, #0
}
 c0061c4:	4618      	mov	r0, r3
 c0061c6:	3714      	adds	r7, #20
 c0061c8:	46bd      	mov	sp, r7
 c0061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0061ce:	4770      	bx	lr
 c0061d0:	fffee0c0 	.word	0xfffee0c0

0c0061d4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 c0061d4:	b480      	push	{r7}
 c0061d6:	b083      	sub	sp, #12
 c0061d8:	af00      	add	r7, sp, #0
 c0061da:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 c0061dc:	687b      	ldr	r3, [r7, #4]
 c0061de:	691b      	ldr	r3, [r3, #16]
 c0061e0:	b2db      	uxtb	r3, r3
}
 c0061e2:	4618      	mov	r0, r3
 c0061e4:	370c      	adds	r7, #12
 c0061e6:	46bd      	mov	sp, r7
 c0061e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0061ec:	4770      	bx	lr

0c0061ee <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 c0061ee:	b480      	push	{r7}
 c0061f0:	b085      	sub	sp, #20
 c0061f2:	af00      	add	r7, sp, #0
 c0061f4:	6078      	str	r0, [r7, #4]
 c0061f6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 c0061f8:	687b      	ldr	r3, [r7, #4]
 c0061fa:	3314      	adds	r3, #20
 c0061fc:	461a      	mov	r2, r3
 c0061fe:	683b      	ldr	r3, [r7, #0]
 c006200:	4413      	add	r3, r2
 c006202:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 c006204:	68fb      	ldr	r3, [r7, #12]
 c006206:	681b      	ldr	r3, [r3, #0]
}
 c006208:	4618      	mov	r0, r3
 c00620a:	3714      	adds	r7, #20
 c00620c:	46bd      	mov	sp, r7
 c00620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c006212:	4770      	bx	lr

0c006214 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 c006214:	b480      	push	{r7}
 c006216:	b085      	sub	sp, #20
 c006218:	af00      	add	r7, sp, #0
 c00621a:	6078      	str	r0, [r7, #4]
 c00621c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 c00621e:	2300      	movs	r3, #0
 c006220:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 c006222:	683b      	ldr	r3, [r7, #0]
 c006224:	681a      	ldr	r2, [r3, #0]
 c006226:	687b      	ldr	r3, [r7, #4]
 c006228:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 c00622a:	683b      	ldr	r3, [r7, #0]
 c00622c:	685a      	ldr	r2, [r3, #4]
 c00622e:	687b      	ldr	r3, [r7, #4]
 c006230:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 c006232:	683b      	ldr	r3, [r7, #0]
 c006234:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 c006236:	683b      	ldr	r3, [r7, #0]
 c006238:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 c00623a:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 c00623c:	683b      	ldr	r3, [r7, #0]
 c00623e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 c006240:	431a      	orrs	r2, r3
                       Data->DPSM);
 c006242:	683b      	ldr	r3, [r7, #0]
 c006244:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 c006246:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 c006248:	68fa      	ldr	r2, [r7, #12]
 c00624a:	4313      	orrs	r3, r2
 c00624c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 c00624e:	687b      	ldr	r3, [r7, #4]
 c006250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c006252:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 c006256:	68fb      	ldr	r3, [r7, #12]
 c006258:	431a      	orrs	r2, r3
 c00625a:	687b      	ldr	r3, [r7, #4]
 c00625c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 c00625e:	2300      	movs	r3, #0

}
 c006260:	4618      	mov	r0, r3
 c006262:	3714      	adds	r7, #20
 c006264:	46bd      	mov	sp, r7
 c006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00626a:	4770      	bx	lr

0c00626c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 c00626c:	b580      	push	{r7, lr}
 c00626e:	b088      	sub	sp, #32
 c006270:	af00      	add	r7, sp, #0
 c006272:	6078      	str	r0, [r7, #4]
 c006274:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 c006276:	683b      	ldr	r3, [r7, #0]
 c006278:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 c00627a:	2310      	movs	r3, #16
 c00627c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 c00627e:	f44f 7380 	mov.w	r3, #256	; 0x100
 c006282:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 c006284:	2300      	movs	r3, #0
 c006286:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 c006288:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 c00628c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 c00628e:	f107 0308 	add.w	r3, r7, #8
 c006292:	4619      	mov	r1, r3
 c006294:	6878      	ldr	r0, [r7, #4]
 c006296:	f7ff ff73 	bl	c006180 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 c00629a:	f241 3288 	movw	r2, #5000	; 0x1388
 c00629e:	2110      	movs	r1, #16
 c0062a0:	6878      	ldr	r0, [r7, #4]
 c0062a2:	f000 fa5f 	bl	c006764 <SDMMC_GetCmdResp1>
 c0062a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 c0062a8:	69fb      	ldr	r3, [r7, #28]
}
 c0062aa:	4618      	mov	r0, r3
 c0062ac:	3720      	adds	r7, #32
 c0062ae:	46bd      	mov	sp, r7
 c0062b0:	bd80      	pop	{r7, pc}

0c0062b2 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 c0062b2:	b580      	push	{r7, lr}
 c0062b4:	b088      	sub	sp, #32
 c0062b6:	af00      	add	r7, sp, #0
 c0062b8:	6078      	str	r0, [r7, #4]
 c0062ba:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 c0062bc:	683b      	ldr	r3, [r7, #0]
 c0062be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 c0062c0:	2311      	movs	r3, #17
 c0062c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 c0062c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 c0062c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 c0062ca:	2300      	movs	r3, #0
 c0062cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 c0062ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 c0062d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 c0062d4:	f107 0308 	add.w	r3, r7, #8
 c0062d8:	4619      	mov	r1, r3
 c0062da:	6878      	ldr	r0, [r7, #4]
 c0062dc:	f7ff ff50 	bl	c006180 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 c0062e0:	f241 3288 	movw	r2, #5000	; 0x1388
 c0062e4:	2111      	movs	r1, #17
 c0062e6:	6878      	ldr	r0, [r7, #4]
 c0062e8:	f000 fa3c 	bl	c006764 <SDMMC_GetCmdResp1>
 c0062ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 c0062ee:	69fb      	ldr	r3, [r7, #28]
}
 c0062f0:	4618      	mov	r0, r3
 c0062f2:	3720      	adds	r7, #32
 c0062f4:	46bd      	mov	sp, r7
 c0062f6:	bd80      	pop	{r7, pc}

0c0062f8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 c0062f8:	b580      	push	{r7, lr}
 c0062fa:	b088      	sub	sp, #32
 c0062fc:	af00      	add	r7, sp, #0
 c0062fe:	6078      	str	r0, [r7, #4]
 c006300:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 c006302:	683b      	ldr	r3, [r7, #0]
 c006304:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 c006306:	2312      	movs	r3, #18
 c006308:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 c00630a:	f44f 7380 	mov.w	r3, #256	; 0x100
 c00630e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 c006310:	2300      	movs	r3, #0
 c006312:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 c006314:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 c006318:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 c00631a:	f107 0308 	add.w	r3, r7, #8
 c00631e:	4619      	mov	r1, r3
 c006320:	6878      	ldr	r0, [r7, #4]
 c006322:	f7ff ff2d 	bl	c006180 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 c006326:	f241 3288 	movw	r2, #5000	; 0x1388
 c00632a:	2112      	movs	r1, #18
 c00632c:	6878      	ldr	r0, [r7, #4]
 c00632e:	f000 fa19 	bl	c006764 <SDMMC_GetCmdResp1>
 c006332:	61f8      	str	r0, [r7, #28]

  return errorstate;
 c006334:	69fb      	ldr	r3, [r7, #28]
}
 c006336:	4618      	mov	r0, r3
 c006338:	3720      	adds	r7, #32
 c00633a:	46bd      	mov	sp, r7
 c00633c:	bd80      	pop	{r7, pc}

0c00633e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 c00633e:	b580      	push	{r7, lr}
 c006340:	b088      	sub	sp, #32
 c006342:	af00      	add	r7, sp, #0
 c006344:	6078      	str	r0, [r7, #4]
 c006346:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 c006348:	683b      	ldr	r3, [r7, #0]
 c00634a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 c00634c:	2318      	movs	r3, #24
 c00634e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 c006350:	f44f 7380 	mov.w	r3, #256	; 0x100
 c006354:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 c006356:	2300      	movs	r3, #0
 c006358:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 c00635a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 c00635e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 c006360:	f107 0308 	add.w	r3, r7, #8
 c006364:	4619      	mov	r1, r3
 c006366:	6878      	ldr	r0, [r7, #4]
 c006368:	f7ff ff0a 	bl	c006180 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 c00636c:	f241 3288 	movw	r2, #5000	; 0x1388
 c006370:	2118      	movs	r1, #24
 c006372:	6878      	ldr	r0, [r7, #4]
 c006374:	f000 f9f6 	bl	c006764 <SDMMC_GetCmdResp1>
 c006378:	61f8      	str	r0, [r7, #28]

  return errorstate;
 c00637a:	69fb      	ldr	r3, [r7, #28]
}
 c00637c:	4618      	mov	r0, r3
 c00637e:	3720      	adds	r7, #32
 c006380:	46bd      	mov	sp, r7
 c006382:	bd80      	pop	{r7, pc}

0c006384 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 c006384:	b580      	push	{r7, lr}
 c006386:	b088      	sub	sp, #32
 c006388:	af00      	add	r7, sp, #0
 c00638a:	6078      	str	r0, [r7, #4]
 c00638c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 c00638e:	683b      	ldr	r3, [r7, #0]
 c006390:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 c006392:	2319      	movs	r3, #25
 c006394:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 c006396:	f44f 7380 	mov.w	r3, #256	; 0x100
 c00639a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 c00639c:	2300      	movs	r3, #0
 c00639e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 c0063a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 c0063a4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 c0063a6:	f107 0308 	add.w	r3, r7, #8
 c0063aa:	4619      	mov	r1, r3
 c0063ac:	6878      	ldr	r0, [r7, #4]
 c0063ae:	f7ff fee7 	bl	c006180 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 c0063b2:	f241 3288 	movw	r2, #5000	; 0x1388
 c0063b6:	2119      	movs	r1, #25
 c0063b8:	6878      	ldr	r0, [r7, #4]
 c0063ba:	f000 f9d3 	bl	c006764 <SDMMC_GetCmdResp1>
 c0063be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 c0063c0:	69fb      	ldr	r3, [r7, #28]
}
 c0063c2:	4618      	mov	r0, r3
 c0063c4:	3720      	adds	r7, #32
 c0063c6:	46bd      	mov	sp, r7
 c0063c8:	bd80      	pop	{r7, pc}
	...

0c0063cc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 c0063cc:	b580      	push	{r7, lr}
 c0063ce:	b088      	sub	sp, #32
 c0063d0:	af00      	add	r7, sp, #0
 c0063d2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 c0063d4:	2300      	movs	r3, #0
 c0063d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 c0063d8:	230c      	movs	r3, #12
 c0063da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 c0063dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 c0063e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 c0063e2:	2300      	movs	r3, #0
 c0063e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 c0063e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 c0063ea:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 c0063ec:	687b      	ldr	r3, [r7, #4]
 c0063ee:	68db      	ldr	r3, [r3, #12]
 c0063f0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 c0063f4:	687b      	ldr	r3, [r7, #4]
 c0063f6:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 c0063f8:	687b      	ldr	r3, [r7, #4]
 c0063fa:	68db      	ldr	r3, [r3, #12]
 c0063fc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 c006400:	687b      	ldr	r3, [r7, #4]
 c006402:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 c006404:	f107 0308 	add.w	r3, r7, #8
 c006408:	4619      	mov	r1, r3
 c00640a:	6878      	ldr	r0, [r7, #4]
 c00640c:	f7ff feb8 	bl	c006180 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 c006410:	4a0b      	ldr	r2, [pc, #44]	; (c006440 <SDMMC_CmdStopTransfer+0x74>)
 c006412:	210c      	movs	r1, #12
 c006414:	6878      	ldr	r0, [r7, #4]
 c006416:	f000 f9a5 	bl	c006764 <SDMMC_GetCmdResp1>
 c00641a:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 c00641c:	687b      	ldr	r3, [r7, #4]
 c00641e:	68db      	ldr	r3, [r3, #12]
 c006420:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 c006424:	687b      	ldr	r3, [r7, #4]
 c006426:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 c006428:	69fb      	ldr	r3, [r7, #28]
 c00642a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 c00642e:	d101      	bne.n	c006434 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 c006430:	2300      	movs	r3, #0
 c006432:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 c006434:	69fb      	ldr	r3, [r7, #28]
}
 c006436:	4618      	mov	r0, r3
 c006438:	3720      	adds	r7, #32
 c00643a:	46bd      	mov	sp, r7
 c00643c:	bd80      	pop	{r7, pc}
 c00643e:	bf00      	nop
 c006440:	05f5e100 	.word	0x05f5e100

0c006444 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 c006444:	b580      	push	{r7, lr}
 c006446:	b088      	sub	sp, #32
 c006448:	af00      	add	r7, sp, #0
 c00644a:	6078      	str	r0, [r7, #4]
 c00644c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 c00644e:	683b      	ldr	r3, [r7, #0]
 c006450:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 c006452:	2307      	movs	r3, #7
 c006454:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 c006456:	f44f 7380 	mov.w	r3, #256	; 0x100
 c00645a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 c00645c:	2300      	movs	r3, #0
 c00645e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 c006460:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 c006464:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 c006466:	f107 0308 	add.w	r3, r7, #8
 c00646a:	4619      	mov	r1, r3
 c00646c:	6878      	ldr	r0, [r7, #4]
 c00646e:	f7ff fe87 	bl	c006180 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 c006472:	f241 3288 	movw	r2, #5000	; 0x1388
 c006476:	2107      	movs	r1, #7
 c006478:	6878      	ldr	r0, [r7, #4]
 c00647a:	f000 f973 	bl	c006764 <SDMMC_GetCmdResp1>
 c00647e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 c006480:	69fb      	ldr	r3, [r7, #28]
}
 c006482:	4618      	mov	r0, r3
 c006484:	3720      	adds	r7, #32
 c006486:	46bd      	mov	sp, r7
 c006488:	bd80      	pop	{r7, pc}

0c00648a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 c00648a:	b580      	push	{r7, lr}
 c00648c:	b088      	sub	sp, #32
 c00648e:	af00      	add	r7, sp, #0
 c006490:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 c006492:	2300      	movs	r3, #0
 c006494:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 c006496:	2300      	movs	r3, #0
 c006498:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 c00649a:	2300      	movs	r3, #0
 c00649c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 c00649e:	2300      	movs	r3, #0
 c0064a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 c0064a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 c0064a6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 c0064a8:	f107 0308 	add.w	r3, r7, #8
 c0064ac:	4619      	mov	r1, r3
 c0064ae:	6878      	ldr	r0, [r7, #4]
 c0064b0:	f7ff fe66 	bl	c006180 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 c0064b4:	6878      	ldr	r0, [r7, #4]
 c0064b6:	f000 fb97 	bl	c006be8 <SDMMC_GetCmdError>
 c0064ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 c0064bc:	69fb      	ldr	r3, [r7, #28]
}
 c0064be:	4618      	mov	r0, r3
 c0064c0:	3720      	adds	r7, #32
 c0064c2:	46bd      	mov	sp, r7
 c0064c4:	bd80      	pop	{r7, pc}

0c0064c6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 c0064c6:	b580      	push	{r7, lr}
 c0064c8:	b088      	sub	sp, #32
 c0064ca:	af00      	add	r7, sp, #0
 c0064cc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 c0064ce:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 c0064d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 c0064d4:	2308      	movs	r3, #8
 c0064d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 c0064d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 c0064dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 c0064de:	2300      	movs	r3, #0
 c0064e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 c0064e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 c0064e6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 c0064e8:	f107 0308 	add.w	r3, r7, #8
 c0064ec:	4619      	mov	r1, r3
 c0064ee:	6878      	ldr	r0, [r7, #4]
 c0064f0:	f7ff fe46 	bl	c006180 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 c0064f4:	6878      	ldr	r0, [r7, #4]
 c0064f6:	f000 fb29 	bl	c006b4c <SDMMC_GetCmdResp7>
 c0064fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 c0064fc:	69fb      	ldr	r3, [r7, #28]
}
 c0064fe:	4618      	mov	r0, r3
 c006500:	3720      	adds	r7, #32
 c006502:	46bd      	mov	sp, r7
 c006504:	bd80      	pop	{r7, pc}

0c006506 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 c006506:	b580      	push	{r7, lr}
 c006508:	b088      	sub	sp, #32
 c00650a:	af00      	add	r7, sp, #0
 c00650c:	6078      	str	r0, [r7, #4]
 c00650e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 c006510:	683b      	ldr	r3, [r7, #0]
 c006512:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 c006514:	2337      	movs	r3, #55	; 0x37
 c006516:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 c006518:	f44f 7380 	mov.w	r3, #256	; 0x100
 c00651c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 c00651e:	2300      	movs	r3, #0
 c006520:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 c006522:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 c006526:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 c006528:	f107 0308 	add.w	r3, r7, #8
 c00652c:	4619      	mov	r1, r3
 c00652e:	6878      	ldr	r0, [r7, #4]
 c006530:	f7ff fe26 	bl	c006180 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 c006534:	f241 3288 	movw	r2, #5000	; 0x1388
 c006538:	2137      	movs	r1, #55	; 0x37
 c00653a:	6878      	ldr	r0, [r7, #4]
 c00653c:	f000 f912 	bl	c006764 <SDMMC_GetCmdResp1>
 c006540:	61f8      	str	r0, [r7, #28]

  return errorstate;
 c006542:	69fb      	ldr	r3, [r7, #28]
}
 c006544:	4618      	mov	r0, r3
 c006546:	3720      	adds	r7, #32
 c006548:	46bd      	mov	sp, r7
 c00654a:	bd80      	pop	{r7, pc}

0c00654c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 c00654c:	b580      	push	{r7, lr}
 c00654e:	b088      	sub	sp, #32
 c006550:	af00      	add	r7, sp, #0
 c006552:	6078      	str	r0, [r7, #4]
 c006554:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 c006556:	683b      	ldr	r3, [r7, #0]
 c006558:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 c00655a:	2329      	movs	r3, #41	; 0x29
 c00655c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 c00655e:	f44f 7380 	mov.w	r3, #256	; 0x100
 c006562:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 c006564:	2300      	movs	r3, #0
 c006566:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 c006568:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 c00656c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 c00656e:	f107 0308 	add.w	r3, r7, #8
 c006572:	4619      	mov	r1, r3
 c006574:	6878      	ldr	r0, [r7, #4]
 c006576:	f7ff fe03 	bl	c006180 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 c00657a:	6878      	ldr	r0, [r7, #4]
 c00657c:	f000 fa2e 	bl	c0069dc <SDMMC_GetCmdResp3>
 c006580:	61f8      	str	r0, [r7, #28]

  return errorstate;
 c006582:	69fb      	ldr	r3, [r7, #28]
}
 c006584:	4618      	mov	r0, r3
 c006586:	3720      	adds	r7, #32
 c006588:	46bd      	mov	sp, r7
 c00658a:	bd80      	pop	{r7, pc}

0c00658c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 c00658c:	b580      	push	{r7, lr}
 c00658e:	b088      	sub	sp, #32
 c006590:	af00      	add	r7, sp, #0
 c006592:	6078      	str	r0, [r7, #4]
 c006594:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 c006596:	683b      	ldr	r3, [r7, #0]
 c006598:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 c00659a:	2306      	movs	r3, #6
 c00659c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 c00659e:	f44f 7380 	mov.w	r3, #256	; 0x100
 c0065a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 c0065a4:	2300      	movs	r3, #0
 c0065a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 c0065a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 c0065ac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 c0065ae:	f107 0308 	add.w	r3, r7, #8
 c0065b2:	4619      	mov	r1, r3
 c0065b4:	6878      	ldr	r0, [r7, #4]
 c0065b6:	f7ff fde3 	bl	c006180 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 c0065ba:	f241 3288 	movw	r2, #5000	; 0x1388
 c0065be:	2106      	movs	r1, #6
 c0065c0:	6878      	ldr	r0, [r7, #4]
 c0065c2:	f000 f8cf 	bl	c006764 <SDMMC_GetCmdResp1>
 c0065c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 c0065c8:	69fb      	ldr	r3, [r7, #28]
}
 c0065ca:	4618      	mov	r0, r3
 c0065cc:	3720      	adds	r7, #32
 c0065ce:	46bd      	mov	sp, r7
 c0065d0:	bd80      	pop	{r7, pc}

0c0065d2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 c0065d2:	b580      	push	{r7, lr}
 c0065d4:	b088      	sub	sp, #32
 c0065d6:	af00      	add	r7, sp, #0
 c0065d8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 c0065da:	2300      	movs	r3, #0
 c0065dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 c0065de:	2333      	movs	r3, #51	; 0x33
 c0065e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 c0065e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 c0065e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 c0065e8:	2300      	movs	r3, #0
 c0065ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 c0065ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 c0065f0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 c0065f2:	f107 0308 	add.w	r3, r7, #8
 c0065f6:	4619      	mov	r1, r3
 c0065f8:	6878      	ldr	r0, [r7, #4]
 c0065fa:	f7ff fdc1 	bl	c006180 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 c0065fe:	f241 3288 	movw	r2, #5000	; 0x1388
 c006602:	2133      	movs	r1, #51	; 0x33
 c006604:	6878      	ldr	r0, [r7, #4]
 c006606:	f000 f8ad 	bl	c006764 <SDMMC_GetCmdResp1>
 c00660a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 c00660c:	69fb      	ldr	r3, [r7, #28]
}
 c00660e:	4618      	mov	r0, r3
 c006610:	3720      	adds	r7, #32
 c006612:	46bd      	mov	sp, r7
 c006614:	bd80      	pop	{r7, pc}

0c006616 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 c006616:	b580      	push	{r7, lr}
 c006618:	b088      	sub	sp, #32
 c00661a:	af00      	add	r7, sp, #0
 c00661c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 c00661e:	2300      	movs	r3, #0
 c006620:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 c006622:	2302      	movs	r3, #2
 c006624:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 c006626:	f44f 7340 	mov.w	r3, #768	; 0x300
 c00662a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 c00662c:	2300      	movs	r3, #0
 c00662e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 c006630:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 c006634:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 c006636:	f107 0308 	add.w	r3, r7, #8
 c00663a:	4619      	mov	r1, r3
 c00663c:	6878      	ldr	r0, [r7, #4]
 c00663e:	f7ff fd9f 	bl	c006180 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 c006642:	6878      	ldr	r0, [r7, #4]
 c006644:	f000 f980 	bl	c006948 <SDMMC_GetCmdResp2>
 c006648:	61f8      	str	r0, [r7, #28]

  return errorstate;
 c00664a:	69fb      	ldr	r3, [r7, #28]
}
 c00664c:	4618      	mov	r0, r3
 c00664e:	3720      	adds	r7, #32
 c006650:	46bd      	mov	sp, r7
 c006652:	bd80      	pop	{r7, pc}

0c006654 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 c006654:	b580      	push	{r7, lr}
 c006656:	b088      	sub	sp, #32
 c006658:	af00      	add	r7, sp, #0
 c00665a:	6078      	str	r0, [r7, #4]
 c00665c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 c00665e:	683b      	ldr	r3, [r7, #0]
 c006660:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 c006662:	2309      	movs	r3, #9
 c006664:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 c006666:	f44f 7340 	mov.w	r3, #768	; 0x300
 c00666a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 c00666c:	2300      	movs	r3, #0
 c00666e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 c006670:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 c006674:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 c006676:	f107 0308 	add.w	r3, r7, #8
 c00667a:	4619      	mov	r1, r3
 c00667c:	6878      	ldr	r0, [r7, #4]
 c00667e:	f7ff fd7f 	bl	c006180 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 c006682:	6878      	ldr	r0, [r7, #4]
 c006684:	f000 f960 	bl	c006948 <SDMMC_GetCmdResp2>
 c006688:	61f8      	str	r0, [r7, #28]

  return errorstate;
 c00668a:	69fb      	ldr	r3, [r7, #28]
}
 c00668c:	4618      	mov	r0, r3
 c00668e:	3720      	adds	r7, #32
 c006690:	46bd      	mov	sp, r7
 c006692:	bd80      	pop	{r7, pc}

0c006694 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 c006694:	b580      	push	{r7, lr}
 c006696:	b088      	sub	sp, #32
 c006698:	af00      	add	r7, sp, #0
 c00669a:	6078      	str	r0, [r7, #4]
 c00669c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 c00669e:	2300      	movs	r3, #0
 c0066a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 c0066a2:	2303      	movs	r3, #3
 c0066a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 c0066a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 c0066aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 c0066ac:	2300      	movs	r3, #0
 c0066ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 c0066b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 c0066b4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 c0066b6:	f107 0308 	add.w	r3, r7, #8
 c0066ba:	4619      	mov	r1, r3
 c0066bc:	6878      	ldr	r0, [r7, #4]
 c0066be:	f7ff fd5f 	bl	c006180 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 c0066c2:	683a      	ldr	r2, [r7, #0]
 c0066c4:	2103      	movs	r1, #3
 c0066c6:	6878      	ldr	r0, [r7, #4]
 c0066c8:	f000 f9c8 	bl	c006a5c <SDMMC_GetCmdResp6>
 c0066cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 c0066ce:	69fb      	ldr	r3, [r7, #28]
}
 c0066d0:	4618      	mov	r0, r3
 c0066d2:	3720      	adds	r7, #32
 c0066d4:	46bd      	mov	sp, r7
 c0066d6:	bd80      	pop	{r7, pc}

0c0066d8 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 c0066d8:	b580      	push	{r7, lr}
 c0066da:	b088      	sub	sp, #32
 c0066dc:	af00      	add	r7, sp, #0
 c0066de:	6078      	str	r0, [r7, #4]
 c0066e0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 c0066e2:	683b      	ldr	r3, [r7, #0]
 c0066e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 c0066e6:	230d      	movs	r3, #13
 c0066e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 c0066ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 c0066ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 c0066f0:	2300      	movs	r3, #0
 c0066f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 c0066f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 c0066f8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 c0066fa:	f107 0308 	add.w	r3, r7, #8
 c0066fe:	4619      	mov	r1, r3
 c006700:	6878      	ldr	r0, [r7, #4]
 c006702:	f7ff fd3d 	bl	c006180 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 c006706:	f241 3288 	movw	r2, #5000	; 0x1388
 c00670a:	210d      	movs	r1, #13
 c00670c:	6878      	ldr	r0, [r7, #4]
 c00670e:	f000 f829 	bl	c006764 <SDMMC_GetCmdResp1>
 c006712:	61f8      	str	r0, [r7, #28]

  return errorstate;
 c006714:	69fb      	ldr	r3, [r7, #28]
}
 c006716:	4618      	mov	r0, r3
 c006718:	3720      	adds	r7, #32
 c00671a:	46bd      	mov	sp, r7
 c00671c:	bd80      	pop	{r7, pc}

0c00671e <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 c00671e:	b580      	push	{r7, lr}
 c006720:	b088      	sub	sp, #32
 c006722:	af00      	add	r7, sp, #0
 c006724:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 c006726:	2300      	movs	r3, #0
 c006728:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 c00672a:	230d      	movs	r3, #13
 c00672c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 c00672e:	f44f 7380 	mov.w	r3, #256	; 0x100
 c006732:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 c006734:	2300      	movs	r3, #0
 c006736:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 c006738:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 c00673c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 c00673e:	f107 0308 	add.w	r3, r7, #8
 c006742:	4619      	mov	r1, r3
 c006744:	6878      	ldr	r0, [r7, #4]
 c006746:	f7ff fd1b 	bl	c006180 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 c00674a:	f241 3288 	movw	r2, #5000	; 0x1388
 c00674e:	210d      	movs	r1, #13
 c006750:	6878      	ldr	r0, [r7, #4]
 c006752:	f000 f807 	bl	c006764 <SDMMC_GetCmdResp1>
 c006756:	61f8      	str	r0, [r7, #28]

  return errorstate;
 c006758:	69fb      	ldr	r3, [r7, #28]
}
 c00675a:	4618      	mov	r0, r3
 c00675c:	3720      	adds	r7, #32
 c00675e:	46bd      	mov	sp, r7
 c006760:	bd80      	pop	{r7, pc}
	...

0c006764 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 c006764:	b580      	push	{r7, lr}
 c006766:	b088      	sub	sp, #32
 c006768:	af00      	add	r7, sp, #0
 c00676a:	60f8      	str	r0, [r7, #12]
 c00676c:	460b      	mov	r3, r1
 c00676e:	607a      	str	r2, [r7, #4]
 c006770:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 c006772:	4b70      	ldr	r3, [pc, #448]	; (c006934 <SDMMC_GetCmdResp1+0x1d0>)
 c006774:	681b      	ldr	r3, [r3, #0]
 c006776:	4a70      	ldr	r2, [pc, #448]	; (c006938 <SDMMC_GetCmdResp1+0x1d4>)
 c006778:	fba2 2303 	umull	r2, r3, r2, r3
 c00677c:	0a5a      	lsrs	r2, r3, #9
 c00677e:	687b      	ldr	r3, [r7, #4]
 c006780:	fb02 f303 	mul.w	r3, r2, r3
 c006784:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 c006786:	69fb      	ldr	r3, [r7, #28]
 c006788:	1e5a      	subs	r2, r3, #1
 c00678a:	61fa      	str	r2, [r7, #28]
 c00678c:	2b00      	cmp	r3, #0
 c00678e:	d102      	bne.n	c006796 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 c006790:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 c006794:	e0c9      	b.n	c00692a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 c006796:	68fb      	ldr	r3, [r7, #12]
 c006798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c00679a:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 c00679c:	69ba      	ldr	r2, [r7, #24]
 c00679e:	4b67      	ldr	r3, [pc, #412]	; (c00693c <SDMMC_GetCmdResp1+0x1d8>)
 c0067a0:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 c0067a2:	2b00      	cmp	r3, #0
 c0067a4:	d0ef      	beq.n	c006786 <SDMMC_GetCmdResp1+0x22>
 c0067a6:	69bb      	ldr	r3, [r7, #24]
 c0067a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 c0067ac:	2b00      	cmp	r3, #0
 c0067ae:	d1ea      	bne.n	c006786 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 c0067b0:	68fb      	ldr	r3, [r7, #12]
 c0067b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c0067b4:	f003 0304 	and.w	r3, r3, #4
 c0067b8:	2b00      	cmp	r3, #0
 c0067ba:	d004      	beq.n	c0067c6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 c0067bc:	68fb      	ldr	r3, [r7, #12]
 c0067be:	2204      	movs	r2, #4
 c0067c0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 c0067c2:	2304      	movs	r3, #4
 c0067c4:	e0b1      	b.n	c00692a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 c0067c6:	68fb      	ldr	r3, [r7, #12]
 c0067c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c0067ca:	f003 0301 	and.w	r3, r3, #1
 c0067ce:	2b00      	cmp	r3, #0
 c0067d0:	d004      	beq.n	c0067dc <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 c0067d2:	68fb      	ldr	r3, [r7, #12]
 c0067d4:	2201      	movs	r2, #1
 c0067d6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 c0067d8:	2301      	movs	r3, #1
 c0067da:	e0a6      	b.n	c00692a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 c0067dc:	68fb      	ldr	r3, [r7, #12]
 c0067de:	4a58      	ldr	r2, [pc, #352]	; (c006940 <SDMMC_GetCmdResp1+0x1dc>)
 c0067e0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 c0067e2:	68f8      	ldr	r0, [r7, #12]
 c0067e4:	f7ff fcf6 	bl	c0061d4 <SDMMC_GetCommandResponse>
 c0067e8:	4603      	mov	r3, r0
 c0067ea:	461a      	mov	r2, r3
 c0067ec:	7afb      	ldrb	r3, [r7, #11]
 c0067ee:	4293      	cmp	r3, r2
 c0067f0:	d001      	beq.n	c0067f6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 c0067f2:	2301      	movs	r3, #1
 c0067f4:	e099      	b.n	c00692a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 c0067f6:	2100      	movs	r1, #0
 c0067f8:	68f8      	ldr	r0, [r7, #12]
 c0067fa:	f7ff fcf8 	bl	c0061ee <SDMMC_GetResponse>
 c0067fe:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 c006800:	697a      	ldr	r2, [r7, #20]
 c006802:	4b50      	ldr	r3, [pc, #320]	; (c006944 <SDMMC_GetCmdResp1+0x1e0>)
 c006804:	4013      	ands	r3, r2
 c006806:	2b00      	cmp	r3, #0
 c006808:	d101      	bne.n	c00680e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 c00680a:	2300      	movs	r3, #0
 c00680c:	e08d      	b.n	c00692a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 c00680e:	697b      	ldr	r3, [r7, #20]
 c006810:	2b00      	cmp	r3, #0
 c006812:	da02      	bge.n	c00681a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 c006814:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 c006818:	e087      	b.n	c00692a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 c00681a:	697b      	ldr	r3, [r7, #20]
 c00681c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 c006820:	2b00      	cmp	r3, #0
 c006822:	d001      	beq.n	c006828 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 c006824:	2340      	movs	r3, #64	; 0x40
 c006826:	e080      	b.n	c00692a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 c006828:	697b      	ldr	r3, [r7, #20]
 c00682a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 c00682e:	2b00      	cmp	r3, #0
 c006830:	d001      	beq.n	c006836 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 c006832:	2380      	movs	r3, #128	; 0x80
 c006834:	e079      	b.n	c00692a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 c006836:	697b      	ldr	r3, [r7, #20]
 c006838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c00683c:	2b00      	cmp	r3, #0
 c00683e:	d002      	beq.n	c006846 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 c006840:	f44f 7380 	mov.w	r3, #256	; 0x100
 c006844:	e071      	b.n	c00692a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 c006846:	697b      	ldr	r3, [r7, #20]
 c006848:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 c00684c:	2b00      	cmp	r3, #0
 c00684e:	d002      	beq.n	c006856 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 c006850:	f44f 7300 	mov.w	r3, #512	; 0x200
 c006854:	e069      	b.n	c00692a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 c006856:	697b      	ldr	r3, [r7, #20]
 c006858:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 c00685c:	2b00      	cmp	r3, #0
 c00685e:	d002      	beq.n	c006866 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 c006860:	f44f 6380 	mov.w	r3, #1024	; 0x400
 c006864:	e061      	b.n	c00692a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 c006866:	697b      	ldr	r3, [r7, #20]
 c006868:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 c00686c:	2b00      	cmp	r3, #0
 c00686e:	d002      	beq.n	c006876 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 c006870:	f44f 6300 	mov.w	r3, #2048	; 0x800
 c006874:	e059      	b.n	c00692a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 c006876:	697b      	ldr	r3, [r7, #20]
 c006878:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 c00687c:	2b00      	cmp	r3, #0
 c00687e:	d002      	beq.n	c006886 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 c006880:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 c006884:	e051      	b.n	c00692a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 c006886:	697b      	ldr	r3, [r7, #20]
 c006888:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 c00688c:	2b00      	cmp	r3, #0
 c00688e:	d002      	beq.n	c006896 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 c006890:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 c006894:	e049      	b.n	c00692a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 c006896:	697b      	ldr	r3, [r7, #20]
 c006898:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 c00689c:	2b00      	cmp	r3, #0
 c00689e:	d002      	beq.n	c0068a6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 c0068a0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 c0068a4:	e041      	b.n	c00692a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 c0068a6:	697b      	ldr	r3, [r7, #20]
 c0068a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 c0068ac:	2b00      	cmp	r3, #0
 c0068ae:	d002      	beq.n	c0068b6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 c0068b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 c0068b4:	e039      	b.n	c00692a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 c0068b6:	697b      	ldr	r3, [r7, #20]
 c0068b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 c0068bc:	2b00      	cmp	r3, #0
 c0068be:	d002      	beq.n	c0068c6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 c0068c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 c0068c4:	e031      	b.n	c00692a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 c0068c6:	697b      	ldr	r3, [r7, #20]
 c0068c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c0068cc:	2b00      	cmp	r3, #0
 c0068ce:	d002      	beq.n	c0068d6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 c0068d0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 c0068d4:	e029      	b.n	c00692a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 c0068d6:	697b      	ldr	r3, [r7, #20]
 c0068d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 c0068dc:	2b00      	cmp	r3, #0
 c0068de:	d002      	beq.n	c0068e6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 c0068e0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 c0068e4:	e021      	b.n	c00692a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 c0068e6:	697b      	ldr	r3, [r7, #20]
 c0068e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 c0068ec:	2b00      	cmp	r3, #0
 c0068ee:	d002      	beq.n	c0068f6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 c0068f0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 c0068f4:	e019      	b.n	c00692a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 c0068f6:	697b      	ldr	r3, [r7, #20]
 c0068f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 c0068fc:	2b00      	cmp	r3, #0
 c0068fe:	d002      	beq.n	c006906 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 c006900:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 c006904:	e011      	b.n	c00692a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 c006906:	697b      	ldr	r3, [r7, #20]
 c006908:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 c00690c:	2b00      	cmp	r3, #0
 c00690e:	d002      	beq.n	c006916 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 c006910:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 c006914:	e009      	b.n	c00692a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 c006916:	697b      	ldr	r3, [r7, #20]
 c006918:	f003 0308 	and.w	r3, r3, #8
 c00691c:	2b00      	cmp	r3, #0
 c00691e:	d002      	beq.n	c006926 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 c006920:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 c006924:	e001      	b.n	c00692a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 c006926:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 c00692a:	4618      	mov	r0, r3
 c00692c:	3720      	adds	r7, #32
 c00692e:	46bd      	mov	sp, r7
 c006930:	bd80      	pop	{r7, pc}
 c006932:	bf00      	nop
 c006934:	30000008 	.word	0x30000008
 c006938:	10624dd3 	.word	0x10624dd3
 c00693c:	00200045 	.word	0x00200045
 c006940:	002000c5 	.word	0x002000c5
 c006944:	fdffe008 	.word	0xfdffe008

0c006948 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 c006948:	b480      	push	{r7}
 c00694a:	b085      	sub	sp, #20
 c00694c:	af00      	add	r7, sp, #0
 c00694e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 c006950:	4b1f      	ldr	r3, [pc, #124]	; (c0069d0 <SDMMC_GetCmdResp2+0x88>)
 c006952:	681b      	ldr	r3, [r3, #0]
 c006954:	4a1f      	ldr	r2, [pc, #124]	; (c0069d4 <SDMMC_GetCmdResp2+0x8c>)
 c006956:	fba2 2303 	umull	r2, r3, r2, r3
 c00695a:	0a5b      	lsrs	r3, r3, #9
 c00695c:	f241 3288 	movw	r2, #5000	; 0x1388
 c006960:	fb02 f303 	mul.w	r3, r2, r3
 c006964:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 c006966:	68fb      	ldr	r3, [r7, #12]
 c006968:	1e5a      	subs	r2, r3, #1
 c00696a:	60fa      	str	r2, [r7, #12]
 c00696c:	2b00      	cmp	r3, #0
 c00696e:	d102      	bne.n	c006976 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 c006970:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 c006974:	e026      	b.n	c0069c4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 c006976:	687b      	ldr	r3, [r7, #4]
 c006978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c00697a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 c00697c:	68bb      	ldr	r3, [r7, #8]
 c00697e:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 c006982:	2b00      	cmp	r3, #0
 c006984:	d0ef      	beq.n	c006966 <SDMMC_GetCmdResp2+0x1e>
 c006986:	68bb      	ldr	r3, [r7, #8]
 c006988:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 c00698c:	2b00      	cmp	r3, #0
 c00698e:	d1ea      	bne.n	c006966 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 c006990:	687b      	ldr	r3, [r7, #4]
 c006992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c006994:	f003 0304 	and.w	r3, r3, #4
 c006998:	2b00      	cmp	r3, #0
 c00699a:	d004      	beq.n	c0069a6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 c00699c:	687b      	ldr	r3, [r7, #4]
 c00699e:	2204      	movs	r2, #4
 c0069a0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 c0069a2:	2304      	movs	r3, #4
 c0069a4:	e00e      	b.n	c0069c4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 c0069a6:	687b      	ldr	r3, [r7, #4]
 c0069a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c0069aa:	f003 0301 	and.w	r3, r3, #1
 c0069ae:	2b00      	cmp	r3, #0
 c0069b0:	d004      	beq.n	c0069bc <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 c0069b2:	687b      	ldr	r3, [r7, #4]
 c0069b4:	2201      	movs	r2, #1
 c0069b6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 c0069b8:	2301      	movs	r3, #1
 c0069ba:	e003      	b.n	c0069c4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 c0069bc:	687b      	ldr	r3, [r7, #4]
 c0069be:	4a06      	ldr	r2, [pc, #24]	; (c0069d8 <SDMMC_GetCmdResp2+0x90>)
 c0069c0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 c0069c2:	2300      	movs	r3, #0
}
 c0069c4:	4618      	mov	r0, r3
 c0069c6:	3714      	adds	r7, #20
 c0069c8:	46bd      	mov	sp, r7
 c0069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0069ce:	4770      	bx	lr
 c0069d0:	30000008 	.word	0x30000008
 c0069d4:	10624dd3 	.word	0x10624dd3
 c0069d8:	002000c5 	.word	0x002000c5

0c0069dc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 c0069dc:	b480      	push	{r7}
 c0069de:	b085      	sub	sp, #20
 c0069e0:	af00      	add	r7, sp, #0
 c0069e2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 c0069e4:	4b1a      	ldr	r3, [pc, #104]	; (c006a50 <SDMMC_GetCmdResp3+0x74>)
 c0069e6:	681b      	ldr	r3, [r3, #0]
 c0069e8:	4a1a      	ldr	r2, [pc, #104]	; (c006a54 <SDMMC_GetCmdResp3+0x78>)
 c0069ea:	fba2 2303 	umull	r2, r3, r2, r3
 c0069ee:	0a5b      	lsrs	r3, r3, #9
 c0069f0:	f241 3288 	movw	r2, #5000	; 0x1388
 c0069f4:	fb02 f303 	mul.w	r3, r2, r3
 c0069f8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 c0069fa:	68fb      	ldr	r3, [r7, #12]
 c0069fc:	1e5a      	subs	r2, r3, #1
 c0069fe:	60fa      	str	r2, [r7, #12]
 c006a00:	2b00      	cmp	r3, #0
 c006a02:	d102      	bne.n	c006a0a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 c006a04:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 c006a08:	e01b      	b.n	c006a42 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 c006a0a:	687b      	ldr	r3, [r7, #4]
 c006a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c006a0e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 c006a10:	68bb      	ldr	r3, [r7, #8]
 c006a12:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 c006a16:	2b00      	cmp	r3, #0
 c006a18:	d0ef      	beq.n	c0069fa <SDMMC_GetCmdResp3+0x1e>
 c006a1a:	68bb      	ldr	r3, [r7, #8]
 c006a1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 c006a20:	2b00      	cmp	r3, #0
 c006a22:	d1ea      	bne.n	c0069fa <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 c006a24:	687b      	ldr	r3, [r7, #4]
 c006a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c006a28:	f003 0304 	and.w	r3, r3, #4
 c006a2c:	2b00      	cmp	r3, #0
 c006a2e:	d004      	beq.n	c006a3a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 c006a30:	687b      	ldr	r3, [r7, #4]
 c006a32:	2204      	movs	r2, #4
 c006a34:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 c006a36:	2304      	movs	r3, #4
 c006a38:	e003      	b.n	c006a42 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 c006a3a:	687b      	ldr	r3, [r7, #4]
 c006a3c:	4a06      	ldr	r2, [pc, #24]	; (c006a58 <SDMMC_GetCmdResp3+0x7c>)
 c006a3e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 c006a40:	2300      	movs	r3, #0
}
 c006a42:	4618      	mov	r0, r3
 c006a44:	3714      	adds	r7, #20
 c006a46:	46bd      	mov	sp, r7
 c006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 c006a4c:	4770      	bx	lr
 c006a4e:	bf00      	nop
 c006a50:	30000008 	.word	0x30000008
 c006a54:	10624dd3 	.word	0x10624dd3
 c006a58:	002000c5 	.word	0x002000c5

0c006a5c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 c006a5c:	b580      	push	{r7, lr}
 c006a5e:	b088      	sub	sp, #32
 c006a60:	af00      	add	r7, sp, #0
 c006a62:	60f8      	str	r0, [r7, #12]
 c006a64:	460b      	mov	r3, r1
 c006a66:	607a      	str	r2, [r7, #4]
 c006a68:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 c006a6a:	4b35      	ldr	r3, [pc, #212]	; (c006b40 <SDMMC_GetCmdResp6+0xe4>)
 c006a6c:	681b      	ldr	r3, [r3, #0]
 c006a6e:	4a35      	ldr	r2, [pc, #212]	; (c006b44 <SDMMC_GetCmdResp6+0xe8>)
 c006a70:	fba2 2303 	umull	r2, r3, r2, r3
 c006a74:	0a5b      	lsrs	r3, r3, #9
 c006a76:	f241 3288 	movw	r2, #5000	; 0x1388
 c006a7a:	fb02 f303 	mul.w	r3, r2, r3
 c006a7e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 c006a80:	69fb      	ldr	r3, [r7, #28]
 c006a82:	1e5a      	subs	r2, r3, #1
 c006a84:	61fa      	str	r2, [r7, #28]
 c006a86:	2b00      	cmp	r3, #0
 c006a88:	d102      	bne.n	c006a90 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 c006a8a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 c006a8e:	e052      	b.n	c006b36 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 c006a90:	68fb      	ldr	r3, [r7, #12]
 c006a92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c006a94:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 c006a96:	69bb      	ldr	r3, [r7, #24]
 c006a98:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 c006a9c:	2b00      	cmp	r3, #0
 c006a9e:	d0ef      	beq.n	c006a80 <SDMMC_GetCmdResp6+0x24>
 c006aa0:	69bb      	ldr	r3, [r7, #24]
 c006aa2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 c006aa6:	2b00      	cmp	r3, #0
 c006aa8:	d1ea      	bne.n	c006a80 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 c006aaa:	68fb      	ldr	r3, [r7, #12]
 c006aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c006aae:	f003 0304 	and.w	r3, r3, #4
 c006ab2:	2b00      	cmp	r3, #0
 c006ab4:	d004      	beq.n	c006ac0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 c006ab6:	68fb      	ldr	r3, [r7, #12]
 c006ab8:	2204      	movs	r2, #4
 c006aba:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 c006abc:	2304      	movs	r3, #4
 c006abe:	e03a      	b.n	c006b36 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 c006ac0:	68fb      	ldr	r3, [r7, #12]
 c006ac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c006ac4:	f003 0301 	and.w	r3, r3, #1
 c006ac8:	2b00      	cmp	r3, #0
 c006aca:	d004      	beq.n	c006ad6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 c006acc:	68fb      	ldr	r3, [r7, #12]
 c006ace:	2201      	movs	r2, #1
 c006ad0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 c006ad2:	2301      	movs	r3, #1
 c006ad4:	e02f      	b.n	c006b36 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 c006ad6:	68f8      	ldr	r0, [r7, #12]
 c006ad8:	f7ff fb7c 	bl	c0061d4 <SDMMC_GetCommandResponse>
 c006adc:	4603      	mov	r3, r0
 c006ade:	461a      	mov	r2, r3
 c006ae0:	7afb      	ldrb	r3, [r7, #11]
 c006ae2:	4293      	cmp	r3, r2
 c006ae4:	d001      	beq.n	c006aea <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 c006ae6:	2301      	movs	r3, #1
 c006ae8:	e025      	b.n	c006b36 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 c006aea:	68fb      	ldr	r3, [r7, #12]
 c006aec:	4a16      	ldr	r2, [pc, #88]	; (c006b48 <SDMMC_GetCmdResp6+0xec>)
 c006aee:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 c006af0:	2100      	movs	r1, #0
 c006af2:	68f8      	ldr	r0, [r7, #12]
 c006af4:	f7ff fb7b 	bl	c0061ee <SDMMC_GetResponse>
 c006af8:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 c006afa:	697b      	ldr	r3, [r7, #20]
 c006afc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 c006b00:	2b00      	cmp	r3, #0
 c006b02:	d106      	bne.n	c006b12 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 c006b04:	697b      	ldr	r3, [r7, #20]
 c006b06:	0c1b      	lsrs	r3, r3, #16
 c006b08:	b29a      	uxth	r2, r3
 c006b0a:	687b      	ldr	r3, [r7, #4]
 c006b0c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 c006b0e:	2300      	movs	r3, #0
 c006b10:	e011      	b.n	c006b36 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 c006b12:	697b      	ldr	r3, [r7, #20]
 c006b14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 c006b18:	2b00      	cmp	r3, #0
 c006b1a:	d002      	beq.n	c006b22 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 c006b1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 c006b20:	e009      	b.n	c006b36 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 c006b22:	697b      	ldr	r3, [r7, #20]
 c006b24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 c006b28:	2b00      	cmp	r3, #0
 c006b2a:	d002      	beq.n	c006b32 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 c006b2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 c006b30:	e001      	b.n	c006b36 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 c006b32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 c006b36:	4618      	mov	r0, r3
 c006b38:	3720      	adds	r7, #32
 c006b3a:	46bd      	mov	sp, r7
 c006b3c:	bd80      	pop	{r7, pc}
 c006b3e:	bf00      	nop
 c006b40:	30000008 	.word	0x30000008
 c006b44:	10624dd3 	.word	0x10624dd3
 c006b48:	002000c5 	.word	0x002000c5

0c006b4c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 c006b4c:	b480      	push	{r7}
 c006b4e:	b085      	sub	sp, #20
 c006b50:	af00      	add	r7, sp, #0
 c006b52:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 c006b54:	4b22      	ldr	r3, [pc, #136]	; (c006be0 <SDMMC_GetCmdResp7+0x94>)
 c006b56:	681b      	ldr	r3, [r3, #0]
 c006b58:	4a22      	ldr	r2, [pc, #136]	; (c006be4 <SDMMC_GetCmdResp7+0x98>)
 c006b5a:	fba2 2303 	umull	r2, r3, r2, r3
 c006b5e:	0a5b      	lsrs	r3, r3, #9
 c006b60:	f241 3288 	movw	r2, #5000	; 0x1388
 c006b64:	fb02 f303 	mul.w	r3, r2, r3
 c006b68:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 c006b6a:	68fb      	ldr	r3, [r7, #12]
 c006b6c:	1e5a      	subs	r2, r3, #1
 c006b6e:	60fa      	str	r2, [r7, #12]
 c006b70:	2b00      	cmp	r3, #0
 c006b72:	d102      	bne.n	c006b7a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 c006b74:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 c006b78:	e02c      	b.n	c006bd4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 c006b7a:	687b      	ldr	r3, [r7, #4]
 c006b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c006b7e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 c006b80:	68bb      	ldr	r3, [r7, #8]
 c006b82:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 c006b86:	2b00      	cmp	r3, #0
 c006b88:	d0ef      	beq.n	c006b6a <SDMMC_GetCmdResp7+0x1e>
 c006b8a:	68bb      	ldr	r3, [r7, #8]
 c006b8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 c006b90:	2b00      	cmp	r3, #0
 c006b92:	d1ea      	bne.n	c006b6a <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 c006b94:	687b      	ldr	r3, [r7, #4]
 c006b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c006b98:	f003 0304 	and.w	r3, r3, #4
 c006b9c:	2b00      	cmp	r3, #0
 c006b9e:	d004      	beq.n	c006baa <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 c006ba0:	687b      	ldr	r3, [r7, #4]
 c006ba2:	2204      	movs	r2, #4
 c006ba4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 c006ba6:	2304      	movs	r3, #4
 c006ba8:	e014      	b.n	c006bd4 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 c006baa:	687b      	ldr	r3, [r7, #4]
 c006bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c006bae:	f003 0301 	and.w	r3, r3, #1
 c006bb2:	2b00      	cmp	r3, #0
 c006bb4:	d004      	beq.n	c006bc0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 c006bb6:	687b      	ldr	r3, [r7, #4]
 c006bb8:	2201      	movs	r2, #1
 c006bba:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 c006bbc:	2301      	movs	r3, #1
 c006bbe:	e009      	b.n	c006bd4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 c006bc0:	687b      	ldr	r3, [r7, #4]
 c006bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c006bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c006bc8:	2b00      	cmp	r3, #0
 c006bca:	d002      	beq.n	c006bd2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 c006bcc:	687b      	ldr	r3, [r7, #4]
 c006bce:	2240      	movs	r2, #64	; 0x40
 c006bd0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 c006bd2:	2300      	movs	r3, #0

}
 c006bd4:	4618      	mov	r0, r3
 c006bd6:	3714      	adds	r7, #20
 c006bd8:	46bd      	mov	sp, r7
 c006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 c006bde:	4770      	bx	lr
 c006be0:	30000008 	.word	0x30000008
 c006be4:	10624dd3 	.word	0x10624dd3

0c006be8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 c006be8:	b480      	push	{r7}
 c006bea:	b085      	sub	sp, #20
 c006bec:	af00      	add	r7, sp, #0
 c006bee:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 c006bf0:	4b11      	ldr	r3, [pc, #68]	; (c006c38 <SDMMC_GetCmdError+0x50>)
 c006bf2:	681b      	ldr	r3, [r3, #0]
 c006bf4:	4a11      	ldr	r2, [pc, #68]	; (c006c3c <SDMMC_GetCmdError+0x54>)
 c006bf6:	fba2 2303 	umull	r2, r3, r2, r3
 c006bfa:	0a5b      	lsrs	r3, r3, #9
 c006bfc:	f241 3288 	movw	r2, #5000	; 0x1388
 c006c00:	fb02 f303 	mul.w	r3, r2, r3
 c006c04:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 c006c06:	68fb      	ldr	r3, [r7, #12]
 c006c08:	1e5a      	subs	r2, r3, #1
 c006c0a:	60fa      	str	r2, [r7, #12]
 c006c0c:	2b00      	cmp	r3, #0
 c006c0e:	d102      	bne.n	c006c16 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 c006c10:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 c006c14:	e009      	b.n	c006c2a <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 c006c16:	687b      	ldr	r3, [r7, #4]
 c006c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c006c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c006c1e:	2b00      	cmp	r3, #0
 c006c20:	d0f1      	beq.n	c006c06 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 c006c22:	687b      	ldr	r3, [r7, #4]
 c006c24:	4a06      	ldr	r2, [pc, #24]	; (c006c40 <SDMMC_GetCmdError+0x58>)
 c006c26:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 c006c28:	2300      	movs	r3, #0
}
 c006c2a:	4618      	mov	r0, r3
 c006c2c:	3714      	adds	r7, #20
 c006c2e:	46bd      	mov	sp, r7
 c006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 c006c34:	4770      	bx	lr
 c006c36:	bf00      	nop
 c006c38:	30000008 	.word	0x30000008
 c006c3c:	10624dd3 	.word	0x10624dd3
 c006c40:	002000c5 	.word	0x002000c5

0c006c44 <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result 
  */
int32_t MX_FATFS_Init(void) 
{
 c006c44:	b580      	push	{r7, lr}
 c006c46:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/
 
if (FATFS_LinkDriver(&SD_Driver, SDPath) != 0)
 c006c48:	4907      	ldr	r1, [pc, #28]	; (c006c68 <MX_FATFS_Init+0x24>)
 c006c4a:	4808      	ldr	r0, [pc, #32]	; (c006c6c <MX_FATFS_Init+0x28>)
 c006c4c:	f004 fcea 	bl	c00b624 <FATFS_LinkDriver>
 c006c50:	4603      	mov	r3, r0
 c006c52:	2b00      	cmp	r3, #0
 c006c54:	d002      	beq.n	c006c5c <MX_FATFS_Init+0x18>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 c006c56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c006c5a:	e003      	b.n	c006c64 <MX_FATFS_Init+0x20>
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 c006c5c:	4b04      	ldr	r3, [pc, #16]	; (c006c70 <MX_FATFS_Init+0x2c>)
 c006c5e:	2201      	movs	r2, #1
 c006c60:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 c006c62:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 c006c64:	4618      	mov	r0, r3
 c006c66:	bd80      	pop	{r7, pc}
 c006c68:	30000578 	.word	0x30000578
 c006c6c:	0c00bbcc 	.word	0x0c00bbcc
 c006c70:	3000057c 	.word	0x3000057c

0c006c74 <MX_FATFS_Process>:
  * @brief  FatFs application main process
  * @param  None
  * @retval Process result 
  */
int32_t MX_FATFS_Process(void)
{
 c006c74:	b580      	push	{r7, lr}
 c006c76:	b084      	sub	sp, #16
 c006c78:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN FATFS_Process */
  int32_t process_res = APP_OK;  
 c006c7a:	2300      	movs	r3, #0
 c006c7c:	607b      	str	r3, [r7, #4]
  /* Mass Storage Application State Machine */
  switch(Appli_state)
 c006c7e:	4b1f      	ldr	r3, [pc, #124]	; (c006cfc <MX_FATFS_Process+0x88>)
 c006c80:	781b      	ldrb	r3, [r3, #0]
 c006c82:	2b03      	cmp	r3, #3
 c006c84:	d02f      	beq.n	c006ce6 <MX_FATFS_Process+0x72>
 c006c86:	2b03      	cmp	r3, #3
 c006c88:	dc31      	bgt.n	c006cee <MX_FATFS_Process+0x7a>
 c006c8a:	2b01      	cmp	r3, #1
 c006c8c:	d002      	beq.n	c006c94 <MX_FATFS_Process+0x20>
 c006c8e:	2b02      	cmp	r3, #2
 c006c90:	d022      	beq.n	c006cd8 <MX_FATFS_Process+0x64>
    process_res = APP_SD_UNPLUGGED;
    break;

  case APPLICATION_IDLE:
  default:
    break;
 c006c92:	e02c      	b.n	c006cee <MX_FATFS_Process+0x7a>
    if(SECURE_SD_IsDetected(0))
 c006c94:	2000      	movs	r0, #0
 c006c96:	f001 f853 	bl	c007d40 <__acle_se_SECURE_SD_IsDetected>
 c006c9a:	4603      	mov	r3, r0
 c006c9c:	2b00      	cmp	r3, #0
 c006c9e:	d017      	beq.n	c006cd0 <MX_FATFS_Process+0x5c>
      res = f_mkfs(SDPath, FM_ANY, 0, workBuffer, sizeof(workBuffer));
 c006ca0:	f44f 7300 	mov.w	r3, #512	; 0x200
 c006ca4:	9300      	str	r3, [sp, #0]
 c006ca6:	4b16      	ldr	r3, [pc, #88]	; (c006d00 <MX_FATFS_Process+0x8c>)
 c006ca8:	2200      	movs	r2, #0
 c006caa:	2107      	movs	r1, #7
 c006cac:	4815      	ldr	r0, [pc, #84]	; (c006d04 <MX_FATFS_Process+0x90>)
 c006cae:	f004 f841 	bl	c00ad34 <f_mkfs>
 c006cb2:	4603      	mov	r3, r0
 c006cb4:	70fb      	strb	r3, [r7, #3]
      if (res != FR_OK)
 c006cb6:	78fb      	ldrb	r3, [r7, #3]
 c006cb8:	2b00      	cmp	r3, #0
 c006cba:	d003      	beq.n	c006cc4 <MX_FATFS_Process+0x50>
        process_res = APP_ERROR;
 c006cbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c006cc0:	607b      	str	r3, [r7, #4]
    break;
 c006cc2:	e015      	b.n	c006cf0 <MX_FATFS_Process+0x7c>
        process_res = APP_INIT;
 c006cc4:	2301      	movs	r3, #1
 c006cc6:	607b      	str	r3, [r7, #4]
        Appli_state = APPLICATION_RUNNING;
 c006cc8:	4b0c      	ldr	r3, [pc, #48]	; (c006cfc <MX_FATFS_Process+0x88>)
 c006cca:	2202      	movs	r2, #2
 c006ccc:	701a      	strb	r2, [r3, #0]
    break;
 c006cce:	e00f      	b.n	c006cf0 <MX_FATFS_Process+0x7c>
    Appli_state = APPLICATION_SD_UNPLUGGED;
 c006cd0:	4b0a      	ldr	r3, [pc, #40]	; (c006cfc <MX_FATFS_Process+0x88>)
 c006cd2:	2203      	movs	r2, #3
 c006cd4:	701a      	strb	r2, [r3, #0]
    break;
 c006cd6:	e00b      	b.n	c006cf0 <MX_FATFS_Process+0x7c>
      process_res = FS_FileOperations();
 c006cd8:	f000 f81e 	bl	c006d18 <FS_FileOperations>
 c006cdc:	6078      	str	r0, [r7, #4]
      Appli_state = APPLICATION_IDLE;
 c006cde:	4b07      	ldr	r3, [pc, #28]	; (c006cfc <MX_FATFS_Process+0x88>)
 c006ce0:	2200      	movs	r2, #0
 c006ce2:	701a      	strb	r2, [r3, #0]
    break;
 c006ce4:	e004      	b.n	c006cf0 <MX_FATFS_Process+0x7c>
    process_res = APP_SD_UNPLUGGED;
 c006ce6:	f06f 0301 	mvn.w	r3, #1
 c006cea:	607b      	str	r3, [r7, #4]
    break;
 c006cec:	e000      	b.n	c006cf0 <MX_FATFS_Process+0x7c>
    break;
 c006cee:	bf00      	nop
  }
  return process_res;
 c006cf0:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END FATFS_Process */
}  
 c006cf2:	4618      	mov	r0, r3
 c006cf4:	3708      	adds	r7, #8
 c006cf6:	46bd      	mov	sp, r7
 c006cf8:	bd80      	pop	{r7, pc}
 c006cfa:	bf00      	nop
 c006cfc:	3000057c 	.word	0x3000057c
 c006d00:	30000580 	.word	0x30000580
 c006d04:	30000578 	.word	0x30000578

0c006d08 <get_fattime>:
  * @brief  Gets Time from RTC (generated when FS_NORTC==0; see ff.c)
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 c006d08:	b480      	push	{r7}
 c006d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 c006d0c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 c006d0e:	4618      	mov	r0, r3
 c006d10:	46bd      	mov	sp, r7
 c006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 c006d16:	4770      	bx	lr

0c006d18 <FS_FileOperations>:
/**
  * @brief File system : file operation
  * @retval File operation result 
  */
int32_t FS_FileOperations(void)
{
 c006d18:	b580      	push	{r7, lr}
 c006d1a:	b0d2      	sub	sp, #328	; 0x148
 c006d1c:	af00      	add	r7, sp, #0
  FRESULT res; /* FatFs function common result code */
  uint32_t byteswritten, bytesread; /* File write/read counts */
  uint8_t wtext[] = "This is STM32 working with FatFs and uSD diskio driver done by trustzone application for STM32L562E-DK board"; /* File write buffer */
 c006d1e:	4a2d      	ldr	r2, [pc, #180]	; (c006dd4 <FS_FileOperations+0xbc>)
 c006d20:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 c006d24:	4611      	mov	r1, r2
 c006d26:	226d      	movs	r2, #109	; 0x6d
 c006d28:	4618      	mov	r0, r3
 c006d2a:	f004 fda1 	bl	c00b870 <memcpy>
  uint8_t rtext[200]; /* File read buffer */

  /* Register the file system object to the FatFs module */
  if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 0) == FR_OK)
 c006d2e:	2200      	movs	r2, #0
 c006d30:	4929      	ldr	r1, [pc, #164]	; (c006dd8 <FS_FileOperations+0xc0>)
 c006d32:	482a      	ldr	r0, [pc, #168]	; (c006ddc <FS_FileOperations+0xc4>)
 c006d34:	f003 fa8e 	bl	c00a254 <f_mount>
 c006d38:	4603      	mov	r3, r0
 c006d3a:	2b00      	cmp	r3, #0
 c006d3c:	d142      	bne.n	c006dc4 <FS_FileOperations+0xac>
  {
    /* Create and Open a new text file object with write access */
    if(f_open(&SDFile, "STM32.TXT", FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
 c006d3e:	220a      	movs	r2, #10
 c006d40:	4927      	ldr	r1, [pc, #156]	; (c006de0 <FS_FileOperations+0xc8>)
 c006d42:	4828      	ldr	r0, [pc, #160]	; (c006de4 <FS_FileOperations+0xcc>)
 c006d44:	f003 facc 	bl	c00a2e0 <f_open>
 c006d48:	4603      	mov	r3, r0
 c006d4a:	2b00      	cmp	r3, #0
 c006d4c:	d13a      	bne.n	c006dc4 <FS_FileOperations+0xac>
    {
      /* Write data to the text file */
      res = f_write(&SDFile, wtext, sizeof(wtext), (void *)&byteswritten);
 c006d4e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 c006d52:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 c006d56:	226d      	movs	r2, #109	; 0x6d
 c006d58:	4822      	ldr	r0, [pc, #136]	; (c006de4 <FS_FileOperations+0xcc>)
 c006d5a:	f003 fdce 	bl	c00a8fa <f_write>
 c006d5e:	4603      	mov	r3, r0
 c006d60:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

      if((byteswritten > 0) && (res == FR_OK))
 c006d64:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 c006d68:	2b00      	cmp	r3, #0
 c006d6a:	d02b      	beq.n	c006dc4 <FS_FileOperations+0xac>
 c006d6c:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 c006d70:	2b00      	cmp	r3, #0
 c006d72:	d127      	bne.n	c006dc4 <FS_FileOperations+0xac>
      {
        /* Close the open text file */
        f_close(&SDFile);
 c006d74:	481b      	ldr	r0, [pc, #108]	; (c006de4 <FS_FileOperations+0xcc>)
 c006d76:	f003 ffb3 	bl	c00ace0 <f_close>

        /* Open the text file object with read access */
        if(f_open(&SDFile, "STM32.TXT", FA_READ) == FR_OK)
 c006d7a:	2201      	movs	r2, #1
 c006d7c:	4918      	ldr	r1, [pc, #96]	; (c006de0 <FS_FileOperations+0xc8>)
 c006d7e:	4819      	ldr	r0, [pc, #100]	; (c006de4 <FS_FileOperations+0xcc>)
 c006d80:	f003 faae 	bl	c00a2e0 <f_open>
 c006d84:	4603      	mov	r3, r0
 c006d86:	2b00      	cmp	r3, #0
 c006d88:	d11c      	bne.n	c006dc4 <FS_FileOperations+0xac>
        {
          /* Read data from the text file */
          res = f_read(&SDFile, rtext, sizeof(rtext), (void *)&bytesread);
 c006d8a:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 c006d8e:	1d39      	adds	r1, r7, #4
 c006d90:	22c8      	movs	r2, #200	; 0xc8
 c006d92:	4814      	ldr	r0, [pc, #80]	; (c006de4 <FS_FileOperations+0xcc>)
 c006d94:	f003 fc72 	bl	c00a67c <f_read>
 c006d98:	4603      	mov	r3, r0
 c006d9a:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

          if((bytesread > 0) && (res == FR_OK))
 c006d9e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 c006da2:	2b00      	cmp	r3, #0
 c006da4:	d00e      	beq.n	c006dc4 <FS_FileOperations+0xac>
 c006da6:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 c006daa:	2b00      	cmp	r3, #0
 c006dac:	d10a      	bne.n	c006dc4 <FS_FileOperations+0xac>
          {
            /* Close the open text file */
            f_close(&SDFile);
 c006dae:	480d      	ldr	r0, [pc, #52]	; (c006de4 <FS_FileOperations+0xcc>)
 c006db0:	f003 ff96 	bl	c00ace0 <f_close>

            /* Compare read data with the expected data */
            if((bytesread == byteswritten))
 c006db4:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 c006db8:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 c006dbc:	429a      	cmp	r2, r3
 c006dbe:	d101      	bne.n	c006dc4 <FS_FileOperations+0xac>
            {
              /* Success of the demo: no error occurrence */
              return 0;
 c006dc0:	2300      	movs	r3, #0
 c006dc2:	e001      	b.n	c006dc8 <FS_FileOperations+0xb0>
        }
      }
    }
  }
  /* Error */
  return -1;
 c006dc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 c006dc8:	4618      	mov	r0, r3
 c006dca:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 c006dce:	46bd      	mov	sp, r7
 c006dd0:	bd80      	pop	{r7, pc}
 c006dd2:	bf00      	nop
 c006dd4:	0c00babc 	.word	0x0c00babc
 c006dd8:	30000578 	.word	0x30000578
 c006ddc:	30000114 	.word	0x30000114
 c006de0:	0c00bab0 	.word	0x0c00bab0
 c006de4:	30000348 	.word	0x30000348

0c006de8 <FS_FileWrite>:

int32_t FS_FileWrite(uint8_t* wtext)
{
 c006de8:	b580      	push	{r7, lr}
 c006dea:	b084      	sub	sp, #16
 c006dec:	af00      	add	r7, sp, #0
 c006dee:	6078      	str	r0, [r7, #4]
  uint32_t byteswritten; //, bytesread; /* File write/read counts */
//  uint8_t* wtext = "This is STM32 working with FatFs and uSD diskio driver done by trustzone application for STM32L562E-DK board"; /* File write buffer */
//  uint8_t rtext[200]; /* File read buffer */

  /* Register the file system object to the FatFs module */
  if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 0) == FR_OK)
 c006df0:	2200      	movs	r2, #0
 c006df2:	4913      	ldr	r1, [pc, #76]	; (c006e40 <FS_FileWrite+0x58>)
 c006df4:	4813      	ldr	r0, [pc, #76]	; (c006e44 <FS_FileWrite+0x5c>)
 c006df6:	f003 fa2d 	bl	c00a254 <f_mount>
 c006dfa:	4603      	mov	r3, r0
 c006dfc:	2b00      	cmp	r3, #0
 c006dfe:	d119      	bne.n	c006e34 <FS_FileWrite+0x4c>
  {
    /* Create and Open a new text file object with write access */
    if(f_open(&SDFile, "STM32.TXT", FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
 c006e00:	220a      	movs	r2, #10
 c006e02:	4911      	ldr	r1, [pc, #68]	; (c006e48 <FS_FileWrite+0x60>)
 c006e04:	4811      	ldr	r0, [pc, #68]	; (c006e4c <FS_FileWrite+0x64>)
 c006e06:	f003 fa6b 	bl	c00a2e0 <f_open>
 c006e0a:	4603      	mov	r3, r0
 c006e0c:	2b00      	cmp	r3, #0
 c006e0e:	d111      	bne.n	c006e34 <FS_FileWrite+0x4c>
    {
      /* Write data to the text file */
      res = f_write(&SDFile, wtext, sizeof(wtext), (void *)&byteswritten);
 c006e10:	f107 0308 	add.w	r3, r7, #8
 c006e14:	2204      	movs	r2, #4
 c006e16:	6879      	ldr	r1, [r7, #4]
 c006e18:	480c      	ldr	r0, [pc, #48]	; (c006e4c <FS_FileWrite+0x64>)
 c006e1a:	f003 fd6e 	bl	c00a8fa <f_write>
 c006e1e:	4603      	mov	r3, r0
 c006e20:	73fb      	strb	r3, [r7, #15]

      if((byteswritten > 0) && (res == FR_OK))
 c006e22:	68bb      	ldr	r3, [r7, #8]
 c006e24:	2b00      	cmp	r3, #0
 c006e26:	d005      	beq.n	c006e34 <FS_FileWrite+0x4c>
 c006e28:	7bfb      	ldrb	r3, [r7, #15]
 c006e2a:	2b00      	cmp	r3, #0
 c006e2c:	d102      	bne.n	c006e34 <FS_FileWrite+0x4c>
      {
        /* Close the open text file */
        f_close(&SDFile);
 c006e2e:	4807      	ldr	r0, [pc, #28]	; (c006e4c <FS_FileWrite+0x64>)
 c006e30:	f003 ff56 	bl	c00ace0 <f_close>
//        }
      }
    }
  }
  /* Error */
  return -1;
 c006e34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 c006e38:	4618      	mov	r0, r3
 c006e3a:	3710      	adds	r7, #16
 c006e3c:	46bd      	mov	sp, r7
 c006e3e:	bd80      	pop	{r7, pc}
 c006e40:	30000578 	.word	0x30000578
 c006e44:	30000114 	.word	0x30000114
 c006e48:	0c00bab0 	.word	0x0c00bab0
 c006e4c:	30000348 	.word	0x30000348

0c006e50 <FS_FileRead>:


int32_t FS_FileRead(uint8_t* rtext, uint8_t n)
{
 c006e50:	b580      	push	{r7, lr}
 c006e52:	b084      	sub	sp, #16
 c006e54:	af00      	add	r7, sp, #0
 c006e56:	6078      	str	r0, [r7, #4]
 c006e58:	460b      	mov	r3, r1
 c006e5a:	70fb      	strb	r3, [r7, #3]
  uint32_t bytesread; /* File write/read counts */ //byteswritten,
//  uint8_t wtext[] = "This is STM32 working with FatFs and uSD diskio driver done by trustzone application for STM32L562E-DK board"; /* File write buffer */
//  uint8_t rtext[] = arr;    //[200]; /* File read buffer */

  /* Register the file system object to the FatFs module */
  if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 0) == FR_OK)
 c006e5c:	2200      	movs	r2, #0
 c006e5e:	4913      	ldr	r1, [pc, #76]	; (c006eac <FS_FileRead+0x5c>)
 c006e60:	4813      	ldr	r0, [pc, #76]	; (c006eb0 <FS_FileRead+0x60>)
 c006e62:	f003 f9f7 	bl	c00a254 <f_mount>
 c006e66:	4603      	mov	r3, r0
 c006e68:	2b00      	cmp	r3, #0
 c006e6a:	d119      	bne.n	c006ea0 <FS_FileRead+0x50>
//      {
//        /* Close the open text file */
//        f_close(&SDFile);

        /* Open the text file object with read access */
        if(f_open(&SDFile, "STM32.TXT", FA_READ) == FR_OK)
 c006e6c:	2201      	movs	r2, #1
 c006e6e:	4911      	ldr	r1, [pc, #68]	; (c006eb4 <FS_FileRead+0x64>)
 c006e70:	4811      	ldr	r0, [pc, #68]	; (c006eb8 <FS_FileRead+0x68>)
 c006e72:	f003 fa35 	bl	c00a2e0 <f_open>
 c006e76:	4603      	mov	r3, r0
 c006e78:	2b00      	cmp	r3, #0
 c006e7a:	d111      	bne.n	c006ea0 <FS_FileRead+0x50>
        {
          /* Read data from the text file */
          res = f_read(&SDFile, rtext, n, (void *)&bytesread); //sizeof(rtext)
 c006e7c:	78fa      	ldrb	r2, [r7, #3]
 c006e7e:	f107 0308 	add.w	r3, r7, #8
 c006e82:	6879      	ldr	r1, [r7, #4]
 c006e84:	480c      	ldr	r0, [pc, #48]	; (c006eb8 <FS_FileRead+0x68>)
 c006e86:	f003 fbf9 	bl	c00a67c <f_read>
 c006e8a:	4603      	mov	r3, r0
 c006e8c:	73fb      	strb	r3, [r7, #15]

          if((bytesread > 0) && (res == FR_OK))
 c006e8e:	68bb      	ldr	r3, [r7, #8]
 c006e90:	2b00      	cmp	r3, #0
 c006e92:	d005      	beq.n	c006ea0 <FS_FileRead+0x50>
 c006e94:	7bfb      	ldrb	r3, [r7, #15]
 c006e96:	2b00      	cmp	r3, #0
 c006e98:	d102      	bne.n	c006ea0 <FS_FileRead+0x50>
          {
            /* Close the open text file */
            f_close(&SDFile);
 c006e9a:	4807      	ldr	r0, [pc, #28]	; (c006eb8 <FS_FileRead+0x68>)
 c006e9c:	f003 ff20 	bl	c00ace0 <f_close>
        }
//      }
//    }
  }
  /* Error */
  return -1;
 c006ea0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 c006ea4:	4618      	mov	r0, r3
 c006ea6:	3710      	adds	r7, #16
 c006ea8:	46bd      	mov	sp, r7
 c006eaa:	bd80      	pop	{r7, pc}
 c006eac:	30000578 	.word	0x30000578
 c006eb0:	30000114 	.word	0x30000114
 c006eb4:	0c00bab0 	.word	0x0c00bab0
 c006eb8:	30000348 	.word	0x30000348

0c006ebc <SD_CheckStatus>:
#endif /* _USE_IOCTL == 1 */
};

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
{
 c006ebc:	b580      	push	{r7, lr}
 c006ebe:	b082      	sub	sp, #8
 c006ec0:	af00      	add	r7, sp, #0
 c006ec2:	4603      	mov	r3, r0
 c006ec4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 c006ec6:	4b0c      	ldr	r3, [pc, #48]	; (c006ef8 <SD_CheckStatus+0x3c>)
 c006ec8:	2201      	movs	r2, #1
 c006eca:	701a      	strb	r2, [r3, #0]
  if(SECURE_SD_GetCardState(0) == SD_TRANSFER_OK)
 c006ecc:	2000      	movs	r0, #0
 c006ece:	f000 fe29 	bl	c007b24 <__acle_se_SECURE_SD_GetCardState>
 c006ed2:	4603      	mov	r3, r0
 c006ed4:	2b00      	cmp	r3, #0
 c006ed6:	d107      	bne.n	c006ee8 <SD_CheckStatus+0x2c>
  {
    Stat &= ~STA_NOINIT;
 c006ed8:	4b07      	ldr	r3, [pc, #28]	; (c006ef8 <SD_CheckStatus+0x3c>)
 c006eda:	781b      	ldrb	r3, [r3, #0]
 c006edc:	b2db      	uxtb	r3, r3
 c006ede:	f023 0301 	bic.w	r3, r3, #1
 c006ee2:	b2da      	uxtb	r2, r3
 c006ee4:	4b04      	ldr	r3, [pc, #16]	; (c006ef8 <SD_CheckStatus+0x3c>)
 c006ee6:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 c006ee8:	4b03      	ldr	r3, [pc, #12]	; (c006ef8 <SD_CheckStatus+0x3c>)
 c006eea:	781b      	ldrb	r3, [r3, #0]
 c006eec:	b2db      	uxtb	r3, r3
}
 c006eee:	4618      	mov	r0, r3
 c006ef0:	3708      	adds	r7, #8
 c006ef2:	46bd      	mov	sp, r7
 c006ef4:	bd80      	pop	{r7, pc}
 c006ef6:	bf00      	nop
 c006ef8:	30000011 	.word	0x30000011

0c006efc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 c006efc:	b580      	push	{r7, lr}
 c006efe:	b082      	sub	sp, #8
 c006f00:	af00      	add	r7, sp, #0
 c006f02:	4603      	mov	r3, r0
 c006f04:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN SDinitialize */
  Stat = STA_NOINIT;
 c006f06:	4b09      	ldr	r3, [pc, #36]	; (c006f2c <SD_initialize+0x30>)
 c006f08:	2201      	movs	r2, #1
 c006f0a:	701a      	strb	r2, [r3, #0]
  {
    Stat = SD_CheckStatus(lun);
  }

#else
  Stat = SD_CheckStatus(lun);
 c006f0c:	79fb      	ldrb	r3, [r7, #7]
 c006f0e:	4618      	mov	r0, r3
 c006f10:	f7ff ffd4 	bl	c006ebc <SD_CheckStatus>
 c006f14:	4603      	mov	r3, r0
 c006f16:	461a      	mov	r2, r3
 c006f18:	4b04      	ldr	r3, [pc, #16]	; (c006f2c <SD_initialize+0x30>)
 c006f1a:	701a      	strb	r2, [r3, #0]
#endif
  return Stat;
 c006f1c:	4b03      	ldr	r3, [pc, #12]	; (c006f2c <SD_initialize+0x30>)
 c006f1e:	781b      	ldrb	r3, [r3, #0]
 c006f20:	b2db      	uxtb	r3, r3
  /* USER CODE END SDinitialize */
}
 c006f22:	4618      	mov	r0, r3
 c006f24:	3708      	adds	r7, #8
 c006f26:	46bd      	mov	sp, r7
 c006f28:	bd80      	pop	{r7, pc}
 c006f2a:	bf00      	nop
 c006f2c:	30000011 	.word	0x30000011

0c006f30 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 c006f30:	b580      	push	{r7, lr}
 c006f32:	b082      	sub	sp, #8
 c006f34:	af00      	add	r7, sp, #0
 c006f36:	4603      	mov	r3, r0
 c006f38:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 c006f3a:	79fb      	ldrb	r3, [r7, #7]
 c006f3c:	4618      	mov	r0, r3
 c006f3e:	f7ff ffbd 	bl	c006ebc <SD_CheckStatus>
 c006f42:	4603      	mov	r3, r0
}
 c006f44:	4618      	mov	r0, r3
 c006f46:	3708      	adds	r7, #8
 c006f48:	46bd      	mov	sp, r7
 c006f4a:	bd80      	pop	{r7, pc}

0c006f4c <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 c006f4c:	b580      	push	{r7, lr}
 c006f4e:	b086      	sub	sp, #24
 c006f50:	af00      	add	r7, sp, #0
 c006f52:	60b9      	str	r1, [r7, #8]
 c006f54:	607a      	str	r2, [r7, #4]
 c006f56:	603b      	str	r3, [r7, #0]
 c006f58:	4603      	mov	r3, r0
 c006f5a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 c006f5c:	2301      	movs	r3, #1
 c006f5e:	75fb      	strb	r3, [r7, #23]

  if(SECURE_SD_ReadBlocks(0,(uint32_t*)buff,
 c006f60:	683b      	ldr	r3, [r7, #0]
 c006f62:	687a      	ldr	r2, [r7, #4]
 c006f64:	68b9      	ldr	r1, [r7, #8]
 c006f66:	2000      	movs	r0, #0
 c006f68:	f000 fe5e 	bl	c007c28 <__acle_se_SECURE_SD_ReadBlocks>
 c006f6c:	4603      	mov	r3, r0
 c006f6e:	2b00      	cmp	r3, #0
 c006f70:	d108      	bne.n	c006f84 <SD_read+0x38>
                       (uint32_t) (sector),
                       count) == BSP_ERROR_NONE)
  {
    /* wait until the read operation is finished */
    while(SECURE_SD_GetCardState(0)!= SD_TRANSFER_OK)
 c006f72:	bf00      	nop
 c006f74:	2000      	movs	r0, #0
 c006f76:	f000 fdd5 	bl	c007b24 <__acle_se_SECURE_SD_GetCardState>
 c006f7a:	4603      	mov	r3, r0
 c006f7c:	2b00      	cmp	r3, #0
 c006f7e:	d1f9      	bne.n	c006f74 <SD_read+0x28>
    {
    }
    res = RES_OK;
 c006f80:	2300      	movs	r3, #0
 c006f82:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 c006f84:	7dfb      	ldrb	r3, [r7, #23]
}
 c006f86:	4618      	mov	r0, r3
 c006f88:	3718      	adds	r7, #24
 c006f8a:	46bd      	mov	sp, r7
 c006f8c:	bd80      	pop	{r7, pc}

0c006f8e <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 c006f8e:	b580      	push	{r7, lr}
 c006f90:	b086      	sub	sp, #24
 c006f92:	af00      	add	r7, sp, #0
 c006f94:	60b9      	str	r1, [r7, #8]
 c006f96:	607a      	str	r2, [r7, #4]
 c006f98:	603b      	str	r3, [r7, #0]
 c006f9a:	4603      	mov	r3, r0
 c006f9c:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 c006f9e:	2301      	movs	r3, #1
 c006fa0:	75fb      	strb	r3, [r7, #23]

  if(SECURE_SD_WriteBlocks(0,(uint32_t*)buff,
 c006fa2:	683b      	ldr	r3, [r7, #0]
 c006fa4:	687a      	ldr	r2, [r7, #4]
 c006fa6:	68b9      	ldr	r1, [r7, #8]
 c006fa8:	2000      	movs	r0, #0
 c006faa:	f000 fe83 	bl	c007cb4 <__acle_se_SECURE_SD_WriteBlocks>
 c006fae:	4603      	mov	r3, r0
 c006fb0:	2b00      	cmp	r3, #0
 c006fb2:	d108      	bne.n	c006fc6 <SD_write+0x38>
                        (uint32_t)(sector),
                        count) == BSP_ERROR_NONE)
  {
	/* wait until the Write operation is finished */
    while(SECURE_SD_GetCardState(0) != SD_TRANSFER_OK)
 c006fb4:	bf00      	nop
 c006fb6:	2000      	movs	r0, #0
 c006fb8:	f000 fdb4 	bl	c007b24 <__acle_se_SECURE_SD_GetCardState>
 c006fbc:	4603      	mov	r3, r0
 c006fbe:	2b00      	cmp	r3, #0
 c006fc0:	d1f9      	bne.n	c006fb6 <SD_write+0x28>
    {
    }
    res = RES_OK;
 c006fc2:	2300      	movs	r3, #0
 c006fc4:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 c006fc6:	7dfb      	ldrb	r3, [r7, #23]
}
 c006fc8:	4618      	mov	r0, r3
 c006fca:	3718      	adds	r7, #24
 c006fcc:	46bd      	mov	sp, r7
 c006fce:	bd80      	pop	{r7, pc}

0c006fd0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 c006fd0:	b580      	push	{r7, lr}
 c006fd2:	b08c      	sub	sp, #48	; 0x30
 c006fd4:	af00      	add	r7, sp, #0
 c006fd6:	4603      	mov	r3, r0
 c006fd8:	603a      	str	r2, [r7, #0]
 c006fda:	71fb      	strb	r3, [r7, #7]
 c006fdc:	460b      	mov	r3, r1
 c006fde:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 c006fe0:	2301      	movs	r3, #1
 c006fe2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 c006fe6:	4b26      	ldr	r3, [pc, #152]	; (c007080 <SD_ioctl+0xb0>)
 c006fe8:	781b      	ldrb	r3, [r3, #0]
 c006fea:	b2db      	uxtb	r3, r3
 c006fec:	f003 0301 	and.w	r3, r3, #1
 c006ff0:	2b00      	cmp	r3, #0
 c006ff2:	d001      	beq.n	c006ff8 <SD_ioctl+0x28>
 c006ff4:	2303      	movs	r3, #3
 c006ff6:	e03f      	b.n	c007078 <SD_ioctl+0xa8>

  switch (cmd)
 c006ff8:	79bb      	ldrb	r3, [r7, #6]
 c006ffa:	2b03      	cmp	r3, #3
 c006ffc:	d837      	bhi.n	c00706e <SD_ioctl+0x9e>
 c006ffe:	a201      	add	r2, pc, #4	; (adr r2, c007004 <SD_ioctl+0x34>)
 c007000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c007004:	0c007015 	.word	0x0c007015
 c007008:	0c00701d 	.word	0x0c00701d
 c00700c:	0c007037 	.word	0x0c007037
 c007010:	0c007053 	.word	0x0c007053
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 c007014:	2300      	movs	r3, #0
 c007016:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 c00701a:	e02b      	b.n	c007074 <SD_ioctl+0xa4>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    SECURE_SD_GetCardInfo(0,&CardInfo);
 c00701c:	f107 0308 	add.w	r3, r7, #8
 c007020:	4619      	mov	r1, r3
 c007022:	2000      	movs	r0, #0
 c007024:	f000 fdbe 	bl	c007ba4 <__acle_se_SECURE_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 c007028:	6a3a      	ldr	r2, [r7, #32]
 c00702a:	683b      	ldr	r3, [r7, #0]
 c00702c:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 c00702e:	2300      	movs	r3, #0
 c007030:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 c007034:	e01e      	b.n	c007074 <SD_ioctl+0xa4>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    SECURE_SD_GetCardInfo(0,&CardInfo);
 c007036:	f107 0308 	add.w	r3, r7, #8
 c00703a:	4619      	mov	r1, r3
 c00703c:	2000      	movs	r0, #0
 c00703e:	f000 fdb1 	bl	c007ba4 <__acle_se_SECURE_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 c007042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c007044:	b29a      	uxth	r2, r3
 c007046:	683b      	ldr	r3, [r7, #0]
 c007048:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 c00704a:	2300      	movs	r3, #0
 c00704c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 c007050:	e010      	b.n	c007074 <SD_ioctl+0xa4>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    SECURE_SD_GetCardInfo(0,&CardInfo);
 c007052:	f107 0308 	add.w	r3, r7, #8
 c007056:	4619      	mov	r1, r3
 c007058:	2000      	movs	r0, #0
 c00705a:	f000 fda3 	bl	c007ba4 <__acle_se_SECURE_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 c00705e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c007060:	0a5a      	lsrs	r2, r3, #9
 c007062:	683b      	ldr	r3, [r7, #0]
 c007064:	601a      	str	r2, [r3, #0]
	res = RES_OK;
 c007066:	2300      	movs	r3, #0
 c007068:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 c00706c:	e002      	b.n	c007074 <SD_ioctl+0xa4>

  default:
    res = RES_PARERR;
 c00706e:	2304      	movs	r3, #4
 c007070:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 c007074:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 c007078:	4618      	mov	r0, r3
 c00707a:	3730      	adds	r7, #48	; 0x30
 c00707c:	46bd      	mov	sp, r7
 c00707e:	bd80      	pop	{r7, pc}
 c007080:	30000011 	.word	0x30000011

0c007084 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 c007084:	f8df d034 	ldr.w	sp, [pc, #52]	; c0070bc <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 c007088:	f7f9 fb90 	bl	c0007ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 c00708c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 c00708e:	e003      	b.n	c007098 <LoopCopyDataInit>

0c007090 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 c007090:	4b0b      	ldr	r3, [pc, #44]	; (c0070c0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 c007092:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 c007094:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 c007096:	3104      	adds	r1, #4

0c007098 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 c007098:	480a      	ldr	r0, [pc, #40]	; (c0070c4 <LoopForever+0xa>)
	ldr	r3, =_edata
 c00709a:	4b0b      	ldr	r3, [pc, #44]	; (c0070c8 <LoopForever+0xe>)
	adds	r2, r0, r1
 c00709c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 c00709e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 c0070a0:	d3f6      	bcc.n	c007090 <CopyDataInit>
	ldr	r2, =_sbss
 c0070a2:	4a0a      	ldr	r2, [pc, #40]	; (c0070cc <LoopForever+0x12>)
	b	LoopFillZerobss
 c0070a4:	e002      	b.n	c0070ac <LoopFillZerobss>

0c0070a6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 c0070a6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 c0070a8:	f842 3b04 	str.w	r3, [r2], #4

0c0070ac <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 c0070ac:	4b08      	ldr	r3, [pc, #32]	; (c0070d0 <LoopForever+0x16>)
	cmp	r2, r3
 c0070ae:	429a      	cmp	r2, r3
	bcc	FillZerobss
 c0070b0:	d3f9      	bcc.n	c0070a6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 c0070b2:	f004 fba9 	bl	c00b808 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 c0070b6:	f000 f855 	bl	c007164 <main>

0c0070ba <LoopForever>:

LoopForever:
    b LoopForever
 c0070ba:	e7fe      	b.n	c0070ba <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 c0070bc:	30018000 	.word	0x30018000
	ldr	r3, =_sidata
 c0070c0:	0c00c050 	.word	0x0c00c050
	ldr	r0, =_sdata
 c0070c4:	30000000 	.word	0x30000000
	ldr	r3, =_edata
 c0070c8:	30000078 	.word	0x30000078
	ldr	r2, =_sbss
 c0070cc:	30000078 	.word	0x30000078
	ldr	r3, = _ebss
 c0070d0:	30000828 	.word	0x30000828

0c0070d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 c0070d4:	e7fe      	b.n	c0070d4 <ADC1_2_IRQHandler>
	...

0c0070d8 <__acle_se_jump_secure>:
uint8_t* arr;

extern funcptr_NS pTask1Callback;

CMSE_NS_ENTRY void jump_secure(int num)
{
 c0070d8:	b580      	push	{r7, lr}
 c0070da:	b082      	sub	sp, #8
 c0070dc:	af00      	add	r7, sp, #0
 c0070de:	6078      	str	r0, [r7, #4]
	flag_s++;
 c0070e0:	4b1f      	ldr	r3, [pc, #124]	; (c007160 <__acle_se_jump_secure+0x88>)
 c0070e2:	681b      	ldr	r3, [r3, #0]
 c0070e4:	3301      	adds	r3, #1
 c0070e6:	4a1e      	ldr	r2, [pc, #120]	; (c007160 <__acle_se_jump_secure+0x88>)
 c0070e8:	6013      	str	r3, [r2, #0]
	main();
 c0070ea:	f000 f83b 	bl	c007164 <main>
}
 c0070ee:	bf00      	nop
 c0070f0:	3708      	adds	r7, #8
 c0070f2:	46bd      	mov	sp, r7
 c0070f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c0070f8:	4670      	mov	r0, lr
 c0070fa:	4671      	mov	r1, lr
 c0070fc:	4672      	mov	r2, lr
 c0070fe:	4673      	mov	r3, lr
 c007100:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c007104:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c007108:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c00710c:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c007110:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c007114:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c007118:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c00711c:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c007120:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c007124:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c007128:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c00712c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c007130:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c007134:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c007138:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c00713c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c007140:	f38e 8c00 	msr	CPSR_fs, lr
 c007144:	b410      	push	{r4}
 c007146:	eef1 ca10 	vmrs	ip, fpscr
 c00714a:	f64f 7460 	movw	r4, #65376	; 0xff60
 c00714e:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c007152:	ea0c 0c04 	and.w	ip, ip, r4
 c007156:	eee1 ca10 	vmsr	fpscr, ip
 c00715a:	bc10      	pop	{r4}
 c00715c:	46f4      	mov	ip, lr
 c00715e:	4774      	bxns	lr
 c007160:	300007cc 	.word	0x300007cc

0c007164 <main>:



int main(void)
{
 c007164:	b580      	push	{r7, lr}
 c007166:	b08a      	sub	sp, #40	; 0x28
 c007168:	af00      	add	r7, sp, #0

  ///////////////// Initialize the hardware and secure world
  if (flag_s==0){
 c00716a:	4b9c      	ldr	r3, [pc, #624]	; (c0073dc <main+0x278>)
 c00716c:	681b      	ldr	r3, [r3, #0]
 c00716e:	2b00      	cmp	r3, #0
 c007170:	f040 80b8 	bne.w	c0072e4 <main+0x180>
  /* SAU/IDAU, FPU and interrupts secure/non-secure allocation setup done */
  /* in SystemInit() based on partition_stm32l562xx.h file's definitions. */

  /* Secure/Non-secure Memory and Peripheral isolation configuration */
  SystemIsolation_Config();
 c007174:	f000 fb16 	bl	c0077a4 <SystemIsolation_Config>

  /* Enable SecureFault handler (HardFault is default) */
  SCB->SHCSR |= SCB_SHCSR_SECUREFAULTENA_Msk;
 c007178:	4b99      	ldr	r3, [pc, #612]	; (c0073e0 <main+0x27c>)
 c00717a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c00717c:	4a98      	ldr	r2, [pc, #608]	; (c0073e0 <main+0x27c>)
 c00717e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 c007182:	6253      	str	r3, [r2, #36]	; 0x24
         purpose timer for example or other time source), keeping in mind that
         Time base duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined
         and handled in milliseconds basis.
       - Low Level Initialization
     */
  HAL_Init();
 c007184:	f7f9 fc18 	bl	c0009b8 <HAL_Init>

  /* Enable Instruction cache (default 2-ways set associative cache) */
  if(HAL_ICACHE_Enable() != HAL_OK)
 c007188:	f7fa f962 	bl	c001450 <HAL_ICACHE_Enable>
 c00718c:	4603      	mov	r3, r0
 c00718e:	2b00      	cmp	r3, #0
 c007190:	d000      	beq.n	c007194 <main+0x30>
  {
    /* Initialization Error */
    while(1);
 c007192:	e7fe      	b.n	c007192 <main+0x2e>
  }

  /* Configure the System clock to have a frequency of 110 MHz */
  SystemClock_Config();
 c007194:	f000 fbbe 	bl	c007914 <SystemClock_Config>

  /* Add your secure application code here prior to non-secure initialization
     */

  /* All IOs are by default allocated to secure */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 c007198:	4b92      	ldr	r3, [pc, #584]	; (c0073e4 <main+0x280>)
 c00719a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c00719c:	4a91      	ldr	r2, [pc, #580]	; (c0073e4 <main+0x280>)
 c00719e:	f043 0301 	orr.w	r3, r3, #1
 c0071a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 c0071a4:	4b8f      	ldr	r3, [pc, #572]	; (c0073e4 <main+0x280>)
 c0071a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c0071a8:	f003 0301 	and.w	r3, r3, #1
 c0071ac:	623b      	str	r3, [r7, #32]
 c0071ae:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 c0071b0:	4b8c      	ldr	r3, [pc, #560]	; (c0073e4 <main+0x280>)
 c0071b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c0071b4:	4a8b      	ldr	r2, [pc, #556]	; (c0073e4 <main+0x280>)
 c0071b6:	f043 0302 	orr.w	r3, r3, #2
 c0071ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 c0071bc:	4b89      	ldr	r3, [pc, #548]	; (c0073e4 <main+0x280>)
 c0071be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c0071c0:	f003 0302 	and.w	r3, r3, #2
 c0071c4:	61fb      	str	r3, [r7, #28]
 c0071c6:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 c0071c8:	4b86      	ldr	r3, [pc, #536]	; (c0073e4 <main+0x280>)
 c0071ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c0071cc:	4a85      	ldr	r2, [pc, #532]	; (c0073e4 <main+0x280>)
 c0071ce:	f043 0304 	orr.w	r3, r3, #4
 c0071d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 c0071d4:	4b83      	ldr	r3, [pc, #524]	; (c0073e4 <main+0x280>)
 c0071d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c0071d8:	f003 0304 	and.w	r3, r3, #4
 c0071dc:	61bb      	str	r3, [r7, #24]
 c0071de:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 c0071e0:	4b80      	ldr	r3, [pc, #512]	; (c0073e4 <main+0x280>)
 c0071e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c0071e4:	4a7f      	ldr	r2, [pc, #508]	; (c0073e4 <main+0x280>)
 c0071e6:	f043 0308 	orr.w	r3, r3, #8
 c0071ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 c0071ec:	4b7d      	ldr	r3, [pc, #500]	; (c0073e4 <main+0x280>)
 c0071ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c0071f0:	f003 0308 	and.w	r3, r3, #8
 c0071f4:	617b      	str	r3, [r7, #20]
 c0071f6:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 c0071f8:	4b7a      	ldr	r3, [pc, #488]	; (c0073e4 <main+0x280>)
 c0071fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c0071fc:	4a79      	ldr	r2, [pc, #484]	; (c0073e4 <main+0x280>)
 c0071fe:	f043 0310 	orr.w	r3, r3, #16
 c007202:	64d3      	str	r3, [r2, #76]	; 0x4c
 c007204:	4b77      	ldr	r3, [pc, #476]	; (c0073e4 <main+0x280>)
 c007206:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c007208:	f003 0310 	and.w	r3, r3, #16
 c00720c:	613b      	str	r3, [r7, #16]
 c00720e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 c007210:	4b74      	ldr	r3, [pc, #464]	; (c0073e4 <main+0x280>)
 c007212:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c007214:	4a73      	ldr	r2, [pc, #460]	; (c0073e4 <main+0x280>)
 c007216:	f043 0320 	orr.w	r3, r3, #32
 c00721a:	64d3      	str	r3, [r2, #76]	; 0x4c
 c00721c:	4b71      	ldr	r3, [pc, #452]	; (c0073e4 <main+0x280>)
 c00721e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c007220:	f003 0320 	and.w	r3, r3, #32
 c007224:	60fb      	str	r3, [r7, #12]
 c007226:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 c007228:	4b6e      	ldr	r3, [pc, #440]	; (c0073e4 <main+0x280>)
 c00722a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c00722c:	4a6d      	ldr	r2, [pc, #436]	; (c0073e4 <main+0x280>)
 c00722e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 c007232:	64d3      	str	r3, [r2, #76]	; 0x4c
 c007234:	4b6b      	ldr	r3, [pc, #428]	; (c0073e4 <main+0x280>)
 c007236:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c007238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c00723c:	60bb      	str	r3, [r7, #8]
 c00723e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 c007240:	4b68      	ldr	r3, [pc, #416]	; (c0073e4 <main+0x280>)
 c007242:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c007244:	4a67      	ldr	r2, [pc, #412]	; (c0073e4 <main+0x280>)
 c007246:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c00724a:	64d3      	str	r3, [r2, #76]	; 0x4c
 c00724c:	4b65      	ldr	r3, [pc, #404]	; (c0073e4 <main+0x280>)
 c00724e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c007250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c007254:	607b      	str	r3, [r7, #4]
 c007256:	687b      	ldr	r3, [r7, #4]
  HAL_GPIO_ConfigPinAttributes(GPIOA, GPIO_PIN_All, GPIO_PIN_NSEC);
 c007258:	2200      	movs	r2, #0
 c00725a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 c00725e:	4862      	ldr	r0, [pc, #392]	; (c0073e8 <main+0x284>)
 c007260:	f7f9 ff18 	bl	c001094 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOB, GPIO_PIN_All, GPIO_PIN_NSEC);
 c007264:	2200      	movs	r2, #0
 c007266:	f64f 71ff 	movw	r1, #65535	; 0xffff
 c00726a:	4860      	ldr	r0, [pc, #384]	; (c0073ec <main+0x288>)
 c00726c:	f7f9 ff12 	bl	c001094 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOC, (GPIO_PIN_All & ~(GPIO_PIN_8)& ~(GPIO_PIN_9)& ~(GPIO_PIN_10)& ~(GPIO_PIN_11)& ~(GPIO_PIN_12)), GPIO_PIN_NSEC);
 c007270:	2200      	movs	r2, #0
 c007272:	f24e 01ff 	movw	r1, #57599	; 0xe0ff
 c007276:	485e      	ldr	r0, [pc, #376]	; (c0073f0 <main+0x28c>)
 c007278:	f7f9 ff0c 	bl	c001094 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOD, (GPIO_PIN_All & ~(GPIO_PIN_2)), GPIO_PIN_NSEC);
 c00727c:	2200      	movs	r2, #0
 c00727e:	f64f 71fb 	movw	r1, #65531	; 0xfffb
 c007282:	485c      	ldr	r0, [pc, #368]	; (c0073f4 <main+0x290>)
 c007284:	f7f9 ff06 	bl	c001094 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOE, GPIO_PIN_All, GPIO_PIN_NSEC);
 c007288:	2200      	movs	r2, #0
 c00728a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 c00728e:	485a      	ldr	r0, [pc, #360]	; (c0073f8 <main+0x294>)
 c007290:	f7f9 ff00 	bl	c001094 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOF, GPIO_PIN_All, GPIO_PIN_NSEC);
 c007294:	2200      	movs	r2, #0
 c007296:	f64f 71ff 	movw	r1, #65535	; 0xffff
 c00729a:	4858      	ldr	r0, [pc, #352]	; (c0073fc <main+0x298>)
 c00729c:	f7f9 fefa 	bl	c001094 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOG, GPIO_PIN_All, GPIO_PIN_NSEC);
 c0072a0:	2200      	movs	r2, #0
 c0072a2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 c0072a6:	4856      	ldr	r0, [pc, #344]	; (c007400 <main+0x29c>)
 c0072a8:	f7f9 fef4 	bl	c001094 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOH, GPIO_PIN_All, GPIO_PIN_NSEC);
 c0072ac:	2200      	movs	r2, #0
 c0072ae:	f64f 71ff 	movw	r1, #65535	; 0xffff
 c0072b2:	4854      	ldr	r0, [pc, #336]	; (c007404 <main+0x2a0>)
 c0072b4:	f7f9 feee 	bl	c001094 <HAL_GPIO_ConfigPinAttributes>

   /* Initialize all configured peripherals */


  ////////////Initialize the file system
   SECURE_SD_Init(0);
 c0072b8:	2000      	movs	r0, #0
 c0072ba:	f000 fbf3 	bl	c007aa4 <__acle_se_SECURE_SD_Init>
   MX_FATFS_Init();
 c0072be:	f7ff fcc1 	bl	c006c44 <MX_FATFS_Init>
   MX_FATFS_Process();
 c0072c2:	f7ff fcd7 	bl	c006c74 <MX_FATFS_Process>


   ///////////Initialize the model input by storing it into SD card
   arr = Secure_task(size);
 c0072c6:	4b50      	ldr	r3, [pc, #320]	; (c007408 <main+0x2a4>)
 c0072c8:	781b      	ldrb	r3, [r3, #0]
 c0072ca:	4618      	mov	r0, r3
 c0072cc:	f000 f8a4 	bl	c007418 <Secure_task>
 c0072d0:	4603      	mov	r3, r0
 c0072d2:	4a4e      	ldr	r2, [pc, #312]	; (c00740c <main+0x2a8>)
 c0072d4:	6013      	str	r3, [r2, #0]
   FS_FileWrite(arr);
 c0072d6:	4b4d      	ldr	r3, [pc, #308]	; (c00740c <main+0x2a8>)
 c0072d8:	681b      	ldr	r3, [r3, #0]
 c0072da:	4618      	mov	r0, r3
 c0072dc:	f7ff fd84 	bl	c006de8 <FS_FileWrite>

   ///////////Initialize the normal world
   NonSecure_main();
 c0072e0:	f000 fa1c 	bl	c00771c <NonSecure_main>

  }

  ///////////Initialize the timer in the secure world and start timer interrupt
  if (flag_s==1){
 c0072e4:	4b3d      	ldr	r3, [pc, #244]	; (c0073dc <main+0x278>)
 c0072e6:	681b      	ldr	r3, [r3, #0]
 c0072e8:	2b01      	cmp	r3, #1
 c0072ea:	d104      	bne.n	c0072f6 <main+0x192>
	  MX_TIM17_Init();
 c0072ec:	f000 f8c4 	bl	c007478 <MX_TIM17_Init>
      HAL_TIM_Base_Start_IT(&htim17);
 c0072f0:	4847      	ldr	r0, [pc, #284]	; (c007410 <main+0x2ac>)
 c0072f2:	f7fe fc6d 	bl	c005bd0 <HAL_TIM_Base_Start_IT>
  }

  ///////////Start executing model inference
  while(1)
  {
	int layer_num = flag_s-1;
 c0072f6:	4b39      	ldr	r3, [pc, #228]	; (c0073dc <main+0x278>)
 c0072f8:	681b      	ldr	r3, [r3, #0]
 c0072fa:	3b01      	subs	r3, #1
 c0072fc:	627b      	str	r3, [r7, #36]	; 0x24
	switch(layer_num){
 c0072fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c007300:	2b01      	cmp	r3, #1
 c007302:	d003      	beq.n	c00730c <main+0x1a8>
 c007304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c007306:	2b02      	cmp	r3, #2
 c007308:	d022      	beq.n	c007350 <main+0x1ec>
 c00730a:	e043      	b.n	c007394 <main+0x230>
	case 1: //layer 1 execution:
	   ///////////Step1: Read the stored SRAM content from the SD card;
	   FS_FileRead(arr, size);
 c00730c:	4b3f      	ldr	r3, [pc, #252]	; (c00740c <main+0x2a8>)
 c00730e:	681b      	ldr	r3, [r3, #0]
 c007310:	4a3d      	ldr	r2, [pc, #244]	; (c007408 <main+0x2a4>)
 c007312:	7812      	ldrb	r2, [r2, #0]
 c007314:	4611      	mov	r1, r2
 c007316:	4618      	mov	r0, r3
 c007318:	f7ff fd9a 	bl	c006e50 <FS_FileRead>

	   ///////////Step2: Execute the secure world task. Here is a demo task. In our scenario, it should be a TinyML task.
	   arr = Secure_task(size);
 c00731c:	4b3a      	ldr	r3, [pc, #232]	; (c007408 <main+0x2a4>)
 c00731e:	781b      	ldrb	r3, [r3, #0]
 c007320:	4618      	mov	r0, r3
 c007322:	f000 f879 	bl	c007418 <Secure_task>
 c007326:	4603      	mov	r3, r0
 c007328:	4a38      	ldr	r2, [pc, #224]	; (c00740c <main+0x2a8>)
 c00732a:	6013      	str	r3, [r2, #0]

	   ///////////Step3: Store the layer output in the secure world with memory swapping between the SD card and SRAM. Then, free the allocated SRAM.
	   FS_FileWrite(arr);
 c00732c:	4b37      	ldr	r3, [pc, #220]	; (c00740c <main+0x2a8>)
 c00732e:	681b      	ldr	r3, [r3, #0]
 c007330:	4618      	mov	r0, r3
 c007332:	f7ff fd59 	bl	c006de8 <FS_FileWrite>
	   free(arr);
 c007336:	4b35      	ldr	r3, [pc, #212]	; (c00740c <main+0x2a8>)
 c007338:	681b      	ldr	r3, [r3, #0]
 c00733a:	4618      	mov	r0, r3
 c00733c:	f004 fa90 	bl	c00b860 <free>

	   ///////////Step4: Configure the allocation scheme between the secure world and the normal world of the TrustZone
	   MX_GTZC_S_Init(128);
 c007340:	2080      	movs	r0, #128	; 0x80
 c007342:	f000 f8bb 	bl	c0074bc <MX_GTZC_S_Init>

	   ///////////Step5: Jump back to the normal world to execute the tasks in the normal world.
	   Normal_entry(pTask1Callback);
 c007346:	4b33      	ldr	r3, [pc, #204]	; (c007414 <main+0x2b0>)
 c007348:	681b      	ldr	r3, [r3, #0]
 c00734a:	4618      	mov	r0, r3
 c00734c:	f000 f976 	bl	c00763c <__acle_se_Normal_entry>

	case 2: //layer 2 execution:
	   ///////////Step1: Read the stored SRAM content from the SD card;
	   FS_FileRead(arr, size);
 c007350:	4b2e      	ldr	r3, [pc, #184]	; (c00740c <main+0x2a8>)
 c007352:	681b      	ldr	r3, [r3, #0]
 c007354:	4a2c      	ldr	r2, [pc, #176]	; (c007408 <main+0x2a4>)
 c007356:	7812      	ldrb	r2, [r2, #0]
 c007358:	4611      	mov	r1, r2
 c00735a:	4618      	mov	r0, r3
 c00735c:	f7ff fd78 	bl	c006e50 <FS_FileRead>

	   ///////////Step2: Execute the secure world task. Here is a demo task. In our scenario, it should be a TinyML task.
	   arr = Secure_task(size);
 c007360:	4b29      	ldr	r3, [pc, #164]	; (c007408 <main+0x2a4>)
 c007362:	781b      	ldrb	r3, [r3, #0]
 c007364:	4618      	mov	r0, r3
 c007366:	f000 f857 	bl	c007418 <Secure_task>
 c00736a:	4603      	mov	r3, r0
 c00736c:	4a27      	ldr	r2, [pc, #156]	; (c00740c <main+0x2a8>)
 c00736e:	6013      	str	r3, [r2, #0]

	   ///////////Step3: Store the layer output in the secure world with memory swapping between the SD card and SRAM. Then, free the allocated SRAM.
	   FS_FileWrite(arr);
 c007370:	4b26      	ldr	r3, [pc, #152]	; (c00740c <main+0x2a8>)
 c007372:	681b      	ldr	r3, [r3, #0]
 c007374:	4618      	mov	r0, r3
 c007376:	f7ff fd37 	bl	c006de8 <FS_FileWrite>
	   free(arr);
 c00737a:	4b24      	ldr	r3, [pc, #144]	; (c00740c <main+0x2a8>)
 c00737c:	681b      	ldr	r3, [r3, #0]
 c00737e:	4618      	mov	r0, r3
 c007380:	f004 fa6e 	bl	c00b860 <free>

	   ///////////Step4: Configure the allocation scheme between the secure world and the normal world of the TrustZone
	   MX_GTZC_S_Init(128);
 c007384:	2080      	movs	r0, #128	; 0x80
 c007386:	f000 f899 	bl	c0074bc <MX_GTZC_S_Init>

	   ///////////Step5: Jump back to the normal world to execute the tasks in the normal world.
	   Normal_entry(pTask1Callback);
 c00738a:	4b22      	ldr	r3, [pc, #136]	; (c007414 <main+0x2b0>)
 c00738c:	681b      	ldr	r3, [r3, #0]
 c00738e:	4618      	mov	r0, r3
 c007390:	f000 f954 	bl	c00763c <__acle_se_Normal_entry>

	default:
	   ///////////Step1: Read the stored SRAM content from the SD card;
	   FS_FileRead(arr, size);
 c007394:	4b1d      	ldr	r3, [pc, #116]	; (c00740c <main+0x2a8>)
 c007396:	681b      	ldr	r3, [r3, #0]
 c007398:	4a1b      	ldr	r2, [pc, #108]	; (c007408 <main+0x2a4>)
 c00739a:	7812      	ldrb	r2, [r2, #0]
 c00739c:	4611      	mov	r1, r2
 c00739e:	4618      	mov	r0, r3
 c0073a0:	f7ff fd56 	bl	c006e50 <FS_FileRead>

	   ///////////Step2: Execute the secure world task. Here is a demo task. In our scenario, it should be a TinyML task.
	   arr = Secure_task(size);
 c0073a4:	4b18      	ldr	r3, [pc, #96]	; (c007408 <main+0x2a4>)
 c0073a6:	781b      	ldrb	r3, [r3, #0]
 c0073a8:	4618      	mov	r0, r3
 c0073aa:	f000 f835 	bl	c007418 <Secure_task>
 c0073ae:	4603      	mov	r3, r0
 c0073b0:	4a16      	ldr	r2, [pc, #88]	; (c00740c <main+0x2a8>)
 c0073b2:	6013      	str	r3, [r2, #0]

	   ///////////Step3: Store the layer output in the secure world with memory swapping between the SD card and SRAM. Then, free the allocated SRAM.
	   FS_FileWrite(arr);
 c0073b4:	4b15      	ldr	r3, [pc, #84]	; (c00740c <main+0x2a8>)
 c0073b6:	681b      	ldr	r3, [r3, #0]
 c0073b8:	4618      	mov	r0, r3
 c0073ba:	f7ff fd15 	bl	c006de8 <FS_FileWrite>
	   free(arr);
 c0073be:	4b13      	ldr	r3, [pc, #76]	; (c00740c <main+0x2a8>)
 c0073c0:	681b      	ldr	r3, [r3, #0]
 c0073c2:	4618      	mov	r0, r3
 c0073c4:	f004 fa4c 	bl	c00b860 <free>

	   ///////////Step4: Configure the allocation scheme between the secure world and the normal world of the TrustZone
	   MX_GTZC_S_Init(128);
 c0073c8:	2080      	movs	r0, #128	; 0x80
 c0073ca:	f000 f877 	bl	c0074bc <MX_GTZC_S_Init>

	   ///////////Step5: Jump back to the normal world to execute the tasks in the normal world.
	   Normal_entry(pTask1Callback);
 c0073ce:	4b11      	ldr	r3, [pc, #68]	; (c007414 <main+0x2b0>)
 c0073d0:	681b      	ldr	r3, [r3, #0]
 c0073d2:	4618      	mov	r0, r3
 c0073d4:	f000 f932 	bl	c00763c <__acle_se_Normal_entry>
  {
 c0073d8:	e78d      	b.n	c0072f6 <main+0x192>
 c0073da:	bf00      	nop
 c0073dc:	300007cc 	.word	0x300007cc
 c0073e0:	e000ed00 	.word	0xe000ed00
 c0073e4:	50021000 	.word	0x50021000
 c0073e8:	52020000 	.word	0x52020000
 c0073ec:	52020400 	.word	0x52020400
 c0073f0:	52020800 	.word	0x52020800
 c0073f4:	52020c00 	.word	0x52020c00
 c0073f8:	52021000 	.word	0x52021000
 c0073fc:	52021400 	.word	0x52021400
 c007400:	52021800 	.word	0x52021800
 c007404:	52021c00 	.word	0x52021c00
 c007408:	30000012 	.word	0x30000012
 c00740c:	300007d0 	.word	0x300007d0
 c007410:	30000780 	.word	0x30000780
 c007414:	300007dc 	.word	0x300007dc

0c007418 <Secure_task>:



///////////A demo secure task
static uint8_t* Secure_task(uint8_t size)
{
 c007418:	b580      	push	{r7, lr}
 c00741a:	b084      	sub	sp, #16
 c00741c:	af00      	add	r7, sp, #0
 c00741e:	4603      	mov	r3, r0
 c007420:	71fb      	strb	r3, [r7, #7]
	uint8_t* arr = (uint8_t*)malloc(size * sizeof(uint8_t));
 c007422:	79fb      	ldrb	r3, [r7, #7]
 c007424:	4618      	mov	r0, r3
 c007426:	f004 fa13 	bl	c00b850 <malloc>
 c00742a:	4603      	mov	r3, r0
 c00742c:	60bb      	str	r3, [r7, #8]
    for (uint8_t i = 0; i < size; i++) {
 c00742e:	2300      	movs	r3, #0
 c007430:	73fb      	strb	r3, [r7, #15]
 c007432:	e007      	b.n	c007444 <Secure_task+0x2c>
        arr[i] = i;
 c007434:	7bfb      	ldrb	r3, [r7, #15]
 c007436:	68ba      	ldr	r2, [r7, #8]
 c007438:	4413      	add	r3, r2
 c00743a:	7bfa      	ldrb	r2, [r7, #15]
 c00743c:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < size; i++) {
 c00743e:	7bfb      	ldrb	r3, [r7, #15]
 c007440:	3301      	adds	r3, #1
 c007442:	73fb      	strb	r3, [r7, #15]
 c007444:	7bfa      	ldrb	r2, [r7, #15]
 c007446:	79fb      	ldrb	r3, [r7, #7]
 c007448:	429a      	cmp	r2, r3
 c00744a:	d3f3      	bcc.n	c007434 <Secure_task+0x1c>
    }
    return arr;
 c00744c:	68bb      	ldr	r3, [r7, #8]
}
 c00744e:	4618      	mov	r0, r3
 c007450:	3710      	adds	r7, #16
 c007452:	46bd      	mov	sp, r7
 c007454:	bd80      	pop	{r7, pc}
	...

0c007458 <HAL_TIM_PeriodElapsedCallback>:


//////////Timer callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 c007458:	b580      	push	{r7, lr}
 c00745a:	b082      	sub	sp, #8
 c00745c:	af00      	add	r7, sp, #0
 c00745e:	6078      	str	r0, [r7, #4]

	//   NonSecure_main();
//	HAL_TIM_Base_Stop_IT(&htim17);
   Normal_entry(pTask1Callback);
 c007460:	4b04      	ldr	r3, [pc, #16]	; (c007474 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 c007462:	681b      	ldr	r3, [r3, #0]
 c007464:	4618      	mov	r0, r3
 c007466:	f000 f8e9 	bl	c00763c <__acle_se_Normal_entry>
}
 c00746a:	bf00      	nop
 c00746c:	3708      	adds	r7, #8
 c00746e:	46bd      	mov	sp, r7
 c007470:	bd80      	pop	{r7, pc}
 c007472:	bf00      	nop
 c007474:	300007dc 	.word	0x300007dc

0c007478 <MX_TIM17_Init>:




static void MX_TIM17_Init(void)
{
 c007478:	b580      	push	{r7, lr}
 c00747a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 c00747c:	4b0d      	ldr	r3, [pc, #52]	; (c0074b4 <MX_TIM17_Init+0x3c>)
 c00747e:	4a0e      	ldr	r2, [pc, #56]	; (c0074b8 <MX_TIM17_Init+0x40>)
 c007480:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 2000;
 c007482:	4b0c      	ldr	r3, [pc, #48]	; (c0074b4 <MX_TIM17_Init+0x3c>)
 c007484:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 c007488:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 c00748a:	4b0a      	ldr	r3, [pc, #40]	; (c0074b4 <MX_TIM17_Init+0x3c>)
 c00748c:	2200      	movs	r2, #0
 c00748e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 36000;
 c007490:	4b08      	ldr	r3, [pc, #32]	; (c0074b4 <MX_TIM17_Init+0x3c>)
 c007492:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 c007496:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 c007498:	4b06      	ldr	r3, [pc, #24]	; (c0074b4 <MX_TIM17_Init+0x3c>)
 c00749a:	2200      	movs	r2, #0
 c00749c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 c00749e:	4b05      	ldr	r3, [pc, #20]	; (c0074b4 <MX_TIM17_Init+0x3c>)
 c0074a0:	2200      	movs	r2, #0
 c0074a2:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 c0074a4:	4b03      	ldr	r3, [pc, #12]	; (c0074b4 <MX_TIM17_Init+0x3c>)
 c0074a6:	2200      	movs	r2, #0
 c0074a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 c0074aa:	4802      	ldr	r0, [pc, #8]	; (c0074b4 <MX_TIM17_Init+0x3c>)
 c0074ac:	f7fe fb38 	bl	c005b20 <HAL_TIM_Base_Init>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 c0074b0:	bf00      	nop
 c0074b2:	bd80      	pop	{r7, pc}
 c0074b4:	30000780 	.word	0x30000780
 c0074b8:	50014800 	.word	0x50014800

0c0074bc <MX_GTZC_S_Init>:



///////////The size_s representing the size of SRAM in kb
static void MX_GTZC_S_Init(int size_s)
{
 c0074bc:	b580      	push	{r7, lr}
 c0074be:	b0a6      	sub	sp, #152	; 0x98
 c0074c0:	af00      	add	r7, sp, #0
 c0074c2:	6078      	str	r0, [r7, #4]
  int array_num;
  int remainder;

//  block_s = (size_s*1024 + 255)/256;
//  num_sixteens = (block_s + 15) / 16;
  array_num = size_s/8;
 c0074c4:	687b      	ldr	r3, [r7, #4]
 c0074c6:	2b00      	cmp	r3, #0
 c0074c8:	da00      	bge.n	c0074cc <MX_GTZC_S_Init+0x10>
 c0074ca:	3307      	adds	r3, #7
 c0074cc:	10db      	asrs	r3, r3, #3
 c0074ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  remainder = size_s % 8;
 c0074d2:	687b      	ldr	r3, [r7, #4]
 c0074d4:	425a      	negs	r2, r3
 c0074d6:	f003 0307 	and.w	r3, r3, #7
 c0074da:	f002 0207 	and.w	r2, r2, #7
 c0074de:	bf58      	it	pl
 c0074e0:	4253      	negpl	r3, r2
 c0074e2:	67fb      	str	r3, [r7, #124]	; 0x7c

  if (remainder != 0) {
 c0074e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 c0074e6:	2b00      	cmp	r3, #0
 c0074e8:	d004      	beq.n	c0074f4 <MX_GTZC_S_Init+0x38>
      array_num = array_num + 1;
 c0074ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 c0074ee:	3301      	adds	r3, #1
 c0074f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

  /* USER CODE BEGIN GTZC_S_Init 0 */

  /* USER CODE END GTZC_S_Init 0 */

  MPCBB_ConfigTypeDef MPCBB_NonSecureArea_Desc = {0};
 c0074f4:	f107 030c 	add.w	r3, r7, #12
 c0074f8:	226c      	movs	r2, #108	; 0x6c
 c0074fa:	2100      	movs	r1, #0
 c0074fc:	4618      	mov	r0, r3
 c0074fe:	f004 f9c4 	bl	c00b88a <memset>

  /* USER CODE BEGIN GTZC_S_Init 1 */

  /* USER CODE END GTZC_S_Init 1 */
  MPCBB_NonSecureArea_Desc.SecureRWIllegalMode = GTZC_MPCBB_SRWILADIS_ENABLE;
 c007502:	2300      	movs	r3, #0
 c007504:	60fb      	str	r3, [r7, #12]
  MPCBB_NonSecureArea_Desc.InvertSecureState = GTZC_MPCBB_INVSECSTATE_NOT_INVERTED;
 c007506:	2300      	movs	r3, #0
 c007508:	613b      	str	r3, [r7, #16]
  if (array_num<=24){
 c00750a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 c00750e:	2b18      	cmp	r3, #24
 c007510:	dc2f      	bgt.n	c007572 <MX_GTZC_S_Init+0xb6>
	 int i;
	 int j;
	 for (i=0; i<array_num; i++){
 c007512:	2300      	movs	r3, #0
 c007514:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 c007518:	e00e      	b.n	c007538 <MX_GTZC_S_Init+0x7c>
		 MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[i] = 0xFFFFFFFF;
 c00751a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 c00751e:	3302      	adds	r3, #2
 c007520:	009b      	lsls	r3, r3, #2
 c007522:	3398      	adds	r3, #152	; 0x98
 c007524:	443b      	add	r3, r7
 c007526:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 c00752a:	f843 2c8c 	str.w	r2, [r3, #-140]
	 for (i=0; i<array_num; i++){
 c00752e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 c007532:	3301      	adds	r3, #1
 c007534:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 c007538:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 c00753c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 c007540:	429a      	cmp	r2, r3
 c007542:	dbea      	blt.n	c00751a <MX_GTZC_S_Init+0x5e>
	 }
	 for (j=array_num; j<24; j++){
 c007544:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 c007548:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 c00754c:	e00d      	b.n	c00756a <MX_GTZC_S_Init+0xae>
		 MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[j] = 0x00000000;
 c00754e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 c007552:	3302      	adds	r3, #2
 c007554:	009b      	lsls	r3, r3, #2
 c007556:	3398      	adds	r3, #152	; 0x98
 c007558:	443b      	add	r3, r7
 c00755a:	2200      	movs	r2, #0
 c00755c:	f843 2c8c 	str.w	r2, [r3, #-140]
	 for (j=array_num; j<24; j++){
 c007560:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 c007564:	3301      	adds	r3, #1
 c007566:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 c00756a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 c00756e:	2b17      	cmp	r3, #23
 c007570:	dded      	ble.n	c00754e <MX_GTZC_S_Init+0x92>
	 }
  }

  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_LockConfig_array[0] =   0x00000000;
 c007572:	2300      	movs	r3, #0
 c007574:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_GTZC_MPCBB_ConfigMem(SRAM1_BASE, &MPCBB_NonSecureArea_Desc) != HAL_OK)
 c007576:	f107 030c 	add.w	r3, r7, #12
 c00757a:	4619      	mov	r1, r3
 c00757c:	f04f 5040 	mov.w	r0, #805306368	; 0x30000000
 c007580:	f7f9 fdc0 	bl	c001104 <HAL_GTZC_MPCBB_ConfigMem>
  {
    ;
  }

  if (array_num>24){
 c007584:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 c007588:	2b18      	cmp	r3, #24
 c00758a:	dd32      	ble.n	c0075f2 <MX_GTZC_S_Init+0x136>
	  int k;
	  k = array_num-24;
 c00758c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 c007590:	3b18      	subs	r3, #24
 c007592:	67bb      	str	r3, [r7, #120]	; 0x78
	  int i;
	  int j;
	  for (i=0; i<k; i++){
 c007594:	2300      	movs	r3, #0
 c007596:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 c00759a:	e00e      	b.n	c0075ba <MX_GTZC_S_Init+0xfe>
		  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[i] = 0xFFFFFFFF;
 c00759c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 c0075a0:	3302      	adds	r3, #2
 c0075a2:	009b      	lsls	r3, r3, #2
 c0075a4:	3398      	adds	r3, #152	; 0x98
 c0075a6:	443b      	add	r3, r7
 c0075a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 c0075ac:	f843 2c8c 	str.w	r2, [r3, #-140]
	  for (i=0; i<k; i++){
 c0075b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 c0075b4:	3301      	adds	r3, #1
 c0075b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 c0075ba:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 c0075be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 c0075c0:	429a      	cmp	r2, r3
 c0075c2:	dbeb      	blt.n	c00759c <MX_GTZC_S_Init+0xe0>
	  }
	  for (j=k; j<8; j++){
 c0075c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 c0075c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 c0075ca:	e00d      	b.n	c0075e8 <MX_GTZC_S_Init+0x12c>
		  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[j] = 0x00000000;
 c0075cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 c0075d0:	3302      	adds	r3, #2
 c0075d2:	009b      	lsls	r3, r3, #2
 c0075d4:	3398      	adds	r3, #152	; 0x98
 c0075d6:	443b      	add	r3, r7
 c0075d8:	2200      	movs	r2, #0
 c0075da:	f843 2c8c 	str.w	r2, [r3, #-140]
	  for (j=k; j<8; j++){
 c0075de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 c0075e2:	3301      	adds	r3, #1
 c0075e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 c0075e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 c0075ec:	2b07      	cmp	r3, #7
 c0075ee:	dded      	ble.n	c0075cc <MX_GTZC_S_Init+0x110>
 c0075f0:	e015      	b.n	c00761e <MX_GTZC_S_Init+0x162>
	  }
  } else {
	  int i;
	  for (i=0; i<8; i++){
 c0075f2:	2300      	movs	r3, #0
 c0075f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 c0075f8:	e00d      	b.n	c007616 <MX_GTZC_S_Init+0x15a>
		  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[i] = 0x00000000;
 c0075fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 c0075fe:	3302      	adds	r3, #2
 c007600:	009b      	lsls	r3, r3, #2
 c007602:	3398      	adds	r3, #152	; 0x98
 c007604:	443b      	add	r3, r7
 c007606:	2200      	movs	r2, #0
 c007608:	f843 2c8c 	str.w	r2, [r3, #-140]
	  for (i=0; i<8; i++){
 c00760c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 c007610:	3301      	adds	r3, #1
 c007612:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 c007616:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 c00761a:	2b07      	cmp	r3, #7
 c00761c:	dded      	ble.n	c0075fa <MX_GTZC_S_Init+0x13e>
	  }
  }

  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_LockConfig_array[0] =   0x00000000;
 c00761e:	2300      	movs	r3, #0
 c007620:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_GTZC_MPCBB_ConfigMem(SRAM2_BASE, &MPCBB_NonSecureArea_Desc) != HAL_OK)
 c007622:	f107 030c 	add.w	r3, r7, #12
 c007626:	4619      	mov	r1, r3
 c007628:	4803      	ldr	r0, [pc, #12]	; (c007638 <MX_GTZC_S_Init+0x17c>)
 c00762a:	f7f9 fd6b 	bl	c001104 <HAL_GTZC_MPCBB_ConfigMem>
  }
  /* USER CODE BEGIN GTZC_S_Init 2 */

  /* USER CODE END GTZC_S_Init 2 */

}
 c00762e:	bf00      	nop
 c007630:	3798      	adds	r7, #152	; 0x98
 c007632:	46bd      	mov	sp, r7
 c007634:	bd80      	pop	{r7, pc}
 c007636:	bf00      	nop
 c007638:	30030000 	.word	0x30030000

0c00763c <__acle_se_Normal_entry>:

}



void __attribute__((cmse_nonsecure_entry)) Normal_entry(funcptr_NS pTask1Callback){
 c00763c:	b590      	push	{r4, r7, lr}
 c00763e:	b085      	sub	sp, #20
 c007640:	af00      	add	r7, sp, #0
 c007642:	6078      	str	r0, [r7, #4]
	funcptr_NS callback_NS; /* non-secure callback function pointer */

	if(pTask1Callback != (funcptr_NS)NULL)
 c007644:	687b      	ldr	r3, [r7, #4]
 c007646:	2b00      	cmp	r3, #0
 c007648:	d02e      	beq.n	c0076a8 <__acle_se_Normal_entry+0x6c>
	{
	 /* return function pointer with cleared LSB */
	 callback_NS = (funcptr_NS)cmse_nsfptr_create(pTask1Callback);
 c00764a:	687b      	ldr	r3, [r7, #4]
 c00764c:	f023 0301 	bic.w	r3, r3, #1
 c007650:	60fb      	str	r3, [r7, #12]
	 callback_NS();
 c007652:	68fb      	ldr	r3, [r7, #12]
 c007654:	461c      	mov	r4, r3
 c007656:	0864      	lsrs	r4, r4, #1
 c007658:	0064      	lsls	r4, r4, #1
 c00765a:	4620      	mov	r0, r4
 c00765c:	4621      	mov	r1, r4
 c00765e:	4622      	mov	r2, r4
 c007660:	4623      	mov	r3, r4
 c007662:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c007666:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c00766a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c00766e:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c007672:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c007676:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c00767a:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c00767e:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c007682:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c007686:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c00768a:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c00768e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c007692:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c007696:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c00769a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c00769e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c0076a2:	f7f8 fdc9 	bl	c000238 <__gnu_cmse_nonsecure_call>
	}
	else
	{
	  while(1);  /* Something went wrong */
	}
}
 c0076a6:	e000      	b.n	c0076aa <__acle_se_Normal_entry+0x6e>
	  while(1);  /* Something went wrong */
 c0076a8:	e7fe      	b.n	c0076a8 <__acle_se_Normal_entry+0x6c>
}
 c0076aa:	3714      	adds	r7, #20
 c0076ac:	46bd      	mov	sp, r7
 c0076ae:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 c0076b2:	4670      	mov	r0, lr
 c0076b4:	4671      	mov	r1, lr
 c0076b6:	4672      	mov	r2, lr
 c0076b8:	4673      	mov	r3, lr
 c0076ba:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c0076be:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c0076c2:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c0076c6:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c0076ca:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c0076ce:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c0076d2:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c0076d6:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c0076da:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c0076de:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c0076e2:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c0076e6:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c0076ea:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c0076ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c0076f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c0076f6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c0076fa:	f38e 8c00 	msr	CPSR_fs, lr
 c0076fe:	b410      	push	{r4}
 c007700:	eef1 ca10 	vmrs	ip, fpscr
 c007704:	f64f 7460 	movw	r4, #65376	; 0xff60
 c007708:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c00770c:	ea0c 0c04 	and.w	ip, ip, r4
 c007710:	eee1 ca10 	vmsr	fpscr, ip
 c007714:	bc10      	pop	{r4}
 c007716:	46f4      	mov	ip, lr
 c007718:	4774      	bxns	lr
	...

0c00771c <NonSecure_main>:
  *         This function is responsible for Non-secure initialization and switch
  *         to non-secure state
  * @retval None
  */
static void NonSecure_main(void)
{
 c00771c:	b590      	push	{r4, r7, lr}
 c00771e:	b083      	sub	sp, #12
 c007720:	af00      	add	r7, sp, #0
  funcptr_NS NonSecure_ResetHandler;

  SCB_NS->VTOR = VTOR_TABLE_NS_START_ADDR;
 c007722:	4b1d      	ldr	r3, [pc, #116]	; (c007798 <NonSecure_main+0x7c>)
 c007724:	4a1d      	ldr	r2, [pc, #116]	; (c00779c <NonSecure_main+0x80>)
 c007726:	609a      	str	r2, [r3, #8]

  /* Set non-secure main stack (MSP_NS) */
  __TZ_set_MSP_NS((*(uint32_t *)VTOR_TABLE_NS_START_ADDR));
 c007728:	4b1c      	ldr	r3, [pc, #112]	; (c00779c <NonSecure_main+0x80>)
 c00772a:	681b      	ldr	r3, [r3, #0]
 c00772c:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 c00772e:	683b      	ldr	r3, [r7, #0]
 c007730:	f383 8888 	msr	MSP_NS, r3
}
 c007734:	bf00      	nop

  /* Get non-secure reset handler */
  NonSecure_ResetHandler = (funcptr_NS)(*((uint32_t *)((VTOR_TABLE_NS_START_ADDR) + 4U)));
 c007736:	4b1a      	ldr	r3, [pc, #104]	; (c0077a0 <NonSecure_main+0x84>)
 c007738:	681b      	ldr	r3, [r3, #0]
 c00773a:	607b      	str	r3, [r7, #4]

  /* Start non-secure state software application */
  NonSecure_ResetHandler();
 c00773c:	687b      	ldr	r3, [r7, #4]
 c00773e:	461c      	mov	r4, r3
 c007740:	0864      	lsrs	r4, r4, #1
 c007742:	0064      	lsls	r4, r4, #1
 c007744:	4620      	mov	r0, r4
 c007746:	4621      	mov	r1, r4
 c007748:	4622      	mov	r2, r4
 c00774a:	4623      	mov	r3, r4
 c00774c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c007750:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c007754:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c007758:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c00775c:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c007760:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c007764:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c007768:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c00776c:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c007770:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c007774:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c007778:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c00777c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c007780:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c007784:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c007788:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c00778c:	f7f8 fd54 	bl	c000238 <__gnu_cmse_nonsecure_call>
}
 c007790:	bf00      	nop
 c007792:	370c      	adds	r7, #12
 c007794:	46bd      	mov	sp, r7
 c007796:	bd90      	pop	{r4, r7, pc}
 c007798:	e002ed00 	.word	0xe002ed00
 c00779c:	08040000 	.word	0x08040000
 c0077a0:	08040004 	.word	0x08040004

0c0077a4 <SystemIsolation_Config>:
  *         This function is responsible for Memory and Peripheral isolation
  *         for secure and non-secure application parts
  * @retval None
  */
static void SystemIsolation_Config(void)
{
 c0077a4:	b580      	push	{r7, lr}
 c0077a6:	b09e      	sub	sp, #120	; 0x78
 c0077a8:	af00      	add	r7, sp, #0
  uint32_t index;
  MPCBB_ConfigTypeDef MPCBB_desc;

  /* Enable GTZC peripheral clock */
  __HAL_RCC_GTZC_CLK_ENABLE();
 c0077aa:	4b51      	ldr	r3, [pc, #324]	; (c0078f0 <SystemIsolation_Config+0x14c>)
 c0077ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c0077ae:	4a50      	ldr	r2, [pc, #320]	; (c0078f0 <SystemIsolation_Config+0x14c>)
 c0077b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 c0077b4:	6493      	str	r3, [r2, #72]	; 0x48
 c0077b6:	4b4e      	ldr	r3, [pc, #312]	; (c0078f0 <SystemIsolation_Config+0x14c>)
 c0077b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c0077ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 c0077be:	607b      	str	r3, [r7, #4]
 c0077c0:	687b      	ldr	r3, [r7, #4]
  /* Internal SRAM is secured by default and configured by block          */
  /* of 256bytes.                                                         */
  /* Non-secure block-based memory starting from 0x20018000 means         */
  /* 0x18000 / (256 * 32) = 12 super-blocks for secure block-based memory */
  /* and remaining super-blocks set to 0 for all non-secure blocks        */
  MPCBB_desc.SecureRWIllegalMode = GTZC_MPCBB_SRWILADIS_ENABLE;
 c0077c2:	2300      	movs	r3, #0
 c0077c4:	60bb      	str	r3, [r7, #8]
  MPCBB_desc.InvertSecureState = GTZC_MPCBB_INVSECSTATE_NOT_INVERTED;
 c0077c6:	2300      	movs	r3, #0
 c0077c8:	60fb      	str	r3, [r7, #12]
  MPCBB_desc.AttributeConfig.MPCBB_LockConfig_array[0] = 0x00000000U;  /* Locked configuration */
 c0077ca:	2300      	movs	r3, #0
 c0077cc:	673b      	str	r3, [r7, #112]	; 0x70
  for(index=0; index<12; index++)
 c0077ce:	2300      	movs	r3, #0
 c0077d0:	677b      	str	r3, [r7, #116]	; 0x74
 c0077d2:	e00b      	b.n	c0077ec <SystemIsolation_Config+0x48>
  {
    /* Secure blocks */
    MPCBB_desc.AttributeConfig.MPCBB_SecConfig_array[index] = 0xFFFFFFFFU;
 c0077d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 c0077d6:	3302      	adds	r3, #2
 c0077d8:	009b      	lsls	r3, r3, #2
 c0077da:	3378      	adds	r3, #120	; 0x78
 c0077dc:	443b      	add	r3, r7
 c0077de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 c0077e2:	f843 2c70 	str.w	r2, [r3, #-112]
  for(index=0; index<12; index++)
 c0077e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 c0077e8:	3301      	adds	r3, #1
 c0077ea:	677b      	str	r3, [r7, #116]	; 0x74
 c0077ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 c0077ee:	2b0b      	cmp	r3, #11
 c0077f0:	d9f0      	bls.n	c0077d4 <SystemIsolation_Config+0x30>
  }
  for(index=12; index<24; index++)
 c0077f2:	230c      	movs	r3, #12
 c0077f4:	677b      	str	r3, [r7, #116]	; 0x74
 c0077f6:	e00a      	b.n	c00780e <SystemIsolation_Config+0x6a>
  {
    /* Non-secure blocks */
    MPCBB_desc.AttributeConfig.MPCBB_SecConfig_array[index] = 0x00000000U;
 c0077f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 c0077fa:	3302      	adds	r3, #2
 c0077fc:	009b      	lsls	r3, r3, #2
 c0077fe:	3378      	adds	r3, #120	; 0x78
 c007800:	443b      	add	r3, r7
 c007802:	2200      	movs	r2, #0
 c007804:	f843 2c70 	str.w	r2, [r3, #-112]
  for(index=12; index<24; index++)
 c007808:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 c00780a:	3301      	adds	r3, #1
 c00780c:	677b      	str	r3, [r7, #116]	; 0x74
 c00780e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 c007810:	2b17      	cmp	r3, #23
 c007812:	d9f1      	bls.n	c0077f8 <SystemIsolation_Config+0x54>
  }

  if (HAL_GTZC_MPCBB_ConfigMem(SRAM1_BASE, &MPCBB_desc) != HAL_OK)
 c007814:	f107 0308 	add.w	r3, r7, #8
 c007818:	4619      	mov	r1, r3
 c00781a:	f04f 5040 	mov.w	r0, #805306368	; 0x30000000
 c00781e:	f7f9 fc71 	bl	c001104 <HAL_GTZC_MPCBB_ConfigMem>
 c007822:	4603      	mov	r3, r0
 c007824:	2b00      	cmp	r3, #0
 c007826:	d000      	beq.n	c00782a <SystemIsolation_Config+0x86>
  {
    /* Initialization Error */
    while(1);
 c007828:	e7fe      	b.n	c007828 <SystemIsolation_Config+0x84>

  /* Internal SRAM2 is set as non-secure and configured by block          */
  /* Non-secure block-based memory starting from 0x20030000 means         */
  /* 0x10000 / (256 * 32) = 8 super-blocks set to 0 for non-secure        */
  /* block-based memory                                                   */
  for(index=0; index<8; index++)
 c00782a:	2300      	movs	r3, #0
 c00782c:	677b      	str	r3, [r7, #116]	; 0x74
 c00782e:	e00a      	b.n	c007846 <SystemIsolation_Config+0xa2>
  {
    /* Non-secure blocks */
    MPCBB_desc.AttributeConfig.MPCBB_SecConfig_array[index] = 0x00000000U;
 c007830:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 c007832:	3302      	adds	r3, #2
 c007834:	009b      	lsls	r3, r3, #2
 c007836:	3378      	adds	r3, #120	; 0x78
 c007838:	443b      	add	r3, r7
 c00783a:	2200      	movs	r2, #0
 c00783c:	f843 2c70 	str.w	r2, [r3, #-112]
  for(index=0; index<8; index++)
 c007840:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 c007842:	3301      	adds	r3, #1
 c007844:	677b      	str	r3, [r7, #116]	; 0x74
 c007846:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 c007848:	2b07      	cmp	r3, #7
 c00784a:	d9f1      	bls.n	c007830 <SystemIsolation_Config+0x8c>
  }

  if (HAL_GTZC_MPCBB_ConfigMem(SRAM2_BASE, &MPCBB_desc) != HAL_OK)
 c00784c:	f107 0308 	add.w	r3, r7, #8
 c007850:	4619      	mov	r1, r3
 c007852:	4828      	ldr	r0, [pc, #160]	; (c0078f4 <SystemIsolation_Config+0x150>)
 c007854:	f7f9 fc56 	bl	c001104 <HAL_GTZC_MPCBB_ConfigMem>
 c007858:	4603      	mov	r3, r0
 c00785a:	2b00      	cmp	r3, #0
 c00785c:	d000      	beq.n	c007860 <SystemIsolation_Config+0xbc>
  {
    /* Initialization Error */
    while(1);
 c00785e:	e7fe      	b.n	c00785e <SystemIsolation_Config+0xba>
  /* non-secure (GPIO (secured by default))                                   */
  /* -------------------------------------------------------------------------*/

  /* Enable illegal access interrupts in TZIC for any non-secure application */
  /* access to TZSC/TZIC/MPCBB/MPCWM registers */
  if (    (HAL_GTZC_TZIC_EnableIT(GTZC_PERIPH_MPCBB2_REG)   != HAL_OK)
 c007860:	4825      	ldr	r0, [pc, #148]	; (c0078f8 <SystemIsolation_Config+0x154>)
 c007862:	f7f9 fcd3 	bl	c00120c <HAL_GTZC_TZIC_EnableIT>
 c007866:	4603      	mov	r3, r0
 c007868:	2b00      	cmp	r3, #0
 c00786a:	d12a      	bne.n	c0078c2 <SystemIsolation_Config+0x11e>
       || (HAL_GTZC_TZIC_EnableIT(GTZC_PERIPH_SRAM2)        != HAL_OK)
 c00786c:	4823      	ldr	r0, [pc, #140]	; (c0078fc <SystemIsolation_Config+0x158>)
 c00786e:	f7f9 fccd 	bl	c00120c <HAL_GTZC_TZIC_EnableIT>
 c007872:	4603      	mov	r3, r0
 c007874:	2b00      	cmp	r3, #0
 c007876:	d124      	bne.n	c0078c2 <SystemIsolation_Config+0x11e>
       || (HAL_GTZC_TZIC_EnableIT(GTZC_PERIPH_MPCBB1_REG)   != HAL_OK)
 c007878:	4821      	ldr	r0, [pc, #132]	; (c007900 <SystemIsolation_Config+0x15c>)
 c00787a:	f7f9 fcc7 	bl	c00120c <HAL_GTZC_TZIC_EnableIT>
 c00787e:	4603      	mov	r3, r0
 c007880:	2b00      	cmp	r3, #0
 c007882:	d11e      	bne.n	c0078c2 <SystemIsolation_Config+0x11e>
       || (HAL_GTZC_TZIC_EnableIT(GTZC_PERIPH_SRAM1)        != HAL_OK)
 c007884:	481f      	ldr	r0, [pc, #124]	; (c007904 <SystemIsolation_Config+0x160>)
 c007886:	f7f9 fcc1 	bl	c00120c <HAL_GTZC_TZIC_EnableIT>
 c00788a:	4603      	mov	r3, r0
 c00788c:	2b00      	cmp	r3, #0
 c00788e:	d118      	bne.n	c0078c2 <SystemIsolation_Config+0x11e>
       || (HAL_GTZC_TZIC_EnableIT(GTZC_PERIPH_OCTOSPI1_MEM) != HAL_OK)
 c007890:	481d      	ldr	r0, [pc, #116]	; (c007908 <SystemIsolation_Config+0x164>)
 c007892:	f7f9 fcbb 	bl	c00120c <HAL_GTZC_TZIC_EnableIT>
 c007896:	4603      	mov	r3, r0
 c007898:	2b00      	cmp	r3, #0
 c00789a:	d112      	bne.n	c0078c2 <SystemIsolation_Config+0x11e>
       || (HAL_GTZC_TZIC_EnableIT(GTZC_PERIPH_FMC_MEM)      != HAL_OK)
 c00789c:	481b      	ldr	r0, [pc, #108]	; (c00790c <SystemIsolation_Config+0x168>)
 c00789e:	f7f9 fcb5 	bl	c00120c <HAL_GTZC_TZIC_EnableIT>
 c0078a2:	4603      	mov	r3, r0
 c0078a4:	2b00      	cmp	r3, #0
 c0078a6:	d10c      	bne.n	c0078c2 <SystemIsolation_Config+0x11e>
       || (HAL_GTZC_TZIC_EnableIT(GTZC_PERIPH_TZIC)         != HAL_OK)
 c0078a8:	4819      	ldr	r0, [pc, #100]	; (c007910 <SystemIsolation_Config+0x16c>)
 c0078aa:	f7f9 fcaf 	bl	c00120c <HAL_GTZC_TZIC_EnableIT>
 c0078ae:	4603      	mov	r3, r0
 c0078b0:	2b00      	cmp	r3, #0
 c0078b2:	d106      	bne.n	c0078c2 <SystemIsolation_Config+0x11e>
       || (HAL_GTZC_TZIC_EnableIT(GTZC_PERIPH_TZSC)         != HAL_OK))
 c0078b4:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 c0078b8:	f7f9 fca8 	bl	c00120c <HAL_GTZC_TZIC_EnableIT>
 c0078bc:	4603      	mov	r3, r0
 c0078be:	2b00      	cmp	r3, #0
 c0078c0:	d000      	beq.n	c0078c4 <SystemIsolation_Config+0x120>
  {
    /* Initialization Error */
    while(1);
 c0078c2:	e7fe      	b.n	c0078c2 <SystemIsolation_Config+0x11e>
  }

  /* Clear all illegal access pending interrupts in TZIC */
  if (HAL_GTZC_TZIC_ClearFlag(GTZC_PERIPH_ALL) != HAL_OK)
 c0078c4:	2020      	movs	r0, #32
 c0078c6:	f7f9 fceb 	bl	c0012a0 <HAL_GTZC_TZIC_ClearFlag>
 c0078ca:	4603      	mov	r3, r0
 c0078cc:	2b00      	cmp	r3, #0
 c0078ce:	d000      	beq.n	c0078d2 <SystemIsolation_Config+0x12e>
  {
    /* Initialization Error */
    while(1);
 c0078d0:	e7fe      	b.n	c0078d0 <SystemIsolation_Config+0x12c>
  }

  /* Enable GTZC TZIC secure interrupt */
  HAL_NVIC_SetPriority(GTZC_IRQn, 0, 0); /* Highest priority level */
 c0078d2:	2200      	movs	r2, #0
 c0078d4:	2100      	movs	r1, #0
 c0078d6:	2008      	movs	r0, #8
 c0078d8:	f7f9 fa01 	bl	c000cde <HAL_NVIC_SetPriority>
  HAL_NVIC_ClearPendingIRQ(GTZC_IRQn);
 c0078dc:	2008      	movs	r0, #8
 c0078de:	f7f9 fa32 	bl	c000d46 <HAL_NVIC_ClearPendingIRQ>
  HAL_NVIC_EnableIRQ(GTZC_IRQn);
 c0078e2:	2008      	movs	r0, #8
 c0078e4:	f7f9 fa15 	bl	c000d12 <HAL_NVIC_EnableIRQ>
}
 c0078e8:	bf00      	nop
 c0078ea:	3778      	adds	r7, #120	; 0x78
 c0078ec:	46bd      	mov	sp, r7
 c0078ee:	bd80      	pop	{r7, pc}
 c0078f0:	50021000 	.word	0x50021000
 c0078f4:	30030000 	.word	0x30030000
 c0078f8:	20000007 	.word	0x20000007
 c0078fc:	20000006 	.word	0x20000006
 c007900:	20000005 	.word	0x20000005
 c007904:	20000004 	.word	0x20000004
 c007908:	20000003 	.word	0x20000003
 c00790c:	20000002 	.word	0x20000002
 c007910:	20000001 	.word	0x20000001

0c007914 <SystemClock_Config>:
  *            PLL_P                          = 7
  *            Flash Latency(WS)              = 5
  * @retval None
  */
static void SystemClock_Config(void)
{
 c007914:	b580      	push	{r7, lr}
 c007916:	b098      	sub	sp, #96	; 0x60
 c007918:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 c00791a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 c00791e:	2200      	movs	r2, #0
 c007920:	601a      	str	r2, [r3, #0]
 c007922:	605a      	str	r2, [r3, #4]
 c007924:	609a      	str	r2, [r3, #8]
 c007926:	60da      	str	r2, [r3, #12]
 c007928:	611a      	str	r2, [r3, #16]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 c00792a:	1d3b      	adds	r3, r7, #4
 c00792c:	2248      	movs	r2, #72	; 0x48
 c00792e:	2100      	movs	r1, #0
 c007930:	4618      	mov	r0, r3
 c007932:	f003 ffaa 	bl	c00b88a <memset>

  /* Enable voltage range 0 for frequency above 80 Mhz */
  __HAL_RCC_PWR_CLK_ENABLE();
 c007936:	4b29      	ldr	r3, [pc, #164]	; (c0079dc <SystemClock_Config+0xc8>)
 c007938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c00793a:	4a28      	ldr	r2, [pc, #160]	; (c0079dc <SystemClock_Config+0xc8>)
 c00793c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c007940:	6593      	str	r3, [r2, #88]	; 0x58
 c007942:	4b26      	ldr	r3, [pc, #152]	; (c0079dc <SystemClock_Config+0xc8>)
 c007944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c007946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c00794a:	603b      	str	r3, [r7, #0]
 c00794c:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0);
 c00794e:	2000      	movs	r0, #0
 c007950:	f7f9 fd9c 	bl	c00148c <HAL_PWREx_ControlVoltageScaling>
  __HAL_RCC_PWR_CLK_DISABLE();
 c007954:	4b21      	ldr	r3, [pc, #132]	; (c0079dc <SystemClock_Config+0xc8>)
 c007956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c007958:	4a20      	ldr	r2, [pc, #128]	; (c0079dc <SystemClock_Config+0xc8>)
 c00795a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c00795e:	6593      	str	r3, [r2, #88]	; 0x58

  /* MSI Oscillator enabled at reset (4Mhz), activate PLL with MSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_NONE;
 c007960:	2300      	movs	r3, #0
 c007962:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 c007964:	2302      	movs	r3, #2
 c007966:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 c007968:	2301      	movs	r3, #1
 c00796a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 1;
 c00796c:	2301      	movs	r3, #1
 c00796e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 55;
 c007970:	2337      	movs	r3, #55	; 0x37
 c007972:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 c007974:	2302      	movs	r3, #2
 c007976:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 c007978:	2302      	movs	r3, #2
 c00797a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 c00797c:	2307      	movs	r3, #7
 c00797e:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 c007980:	1d3b      	adds	r3, r7, #4
 c007982:	4618      	mov	r0, r3
 c007984:	f7f9 fe12 	bl	c0015ac <HAL_RCC_OscConfig>
 c007988:	4603      	mov	r3, r0
 c00798a:	2b00      	cmp	r3, #0
 c00798c:	d000      	beq.n	c007990 <SystemClock_Config+0x7c>
  {
    /* Initialization Error */
    while(1);
 c00798e:	e7fe      	b.n	c00798e <SystemClock_Config+0x7a>
  }

  /* Select PLL as system clock source with transition state */
  /* with AHB prescaler divider 2 as first step */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 c007990:	230f      	movs	r3, #15
 c007992:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 c007994:	2303      	movs	r3, #3
 c007996:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 c007998:	2380      	movs	r3, #128	; 0x80
 c00799a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 c00799c:	2300      	movs	r3, #0
 c00799e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 c0079a0:	2300      	movs	r3, #0
 c0079a2:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 c0079a4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 c0079a8:	2103      	movs	r1, #3
 c0079aa:	4618      	mov	r0, r3
 c0079ac:	f7fa fad4 	bl	c001f58 <HAL_RCC_ClockConfig>
 c0079b0:	4603      	mov	r3, r0
 c0079b2:	2b00      	cmp	r3, #0
 c0079b4:	d000      	beq.n	c0079b8 <SystemClock_Config+0xa4>
  {
    /* Initialization Error */
    while(1);
 c0079b6:	e7fe      	b.n	c0079b6 <SystemClock_Config+0xa2>
  }

  /* AHB prescaler divider at 1 as second step */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK;
 c0079b8:	2302      	movs	r3, #2
 c0079ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 c0079bc:	2300      	movs	r3, #0
 c0079be:	657b      	str	r3, [r7, #84]	; 0x54
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 c0079c0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 c0079c4:	2105      	movs	r1, #5
 c0079c6:	4618      	mov	r0, r3
 c0079c8:	f7fa fac6 	bl	c001f58 <HAL_RCC_ClockConfig>
 c0079cc:	4603      	mov	r3, r0
 c0079ce:	2b00      	cmp	r3, #0
 c0079d0:	d000      	beq.n	c0079d4 <SystemClock_Config+0xc0>
  {
    /* Initialization Error */
    while(1);
 c0079d2:	e7fe      	b.n	c0079d2 <SystemClock_Config+0xbe>
  }
}
 c0079d4:	bf00      	nop
 c0079d6:	3760      	adds	r7, #96	; 0x60
 c0079d8:	46bd      	mov	sp, r7
 c0079da:	bd80      	pop	{r7, pc}
 c0079dc:	50021000 	.word	0x50021000

0c0079e0 <__acle_se_SECURE_RegisterCallback>:
  * @param  CallbackId  callback identifier
  * @param  func        pointer to non-secure function
  * @retval None
  */
CMSE_NS_ENTRY void SECURE_RegisterCallback(SECURE_CallbackIDTypeDef CallbackId, void *func)
{
 c0079e0:	b480      	push	{r7}
 c0079e2:	b083      	sub	sp, #12
 c0079e4:	af00      	add	r7, sp, #0
 c0079e6:	4603      	mov	r3, r0
 c0079e8:	6039      	str	r1, [r7, #0]
 c0079ea:	71fb      	strb	r3, [r7, #7]
  if(func != NULL)
 c0079ec:	683b      	ldr	r3, [r7, #0]
 c0079ee:	2b00      	cmp	r3, #0
 c0079f0:	d015      	beq.n	c007a1e <__acle_se_SECURE_RegisterCallback+0x3e>
  {
    switch(CallbackId)
 c0079f2:	79fb      	ldrb	r3, [r7, #7]
 c0079f4:	2b02      	cmp	r3, #2
 c0079f6:	d00e      	beq.n	c007a16 <__acle_se_SECURE_RegisterCallback+0x36>
 c0079f8:	2b02      	cmp	r3, #2
 c0079fa:	dc12      	bgt.n	c007a22 <__acle_se_SECURE_RegisterCallback+0x42>
 c0079fc:	2b00      	cmp	r3, #0
 c0079fe:	d002      	beq.n	c007a06 <__acle_se_SECURE_RegisterCallback+0x26>
 c007a00:	2b01      	cmp	r3, #1
 c007a02:	d004      	beq.n	c007a0e <__acle_se_SECURE_RegisterCallback+0x2e>
      case TASK1_ID:             /* GTZC IT */
    	pTask1Callback = func;
        break;
      default:
        /* unknown */
        break;
 c007a04:	e00d      	b.n	c007a22 <__acle_se_SECURE_RegisterCallback+0x42>
        pSecureFaultCallback = func;
 c007a06:	4a24      	ldr	r2, [pc, #144]	; (c007a98 <__acle_se_SECURE_RegisterCallback+0xb8>)
 c007a08:	683b      	ldr	r3, [r7, #0]
 c007a0a:	6013      	str	r3, [r2, #0]
        break;
 c007a0c:	e00a      	b.n	c007a24 <__acle_se_SECURE_RegisterCallback+0x44>
        pSecureErrorCallback = func;
 c007a0e:	4a23      	ldr	r2, [pc, #140]	; (c007a9c <__acle_se_SECURE_RegisterCallback+0xbc>)
 c007a10:	683b      	ldr	r3, [r7, #0]
 c007a12:	6013      	str	r3, [r2, #0]
        break;
 c007a14:	e006      	b.n	c007a24 <__acle_se_SECURE_RegisterCallback+0x44>
    	pTask1Callback = func;
 c007a16:	4a22      	ldr	r2, [pc, #136]	; (c007aa0 <__acle_se_SECURE_RegisterCallback+0xc0>)
 c007a18:	683b      	ldr	r3, [r7, #0]
 c007a1a:	6013      	str	r3, [r2, #0]
        break;
 c007a1c:	e002      	b.n	c007a24 <__acle_se_SECURE_RegisterCallback+0x44>
    }
  }
 c007a1e:	bf00      	nop
 c007a20:	e000      	b.n	c007a24 <__acle_se_SECURE_RegisterCallback+0x44>
        break;
 c007a22:	bf00      	nop
}
 c007a24:	bf00      	nop
 c007a26:	370c      	adds	r7, #12
 c007a28:	46bd      	mov	sp, r7
 c007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c007a2e:	4670      	mov	r0, lr
 c007a30:	4671      	mov	r1, lr
 c007a32:	4672      	mov	r2, lr
 c007a34:	4673      	mov	r3, lr
 c007a36:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c007a3a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c007a3e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c007a42:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c007a46:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c007a4a:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c007a4e:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c007a52:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c007a56:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c007a5a:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c007a5e:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c007a62:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c007a66:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c007a6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c007a6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c007a72:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c007a76:	f38e 8c00 	msr	CPSR_fs, lr
 c007a7a:	b410      	push	{r4}
 c007a7c:	eef1 ca10 	vmrs	ip, fpscr
 c007a80:	f64f 7460 	movw	r4, #65376	; 0xff60
 c007a84:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c007a88:	ea0c 0c04 	and.w	ip, ip, r4
 c007a8c:	eee1 ca10 	vmsr	fpscr, ip
 c007a90:	bc10      	pop	{r4}
 c007a92:	46f4      	mov	ip, lr
 c007a94:	4774      	bxns	lr
 c007a96:	bf00      	nop
 c007a98:	300007d4 	.word	0x300007d4
 c007a9c:	300007d8 	.word	0x300007d8
 c007aa0:	300007dc 	.word	0x300007dc

0c007aa4 <__acle_se_SECURE_SD_Init>:
/**
  * @brief  Secure SD Init
  * @retval None
  */
CMSE_NS_ENTRY int32_t SECURE_SD_Init(uint32_t Instance)
{
 c007aa4:	b580      	push	{r7, lr}
 c007aa6:	b082      	sub	sp, #8
 c007aa8:	af00      	add	r7, sp, #0
 c007aaa:	6078      	str	r0, [r7, #4]
  return BSP_SD_Init(Instance);
 c007aac:	6878      	ldr	r0, [r7, #4]
 c007aae:	f7f8 fbf1 	bl	c000294 <BSP_SD_Init>
 c007ab2:	4603      	mov	r3, r0
}
 c007ab4:	4618      	mov	r0, r3
 c007ab6:	3708      	adds	r7, #8
 c007ab8:	46bd      	mov	sp, r7
 c007aba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c007abe:	4671      	mov	r1, lr
 c007ac0:	4672      	mov	r2, lr
 c007ac2:	4673      	mov	r3, lr
 c007ac4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c007ac8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c007acc:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c007ad0:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c007ad4:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c007ad8:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c007adc:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c007ae0:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c007ae4:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c007ae8:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c007aec:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c007af0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c007af4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c007af8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c007afc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c007b00:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c007b04:	f38e 8c00 	msr	CPSR_fs, lr
 c007b08:	b410      	push	{r4}
 c007b0a:	eef1 ca10 	vmrs	ip, fpscr
 c007b0e:	f64f 7460 	movw	r4, #65376	; 0xff60
 c007b12:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c007b16:	ea0c 0c04 	and.w	ip, ip, r4
 c007b1a:	eee1 ca10 	vmsr	fpscr, ip
 c007b1e:	bc10      	pop	{r4}
 c007b20:	46f4      	mov	ip, lr
 c007b22:	4774      	bxns	lr

0c007b24 <__acle_se_SECURE_SD_GetCardState>:
/**
  * @brief  Secure Get Card State
  * @retval None
  */
CMSE_NS_ENTRY int32_t SECURE_SD_GetCardState(uint32_t Instance)
{
 c007b24:	b580      	push	{r7, lr}
 c007b26:	b082      	sub	sp, #8
 c007b28:	af00      	add	r7, sp, #0
 c007b2a:	6078      	str	r0, [r7, #4]
  return BSP_SD_GetCardState(Instance);
 c007b2c:	6878      	ldr	r0, [r7, #4]
 c007b2e:	f7f8 fcd1 	bl	c0004d4 <BSP_SD_GetCardState>
 c007b32:	4603      	mov	r3, r0
}
 c007b34:	4618      	mov	r0, r3
 c007b36:	3708      	adds	r7, #8
 c007b38:	46bd      	mov	sp, r7
 c007b3a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c007b3e:	4671      	mov	r1, lr
 c007b40:	4672      	mov	r2, lr
 c007b42:	4673      	mov	r3, lr
 c007b44:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c007b48:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c007b4c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c007b50:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c007b54:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c007b58:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c007b5c:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c007b60:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c007b64:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c007b68:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c007b6c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c007b70:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c007b74:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c007b78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c007b7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c007b80:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c007b84:	f38e 8c00 	msr	CPSR_fs, lr
 c007b88:	b410      	push	{r4}
 c007b8a:	eef1 ca10 	vmrs	ip, fpscr
 c007b8e:	f64f 7460 	movw	r4, #65376	; 0xff60
 c007b92:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c007b96:	ea0c 0c04 	and.w	ip, ip, r4
 c007b9a:	eee1 ca10 	vmsr	fpscr, ip
 c007b9e:	bc10      	pop	{r4}
 c007ba0:	46f4      	mov	ip, lr
 c007ba2:	4774      	bxns	lr

0c007ba4 <__acle_se_SECURE_SD_GetCardInfo>:
/**
  * @brief  Secure Get Card Info
  * @retval None
  */
CMSE_NS_ENTRY int32_t SECURE_SD_GetCardInfo(uint32_t Instance, BSP_SD_CardInfo *CardInfo)
{
 c007ba4:	b580      	push	{r7, lr}
 c007ba6:	b082      	sub	sp, #8
 c007ba8:	af00      	add	r7, sp, #0
 c007baa:	6078      	str	r0, [r7, #4]
 c007bac:	6039      	str	r1, [r7, #0]
 return BSP_SD_GetCardInfo(Instance, CardInfo);
 c007bae:	6839      	ldr	r1, [r7, #0]
 c007bb0:	6878      	ldr	r0, [r7, #4]
 c007bb2:	f7f8 fcb3 	bl	c00051c <BSP_SD_GetCardInfo>
 c007bb6:	4603      	mov	r3, r0
}
 c007bb8:	4618      	mov	r0, r3
 c007bba:	3708      	adds	r7, #8
 c007bbc:	46bd      	mov	sp, r7
 c007bbe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c007bc2:	4671      	mov	r1, lr
 c007bc4:	4672      	mov	r2, lr
 c007bc6:	4673      	mov	r3, lr
 c007bc8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c007bcc:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c007bd0:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c007bd4:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c007bd8:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c007bdc:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c007be0:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c007be4:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c007be8:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c007bec:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c007bf0:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c007bf4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c007bf8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c007bfc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c007c00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c007c04:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c007c08:	f38e 8c00 	msr	CPSR_fs, lr
 c007c0c:	b410      	push	{r4}
 c007c0e:	eef1 ca10 	vmrs	ip, fpscr
 c007c12:	f64f 7460 	movw	r4, #65376	; 0xff60
 c007c16:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c007c1a:	ea0c 0c04 	and.w	ip, ip, r4
 c007c1e:	eee1 ca10 	vmsr	fpscr, ip
 c007c22:	bc10      	pop	{r4}
 c007c24:	46f4      	mov	ip, lr
 c007c26:	4774      	bxns	lr

0c007c28 <__acle_se_SECURE_SD_ReadBlocks>:
/**
  * @brief  Secure SD Read Blocks
  * @retval None
  */
CMSE_NS_ENTRY int32_t SECURE_SD_ReadBlocks(uint32_t Instance, uint32_t *pData, uint32_t BlockIdx, uint32_t BlocksNbr)
{
 c007c28:	b580      	push	{r7, lr}
 c007c2a:	b084      	sub	sp, #16
 c007c2c:	af00      	add	r7, sp, #0
 c007c2e:	60f8      	str	r0, [r7, #12]
 c007c30:	60b9      	str	r1, [r7, #8]
 c007c32:	607a      	str	r2, [r7, #4]
 c007c34:	603b      	str	r3, [r7, #0]
 return BSP_SD_ReadBlocks( Instance, pData, BlockIdx, BlocksNbr);
 c007c36:	683b      	ldr	r3, [r7, #0]
 c007c38:	687a      	ldr	r2, [r7, #4]
 c007c3a:	68b9      	ldr	r1, [r7, #8]
 c007c3c:	68f8      	ldr	r0, [r7, #12]
 c007c3e:	f7f8 fbe5 	bl	c00040c <BSP_SD_ReadBlocks>
 c007c42:	4603      	mov	r3, r0
}
 c007c44:	4618      	mov	r0, r3
 c007c46:	3710      	adds	r7, #16
 c007c48:	46bd      	mov	sp, r7
 c007c4a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c007c4e:	4671      	mov	r1, lr
 c007c50:	4672      	mov	r2, lr
 c007c52:	4673      	mov	r3, lr
 c007c54:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c007c58:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c007c5c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c007c60:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c007c64:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c007c68:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c007c6c:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c007c70:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c007c74:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c007c78:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c007c7c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c007c80:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c007c84:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c007c88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c007c8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c007c90:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c007c94:	f38e 8c00 	msr	CPSR_fs, lr
 c007c98:	b410      	push	{r4}
 c007c9a:	eef1 ca10 	vmrs	ip, fpscr
 c007c9e:	f64f 7460 	movw	r4, #65376	; 0xff60
 c007ca2:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c007ca6:	ea0c 0c04 	and.w	ip, ip, r4
 c007caa:	eee1 ca10 	vmsr	fpscr, ip
 c007cae:	bc10      	pop	{r4}
 c007cb0:	46f4      	mov	ip, lr
 c007cb2:	4774      	bxns	lr

0c007cb4 <__acle_se_SECURE_SD_WriteBlocks>:
/**
  * @brief  Secure SD Write Blocks
  * @retval None
  */
CMSE_NS_ENTRY int32_t SECURE_SD_WriteBlocks(uint32_t Instance, uint32_t *pData, uint32_t BlockIdx, uint32_t BlocksNbr)
{
 c007cb4:	b580      	push	{r7, lr}
 c007cb6:	b084      	sub	sp, #16
 c007cb8:	af00      	add	r7, sp, #0
 c007cba:	60f8      	str	r0, [r7, #12]
 c007cbc:	60b9      	str	r1, [r7, #8]
 c007cbe:	607a      	str	r2, [r7, #4]
 c007cc0:	603b      	str	r3, [r7, #0]
  return BSP_SD_WriteBlocks( Instance, pData,BlockIdx,BlocksNbr);
 c007cc2:	683b      	ldr	r3, [r7, #0]
 c007cc4:	687a      	ldr	r2, [r7, #4]
 c007cc6:	68b9      	ldr	r1, [r7, #8]
 c007cc8:	68f8      	ldr	r0, [r7, #12]
 c007cca:	f7f8 fbd1 	bl	c000470 <BSP_SD_WriteBlocks>
 c007cce:	4603      	mov	r3, r0
}
 c007cd0:	4618      	mov	r0, r3
 c007cd2:	3710      	adds	r7, #16
 c007cd4:	46bd      	mov	sp, r7
 c007cd6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c007cda:	4671      	mov	r1, lr
 c007cdc:	4672      	mov	r2, lr
 c007cde:	4673      	mov	r3, lr
 c007ce0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c007ce4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c007ce8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c007cec:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c007cf0:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c007cf4:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c007cf8:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c007cfc:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c007d00:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c007d04:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c007d08:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c007d0c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c007d10:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c007d14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c007d18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c007d1c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c007d20:	f38e 8c00 	msr	CPSR_fs, lr
 c007d24:	b410      	push	{r4}
 c007d26:	eef1 ca10 	vmrs	ip, fpscr
 c007d2a:	f64f 7460 	movw	r4, #65376	; 0xff60
 c007d2e:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c007d32:	ea0c 0c04 	and.w	ip, ip, r4
 c007d36:	eee1 ca10 	vmsr	fpscr, ip
 c007d3a:	bc10      	pop	{r4}
 c007d3c:	46f4      	mov	ip, lr
 c007d3e:	4774      	bxns	lr

0c007d40 <__acle_se_SECURE_SD_IsDetected>:
/**
  * @brief  Secure SD Detect ITConfig
  * @retval None
  */
CMSE_NS_ENTRY int32_t SECURE_SD_IsDetected(uint32_t Instance)
{
 c007d40:	b580      	push	{r7, lr}
 c007d42:	b082      	sub	sp, #8
 c007d44:	af00      	add	r7, sp, #0
 c007d46:	6078      	str	r0, [r7, #4]
  return BSP_SD_IsDetected(Instance);
 c007d48:	6878      	ldr	r0, [r7, #4]
 c007d4a:	f7f8 fb35 	bl	c0003b8 <BSP_SD_IsDetected>
 c007d4e:	4603      	mov	r3, r0
}
 c007d50:	4618      	mov	r0, r3
 c007d52:	3708      	adds	r7, #8
 c007d54:	46bd      	mov	sp, r7
 c007d56:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c007d5a:	4671      	mov	r1, lr
 c007d5c:	4672      	mov	r2, lr
 c007d5e:	4673      	mov	r3, lr
 c007d60:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c007d64:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c007d68:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c007d6c:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c007d70:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c007d74:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c007d78:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c007d7c:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c007d80:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c007d84:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c007d88:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c007d8c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c007d90:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c007d94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c007d98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c007d9c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c007da0:	f38e 8c00 	msr	CPSR_fs, lr
 c007da4:	b410      	push	{r4}
 c007da6:	eef1 ca10 	vmrs	ip, fpscr
 c007daa:	f64f 7460 	movw	r4, #65376	; 0xff60
 c007dae:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c007db2:	ea0c 0c04 	and.w	ip, ip, r4
 c007db6:	eee1 ca10 	vmsr	fpscr, ip
 c007dba:	bc10      	pop	{r4}
 c007dbc:	46f4      	mov	ip, lr
 c007dbe:	4774      	bxns	lr

0c007dc0 <HAL_MspInit>:
/**
  * @brief  Initialize the Global MSP.
  * @retval None
  */
void HAL_MspInit(void)
{
 c007dc0:	b580      	push	{r7, lr}
 c007dc2:	b082      	sub	sp, #8
 c007dc4:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 c007dc6:	4b0f      	ldr	r3, [pc, #60]	; (c007e04 <HAL_MspInit+0x44>)
 c007dc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c007dca:	4a0e      	ldr	r2, [pc, #56]	; (c007e04 <HAL_MspInit+0x44>)
 c007dcc:	f043 0301 	orr.w	r3, r3, #1
 c007dd0:	6613      	str	r3, [r2, #96]	; 0x60
 c007dd2:	4b0c      	ldr	r3, [pc, #48]	; (c007e04 <HAL_MspInit+0x44>)
 c007dd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c007dd6:	f003 0301 	and.w	r3, r3, #1
 c007dda:	607b      	str	r3, [r7, #4]
 c007ddc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 c007dde:	4b09      	ldr	r3, [pc, #36]	; (c007e04 <HAL_MspInit+0x44>)
 c007de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c007de2:	4a08      	ldr	r2, [pc, #32]	; (c007e04 <HAL_MspInit+0x44>)
 c007de4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c007de8:	6593      	str	r3, [r2, #88]	; 0x58
 c007dea:	4b06      	ldr	r3, [pc, #24]	; (c007e04 <HAL_MspInit+0x44>)
 c007dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c007dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c007df2:	603b      	str	r3, [r7, #0]
 c007df4:	683b      	ldr	r3, [r7, #0]

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 c007df6:	f7f9 fba5 	bl	c001544 <HAL_PWREx_DisableUCPDDeadBattery>
}
 c007dfa:	bf00      	nop
 c007dfc:	3708      	adds	r7, #8
 c007dfe:	46bd      	mov	sp, r7
 c007e00:	bd80      	pop	{r7, pc}
 c007e02:	bf00      	nop
 c007e04:	50021000 	.word	0x50021000

0c007e08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 c007e08:	b580      	push	{r7, lr}
 c007e0a:	b084      	sub	sp, #16
 c007e0c:	af00      	add	r7, sp, #0
 c007e0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 c007e10:	687b      	ldr	r3, [r7, #4]
 c007e12:	681b      	ldr	r3, [r3, #0]
 c007e14:	4a0d      	ldr	r2, [pc, #52]	; (c007e4c <HAL_TIM_Base_MspInit+0x44>)
 c007e16:	4293      	cmp	r3, r2
 c007e18:	d113      	bne.n	c007e42 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 c007e1a:	4b0d      	ldr	r3, [pc, #52]	; (c007e50 <HAL_TIM_Base_MspInit+0x48>)
 c007e1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c007e1e:	4a0c      	ldr	r2, [pc, #48]	; (c007e50 <HAL_TIM_Base_MspInit+0x48>)
 c007e20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 c007e24:	6613      	str	r3, [r2, #96]	; 0x60
 c007e26:	4b0a      	ldr	r3, [pc, #40]	; (c007e50 <HAL_TIM_Base_MspInit+0x48>)
 c007e28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c007e2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 c007e2e:	60fb      	str	r3, [r7, #12]
 c007e30:	68fb      	ldr	r3, [r7, #12]
    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 c007e32:	2200      	movs	r2, #0
 c007e34:	2100      	movs	r1, #0
 c007e36:	2047      	movs	r0, #71	; 0x47
 c007e38:	f7f8 ff51 	bl	c000cde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 c007e3c:	2047      	movs	r0, #71	; 0x47
 c007e3e:	f7f8 ff68 	bl	c000d12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 c007e42:	bf00      	nop
 c007e44:	3710      	adds	r7, #16
 c007e46:	46bd      	mov	sp, r7
 c007e48:	bd80      	pop	{r7, pc}
 c007e4a:	bf00      	nop
 c007e4c:	50014800 	.word	0x50014800
 c007e50:	50021000 	.word	0x50021000

0c007e54 <NMI_Handler>:
/**
  * @brief  This function handles NMI exception.
  * @retval None
  */
void NMI_Handler(void)
{
 c007e54:	b480      	push	{r7}
 c007e56:	af00      	add	r7, sp, #0
}
 c007e58:	bf00      	nop
 c007e5a:	46bd      	mov	sp, r7
 c007e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c007e60:	4770      	bx	lr

0c007e62 <HardFault_Handler>:
/**
  * @brief  This function handles Hard Fault exception.
  * @retval None
  */
void HardFault_Handler(void)
{
 c007e62:	b480      	push	{r7}
 c007e64:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 c007e66:	e7fe      	b.n	c007e66 <HardFault_Handler+0x4>

0c007e68 <MemManage_Handler>:
/**
  * @brief  This function handles Memory Manage exception.
  * @retval None
  */
void MemManage_Handler(void)
{
 c007e68:	b480      	push	{r7}
 c007e6a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 c007e6c:	e7fe      	b.n	c007e6c <MemManage_Handler+0x4>

0c007e6e <BusFault_Handler>:
/**
  * @brief  This function handles Bus Fault exception.
  * @retval None
  */
void BusFault_Handler(void)
{
 c007e6e:	b480      	push	{r7}
 c007e70:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 c007e72:	e7fe      	b.n	c007e72 <BusFault_Handler+0x4>

0c007e74 <UsageFault_Handler>:
/**
  * @brief  This function handles Usage Fault exception.
  * @retval None
  */
void UsageFault_Handler(void)
{
 c007e74:	b480      	push	{r7}
 c007e76:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 c007e78:	e7fe      	b.n	c007e78 <UsageFault_Handler+0x4>
	...

0c007e7c <SecureFault_Handler>:
/**
  * @brief  This function handles Secure Fault exception.
  * @retval None
  */
void SecureFault_Handler(void)
{
 c007e7c:	b590      	push	{r4, r7, lr}
 c007e7e:	b083      	sub	sp, #12
 c007e80:	af00      	add	r7, sp, #0
  funcptr_NS callback_NS; /* non-secure callback function pointer */

  if(pSecureFaultCallback != (funcptr_NS)NULL)
 c007e82:	4b1c      	ldr	r3, [pc, #112]	; (c007ef4 <SecureFault_Handler+0x78>)
 c007e84:	681b      	ldr	r3, [r3, #0]
 c007e86:	2b00      	cmp	r3, #0
 c007e88:	d02f      	beq.n	c007eea <SecureFault_Handler+0x6e>
  {
   /* return function pointer with cleared LSB */
   callback_NS = (funcptr_NS)cmse_nsfptr_create(pSecureFaultCallback);
 c007e8a:	4b1a      	ldr	r3, [pc, #104]	; (c007ef4 <SecureFault_Handler+0x78>)
 c007e8c:	681b      	ldr	r3, [r3, #0]
 c007e8e:	f023 0301 	bic.w	r3, r3, #1
 c007e92:	607b      	str	r3, [r7, #4]

   callback_NS();
 c007e94:	687b      	ldr	r3, [r7, #4]
 c007e96:	461c      	mov	r4, r3
 c007e98:	0864      	lsrs	r4, r4, #1
 c007e9a:	0064      	lsls	r4, r4, #1
 c007e9c:	4620      	mov	r0, r4
 c007e9e:	4621      	mov	r1, r4
 c007ea0:	4622      	mov	r2, r4
 c007ea2:	4623      	mov	r3, r4
 c007ea4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c007ea8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c007eac:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c007eb0:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c007eb4:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c007eb8:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c007ebc:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c007ec0:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c007ec4:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c007ec8:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c007ecc:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c007ed0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c007ed4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c007ed8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c007edc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c007ee0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c007ee4:	f7f8 f9a8 	bl	c000238 <__gnu_cmse_nonsecure_call>
  }
  else
  {
    while(1);  /* Something went wrong */
  }
}
 c007ee8:	e000      	b.n	c007eec <SecureFault_Handler+0x70>
    while(1);  /* Something went wrong */
 c007eea:	e7fe      	b.n	c007eea <SecureFault_Handler+0x6e>
}
 c007eec:	370c      	adds	r7, #12
 c007eee:	46bd      	mov	sp, r7
 c007ef0:	bd90      	pop	{r4, r7, pc}
 c007ef2:	bf00      	nop
 c007ef4:	300007d4 	.word	0x300007d4

0c007ef8 <SVC_Handler>:
/**
  * @brief  This function handles SVCall exception.
  * @retval None
  */
void SVC_Handler(void)
{
 c007ef8:	b480      	push	{r7}
 c007efa:	af00      	add	r7, sp, #0
}
 c007efc:	bf00      	nop
 c007efe:	46bd      	mov	sp, r7
 c007f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 c007f04:	4770      	bx	lr

0c007f06 <DebugMon_Handler>:
/**
  * @brief  This function handles Debug Monitor exception.
  * @retval None
  */
void DebugMon_Handler(void)
{
 c007f06:	b480      	push	{r7}
 c007f08:	af00      	add	r7, sp, #0
  while (1)
 c007f0a:	e7fe      	b.n	c007f0a <DebugMon_Handler+0x4>

0c007f0c <PendSV_Handler>:
/**
  * @brief  This function handles PendSVC exception.
  * @retval None
  */
void PendSV_Handler(void)
{
 c007f0c:	b480      	push	{r7}
 c007f0e:	af00      	add	r7, sp, #0
  while (1)
 c007f10:	e7fe      	b.n	c007f10 <PendSV_Handler+0x4>

0c007f12 <SysTick_Handler>:
/**
  * @brief  This function handles SysTick Handler.
  * @retval None
  */
void SysTick_Handler(void)
{
 c007f12:	b580      	push	{r7, lr}
 c007f14:	af00      	add	r7, sp, #0
  HAL_IncTick();
 c007f16:	f7f8 fda5 	bl	c000a64 <HAL_IncTick>
}
 c007f1a:	bf00      	nop
 c007f1c:	bd80      	pop	{r7, pc}
	...

0c007f20 <GTZC_IRQHandler>:
/**
  * @brief  This function handles GTZC interrupt request.
  * @retval None
  */
void GTZC_IRQHandler(void)
{
 c007f20:	b590      	push	{r4, r7, lr}
 c007f22:	b083      	sub	sp, #12
 c007f24:	af00      	add	r7, sp, #0
  funcptr_NS callback_NS; /* non-secure callback function pointer */

  HAL_GTZC_IRQHandler();
 c007f26:	f7f9 fa05 	bl	c001334 <HAL_GTZC_IRQHandler>

  if(pSecureErrorCallback != (funcptr_NS)NULL)
 c007f2a:	4b1c      	ldr	r3, [pc, #112]	; (c007f9c <GTZC_IRQHandler+0x7c>)
 c007f2c:	681b      	ldr	r3, [r3, #0]
 c007f2e:	2b00      	cmp	r3, #0
 c007f30:	d02f      	beq.n	c007f92 <GTZC_IRQHandler+0x72>
  {
   /* return function pointer with cleared LSB */
   callback_NS = (funcptr_NS)cmse_nsfptr_create(pSecureErrorCallback);
 c007f32:	4b1a      	ldr	r3, [pc, #104]	; (c007f9c <GTZC_IRQHandler+0x7c>)
 c007f34:	681b      	ldr	r3, [r3, #0]
 c007f36:	f023 0301 	bic.w	r3, r3, #1
 c007f3a:	607b      	str	r3, [r7, #4]

   callback_NS();
 c007f3c:	687b      	ldr	r3, [r7, #4]
 c007f3e:	461c      	mov	r4, r3
 c007f40:	0864      	lsrs	r4, r4, #1
 c007f42:	0064      	lsls	r4, r4, #1
 c007f44:	4620      	mov	r0, r4
 c007f46:	4621      	mov	r1, r4
 c007f48:	4622      	mov	r2, r4
 c007f4a:	4623      	mov	r3, r4
 c007f4c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c007f50:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c007f54:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c007f58:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c007f5c:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c007f60:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c007f64:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c007f68:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c007f6c:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c007f70:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c007f74:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c007f78:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c007f7c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c007f80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c007f84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c007f88:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c007f8c:	f7f8 f954 	bl	c000238 <__gnu_cmse_nonsecure_call>
  else
  {
    /* Something went wrong in test case */
    while(1);
  }
}
 c007f90:	e000      	b.n	c007f94 <GTZC_IRQHandler+0x74>
    while(1);
 c007f92:	e7fe      	b.n	c007f92 <GTZC_IRQHandler+0x72>
}
 c007f94:	370c      	adds	r7, #12
 c007f96:	46bd      	mov	sp, r7
 c007f98:	bd90      	pop	{r4, r7, pc}
 c007f9a:	bf00      	nop
 c007f9c:	300007d8 	.word	0x300007d8

0c007fa0 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 c007fa0:	b580      	push	{r7, lr}
 c007fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 c007fa4:	4802      	ldr	r0, [pc, #8]	; (c007fb0 <TIM17_IRQHandler+0x10>)
 c007fa6:	f7fd fe83 	bl	c005cb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 c007faa:	bf00      	nop
 c007fac:	bd80      	pop	{r7, pc}
 c007fae:	bf00      	nop
 c007fb0:	30000780 	.word	0x30000780

0c007fb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 c007fb4:	b580      	push	{r7, lr}
 c007fb6:	b086      	sub	sp, #24
 c007fb8:	af00      	add	r7, sp, #0
 c007fba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 c007fbc:	4a14      	ldr	r2, [pc, #80]	; (c008010 <_sbrk+0x5c>)
 c007fbe:	4b15      	ldr	r3, [pc, #84]	; (c008014 <_sbrk+0x60>)
 c007fc0:	1ad3      	subs	r3, r2, r3
 c007fc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 c007fc4:	697b      	ldr	r3, [r7, #20]
 c007fc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 c007fc8:	4b13      	ldr	r3, [pc, #76]	; (c008018 <_sbrk+0x64>)
 c007fca:	681b      	ldr	r3, [r3, #0]
 c007fcc:	2b00      	cmp	r3, #0
 c007fce:	d102      	bne.n	c007fd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 c007fd0:	4b11      	ldr	r3, [pc, #68]	; (c008018 <_sbrk+0x64>)
 c007fd2:	4a12      	ldr	r2, [pc, #72]	; (c00801c <_sbrk+0x68>)
 c007fd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 c007fd6:	4b10      	ldr	r3, [pc, #64]	; (c008018 <_sbrk+0x64>)
 c007fd8:	681a      	ldr	r2, [r3, #0]
 c007fda:	687b      	ldr	r3, [r7, #4]
 c007fdc:	4413      	add	r3, r2
 c007fde:	693a      	ldr	r2, [r7, #16]
 c007fe0:	429a      	cmp	r2, r3
 c007fe2:	d207      	bcs.n	c007ff4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 c007fe4:	f003 fc0a 	bl	c00b7fc <__errno>
 c007fe8:	4603      	mov	r3, r0
 c007fea:	220c      	movs	r2, #12
 c007fec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 c007fee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c007ff2:	e009      	b.n	c008008 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 c007ff4:	4b08      	ldr	r3, [pc, #32]	; (c008018 <_sbrk+0x64>)
 c007ff6:	681b      	ldr	r3, [r3, #0]
 c007ff8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 c007ffa:	4b07      	ldr	r3, [pc, #28]	; (c008018 <_sbrk+0x64>)
 c007ffc:	681a      	ldr	r2, [r3, #0]
 c007ffe:	687b      	ldr	r3, [r7, #4]
 c008000:	4413      	add	r3, r2
 c008002:	4a05      	ldr	r2, [pc, #20]	; (c008018 <_sbrk+0x64>)
 c008004:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 c008006:	68fb      	ldr	r3, [r7, #12]
}
 c008008:	4618      	mov	r0, r3
 c00800a:	3718      	adds	r7, #24
 c00800c:	46bd      	mov	sp, r7
 c00800e:	bd80      	pop	{r7, pc}
 c008010:	30018000 	.word	0x30018000
 c008014:	00002000 	.word	0x00002000
 c008018:	300007e0 	.word	0x300007e0
 c00801c:	30000828 	.word	0x30000828

0c008020 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 c008020:	b580      	push	{r7, lr}
 c008022:	b084      	sub	sp, #16
 c008024:	af00      	add	r7, sp, #0
 c008026:	4603      	mov	r3, r0
 c008028:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 c00802a:	79fb      	ldrb	r3, [r7, #7]
 c00802c:	4a08      	ldr	r2, [pc, #32]	; (c008050 <disk_status+0x30>)
 c00802e:	009b      	lsls	r3, r3, #2
 c008030:	4413      	add	r3, r2
 c008032:	685b      	ldr	r3, [r3, #4]
 c008034:	685b      	ldr	r3, [r3, #4]
 c008036:	79fa      	ldrb	r2, [r7, #7]
 c008038:	4905      	ldr	r1, [pc, #20]	; (c008050 <disk_status+0x30>)
 c00803a:	440a      	add	r2, r1
 c00803c:	7a12      	ldrb	r2, [r2, #8]
 c00803e:	4610      	mov	r0, r2
 c008040:	4798      	blx	r3
 c008042:	4603      	mov	r3, r0
 c008044:	73fb      	strb	r3, [r7, #15]
  return stat;
 c008046:	7bfb      	ldrb	r3, [r7, #15]
}
 c008048:	4618      	mov	r0, r3
 c00804a:	3710      	adds	r7, #16
 c00804c:	46bd      	mov	sp, r7
 c00804e:	bd80      	pop	{r7, pc}
 c008050:	3000080c 	.word	0x3000080c

0c008054 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 c008054:	b580      	push	{r7, lr}
 c008056:	b084      	sub	sp, #16
 c008058:	af00      	add	r7, sp, #0
 c00805a:	4603      	mov	r3, r0
 c00805c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 c00805e:	2300      	movs	r3, #0
 c008060:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 c008062:	79fb      	ldrb	r3, [r7, #7]
 c008064:	4a0d      	ldr	r2, [pc, #52]	; (c00809c <disk_initialize+0x48>)
 c008066:	5cd3      	ldrb	r3, [r2, r3]
 c008068:	2b00      	cmp	r3, #0
 c00806a:	d111      	bne.n	c008090 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 c00806c:	79fb      	ldrb	r3, [r7, #7]
 c00806e:	4a0b      	ldr	r2, [pc, #44]	; (c00809c <disk_initialize+0x48>)
 c008070:	2101      	movs	r1, #1
 c008072:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 c008074:	79fb      	ldrb	r3, [r7, #7]
 c008076:	4a09      	ldr	r2, [pc, #36]	; (c00809c <disk_initialize+0x48>)
 c008078:	009b      	lsls	r3, r3, #2
 c00807a:	4413      	add	r3, r2
 c00807c:	685b      	ldr	r3, [r3, #4]
 c00807e:	681b      	ldr	r3, [r3, #0]
 c008080:	79fa      	ldrb	r2, [r7, #7]
 c008082:	4906      	ldr	r1, [pc, #24]	; (c00809c <disk_initialize+0x48>)
 c008084:	440a      	add	r2, r1
 c008086:	7a12      	ldrb	r2, [r2, #8]
 c008088:	4610      	mov	r0, r2
 c00808a:	4798      	blx	r3
 c00808c:	4603      	mov	r3, r0
 c00808e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 c008090:	7bfb      	ldrb	r3, [r7, #15]
}
 c008092:	4618      	mov	r0, r3
 c008094:	3710      	adds	r7, #16
 c008096:	46bd      	mov	sp, r7
 c008098:	bd80      	pop	{r7, pc}
 c00809a:	bf00      	nop
 c00809c:	3000080c 	.word	0x3000080c

0c0080a0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 c0080a0:	b590      	push	{r4, r7, lr}
 c0080a2:	b087      	sub	sp, #28
 c0080a4:	af00      	add	r7, sp, #0
 c0080a6:	60b9      	str	r1, [r7, #8]
 c0080a8:	607a      	str	r2, [r7, #4]
 c0080aa:	603b      	str	r3, [r7, #0]
 c0080ac:	4603      	mov	r3, r0
 c0080ae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 c0080b0:	7bfb      	ldrb	r3, [r7, #15]
 c0080b2:	4a0a      	ldr	r2, [pc, #40]	; (c0080dc <disk_read+0x3c>)
 c0080b4:	009b      	lsls	r3, r3, #2
 c0080b6:	4413      	add	r3, r2
 c0080b8:	685b      	ldr	r3, [r3, #4]
 c0080ba:	689c      	ldr	r4, [r3, #8]
 c0080bc:	7bfb      	ldrb	r3, [r7, #15]
 c0080be:	4a07      	ldr	r2, [pc, #28]	; (c0080dc <disk_read+0x3c>)
 c0080c0:	4413      	add	r3, r2
 c0080c2:	7a18      	ldrb	r0, [r3, #8]
 c0080c4:	683b      	ldr	r3, [r7, #0]
 c0080c6:	687a      	ldr	r2, [r7, #4]
 c0080c8:	68b9      	ldr	r1, [r7, #8]
 c0080ca:	47a0      	blx	r4
 c0080cc:	4603      	mov	r3, r0
 c0080ce:	75fb      	strb	r3, [r7, #23]
  return res;
 c0080d0:	7dfb      	ldrb	r3, [r7, #23]
}
 c0080d2:	4618      	mov	r0, r3
 c0080d4:	371c      	adds	r7, #28
 c0080d6:	46bd      	mov	sp, r7
 c0080d8:	bd90      	pop	{r4, r7, pc}
 c0080da:	bf00      	nop
 c0080dc:	3000080c 	.word	0x3000080c

0c0080e0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 c0080e0:	b590      	push	{r4, r7, lr}
 c0080e2:	b087      	sub	sp, #28
 c0080e4:	af00      	add	r7, sp, #0
 c0080e6:	60b9      	str	r1, [r7, #8]
 c0080e8:	607a      	str	r2, [r7, #4]
 c0080ea:	603b      	str	r3, [r7, #0]
 c0080ec:	4603      	mov	r3, r0
 c0080ee:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 c0080f0:	7bfb      	ldrb	r3, [r7, #15]
 c0080f2:	4a0a      	ldr	r2, [pc, #40]	; (c00811c <disk_write+0x3c>)
 c0080f4:	009b      	lsls	r3, r3, #2
 c0080f6:	4413      	add	r3, r2
 c0080f8:	685b      	ldr	r3, [r3, #4]
 c0080fa:	68dc      	ldr	r4, [r3, #12]
 c0080fc:	7bfb      	ldrb	r3, [r7, #15]
 c0080fe:	4a07      	ldr	r2, [pc, #28]	; (c00811c <disk_write+0x3c>)
 c008100:	4413      	add	r3, r2
 c008102:	7a18      	ldrb	r0, [r3, #8]
 c008104:	683b      	ldr	r3, [r7, #0]
 c008106:	687a      	ldr	r2, [r7, #4]
 c008108:	68b9      	ldr	r1, [r7, #8]
 c00810a:	47a0      	blx	r4
 c00810c:	4603      	mov	r3, r0
 c00810e:	75fb      	strb	r3, [r7, #23]
  return res;
 c008110:	7dfb      	ldrb	r3, [r7, #23]
}
 c008112:	4618      	mov	r0, r3
 c008114:	371c      	adds	r7, #28
 c008116:	46bd      	mov	sp, r7
 c008118:	bd90      	pop	{r4, r7, pc}
 c00811a:	bf00      	nop
 c00811c:	3000080c 	.word	0x3000080c

0c008120 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 c008120:	b580      	push	{r7, lr}
 c008122:	b084      	sub	sp, #16
 c008124:	af00      	add	r7, sp, #0
 c008126:	4603      	mov	r3, r0
 c008128:	603a      	str	r2, [r7, #0]
 c00812a:	71fb      	strb	r3, [r7, #7]
 c00812c:	460b      	mov	r3, r1
 c00812e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 c008130:	79fb      	ldrb	r3, [r7, #7]
 c008132:	4a09      	ldr	r2, [pc, #36]	; (c008158 <disk_ioctl+0x38>)
 c008134:	009b      	lsls	r3, r3, #2
 c008136:	4413      	add	r3, r2
 c008138:	685b      	ldr	r3, [r3, #4]
 c00813a:	691b      	ldr	r3, [r3, #16]
 c00813c:	79fa      	ldrb	r2, [r7, #7]
 c00813e:	4906      	ldr	r1, [pc, #24]	; (c008158 <disk_ioctl+0x38>)
 c008140:	440a      	add	r2, r1
 c008142:	7a10      	ldrb	r0, [r2, #8]
 c008144:	79b9      	ldrb	r1, [r7, #6]
 c008146:	683a      	ldr	r2, [r7, #0]
 c008148:	4798      	blx	r3
 c00814a:	4603      	mov	r3, r0
 c00814c:	73fb      	strb	r3, [r7, #15]
  return res;
 c00814e:	7bfb      	ldrb	r3, [r7, #15]
}
 c008150:	4618      	mov	r0, r3
 c008152:	3710      	adds	r7, #16
 c008154:	46bd      	mov	sp, r7
 c008156:	bd80      	pop	{r7, pc}
 c008158:	3000080c 	.word	0x3000080c

0c00815c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 c00815c:	b480      	push	{r7}
 c00815e:	b085      	sub	sp, #20
 c008160:	af00      	add	r7, sp, #0
 c008162:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 c008164:	687b      	ldr	r3, [r7, #4]
 c008166:	3301      	adds	r3, #1
 c008168:	781b      	ldrb	r3, [r3, #0]
 c00816a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 c00816c:	89fb      	ldrh	r3, [r7, #14]
 c00816e:	021b      	lsls	r3, r3, #8
 c008170:	b21a      	sxth	r2, r3
 c008172:	687b      	ldr	r3, [r7, #4]
 c008174:	781b      	ldrb	r3, [r3, #0]
 c008176:	b21b      	sxth	r3, r3
 c008178:	4313      	orrs	r3, r2
 c00817a:	b21b      	sxth	r3, r3
 c00817c:	81fb      	strh	r3, [r7, #14]
	return rv;
 c00817e:	89fb      	ldrh	r3, [r7, #14]
}
 c008180:	4618      	mov	r0, r3
 c008182:	3714      	adds	r7, #20
 c008184:	46bd      	mov	sp, r7
 c008186:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00818a:	4770      	bx	lr

0c00818c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 c00818c:	b480      	push	{r7}
 c00818e:	b085      	sub	sp, #20
 c008190:	af00      	add	r7, sp, #0
 c008192:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 c008194:	687b      	ldr	r3, [r7, #4]
 c008196:	3303      	adds	r3, #3
 c008198:	781b      	ldrb	r3, [r3, #0]
 c00819a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 c00819c:	68fb      	ldr	r3, [r7, #12]
 c00819e:	021b      	lsls	r3, r3, #8
 c0081a0:	687a      	ldr	r2, [r7, #4]
 c0081a2:	3202      	adds	r2, #2
 c0081a4:	7812      	ldrb	r2, [r2, #0]
 c0081a6:	4313      	orrs	r3, r2
 c0081a8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 c0081aa:	68fb      	ldr	r3, [r7, #12]
 c0081ac:	021b      	lsls	r3, r3, #8
 c0081ae:	687a      	ldr	r2, [r7, #4]
 c0081b0:	3201      	adds	r2, #1
 c0081b2:	7812      	ldrb	r2, [r2, #0]
 c0081b4:	4313      	orrs	r3, r2
 c0081b6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 c0081b8:	68fb      	ldr	r3, [r7, #12]
 c0081ba:	021b      	lsls	r3, r3, #8
 c0081bc:	687a      	ldr	r2, [r7, #4]
 c0081be:	7812      	ldrb	r2, [r2, #0]
 c0081c0:	4313      	orrs	r3, r2
 c0081c2:	60fb      	str	r3, [r7, #12]
	return rv;
 c0081c4:	68fb      	ldr	r3, [r7, #12]
}
 c0081c6:	4618      	mov	r0, r3
 c0081c8:	3714      	adds	r7, #20
 c0081ca:	46bd      	mov	sp, r7
 c0081cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0081d0:	4770      	bx	lr

0c0081d2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 c0081d2:	b480      	push	{r7}
 c0081d4:	b083      	sub	sp, #12
 c0081d6:	af00      	add	r7, sp, #0
 c0081d8:	6078      	str	r0, [r7, #4]
 c0081da:	460b      	mov	r3, r1
 c0081dc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 c0081de:	687b      	ldr	r3, [r7, #4]
 c0081e0:	1c5a      	adds	r2, r3, #1
 c0081e2:	607a      	str	r2, [r7, #4]
 c0081e4:	887a      	ldrh	r2, [r7, #2]
 c0081e6:	b2d2      	uxtb	r2, r2
 c0081e8:	701a      	strb	r2, [r3, #0]
 c0081ea:	887b      	ldrh	r3, [r7, #2]
 c0081ec:	0a1b      	lsrs	r3, r3, #8
 c0081ee:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 c0081f0:	687b      	ldr	r3, [r7, #4]
 c0081f2:	1c5a      	adds	r2, r3, #1
 c0081f4:	607a      	str	r2, [r7, #4]
 c0081f6:	887a      	ldrh	r2, [r7, #2]
 c0081f8:	b2d2      	uxtb	r2, r2
 c0081fa:	701a      	strb	r2, [r3, #0]
}
 c0081fc:	bf00      	nop
 c0081fe:	370c      	adds	r7, #12
 c008200:	46bd      	mov	sp, r7
 c008202:	f85d 7b04 	ldr.w	r7, [sp], #4
 c008206:	4770      	bx	lr

0c008208 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 c008208:	b480      	push	{r7}
 c00820a:	b083      	sub	sp, #12
 c00820c:	af00      	add	r7, sp, #0
 c00820e:	6078      	str	r0, [r7, #4]
 c008210:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 c008212:	687b      	ldr	r3, [r7, #4]
 c008214:	1c5a      	adds	r2, r3, #1
 c008216:	607a      	str	r2, [r7, #4]
 c008218:	683a      	ldr	r2, [r7, #0]
 c00821a:	b2d2      	uxtb	r2, r2
 c00821c:	701a      	strb	r2, [r3, #0]
 c00821e:	683b      	ldr	r3, [r7, #0]
 c008220:	0a1b      	lsrs	r3, r3, #8
 c008222:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 c008224:	687b      	ldr	r3, [r7, #4]
 c008226:	1c5a      	adds	r2, r3, #1
 c008228:	607a      	str	r2, [r7, #4]
 c00822a:	683a      	ldr	r2, [r7, #0]
 c00822c:	b2d2      	uxtb	r2, r2
 c00822e:	701a      	strb	r2, [r3, #0]
 c008230:	683b      	ldr	r3, [r7, #0]
 c008232:	0a1b      	lsrs	r3, r3, #8
 c008234:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 c008236:	687b      	ldr	r3, [r7, #4]
 c008238:	1c5a      	adds	r2, r3, #1
 c00823a:	607a      	str	r2, [r7, #4]
 c00823c:	683a      	ldr	r2, [r7, #0]
 c00823e:	b2d2      	uxtb	r2, r2
 c008240:	701a      	strb	r2, [r3, #0]
 c008242:	683b      	ldr	r3, [r7, #0]
 c008244:	0a1b      	lsrs	r3, r3, #8
 c008246:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 c008248:	687b      	ldr	r3, [r7, #4]
 c00824a:	1c5a      	adds	r2, r3, #1
 c00824c:	607a      	str	r2, [r7, #4]
 c00824e:	683a      	ldr	r2, [r7, #0]
 c008250:	b2d2      	uxtb	r2, r2
 c008252:	701a      	strb	r2, [r3, #0]
}
 c008254:	bf00      	nop
 c008256:	370c      	adds	r7, #12
 c008258:	46bd      	mov	sp, r7
 c00825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00825e:	4770      	bx	lr

0c008260 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 c008260:	b480      	push	{r7}
 c008262:	b087      	sub	sp, #28
 c008264:	af00      	add	r7, sp, #0
 c008266:	60f8      	str	r0, [r7, #12]
 c008268:	60b9      	str	r1, [r7, #8]
 c00826a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 c00826c:	68fb      	ldr	r3, [r7, #12]
 c00826e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 c008270:	68bb      	ldr	r3, [r7, #8]
 c008272:	613b      	str	r3, [r7, #16]

	if (cnt) {
 c008274:	687b      	ldr	r3, [r7, #4]
 c008276:	2b00      	cmp	r3, #0
 c008278:	d00d      	beq.n	c008296 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 c00827a:	693a      	ldr	r2, [r7, #16]
 c00827c:	1c53      	adds	r3, r2, #1
 c00827e:	613b      	str	r3, [r7, #16]
 c008280:	697b      	ldr	r3, [r7, #20]
 c008282:	1c59      	adds	r1, r3, #1
 c008284:	6179      	str	r1, [r7, #20]
 c008286:	7812      	ldrb	r2, [r2, #0]
 c008288:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 c00828a:	687b      	ldr	r3, [r7, #4]
 c00828c:	3b01      	subs	r3, #1
 c00828e:	607b      	str	r3, [r7, #4]
 c008290:	687b      	ldr	r3, [r7, #4]
 c008292:	2b00      	cmp	r3, #0
 c008294:	d1f1      	bne.n	c00827a <mem_cpy+0x1a>
	}
}
 c008296:	bf00      	nop
 c008298:	371c      	adds	r7, #28
 c00829a:	46bd      	mov	sp, r7
 c00829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0082a0:	4770      	bx	lr

0c0082a2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 c0082a2:	b480      	push	{r7}
 c0082a4:	b087      	sub	sp, #28
 c0082a6:	af00      	add	r7, sp, #0
 c0082a8:	60f8      	str	r0, [r7, #12]
 c0082aa:	60b9      	str	r1, [r7, #8]
 c0082ac:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 c0082ae:	68fb      	ldr	r3, [r7, #12]
 c0082b0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 c0082b2:	697b      	ldr	r3, [r7, #20]
 c0082b4:	1c5a      	adds	r2, r3, #1
 c0082b6:	617a      	str	r2, [r7, #20]
 c0082b8:	68ba      	ldr	r2, [r7, #8]
 c0082ba:	b2d2      	uxtb	r2, r2
 c0082bc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 c0082be:	687b      	ldr	r3, [r7, #4]
 c0082c0:	3b01      	subs	r3, #1
 c0082c2:	607b      	str	r3, [r7, #4]
 c0082c4:	687b      	ldr	r3, [r7, #4]
 c0082c6:	2b00      	cmp	r3, #0
 c0082c8:	d1f3      	bne.n	c0082b2 <mem_set+0x10>
}
 c0082ca:	bf00      	nop
 c0082cc:	bf00      	nop
 c0082ce:	371c      	adds	r7, #28
 c0082d0:	46bd      	mov	sp, r7
 c0082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0082d6:	4770      	bx	lr

0c0082d8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 c0082d8:	b480      	push	{r7}
 c0082da:	b089      	sub	sp, #36	; 0x24
 c0082dc:	af00      	add	r7, sp, #0
 c0082de:	60f8      	str	r0, [r7, #12]
 c0082e0:	60b9      	str	r1, [r7, #8]
 c0082e2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 c0082e4:	68fb      	ldr	r3, [r7, #12]
 c0082e6:	61fb      	str	r3, [r7, #28]
 c0082e8:	68bb      	ldr	r3, [r7, #8]
 c0082ea:	61bb      	str	r3, [r7, #24]
	int r = 0;
 c0082ec:	2300      	movs	r3, #0
 c0082ee:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 c0082f0:	69fb      	ldr	r3, [r7, #28]
 c0082f2:	1c5a      	adds	r2, r3, #1
 c0082f4:	61fa      	str	r2, [r7, #28]
 c0082f6:	781b      	ldrb	r3, [r3, #0]
 c0082f8:	4619      	mov	r1, r3
 c0082fa:	69bb      	ldr	r3, [r7, #24]
 c0082fc:	1c5a      	adds	r2, r3, #1
 c0082fe:	61ba      	str	r2, [r7, #24]
 c008300:	781b      	ldrb	r3, [r3, #0]
 c008302:	1acb      	subs	r3, r1, r3
 c008304:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 c008306:	687b      	ldr	r3, [r7, #4]
 c008308:	3b01      	subs	r3, #1
 c00830a:	607b      	str	r3, [r7, #4]
 c00830c:	687b      	ldr	r3, [r7, #4]
 c00830e:	2b00      	cmp	r3, #0
 c008310:	d002      	beq.n	c008318 <mem_cmp+0x40>
 c008312:	697b      	ldr	r3, [r7, #20]
 c008314:	2b00      	cmp	r3, #0
 c008316:	d0eb      	beq.n	c0082f0 <mem_cmp+0x18>

	return r;
 c008318:	697b      	ldr	r3, [r7, #20]
}
 c00831a:	4618      	mov	r0, r3
 c00831c:	3724      	adds	r7, #36	; 0x24
 c00831e:	46bd      	mov	sp, r7
 c008320:	f85d 7b04 	ldr.w	r7, [sp], #4
 c008324:	4770      	bx	lr

0c008326 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 c008326:	b480      	push	{r7}
 c008328:	b083      	sub	sp, #12
 c00832a:	af00      	add	r7, sp, #0
 c00832c:	6078      	str	r0, [r7, #4]
 c00832e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 c008330:	e002      	b.n	c008338 <chk_chr+0x12>
 c008332:	687b      	ldr	r3, [r7, #4]
 c008334:	3301      	adds	r3, #1
 c008336:	607b      	str	r3, [r7, #4]
 c008338:	687b      	ldr	r3, [r7, #4]
 c00833a:	781b      	ldrb	r3, [r3, #0]
 c00833c:	2b00      	cmp	r3, #0
 c00833e:	d005      	beq.n	c00834c <chk_chr+0x26>
 c008340:	687b      	ldr	r3, [r7, #4]
 c008342:	781b      	ldrb	r3, [r3, #0]
 c008344:	461a      	mov	r2, r3
 c008346:	683b      	ldr	r3, [r7, #0]
 c008348:	4293      	cmp	r3, r2
 c00834a:	d1f2      	bne.n	c008332 <chk_chr+0xc>
	return *str;
 c00834c:	687b      	ldr	r3, [r7, #4]
 c00834e:	781b      	ldrb	r3, [r3, #0]
}
 c008350:	4618      	mov	r0, r3
 c008352:	370c      	adds	r7, #12
 c008354:	46bd      	mov	sp, r7
 c008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00835a:	4770      	bx	lr

0c00835c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 c00835c:	b480      	push	{r7}
 c00835e:	b085      	sub	sp, #20
 c008360:	af00      	add	r7, sp, #0
 c008362:	6078      	str	r0, [r7, #4]
 c008364:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 c008366:	2300      	movs	r3, #0
 c008368:	60bb      	str	r3, [r7, #8]
 c00836a:	68bb      	ldr	r3, [r7, #8]
 c00836c:	60fb      	str	r3, [r7, #12]
 c00836e:	e029      	b.n	c0083c4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 c008370:	4a27      	ldr	r2, [pc, #156]	; (c008410 <chk_lock+0xb4>)
 c008372:	68fb      	ldr	r3, [r7, #12]
 c008374:	011b      	lsls	r3, r3, #4
 c008376:	4413      	add	r3, r2
 c008378:	681b      	ldr	r3, [r3, #0]
 c00837a:	2b00      	cmp	r3, #0
 c00837c:	d01d      	beq.n	c0083ba <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 c00837e:	4a24      	ldr	r2, [pc, #144]	; (c008410 <chk_lock+0xb4>)
 c008380:	68fb      	ldr	r3, [r7, #12]
 c008382:	011b      	lsls	r3, r3, #4
 c008384:	4413      	add	r3, r2
 c008386:	681a      	ldr	r2, [r3, #0]
 c008388:	687b      	ldr	r3, [r7, #4]
 c00838a:	681b      	ldr	r3, [r3, #0]
 c00838c:	429a      	cmp	r2, r3
 c00838e:	d116      	bne.n	c0083be <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 c008390:	4a1f      	ldr	r2, [pc, #124]	; (c008410 <chk_lock+0xb4>)
 c008392:	68fb      	ldr	r3, [r7, #12]
 c008394:	011b      	lsls	r3, r3, #4
 c008396:	4413      	add	r3, r2
 c008398:	3304      	adds	r3, #4
 c00839a:	681a      	ldr	r2, [r3, #0]
 c00839c:	687b      	ldr	r3, [r7, #4]
 c00839e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 c0083a0:	429a      	cmp	r2, r3
 c0083a2:	d10c      	bne.n	c0083be <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 c0083a4:	4a1a      	ldr	r2, [pc, #104]	; (c008410 <chk_lock+0xb4>)
 c0083a6:	68fb      	ldr	r3, [r7, #12]
 c0083a8:	011b      	lsls	r3, r3, #4
 c0083aa:	4413      	add	r3, r2
 c0083ac:	3308      	adds	r3, #8
 c0083ae:	681a      	ldr	r2, [r3, #0]
 c0083b0:	687b      	ldr	r3, [r7, #4]
 c0083b2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 c0083b4:	429a      	cmp	r2, r3
 c0083b6:	d102      	bne.n	c0083be <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 c0083b8:	e007      	b.n	c0083ca <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 c0083ba:	2301      	movs	r3, #1
 c0083bc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 c0083be:	68fb      	ldr	r3, [r7, #12]
 c0083c0:	3301      	adds	r3, #1
 c0083c2:	60fb      	str	r3, [r7, #12]
 c0083c4:	68fb      	ldr	r3, [r7, #12]
 c0083c6:	2b01      	cmp	r3, #1
 c0083c8:	d9d2      	bls.n	c008370 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 c0083ca:	68fb      	ldr	r3, [r7, #12]
 c0083cc:	2b02      	cmp	r3, #2
 c0083ce:	d109      	bne.n	c0083e4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 c0083d0:	68bb      	ldr	r3, [r7, #8]
 c0083d2:	2b00      	cmp	r3, #0
 c0083d4:	d102      	bne.n	c0083dc <chk_lock+0x80>
 c0083d6:	683b      	ldr	r3, [r7, #0]
 c0083d8:	2b02      	cmp	r3, #2
 c0083da:	d101      	bne.n	c0083e0 <chk_lock+0x84>
 c0083dc:	2300      	movs	r3, #0
 c0083de:	e010      	b.n	c008402 <chk_lock+0xa6>
 c0083e0:	2312      	movs	r3, #18
 c0083e2:	e00e      	b.n	c008402 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 c0083e4:	683b      	ldr	r3, [r7, #0]
 c0083e6:	2b00      	cmp	r3, #0
 c0083e8:	d108      	bne.n	c0083fc <chk_lock+0xa0>
 c0083ea:	4a09      	ldr	r2, [pc, #36]	; (c008410 <chk_lock+0xb4>)
 c0083ec:	68fb      	ldr	r3, [r7, #12]
 c0083ee:	011b      	lsls	r3, r3, #4
 c0083f0:	4413      	add	r3, r2
 c0083f2:	330c      	adds	r3, #12
 c0083f4:	881b      	ldrh	r3, [r3, #0]
 c0083f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 c0083fa:	d101      	bne.n	c008400 <chk_lock+0xa4>
 c0083fc:	2310      	movs	r3, #16
 c0083fe:	e000      	b.n	c008402 <chk_lock+0xa6>
 c008400:	2300      	movs	r3, #0
}
 c008402:	4618      	mov	r0, r3
 c008404:	3714      	adds	r7, #20
 c008406:	46bd      	mov	sp, r7
 c008408:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00840c:	4770      	bx	lr
 c00840e:	bf00      	nop
 c008410:	300007ec 	.word	0x300007ec

0c008414 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 c008414:	b480      	push	{r7}
 c008416:	b083      	sub	sp, #12
 c008418:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 c00841a:	2300      	movs	r3, #0
 c00841c:	607b      	str	r3, [r7, #4]
 c00841e:	e002      	b.n	c008426 <enq_lock+0x12>
 c008420:	687b      	ldr	r3, [r7, #4]
 c008422:	3301      	adds	r3, #1
 c008424:	607b      	str	r3, [r7, #4]
 c008426:	687b      	ldr	r3, [r7, #4]
 c008428:	2b01      	cmp	r3, #1
 c00842a:	d806      	bhi.n	c00843a <enq_lock+0x26>
 c00842c:	4a09      	ldr	r2, [pc, #36]	; (c008454 <enq_lock+0x40>)
 c00842e:	687b      	ldr	r3, [r7, #4]
 c008430:	011b      	lsls	r3, r3, #4
 c008432:	4413      	add	r3, r2
 c008434:	681b      	ldr	r3, [r3, #0]
 c008436:	2b00      	cmp	r3, #0
 c008438:	d1f2      	bne.n	c008420 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 c00843a:	687b      	ldr	r3, [r7, #4]
 c00843c:	2b02      	cmp	r3, #2
 c00843e:	bf14      	ite	ne
 c008440:	2301      	movne	r3, #1
 c008442:	2300      	moveq	r3, #0
 c008444:	b2db      	uxtb	r3, r3
}
 c008446:	4618      	mov	r0, r3
 c008448:	370c      	adds	r7, #12
 c00844a:	46bd      	mov	sp, r7
 c00844c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c008450:	4770      	bx	lr
 c008452:	bf00      	nop
 c008454:	300007ec 	.word	0x300007ec

0c008458 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 c008458:	b480      	push	{r7}
 c00845a:	b085      	sub	sp, #20
 c00845c:	af00      	add	r7, sp, #0
 c00845e:	6078      	str	r0, [r7, #4]
 c008460:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 c008462:	2300      	movs	r3, #0
 c008464:	60fb      	str	r3, [r7, #12]
 c008466:	e01f      	b.n	c0084a8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 c008468:	4a41      	ldr	r2, [pc, #260]	; (c008570 <inc_lock+0x118>)
 c00846a:	68fb      	ldr	r3, [r7, #12]
 c00846c:	011b      	lsls	r3, r3, #4
 c00846e:	4413      	add	r3, r2
 c008470:	681a      	ldr	r2, [r3, #0]
 c008472:	687b      	ldr	r3, [r7, #4]
 c008474:	681b      	ldr	r3, [r3, #0]
 c008476:	429a      	cmp	r2, r3
 c008478:	d113      	bne.n	c0084a2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 c00847a:	4a3d      	ldr	r2, [pc, #244]	; (c008570 <inc_lock+0x118>)
 c00847c:	68fb      	ldr	r3, [r7, #12]
 c00847e:	011b      	lsls	r3, r3, #4
 c008480:	4413      	add	r3, r2
 c008482:	3304      	adds	r3, #4
 c008484:	681a      	ldr	r2, [r3, #0]
 c008486:	687b      	ldr	r3, [r7, #4]
 c008488:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 c00848a:	429a      	cmp	r2, r3
 c00848c:	d109      	bne.n	c0084a2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 c00848e:	4a38      	ldr	r2, [pc, #224]	; (c008570 <inc_lock+0x118>)
 c008490:	68fb      	ldr	r3, [r7, #12]
 c008492:	011b      	lsls	r3, r3, #4
 c008494:	4413      	add	r3, r2
 c008496:	3308      	adds	r3, #8
 c008498:	681a      	ldr	r2, [r3, #0]
 c00849a:	687b      	ldr	r3, [r7, #4]
 c00849c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 c00849e:	429a      	cmp	r2, r3
 c0084a0:	d006      	beq.n	c0084b0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 c0084a2:	68fb      	ldr	r3, [r7, #12]
 c0084a4:	3301      	adds	r3, #1
 c0084a6:	60fb      	str	r3, [r7, #12]
 c0084a8:	68fb      	ldr	r3, [r7, #12]
 c0084aa:	2b01      	cmp	r3, #1
 c0084ac:	d9dc      	bls.n	c008468 <inc_lock+0x10>
 c0084ae:	e000      	b.n	c0084b2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 c0084b0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 c0084b2:	68fb      	ldr	r3, [r7, #12]
 c0084b4:	2b02      	cmp	r3, #2
 c0084b6:	d132      	bne.n	c00851e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 c0084b8:	2300      	movs	r3, #0
 c0084ba:	60fb      	str	r3, [r7, #12]
 c0084bc:	e002      	b.n	c0084c4 <inc_lock+0x6c>
 c0084be:	68fb      	ldr	r3, [r7, #12]
 c0084c0:	3301      	adds	r3, #1
 c0084c2:	60fb      	str	r3, [r7, #12]
 c0084c4:	68fb      	ldr	r3, [r7, #12]
 c0084c6:	2b01      	cmp	r3, #1
 c0084c8:	d806      	bhi.n	c0084d8 <inc_lock+0x80>
 c0084ca:	4a29      	ldr	r2, [pc, #164]	; (c008570 <inc_lock+0x118>)
 c0084cc:	68fb      	ldr	r3, [r7, #12]
 c0084ce:	011b      	lsls	r3, r3, #4
 c0084d0:	4413      	add	r3, r2
 c0084d2:	681b      	ldr	r3, [r3, #0]
 c0084d4:	2b00      	cmp	r3, #0
 c0084d6:	d1f2      	bne.n	c0084be <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 c0084d8:	68fb      	ldr	r3, [r7, #12]
 c0084da:	2b02      	cmp	r3, #2
 c0084dc:	d101      	bne.n	c0084e2 <inc_lock+0x8a>
 c0084de:	2300      	movs	r3, #0
 c0084e0:	e040      	b.n	c008564 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 c0084e2:	687b      	ldr	r3, [r7, #4]
 c0084e4:	681a      	ldr	r2, [r3, #0]
 c0084e6:	4922      	ldr	r1, [pc, #136]	; (c008570 <inc_lock+0x118>)
 c0084e8:	68fb      	ldr	r3, [r7, #12]
 c0084ea:	011b      	lsls	r3, r3, #4
 c0084ec:	440b      	add	r3, r1
 c0084ee:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 c0084f0:	687b      	ldr	r3, [r7, #4]
 c0084f2:	689a      	ldr	r2, [r3, #8]
 c0084f4:	491e      	ldr	r1, [pc, #120]	; (c008570 <inc_lock+0x118>)
 c0084f6:	68fb      	ldr	r3, [r7, #12]
 c0084f8:	011b      	lsls	r3, r3, #4
 c0084fa:	440b      	add	r3, r1
 c0084fc:	3304      	adds	r3, #4
 c0084fe:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 c008500:	687b      	ldr	r3, [r7, #4]
 c008502:	695a      	ldr	r2, [r3, #20]
 c008504:	491a      	ldr	r1, [pc, #104]	; (c008570 <inc_lock+0x118>)
 c008506:	68fb      	ldr	r3, [r7, #12]
 c008508:	011b      	lsls	r3, r3, #4
 c00850a:	440b      	add	r3, r1
 c00850c:	3308      	adds	r3, #8
 c00850e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 c008510:	4a17      	ldr	r2, [pc, #92]	; (c008570 <inc_lock+0x118>)
 c008512:	68fb      	ldr	r3, [r7, #12]
 c008514:	011b      	lsls	r3, r3, #4
 c008516:	4413      	add	r3, r2
 c008518:	330c      	adds	r3, #12
 c00851a:	2200      	movs	r2, #0
 c00851c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 c00851e:	683b      	ldr	r3, [r7, #0]
 c008520:	2b00      	cmp	r3, #0
 c008522:	d009      	beq.n	c008538 <inc_lock+0xe0>
 c008524:	4a12      	ldr	r2, [pc, #72]	; (c008570 <inc_lock+0x118>)
 c008526:	68fb      	ldr	r3, [r7, #12]
 c008528:	011b      	lsls	r3, r3, #4
 c00852a:	4413      	add	r3, r2
 c00852c:	330c      	adds	r3, #12
 c00852e:	881b      	ldrh	r3, [r3, #0]
 c008530:	2b00      	cmp	r3, #0
 c008532:	d001      	beq.n	c008538 <inc_lock+0xe0>
 c008534:	2300      	movs	r3, #0
 c008536:	e015      	b.n	c008564 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 c008538:	683b      	ldr	r3, [r7, #0]
 c00853a:	2b00      	cmp	r3, #0
 c00853c:	d108      	bne.n	c008550 <inc_lock+0xf8>
 c00853e:	4a0c      	ldr	r2, [pc, #48]	; (c008570 <inc_lock+0x118>)
 c008540:	68fb      	ldr	r3, [r7, #12]
 c008542:	011b      	lsls	r3, r3, #4
 c008544:	4413      	add	r3, r2
 c008546:	330c      	adds	r3, #12
 c008548:	881b      	ldrh	r3, [r3, #0]
 c00854a:	3301      	adds	r3, #1
 c00854c:	b29a      	uxth	r2, r3
 c00854e:	e001      	b.n	c008554 <inc_lock+0xfc>
 c008550:	f44f 7280 	mov.w	r2, #256	; 0x100
 c008554:	4906      	ldr	r1, [pc, #24]	; (c008570 <inc_lock+0x118>)
 c008556:	68fb      	ldr	r3, [r7, #12]
 c008558:	011b      	lsls	r3, r3, #4
 c00855a:	440b      	add	r3, r1
 c00855c:	330c      	adds	r3, #12
 c00855e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 c008560:	68fb      	ldr	r3, [r7, #12]
 c008562:	3301      	adds	r3, #1
}
 c008564:	4618      	mov	r0, r3
 c008566:	3714      	adds	r7, #20
 c008568:	46bd      	mov	sp, r7
 c00856a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00856e:	4770      	bx	lr
 c008570:	300007ec 	.word	0x300007ec

0c008574 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 c008574:	b480      	push	{r7}
 c008576:	b085      	sub	sp, #20
 c008578:	af00      	add	r7, sp, #0
 c00857a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 c00857c:	687b      	ldr	r3, [r7, #4]
 c00857e:	3b01      	subs	r3, #1
 c008580:	607b      	str	r3, [r7, #4]
 c008582:	687b      	ldr	r3, [r7, #4]
 c008584:	2b01      	cmp	r3, #1
 c008586:	d825      	bhi.n	c0085d4 <dec_lock+0x60>
		n = Files[i].ctr;
 c008588:	4a17      	ldr	r2, [pc, #92]	; (c0085e8 <dec_lock+0x74>)
 c00858a:	687b      	ldr	r3, [r7, #4]
 c00858c:	011b      	lsls	r3, r3, #4
 c00858e:	4413      	add	r3, r2
 c008590:	330c      	adds	r3, #12
 c008592:	881b      	ldrh	r3, [r3, #0]
 c008594:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 c008596:	89fb      	ldrh	r3, [r7, #14]
 c008598:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 c00859c:	d101      	bne.n	c0085a2 <dec_lock+0x2e>
 c00859e:	2300      	movs	r3, #0
 c0085a0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 c0085a2:	89fb      	ldrh	r3, [r7, #14]
 c0085a4:	2b00      	cmp	r3, #0
 c0085a6:	d002      	beq.n	c0085ae <dec_lock+0x3a>
 c0085a8:	89fb      	ldrh	r3, [r7, #14]
 c0085aa:	3b01      	subs	r3, #1
 c0085ac:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 c0085ae:	4a0e      	ldr	r2, [pc, #56]	; (c0085e8 <dec_lock+0x74>)
 c0085b0:	687b      	ldr	r3, [r7, #4]
 c0085b2:	011b      	lsls	r3, r3, #4
 c0085b4:	4413      	add	r3, r2
 c0085b6:	330c      	adds	r3, #12
 c0085b8:	89fa      	ldrh	r2, [r7, #14]
 c0085ba:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 c0085bc:	89fb      	ldrh	r3, [r7, #14]
 c0085be:	2b00      	cmp	r3, #0
 c0085c0:	d105      	bne.n	c0085ce <dec_lock+0x5a>
 c0085c2:	4a09      	ldr	r2, [pc, #36]	; (c0085e8 <dec_lock+0x74>)
 c0085c4:	687b      	ldr	r3, [r7, #4]
 c0085c6:	011b      	lsls	r3, r3, #4
 c0085c8:	4413      	add	r3, r2
 c0085ca:	2200      	movs	r2, #0
 c0085cc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 c0085ce:	2300      	movs	r3, #0
 c0085d0:	737b      	strb	r3, [r7, #13]
 c0085d2:	e001      	b.n	c0085d8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 c0085d4:	2302      	movs	r3, #2
 c0085d6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 c0085d8:	7b7b      	ldrb	r3, [r7, #13]
}
 c0085da:	4618      	mov	r0, r3
 c0085dc:	3714      	adds	r7, #20
 c0085de:	46bd      	mov	sp, r7
 c0085e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0085e4:	4770      	bx	lr
 c0085e6:	bf00      	nop
 c0085e8:	300007ec 	.word	0x300007ec

0c0085ec <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 c0085ec:	b480      	push	{r7}
 c0085ee:	b085      	sub	sp, #20
 c0085f0:	af00      	add	r7, sp, #0
 c0085f2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 c0085f4:	2300      	movs	r3, #0
 c0085f6:	60fb      	str	r3, [r7, #12]
 c0085f8:	e010      	b.n	c00861c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 c0085fa:	4a0d      	ldr	r2, [pc, #52]	; (c008630 <clear_lock+0x44>)
 c0085fc:	68fb      	ldr	r3, [r7, #12]
 c0085fe:	011b      	lsls	r3, r3, #4
 c008600:	4413      	add	r3, r2
 c008602:	681b      	ldr	r3, [r3, #0]
 c008604:	687a      	ldr	r2, [r7, #4]
 c008606:	429a      	cmp	r2, r3
 c008608:	d105      	bne.n	c008616 <clear_lock+0x2a>
 c00860a:	4a09      	ldr	r2, [pc, #36]	; (c008630 <clear_lock+0x44>)
 c00860c:	68fb      	ldr	r3, [r7, #12]
 c00860e:	011b      	lsls	r3, r3, #4
 c008610:	4413      	add	r3, r2
 c008612:	2200      	movs	r2, #0
 c008614:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 c008616:	68fb      	ldr	r3, [r7, #12]
 c008618:	3301      	adds	r3, #1
 c00861a:	60fb      	str	r3, [r7, #12]
 c00861c:	68fb      	ldr	r3, [r7, #12]
 c00861e:	2b01      	cmp	r3, #1
 c008620:	d9eb      	bls.n	c0085fa <clear_lock+0xe>
	}
}
 c008622:	bf00      	nop
 c008624:	bf00      	nop
 c008626:	3714      	adds	r7, #20
 c008628:	46bd      	mov	sp, r7
 c00862a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00862e:	4770      	bx	lr
 c008630:	300007ec 	.word	0x300007ec

0c008634 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 c008634:	b580      	push	{r7, lr}
 c008636:	b086      	sub	sp, #24
 c008638:	af00      	add	r7, sp, #0
 c00863a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 c00863c:	2300      	movs	r3, #0
 c00863e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 c008640:	687b      	ldr	r3, [r7, #4]
 c008642:	78db      	ldrb	r3, [r3, #3]
 c008644:	2b00      	cmp	r3, #0
 c008646:	d034      	beq.n	c0086b2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 c008648:	687b      	ldr	r3, [r7, #4]
 c00864a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c00864c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 c00864e:	687b      	ldr	r3, [r7, #4]
 c008650:	7858      	ldrb	r0, [r3, #1]
 c008652:	687b      	ldr	r3, [r7, #4]
 c008654:	f103 0134 	add.w	r1, r3, #52	; 0x34
 c008658:	2301      	movs	r3, #1
 c00865a:	697a      	ldr	r2, [r7, #20]
 c00865c:	f7ff fd40 	bl	c0080e0 <disk_write>
 c008660:	4603      	mov	r3, r0
 c008662:	2b00      	cmp	r3, #0
 c008664:	d002      	beq.n	c00866c <sync_window+0x38>
			res = FR_DISK_ERR;
 c008666:	2301      	movs	r3, #1
 c008668:	73fb      	strb	r3, [r7, #15]
 c00866a:	e022      	b.n	c0086b2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 c00866c:	687b      	ldr	r3, [r7, #4]
 c00866e:	2200      	movs	r2, #0
 c008670:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 c008672:	687b      	ldr	r3, [r7, #4]
 c008674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c008676:	697a      	ldr	r2, [r7, #20]
 c008678:	1ad2      	subs	r2, r2, r3
 c00867a:	687b      	ldr	r3, [r7, #4]
 c00867c:	69db      	ldr	r3, [r3, #28]
 c00867e:	429a      	cmp	r2, r3
 c008680:	d217      	bcs.n	c0086b2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 c008682:	687b      	ldr	r3, [r7, #4]
 c008684:	789b      	ldrb	r3, [r3, #2]
 c008686:	613b      	str	r3, [r7, #16]
 c008688:	e010      	b.n	c0086ac <sync_window+0x78>
					wsect += fs->fsize;
 c00868a:	687b      	ldr	r3, [r7, #4]
 c00868c:	69db      	ldr	r3, [r3, #28]
 c00868e:	697a      	ldr	r2, [r7, #20]
 c008690:	4413      	add	r3, r2
 c008692:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 c008694:	687b      	ldr	r3, [r7, #4]
 c008696:	7858      	ldrb	r0, [r3, #1]
 c008698:	687b      	ldr	r3, [r7, #4]
 c00869a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 c00869e:	2301      	movs	r3, #1
 c0086a0:	697a      	ldr	r2, [r7, #20]
 c0086a2:	f7ff fd1d 	bl	c0080e0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 c0086a6:	693b      	ldr	r3, [r7, #16]
 c0086a8:	3b01      	subs	r3, #1
 c0086aa:	613b      	str	r3, [r7, #16]
 c0086ac:	693b      	ldr	r3, [r7, #16]
 c0086ae:	2b01      	cmp	r3, #1
 c0086b0:	d8eb      	bhi.n	c00868a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 c0086b2:	7bfb      	ldrb	r3, [r7, #15]
}
 c0086b4:	4618      	mov	r0, r3
 c0086b6:	3718      	adds	r7, #24
 c0086b8:	46bd      	mov	sp, r7
 c0086ba:	bd80      	pop	{r7, pc}

0c0086bc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 c0086bc:	b580      	push	{r7, lr}
 c0086be:	b084      	sub	sp, #16
 c0086c0:	af00      	add	r7, sp, #0
 c0086c2:	6078      	str	r0, [r7, #4]
 c0086c4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 c0086c6:	2300      	movs	r3, #0
 c0086c8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 c0086ca:	687b      	ldr	r3, [r7, #4]
 c0086cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c0086ce:	683a      	ldr	r2, [r7, #0]
 c0086d0:	429a      	cmp	r2, r3
 c0086d2:	d01b      	beq.n	c00870c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 c0086d4:	6878      	ldr	r0, [r7, #4]
 c0086d6:	f7ff ffad 	bl	c008634 <sync_window>
 c0086da:	4603      	mov	r3, r0
 c0086dc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 c0086de:	7bfb      	ldrb	r3, [r7, #15]
 c0086e0:	2b00      	cmp	r3, #0
 c0086e2:	d113      	bne.n	c00870c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 c0086e4:	687b      	ldr	r3, [r7, #4]
 c0086e6:	7858      	ldrb	r0, [r3, #1]
 c0086e8:	687b      	ldr	r3, [r7, #4]
 c0086ea:	f103 0134 	add.w	r1, r3, #52	; 0x34
 c0086ee:	2301      	movs	r3, #1
 c0086f0:	683a      	ldr	r2, [r7, #0]
 c0086f2:	f7ff fcd5 	bl	c0080a0 <disk_read>
 c0086f6:	4603      	mov	r3, r0
 c0086f8:	2b00      	cmp	r3, #0
 c0086fa:	d004      	beq.n	c008706 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 c0086fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c008700:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 c008702:	2301      	movs	r3, #1
 c008704:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 c008706:	687b      	ldr	r3, [r7, #4]
 c008708:	683a      	ldr	r2, [r7, #0]
 c00870a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 c00870c:	7bfb      	ldrb	r3, [r7, #15]
}
 c00870e:	4618      	mov	r0, r3
 c008710:	3710      	adds	r7, #16
 c008712:	46bd      	mov	sp, r7
 c008714:	bd80      	pop	{r7, pc}
	...

0c008718 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 c008718:	b580      	push	{r7, lr}
 c00871a:	b084      	sub	sp, #16
 c00871c:	af00      	add	r7, sp, #0
 c00871e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 c008720:	6878      	ldr	r0, [r7, #4]
 c008722:	f7ff ff87 	bl	c008634 <sync_window>
 c008726:	4603      	mov	r3, r0
 c008728:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 c00872a:	7bfb      	ldrb	r3, [r7, #15]
 c00872c:	2b00      	cmp	r3, #0
 c00872e:	d158      	bne.n	c0087e2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 c008730:	687b      	ldr	r3, [r7, #4]
 c008732:	781b      	ldrb	r3, [r3, #0]
 c008734:	2b03      	cmp	r3, #3
 c008736:	d148      	bne.n	c0087ca <sync_fs+0xb2>
 c008738:	687b      	ldr	r3, [r7, #4]
 c00873a:	791b      	ldrb	r3, [r3, #4]
 c00873c:	2b01      	cmp	r3, #1
 c00873e:	d144      	bne.n	c0087ca <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 c008740:	687b      	ldr	r3, [r7, #4]
 c008742:	3334      	adds	r3, #52	; 0x34
 c008744:	f44f 7200 	mov.w	r2, #512	; 0x200
 c008748:	2100      	movs	r1, #0
 c00874a:	4618      	mov	r0, r3
 c00874c:	f7ff fda9 	bl	c0082a2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 c008750:	687b      	ldr	r3, [r7, #4]
 c008752:	3334      	adds	r3, #52	; 0x34
 c008754:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 c008758:	f64a 2155 	movw	r1, #43605	; 0xaa55
 c00875c:	4618      	mov	r0, r3
 c00875e:	f7ff fd38 	bl	c0081d2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 c008762:	687b      	ldr	r3, [r7, #4]
 c008764:	3334      	adds	r3, #52	; 0x34
 c008766:	4921      	ldr	r1, [pc, #132]	; (c0087ec <sync_fs+0xd4>)
 c008768:	4618      	mov	r0, r3
 c00876a:	f7ff fd4d 	bl	c008208 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 c00876e:	687b      	ldr	r3, [r7, #4]
 c008770:	3334      	adds	r3, #52	; 0x34
 c008772:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 c008776:	491e      	ldr	r1, [pc, #120]	; (c0087f0 <sync_fs+0xd8>)
 c008778:	4618      	mov	r0, r3
 c00877a:	f7ff fd45 	bl	c008208 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 c00877e:	687b      	ldr	r3, [r7, #4]
 c008780:	3334      	adds	r3, #52	; 0x34
 c008782:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 c008786:	687b      	ldr	r3, [r7, #4]
 c008788:	695b      	ldr	r3, [r3, #20]
 c00878a:	4619      	mov	r1, r3
 c00878c:	4610      	mov	r0, r2
 c00878e:	f7ff fd3b 	bl	c008208 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 c008792:	687b      	ldr	r3, [r7, #4]
 c008794:	3334      	adds	r3, #52	; 0x34
 c008796:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 c00879a:	687b      	ldr	r3, [r7, #4]
 c00879c:	691b      	ldr	r3, [r3, #16]
 c00879e:	4619      	mov	r1, r3
 c0087a0:	4610      	mov	r0, r2
 c0087a2:	f7ff fd31 	bl	c008208 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 c0087a6:	687b      	ldr	r3, [r7, #4]
 c0087a8:	6a1b      	ldr	r3, [r3, #32]
 c0087aa:	1c5a      	adds	r2, r3, #1
 c0087ac:	687b      	ldr	r3, [r7, #4]
 c0087ae:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 c0087b0:	687b      	ldr	r3, [r7, #4]
 c0087b2:	7858      	ldrb	r0, [r3, #1]
 c0087b4:	687b      	ldr	r3, [r7, #4]
 c0087b6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 c0087ba:	687b      	ldr	r3, [r7, #4]
 c0087bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 c0087be:	2301      	movs	r3, #1
 c0087c0:	f7ff fc8e 	bl	c0080e0 <disk_write>
			fs->fsi_flag = 0;
 c0087c4:	687b      	ldr	r3, [r7, #4]
 c0087c6:	2200      	movs	r2, #0
 c0087c8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 c0087ca:	687b      	ldr	r3, [r7, #4]
 c0087cc:	785b      	ldrb	r3, [r3, #1]
 c0087ce:	2200      	movs	r2, #0
 c0087d0:	2100      	movs	r1, #0
 c0087d2:	4618      	mov	r0, r3
 c0087d4:	f7ff fca4 	bl	c008120 <disk_ioctl>
 c0087d8:	4603      	mov	r3, r0
 c0087da:	2b00      	cmp	r3, #0
 c0087dc:	d001      	beq.n	c0087e2 <sync_fs+0xca>
 c0087de:	2301      	movs	r3, #1
 c0087e0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 c0087e2:	7bfb      	ldrb	r3, [r7, #15]
}
 c0087e4:	4618      	mov	r0, r3
 c0087e6:	3710      	adds	r7, #16
 c0087e8:	46bd      	mov	sp, r7
 c0087ea:	bd80      	pop	{r7, pc}
 c0087ec:	41615252 	.word	0x41615252
 c0087f0:	61417272 	.word	0x61417272

0c0087f4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 c0087f4:	b480      	push	{r7}
 c0087f6:	b083      	sub	sp, #12
 c0087f8:	af00      	add	r7, sp, #0
 c0087fa:	6078      	str	r0, [r7, #4]
 c0087fc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 c0087fe:	683b      	ldr	r3, [r7, #0]
 c008800:	3b02      	subs	r3, #2
 c008802:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 c008804:	687b      	ldr	r3, [r7, #4]
 c008806:	699b      	ldr	r3, [r3, #24]
 c008808:	3b02      	subs	r3, #2
 c00880a:	683a      	ldr	r2, [r7, #0]
 c00880c:	429a      	cmp	r2, r3
 c00880e:	d301      	bcc.n	c008814 <clust2sect+0x20>
 c008810:	2300      	movs	r3, #0
 c008812:	e008      	b.n	c008826 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 c008814:	687b      	ldr	r3, [r7, #4]
 c008816:	895b      	ldrh	r3, [r3, #10]
 c008818:	461a      	mov	r2, r3
 c00881a:	683b      	ldr	r3, [r7, #0]
 c00881c:	fb03 f202 	mul.w	r2, r3, r2
 c008820:	687b      	ldr	r3, [r7, #4]
 c008822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c008824:	4413      	add	r3, r2
}
 c008826:	4618      	mov	r0, r3
 c008828:	370c      	adds	r7, #12
 c00882a:	46bd      	mov	sp, r7
 c00882c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c008830:	4770      	bx	lr

0c008832 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 c008832:	b580      	push	{r7, lr}
 c008834:	b086      	sub	sp, #24
 c008836:	af00      	add	r7, sp, #0
 c008838:	6078      	str	r0, [r7, #4]
 c00883a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 c00883c:	687b      	ldr	r3, [r7, #4]
 c00883e:	681b      	ldr	r3, [r3, #0]
 c008840:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 c008842:	683b      	ldr	r3, [r7, #0]
 c008844:	2b01      	cmp	r3, #1
 c008846:	d904      	bls.n	c008852 <get_fat+0x20>
 c008848:	693b      	ldr	r3, [r7, #16]
 c00884a:	699b      	ldr	r3, [r3, #24]
 c00884c:	683a      	ldr	r2, [r7, #0]
 c00884e:	429a      	cmp	r2, r3
 c008850:	d302      	bcc.n	c008858 <get_fat+0x26>
		val = 1;	/* Internal error */
 c008852:	2301      	movs	r3, #1
 c008854:	617b      	str	r3, [r7, #20]
 c008856:	e08f      	b.n	c008978 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 c008858:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c00885c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 c00885e:	693b      	ldr	r3, [r7, #16]
 c008860:	781b      	ldrb	r3, [r3, #0]
 c008862:	2b03      	cmp	r3, #3
 c008864:	d062      	beq.n	c00892c <get_fat+0xfa>
 c008866:	2b03      	cmp	r3, #3
 c008868:	dc7c      	bgt.n	c008964 <get_fat+0x132>
 c00886a:	2b01      	cmp	r3, #1
 c00886c:	d002      	beq.n	c008874 <get_fat+0x42>
 c00886e:	2b02      	cmp	r3, #2
 c008870:	d042      	beq.n	c0088f8 <get_fat+0xc6>
 c008872:	e077      	b.n	c008964 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 c008874:	683b      	ldr	r3, [r7, #0]
 c008876:	60fb      	str	r3, [r7, #12]
 c008878:	68fb      	ldr	r3, [r7, #12]
 c00887a:	085b      	lsrs	r3, r3, #1
 c00887c:	68fa      	ldr	r2, [r7, #12]
 c00887e:	4413      	add	r3, r2
 c008880:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 c008882:	693b      	ldr	r3, [r7, #16]
 c008884:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 c008886:	68fb      	ldr	r3, [r7, #12]
 c008888:	0a5b      	lsrs	r3, r3, #9
 c00888a:	4413      	add	r3, r2
 c00888c:	4619      	mov	r1, r3
 c00888e:	6938      	ldr	r0, [r7, #16]
 c008890:	f7ff ff14 	bl	c0086bc <move_window>
 c008894:	4603      	mov	r3, r0
 c008896:	2b00      	cmp	r3, #0
 c008898:	d167      	bne.n	c00896a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 c00889a:	68fb      	ldr	r3, [r7, #12]
 c00889c:	1c5a      	adds	r2, r3, #1
 c00889e:	60fa      	str	r2, [r7, #12]
 c0088a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c0088a4:	693a      	ldr	r2, [r7, #16]
 c0088a6:	4413      	add	r3, r2
 c0088a8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 c0088ac:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 c0088ae:	693b      	ldr	r3, [r7, #16]
 c0088b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 c0088b2:	68fb      	ldr	r3, [r7, #12]
 c0088b4:	0a5b      	lsrs	r3, r3, #9
 c0088b6:	4413      	add	r3, r2
 c0088b8:	4619      	mov	r1, r3
 c0088ba:	6938      	ldr	r0, [r7, #16]
 c0088bc:	f7ff fefe 	bl	c0086bc <move_window>
 c0088c0:	4603      	mov	r3, r0
 c0088c2:	2b00      	cmp	r3, #0
 c0088c4:	d153      	bne.n	c00896e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 c0088c6:	68fb      	ldr	r3, [r7, #12]
 c0088c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c0088cc:	693a      	ldr	r2, [r7, #16]
 c0088ce:	4413      	add	r3, r2
 c0088d0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 c0088d4:	021b      	lsls	r3, r3, #8
 c0088d6:	461a      	mov	r2, r3
 c0088d8:	68bb      	ldr	r3, [r7, #8]
 c0088da:	4313      	orrs	r3, r2
 c0088dc:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 c0088de:	683b      	ldr	r3, [r7, #0]
 c0088e0:	f003 0301 	and.w	r3, r3, #1
 c0088e4:	2b00      	cmp	r3, #0
 c0088e6:	d002      	beq.n	c0088ee <get_fat+0xbc>
 c0088e8:	68bb      	ldr	r3, [r7, #8]
 c0088ea:	091b      	lsrs	r3, r3, #4
 c0088ec:	e002      	b.n	c0088f4 <get_fat+0xc2>
 c0088ee:	68bb      	ldr	r3, [r7, #8]
 c0088f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 c0088f4:	617b      	str	r3, [r7, #20]
			break;
 c0088f6:	e03f      	b.n	c008978 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 c0088f8:	693b      	ldr	r3, [r7, #16]
 c0088fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 c0088fc:	683b      	ldr	r3, [r7, #0]
 c0088fe:	0a1b      	lsrs	r3, r3, #8
 c008900:	4413      	add	r3, r2
 c008902:	4619      	mov	r1, r3
 c008904:	6938      	ldr	r0, [r7, #16]
 c008906:	f7ff fed9 	bl	c0086bc <move_window>
 c00890a:	4603      	mov	r3, r0
 c00890c:	2b00      	cmp	r3, #0
 c00890e:	d130      	bne.n	c008972 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 c008910:	693b      	ldr	r3, [r7, #16]
 c008912:	f103 0234 	add.w	r2, r3, #52	; 0x34
 c008916:	683b      	ldr	r3, [r7, #0]
 c008918:	005b      	lsls	r3, r3, #1
 c00891a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 c00891e:	4413      	add	r3, r2
 c008920:	4618      	mov	r0, r3
 c008922:	f7ff fc1b 	bl	c00815c <ld_word>
 c008926:	4603      	mov	r3, r0
 c008928:	617b      	str	r3, [r7, #20]
			break;
 c00892a:	e025      	b.n	c008978 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 c00892c:	693b      	ldr	r3, [r7, #16]
 c00892e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 c008930:	683b      	ldr	r3, [r7, #0]
 c008932:	09db      	lsrs	r3, r3, #7
 c008934:	4413      	add	r3, r2
 c008936:	4619      	mov	r1, r3
 c008938:	6938      	ldr	r0, [r7, #16]
 c00893a:	f7ff febf 	bl	c0086bc <move_window>
 c00893e:	4603      	mov	r3, r0
 c008940:	2b00      	cmp	r3, #0
 c008942:	d118      	bne.n	c008976 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 c008944:	693b      	ldr	r3, [r7, #16]
 c008946:	f103 0234 	add.w	r2, r3, #52	; 0x34
 c00894a:	683b      	ldr	r3, [r7, #0]
 c00894c:	009b      	lsls	r3, r3, #2
 c00894e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 c008952:	4413      	add	r3, r2
 c008954:	4618      	mov	r0, r3
 c008956:	f7ff fc19 	bl	c00818c <ld_dword>
 c00895a:	4603      	mov	r3, r0
 c00895c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 c008960:	617b      	str	r3, [r7, #20]
			break;
 c008962:	e009      	b.n	c008978 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 c008964:	2301      	movs	r3, #1
 c008966:	617b      	str	r3, [r7, #20]
 c008968:	e006      	b.n	c008978 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 c00896a:	bf00      	nop
 c00896c:	e004      	b.n	c008978 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 c00896e:	bf00      	nop
 c008970:	e002      	b.n	c008978 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 c008972:	bf00      	nop
 c008974:	e000      	b.n	c008978 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 c008976:	bf00      	nop
		}
	}

	return val;
 c008978:	697b      	ldr	r3, [r7, #20]
}
 c00897a:	4618      	mov	r0, r3
 c00897c:	3718      	adds	r7, #24
 c00897e:	46bd      	mov	sp, r7
 c008980:	bd80      	pop	{r7, pc}

0c008982 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 c008982:	b590      	push	{r4, r7, lr}
 c008984:	b089      	sub	sp, #36	; 0x24
 c008986:	af00      	add	r7, sp, #0
 c008988:	60f8      	str	r0, [r7, #12]
 c00898a:	60b9      	str	r1, [r7, #8]
 c00898c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 c00898e:	2302      	movs	r3, #2
 c008990:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 c008992:	68bb      	ldr	r3, [r7, #8]
 c008994:	2b01      	cmp	r3, #1
 c008996:	f240 80d2 	bls.w	c008b3e <put_fat+0x1bc>
 c00899a:	68fb      	ldr	r3, [r7, #12]
 c00899c:	699b      	ldr	r3, [r3, #24]
 c00899e:	68ba      	ldr	r2, [r7, #8]
 c0089a0:	429a      	cmp	r2, r3
 c0089a2:	f080 80cc 	bcs.w	c008b3e <put_fat+0x1bc>
		switch (fs->fs_type) {
 c0089a6:	68fb      	ldr	r3, [r7, #12]
 c0089a8:	781b      	ldrb	r3, [r3, #0]
 c0089aa:	2b03      	cmp	r3, #3
 c0089ac:	f000 8096 	beq.w	c008adc <put_fat+0x15a>
 c0089b0:	2b03      	cmp	r3, #3
 c0089b2:	f300 80cd 	bgt.w	c008b50 <put_fat+0x1ce>
 c0089b6:	2b01      	cmp	r3, #1
 c0089b8:	d002      	beq.n	c0089c0 <put_fat+0x3e>
 c0089ba:	2b02      	cmp	r3, #2
 c0089bc:	d06e      	beq.n	c008a9c <put_fat+0x11a>
 c0089be:	e0c7      	b.n	c008b50 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 c0089c0:	68bb      	ldr	r3, [r7, #8]
 c0089c2:	61bb      	str	r3, [r7, #24]
 c0089c4:	69bb      	ldr	r3, [r7, #24]
 c0089c6:	085b      	lsrs	r3, r3, #1
 c0089c8:	69ba      	ldr	r2, [r7, #24]
 c0089ca:	4413      	add	r3, r2
 c0089cc:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 c0089ce:	68fb      	ldr	r3, [r7, #12]
 c0089d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 c0089d2:	69bb      	ldr	r3, [r7, #24]
 c0089d4:	0a5b      	lsrs	r3, r3, #9
 c0089d6:	4413      	add	r3, r2
 c0089d8:	4619      	mov	r1, r3
 c0089da:	68f8      	ldr	r0, [r7, #12]
 c0089dc:	f7ff fe6e 	bl	c0086bc <move_window>
 c0089e0:	4603      	mov	r3, r0
 c0089e2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 c0089e4:	7ffb      	ldrb	r3, [r7, #31]
 c0089e6:	2b00      	cmp	r3, #0
 c0089e8:	f040 80ab 	bne.w	c008b42 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 c0089ec:	68fb      	ldr	r3, [r7, #12]
 c0089ee:	f103 0234 	add.w	r2, r3, #52	; 0x34
 c0089f2:	69bb      	ldr	r3, [r7, #24]
 c0089f4:	1c59      	adds	r1, r3, #1
 c0089f6:	61b9      	str	r1, [r7, #24]
 c0089f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c0089fc:	4413      	add	r3, r2
 c0089fe:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 c008a00:	68bb      	ldr	r3, [r7, #8]
 c008a02:	f003 0301 	and.w	r3, r3, #1
 c008a06:	2b00      	cmp	r3, #0
 c008a08:	d00d      	beq.n	c008a26 <put_fat+0xa4>
 c008a0a:	697b      	ldr	r3, [r7, #20]
 c008a0c:	781b      	ldrb	r3, [r3, #0]
 c008a0e:	b25b      	sxtb	r3, r3
 c008a10:	f003 030f 	and.w	r3, r3, #15
 c008a14:	b25a      	sxtb	r2, r3
 c008a16:	687b      	ldr	r3, [r7, #4]
 c008a18:	b2db      	uxtb	r3, r3
 c008a1a:	011b      	lsls	r3, r3, #4
 c008a1c:	b25b      	sxtb	r3, r3
 c008a1e:	4313      	orrs	r3, r2
 c008a20:	b25b      	sxtb	r3, r3
 c008a22:	b2db      	uxtb	r3, r3
 c008a24:	e001      	b.n	c008a2a <put_fat+0xa8>
 c008a26:	687b      	ldr	r3, [r7, #4]
 c008a28:	b2db      	uxtb	r3, r3
 c008a2a:	697a      	ldr	r2, [r7, #20]
 c008a2c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 c008a2e:	68fb      	ldr	r3, [r7, #12]
 c008a30:	2201      	movs	r2, #1
 c008a32:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 c008a34:	68fb      	ldr	r3, [r7, #12]
 c008a36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 c008a38:	69bb      	ldr	r3, [r7, #24]
 c008a3a:	0a5b      	lsrs	r3, r3, #9
 c008a3c:	4413      	add	r3, r2
 c008a3e:	4619      	mov	r1, r3
 c008a40:	68f8      	ldr	r0, [r7, #12]
 c008a42:	f7ff fe3b 	bl	c0086bc <move_window>
 c008a46:	4603      	mov	r3, r0
 c008a48:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 c008a4a:	7ffb      	ldrb	r3, [r7, #31]
 c008a4c:	2b00      	cmp	r3, #0
 c008a4e:	d17a      	bne.n	c008b46 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 c008a50:	68fb      	ldr	r3, [r7, #12]
 c008a52:	f103 0234 	add.w	r2, r3, #52	; 0x34
 c008a56:	69bb      	ldr	r3, [r7, #24]
 c008a58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c008a5c:	4413      	add	r3, r2
 c008a5e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 c008a60:	68bb      	ldr	r3, [r7, #8]
 c008a62:	f003 0301 	and.w	r3, r3, #1
 c008a66:	2b00      	cmp	r3, #0
 c008a68:	d003      	beq.n	c008a72 <put_fat+0xf0>
 c008a6a:	687b      	ldr	r3, [r7, #4]
 c008a6c:	091b      	lsrs	r3, r3, #4
 c008a6e:	b2db      	uxtb	r3, r3
 c008a70:	e00e      	b.n	c008a90 <put_fat+0x10e>
 c008a72:	697b      	ldr	r3, [r7, #20]
 c008a74:	781b      	ldrb	r3, [r3, #0]
 c008a76:	b25b      	sxtb	r3, r3
 c008a78:	f023 030f 	bic.w	r3, r3, #15
 c008a7c:	b25a      	sxtb	r2, r3
 c008a7e:	687b      	ldr	r3, [r7, #4]
 c008a80:	0a1b      	lsrs	r3, r3, #8
 c008a82:	b25b      	sxtb	r3, r3
 c008a84:	f003 030f 	and.w	r3, r3, #15
 c008a88:	b25b      	sxtb	r3, r3
 c008a8a:	4313      	orrs	r3, r2
 c008a8c:	b25b      	sxtb	r3, r3
 c008a8e:	b2db      	uxtb	r3, r3
 c008a90:	697a      	ldr	r2, [r7, #20]
 c008a92:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 c008a94:	68fb      	ldr	r3, [r7, #12]
 c008a96:	2201      	movs	r2, #1
 c008a98:	70da      	strb	r2, [r3, #3]
			break;
 c008a9a:	e059      	b.n	c008b50 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 c008a9c:	68fb      	ldr	r3, [r7, #12]
 c008a9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 c008aa0:	68bb      	ldr	r3, [r7, #8]
 c008aa2:	0a1b      	lsrs	r3, r3, #8
 c008aa4:	4413      	add	r3, r2
 c008aa6:	4619      	mov	r1, r3
 c008aa8:	68f8      	ldr	r0, [r7, #12]
 c008aaa:	f7ff fe07 	bl	c0086bc <move_window>
 c008aae:	4603      	mov	r3, r0
 c008ab0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 c008ab2:	7ffb      	ldrb	r3, [r7, #31]
 c008ab4:	2b00      	cmp	r3, #0
 c008ab6:	d148      	bne.n	c008b4a <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 c008ab8:	68fb      	ldr	r3, [r7, #12]
 c008aba:	f103 0234 	add.w	r2, r3, #52	; 0x34
 c008abe:	68bb      	ldr	r3, [r7, #8]
 c008ac0:	005b      	lsls	r3, r3, #1
 c008ac2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 c008ac6:	4413      	add	r3, r2
 c008ac8:	687a      	ldr	r2, [r7, #4]
 c008aca:	b292      	uxth	r2, r2
 c008acc:	4611      	mov	r1, r2
 c008ace:	4618      	mov	r0, r3
 c008ad0:	f7ff fb7f 	bl	c0081d2 <st_word>
			fs->wflag = 1;
 c008ad4:	68fb      	ldr	r3, [r7, #12]
 c008ad6:	2201      	movs	r2, #1
 c008ad8:	70da      	strb	r2, [r3, #3]
			break;
 c008ada:	e039      	b.n	c008b50 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 c008adc:	68fb      	ldr	r3, [r7, #12]
 c008ade:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 c008ae0:	68bb      	ldr	r3, [r7, #8]
 c008ae2:	09db      	lsrs	r3, r3, #7
 c008ae4:	4413      	add	r3, r2
 c008ae6:	4619      	mov	r1, r3
 c008ae8:	68f8      	ldr	r0, [r7, #12]
 c008aea:	f7ff fde7 	bl	c0086bc <move_window>
 c008aee:	4603      	mov	r3, r0
 c008af0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 c008af2:	7ffb      	ldrb	r3, [r7, #31]
 c008af4:	2b00      	cmp	r3, #0
 c008af6:	d12a      	bne.n	c008b4e <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 c008af8:	687b      	ldr	r3, [r7, #4]
 c008afa:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 c008afe:	68fb      	ldr	r3, [r7, #12]
 c008b00:	f103 0234 	add.w	r2, r3, #52	; 0x34
 c008b04:	68bb      	ldr	r3, [r7, #8]
 c008b06:	009b      	lsls	r3, r3, #2
 c008b08:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 c008b0c:	4413      	add	r3, r2
 c008b0e:	4618      	mov	r0, r3
 c008b10:	f7ff fb3c 	bl	c00818c <ld_dword>
 c008b14:	4603      	mov	r3, r0
 c008b16:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 c008b1a:	4323      	orrs	r3, r4
 c008b1c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 c008b1e:	68fb      	ldr	r3, [r7, #12]
 c008b20:	f103 0234 	add.w	r2, r3, #52	; 0x34
 c008b24:	68bb      	ldr	r3, [r7, #8]
 c008b26:	009b      	lsls	r3, r3, #2
 c008b28:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 c008b2c:	4413      	add	r3, r2
 c008b2e:	6879      	ldr	r1, [r7, #4]
 c008b30:	4618      	mov	r0, r3
 c008b32:	f7ff fb69 	bl	c008208 <st_dword>
			fs->wflag = 1;
 c008b36:	68fb      	ldr	r3, [r7, #12]
 c008b38:	2201      	movs	r2, #1
 c008b3a:	70da      	strb	r2, [r3, #3]
			break;
 c008b3c:	e008      	b.n	c008b50 <put_fat+0x1ce>
		}
	}
 c008b3e:	bf00      	nop
 c008b40:	e006      	b.n	c008b50 <put_fat+0x1ce>
			if (res != FR_OK) break;
 c008b42:	bf00      	nop
 c008b44:	e004      	b.n	c008b50 <put_fat+0x1ce>
			if (res != FR_OK) break;
 c008b46:	bf00      	nop
 c008b48:	e002      	b.n	c008b50 <put_fat+0x1ce>
			if (res != FR_OK) break;
 c008b4a:	bf00      	nop
 c008b4c:	e000      	b.n	c008b50 <put_fat+0x1ce>
			if (res != FR_OK) break;
 c008b4e:	bf00      	nop
	return res;
 c008b50:	7ffb      	ldrb	r3, [r7, #31]
}
 c008b52:	4618      	mov	r0, r3
 c008b54:	3724      	adds	r7, #36	; 0x24
 c008b56:	46bd      	mov	sp, r7
 c008b58:	bd90      	pop	{r4, r7, pc}

0c008b5a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 c008b5a:	b580      	push	{r7, lr}
 c008b5c:	b088      	sub	sp, #32
 c008b5e:	af00      	add	r7, sp, #0
 c008b60:	60f8      	str	r0, [r7, #12]
 c008b62:	60b9      	str	r1, [r7, #8]
 c008b64:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 c008b66:	2300      	movs	r3, #0
 c008b68:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 c008b6a:	68fb      	ldr	r3, [r7, #12]
 c008b6c:	681b      	ldr	r3, [r3, #0]
 c008b6e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 c008b70:	68bb      	ldr	r3, [r7, #8]
 c008b72:	2b01      	cmp	r3, #1
 c008b74:	d904      	bls.n	c008b80 <remove_chain+0x26>
 c008b76:	69bb      	ldr	r3, [r7, #24]
 c008b78:	699b      	ldr	r3, [r3, #24]
 c008b7a:	68ba      	ldr	r2, [r7, #8]
 c008b7c:	429a      	cmp	r2, r3
 c008b7e:	d301      	bcc.n	c008b84 <remove_chain+0x2a>
 c008b80:	2302      	movs	r3, #2
 c008b82:	e04b      	b.n	c008c1c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 c008b84:	687b      	ldr	r3, [r7, #4]
 c008b86:	2b00      	cmp	r3, #0
 c008b88:	d00c      	beq.n	c008ba4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 c008b8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 c008b8e:	6879      	ldr	r1, [r7, #4]
 c008b90:	69b8      	ldr	r0, [r7, #24]
 c008b92:	f7ff fef6 	bl	c008982 <put_fat>
 c008b96:	4603      	mov	r3, r0
 c008b98:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 c008b9a:	7ffb      	ldrb	r3, [r7, #31]
 c008b9c:	2b00      	cmp	r3, #0
 c008b9e:	d001      	beq.n	c008ba4 <remove_chain+0x4a>
 c008ba0:	7ffb      	ldrb	r3, [r7, #31]
 c008ba2:	e03b      	b.n	c008c1c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 c008ba4:	68b9      	ldr	r1, [r7, #8]
 c008ba6:	68f8      	ldr	r0, [r7, #12]
 c008ba8:	f7ff fe43 	bl	c008832 <get_fat>
 c008bac:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 c008bae:	697b      	ldr	r3, [r7, #20]
 c008bb0:	2b00      	cmp	r3, #0
 c008bb2:	d031      	beq.n	c008c18 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 c008bb4:	697b      	ldr	r3, [r7, #20]
 c008bb6:	2b01      	cmp	r3, #1
 c008bb8:	d101      	bne.n	c008bbe <remove_chain+0x64>
 c008bba:	2302      	movs	r3, #2
 c008bbc:	e02e      	b.n	c008c1c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 c008bbe:	697b      	ldr	r3, [r7, #20]
 c008bc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 c008bc4:	d101      	bne.n	c008bca <remove_chain+0x70>
 c008bc6:	2301      	movs	r3, #1
 c008bc8:	e028      	b.n	c008c1c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 c008bca:	2200      	movs	r2, #0
 c008bcc:	68b9      	ldr	r1, [r7, #8]
 c008bce:	69b8      	ldr	r0, [r7, #24]
 c008bd0:	f7ff fed7 	bl	c008982 <put_fat>
 c008bd4:	4603      	mov	r3, r0
 c008bd6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 c008bd8:	7ffb      	ldrb	r3, [r7, #31]
 c008bda:	2b00      	cmp	r3, #0
 c008bdc:	d001      	beq.n	c008be2 <remove_chain+0x88>
 c008bde:	7ffb      	ldrb	r3, [r7, #31]
 c008be0:	e01c      	b.n	c008c1c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 c008be2:	69bb      	ldr	r3, [r7, #24]
 c008be4:	695a      	ldr	r2, [r3, #20]
 c008be6:	69bb      	ldr	r3, [r7, #24]
 c008be8:	699b      	ldr	r3, [r3, #24]
 c008bea:	3b02      	subs	r3, #2
 c008bec:	429a      	cmp	r2, r3
 c008bee:	d20b      	bcs.n	c008c08 <remove_chain+0xae>
			fs->free_clst++;
 c008bf0:	69bb      	ldr	r3, [r7, #24]
 c008bf2:	695b      	ldr	r3, [r3, #20]
 c008bf4:	1c5a      	adds	r2, r3, #1
 c008bf6:	69bb      	ldr	r3, [r7, #24]
 c008bf8:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 c008bfa:	69bb      	ldr	r3, [r7, #24]
 c008bfc:	791b      	ldrb	r3, [r3, #4]
 c008bfe:	f043 0301 	orr.w	r3, r3, #1
 c008c02:	b2da      	uxtb	r2, r3
 c008c04:	69bb      	ldr	r3, [r7, #24]
 c008c06:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 c008c08:	697b      	ldr	r3, [r7, #20]
 c008c0a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 c008c0c:	69bb      	ldr	r3, [r7, #24]
 c008c0e:	699b      	ldr	r3, [r3, #24]
 c008c10:	68ba      	ldr	r2, [r7, #8]
 c008c12:	429a      	cmp	r2, r3
 c008c14:	d3c6      	bcc.n	c008ba4 <remove_chain+0x4a>
 c008c16:	e000      	b.n	c008c1a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 c008c18:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 c008c1a:	2300      	movs	r3, #0
}
 c008c1c:	4618      	mov	r0, r3
 c008c1e:	3720      	adds	r7, #32
 c008c20:	46bd      	mov	sp, r7
 c008c22:	bd80      	pop	{r7, pc}

0c008c24 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 c008c24:	b580      	push	{r7, lr}
 c008c26:	b088      	sub	sp, #32
 c008c28:	af00      	add	r7, sp, #0
 c008c2a:	6078      	str	r0, [r7, #4]
 c008c2c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 c008c2e:	687b      	ldr	r3, [r7, #4]
 c008c30:	681b      	ldr	r3, [r3, #0]
 c008c32:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 c008c34:	683b      	ldr	r3, [r7, #0]
 c008c36:	2b00      	cmp	r3, #0
 c008c38:	d10d      	bne.n	c008c56 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 c008c3a:	693b      	ldr	r3, [r7, #16]
 c008c3c:	691b      	ldr	r3, [r3, #16]
 c008c3e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 c008c40:	69bb      	ldr	r3, [r7, #24]
 c008c42:	2b00      	cmp	r3, #0
 c008c44:	d004      	beq.n	c008c50 <create_chain+0x2c>
 c008c46:	693b      	ldr	r3, [r7, #16]
 c008c48:	699b      	ldr	r3, [r3, #24]
 c008c4a:	69ba      	ldr	r2, [r7, #24]
 c008c4c:	429a      	cmp	r2, r3
 c008c4e:	d31b      	bcc.n	c008c88 <create_chain+0x64>
 c008c50:	2301      	movs	r3, #1
 c008c52:	61bb      	str	r3, [r7, #24]
 c008c54:	e018      	b.n	c008c88 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 c008c56:	6839      	ldr	r1, [r7, #0]
 c008c58:	6878      	ldr	r0, [r7, #4]
 c008c5a:	f7ff fdea 	bl	c008832 <get_fat>
 c008c5e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 c008c60:	68fb      	ldr	r3, [r7, #12]
 c008c62:	2b01      	cmp	r3, #1
 c008c64:	d801      	bhi.n	c008c6a <create_chain+0x46>
 c008c66:	2301      	movs	r3, #1
 c008c68:	e070      	b.n	c008d4c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 c008c6a:	68fb      	ldr	r3, [r7, #12]
 c008c6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 c008c70:	d101      	bne.n	c008c76 <create_chain+0x52>
 c008c72:	68fb      	ldr	r3, [r7, #12]
 c008c74:	e06a      	b.n	c008d4c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 c008c76:	693b      	ldr	r3, [r7, #16]
 c008c78:	699b      	ldr	r3, [r3, #24]
 c008c7a:	68fa      	ldr	r2, [r7, #12]
 c008c7c:	429a      	cmp	r2, r3
 c008c7e:	d201      	bcs.n	c008c84 <create_chain+0x60>
 c008c80:	68fb      	ldr	r3, [r7, #12]
 c008c82:	e063      	b.n	c008d4c <create_chain+0x128>
		scl = clst;
 c008c84:	683b      	ldr	r3, [r7, #0]
 c008c86:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 c008c88:	69bb      	ldr	r3, [r7, #24]
 c008c8a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 c008c8c:	69fb      	ldr	r3, [r7, #28]
 c008c8e:	3301      	adds	r3, #1
 c008c90:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 c008c92:	693b      	ldr	r3, [r7, #16]
 c008c94:	699b      	ldr	r3, [r3, #24]
 c008c96:	69fa      	ldr	r2, [r7, #28]
 c008c98:	429a      	cmp	r2, r3
 c008c9a:	d307      	bcc.n	c008cac <create_chain+0x88>
				ncl = 2;
 c008c9c:	2302      	movs	r3, #2
 c008c9e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 c008ca0:	69fa      	ldr	r2, [r7, #28]
 c008ca2:	69bb      	ldr	r3, [r7, #24]
 c008ca4:	429a      	cmp	r2, r3
 c008ca6:	d901      	bls.n	c008cac <create_chain+0x88>
 c008ca8:	2300      	movs	r3, #0
 c008caa:	e04f      	b.n	c008d4c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 c008cac:	69f9      	ldr	r1, [r7, #28]
 c008cae:	6878      	ldr	r0, [r7, #4]
 c008cb0:	f7ff fdbf 	bl	c008832 <get_fat>
 c008cb4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 c008cb6:	68fb      	ldr	r3, [r7, #12]
 c008cb8:	2b00      	cmp	r3, #0
 c008cba:	d00e      	beq.n	c008cda <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 c008cbc:	68fb      	ldr	r3, [r7, #12]
 c008cbe:	2b01      	cmp	r3, #1
 c008cc0:	d003      	beq.n	c008cca <create_chain+0xa6>
 c008cc2:	68fb      	ldr	r3, [r7, #12]
 c008cc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 c008cc8:	d101      	bne.n	c008cce <create_chain+0xaa>
 c008cca:	68fb      	ldr	r3, [r7, #12]
 c008ccc:	e03e      	b.n	c008d4c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 c008cce:	69fa      	ldr	r2, [r7, #28]
 c008cd0:	69bb      	ldr	r3, [r7, #24]
 c008cd2:	429a      	cmp	r2, r3
 c008cd4:	d1da      	bne.n	c008c8c <create_chain+0x68>
 c008cd6:	2300      	movs	r3, #0
 c008cd8:	e038      	b.n	c008d4c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 c008cda:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 c008cdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 c008ce0:	69f9      	ldr	r1, [r7, #28]
 c008ce2:	6938      	ldr	r0, [r7, #16]
 c008ce4:	f7ff fe4d 	bl	c008982 <put_fat>
 c008ce8:	4603      	mov	r3, r0
 c008cea:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 c008cec:	7dfb      	ldrb	r3, [r7, #23]
 c008cee:	2b00      	cmp	r3, #0
 c008cf0:	d109      	bne.n	c008d06 <create_chain+0xe2>
 c008cf2:	683b      	ldr	r3, [r7, #0]
 c008cf4:	2b00      	cmp	r3, #0
 c008cf6:	d006      	beq.n	c008d06 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 c008cf8:	69fa      	ldr	r2, [r7, #28]
 c008cfa:	6839      	ldr	r1, [r7, #0]
 c008cfc:	6938      	ldr	r0, [r7, #16]
 c008cfe:	f7ff fe40 	bl	c008982 <put_fat>
 c008d02:	4603      	mov	r3, r0
 c008d04:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 c008d06:	7dfb      	ldrb	r3, [r7, #23]
 c008d08:	2b00      	cmp	r3, #0
 c008d0a:	d116      	bne.n	c008d3a <create_chain+0x116>
		fs->last_clst = ncl;
 c008d0c:	693b      	ldr	r3, [r7, #16]
 c008d0e:	69fa      	ldr	r2, [r7, #28]
 c008d10:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 c008d12:	693b      	ldr	r3, [r7, #16]
 c008d14:	695a      	ldr	r2, [r3, #20]
 c008d16:	693b      	ldr	r3, [r7, #16]
 c008d18:	699b      	ldr	r3, [r3, #24]
 c008d1a:	3b02      	subs	r3, #2
 c008d1c:	429a      	cmp	r2, r3
 c008d1e:	d804      	bhi.n	c008d2a <create_chain+0x106>
 c008d20:	693b      	ldr	r3, [r7, #16]
 c008d22:	695b      	ldr	r3, [r3, #20]
 c008d24:	1e5a      	subs	r2, r3, #1
 c008d26:	693b      	ldr	r3, [r7, #16]
 c008d28:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 c008d2a:	693b      	ldr	r3, [r7, #16]
 c008d2c:	791b      	ldrb	r3, [r3, #4]
 c008d2e:	f043 0301 	orr.w	r3, r3, #1
 c008d32:	b2da      	uxtb	r2, r3
 c008d34:	693b      	ldr	r3, [r7, #16]
 c008d36:	711a      	strb	r2, [r3, #4]
 c008d38:	e007      	b.n	c008d4a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 c008d3a:	7dfb      	ldrb	r3, [r7, #23]
 c008d3c:	2b01      	cmp	r3, #1
 c008d3e:	d102      	bne.n	c008d46 <create_chain+0x122>
 c008d40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c008d44:	e000      	b.n	c008d48 <create_chain+0x124>
 c008d46:	2301      	movs	r3, #1
 c008d48:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 c008d4a:	69fb      	ldr	r3, [r7, #28]
}
 c008d4c:	4618      	mov	r0, r3
 c008d4e:	3720      	adds	r7, #32
 c008d50:	46bd      	mov	sp, r7
 c008d52:	bd80      	pop	{r7, pc}

0c008d54 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 c008d54:	b480      	push	{r7}
 c008d56:	b087      	sub	sp, #28
 c008d58:	af00      	add	r7, sp, #0
 c008d5a:	6078      	str	r0, [r7, #4]
 c008d5c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 c008d5e:	687b      	ldr	r3, [r7, #4]
 c008d60:	681b      	ldr	r3, [r3, #0]
 c008d62:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 c008d64:	687b      	ldr	r3, [r7, #4]
 c008d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c008d68:	3304      	adds	r3, #4
 c008d6a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 c008d6c:	683b      	ldr	r3, [r7, #0]
 c008d6e:	0a5b      	lsrs	r3, r3, #9
 c008d70:	68fa      	ldr	r2, [r7, #12]
 c008d72:	8952      	ldrh	r2, [r2, #10]
 c008d74:	fbb3 f3f2 	udiv	r3, r3, r2
 c008d78:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 c008d7a:	693b      	ldr	r3, [r7, #16]
 c008d7c:	1d1a      	adds	r2, r3, #4
 c008d7e:	613a      	str	r2, [r7, #16]
 c008d80:	681b      	ldr	r3, [r3, #0]
 c008d82:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 c008d84:	68bb      	ldr	r3, [r7, #8]
 c008d86:	2b00      	cmp	r3, #0
 c008d88:	d101      	bne.n	c008d8e <clmt_clust+0x3a>
 c008d8a:	2300      	movs	r3, #0
 c008d8c:	e010      	b.n	c008db0 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 c008d8e:	697a      	ldr	r2, [r7, #20]
 c008d90:	68bb      	ldr	r3, [r7, #8]
 c008d92:	429a      	cmp	r2, r3
 c008d94:	d307      	bcc.n	c008da6 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 c008d96:	697a      	ldr	r2, [r7, #20]
 c008d98:	68bb      	ldr	r3, [r7, #8]
 c008d9a:	1ad3      	subs	r3, r2, r3
 c008d9c:	617b      	str	r3, [r7, #20]
 c008d9e:	693b      	ldr	r3, [r7, #16]
 c008da0:	3304      	adds	r3, #4
 c008da2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 c008da4:	e7e9      	b.n	c008d7a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 c008da6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 c008da8:	693b      	ldr	r3, [r7, #16]
 c008daa:	681a      	ldr	r2, [r3, #0]
 c008dac:	697b      	ldr	r3, [r7, #20]
 c008dae:	4413      	add	r3, r2
}
 c008db0:	4618      	mov	r0, r3
 c008db2:	371c      	adds	r7, #28
 c008db4:	46bd      	mov	sp, r7
 c008db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 c008dba:	4770      	bx	lr

0c008dbc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 c008dbc:	b580      	push	{r7, lr}
 c008dbe:	b086      	sub	sp, #24
 c008dc0:	af00      	add	r7, sp, #0
 c008dc2:	6078      	str	r0, [r7, #4]
 c008dc4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 c008dc6:	687b      	ldr	r3, [r7, #4]
 c008dc8:	681b      	ldr	r3, [r3, #0]
 c008dca:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 c008dcc:	683b      	ldr	r3, [r7, #0]
 c008dce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 c008dd2:	d204      	bcs.n	c008dde <dir_sdi+0x22>
 c008dd4:	683b      	ldr	r3, [r7, #0]
 c008dd6:	f003 031f 	and.w	r3, r3, #31
 c008dda:	2b00      	cmp	r3, #0
 c008ddc:	d001      	beq.n	c008de2 <dir_sdi+0x26>
		return FR_INT_ERR;
 c008dde:	2302      	movs	r3, #2
 c008de0:	e063      	b.n	c008eaa <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 c008de2:	687b      	ldr	r3, [r7, #4]
 c008de4:	683a      	ldr	r2, [r7, #0]
 c008de6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 c008de8:	687b      	ldr	r3, [r7, #4]
 c008dea:	689b      	ldr	r3, [r3, #8]
 c008dec:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 c008dee:	697b      	ldr	r3, [r7, #20]
 c008df0:	2b00      	cmp	r3, #0
 c008df2:	d106      	bne.n	c008e02 <dir_sdi+0x46>
 c008df4:	693b      	ldr	r3, [r7, #16]
 c008df6:	781b      	ldrb	r3, [r3, #0]
 c008df8:	2b02      	cmp	r3, #2
 c008dfa:	d902      	bls.n	c008e02 <dir_sdi+0x46>
		clst = fs->dirbase;
 c008dfc:	693b      	ldr	r3, [r7, #16]
 c008dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c008e00:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 c008e02:	697b      	ldr	r3, [r7, #20]
 c008e04:	2b00      	cmp	r3, #0
 c008e06:	d10c      	bne.n	c008e22 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 c008e08:	683b      	ldr	r3, [r7, #0]
 c008e0a:	095b      	lsrs	r3, r3, #5
 c008e0c:	693a      	ldr	r2, [r7, #16]
 c008e0e:	8912      	ldrh	r2, [r2, #8]
 c008e10:	4293      	cmp	r3, r2
 c008e12:	d301      	bcc.n	c008e18 <dir_sdi+0x5c>
 c008e14:	2302      	movs	r3, #2
 c008e16:	e048      	b.n	c008eaa <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 c008e18:	693b      	ldr	r3, [r7, #16]
 c008e1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 c008e1c:	687b      	ldr	r3, [r7, #4]
 c008e1e:	61da      	str	r2, [r3, #28]
 c008e20:	e029      	b.n	c008e76 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 c008e22:	693b      	ldr	r3, [r7, #16]
 c008e24:	895b      	ldrh	r3, [r3, #10]
 c008e26:	025b      	lsls	r3, r3, #9
 c008e28:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 c008e2a:	e019      	b.n	c008e60 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 c008e2c:	687b      	ldr	r3, [r7, #4]
 c008e2e:	6979      	ldr	r1, [r7, #20]
 c008e30:	4618      	mov	r0, r3
 c008e32:	f7ff fcfe 	bl	c008832 <get_fat>
 c008e36:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 c008e38:	697b      	ldr	r3, [r7, #20]
 c008e3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 c008e3e:	d101      	bne.n	c008e44 <dir_sdi+0x88>
 c008e40:	2301      	movs	r3, #1
 c008e42:	e032      	b.n	c008eaa <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 c008e44:	697b      	ldr	r3, [r7, #20]
 c008e46:	2b01      	cmp	r3, #1
 c008e48:	d904      	bls.n	c008e54 <dir_sdi+0x98>
 c008e4a:	693b      	ldr	r3, [r7, #16]
 c008e4c:	699b      	ldr	r3, [r3, #24]
 c008e4e:	697a      	ldr	r2, [r7, #20]
 c008e50:	429a      	cmp	r2, r3
 c008e52:	d301      	bcc.n	c008e58 <dir_sdi+0x9c>
 c008e54:	2302      	movs	r3, #2
 c008e56:	e028      	b.n	c008eaa <dir_sdi+0xee>
			ofs -= csz;
 c008e58:	683a      	ldr	r2, [r7, #0]
 c008e5a:	68fb      	ldr	r3, [r7, #12]
 c008e5c:	1ad3      	subs	r3, r2, r3
 c008e5e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 c008e60:	683a      	ldr	r2, [r7, #0]
 c008e62:	68fb      	ldr	r3, [r7, #12]
 c008e64:	429a      	cmp	r2, r3
 c008e66:	d2e1      	bcs.n	c008e2c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 c008e68:	6979      	ldr	r1, [r7, #20]
 c008e6a:	6938      	ldr	r0, [r7, #16]
 c008e6c:	f7ff fcc2 	bl	c0087f4 <clust2sect>
 c008e70:	4602      	mov	r2, r0
 c008e72:	687b      	ldr	r3, [r7, #4]
 c008e74:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 c008e76:	687b      	ldr	r3, [r7, #4]
 c008e78:	697a      	ldr	r2, [r7, #20]
 c008e7a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 c008e7c:	687b      	ldr	r3, [r7, #4]
 c008e7e:	69db      	ldr	r3, [r3, #28]
 c008e80:	2b00      	cmp	r3, #0
 c008e82:	d101      	bne.n	c008e88 <dir_sdi+0xcc>
 c008e84:	2302      	movs	r3, #2
 c008e86:	e010      	b.n	c008eaa <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 c008e88:	687b      	ldr	r3, [r7, #4]
 c008e8a:	69da      	ldr	r2, [r3, #28]
 c008e8c:	683b      	ldr	r3, [r7, #0]
 c008e8e:	0a5b      	lsrs	r3, r3, #9
 c008e90:	441a      	add	r2, r3
 c008e92:	687b      	ldr	r3, [r7, #4]
 c008e94:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 c008e96:	693b      	ldr	r3, [r7, #16]
 c008e98:	f103 0234 	add.w	r2, r3, #52	; 0x34
 c008e9c:	683b      	ldr	r3, [r7, #0]
 c008e9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c008ea2:	441a      	add	r2, r3
 c008ea4:	687b      	ldr	r3, [r7, #4]
 c008ea6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 c008ea8:	2300      	movs	r3, #0
}
 c008eaa:	4618      	mov	r0, r3
 c008eac:	3718      	adds	r7, #24
 c008eae:	46bd      	mov	sp, r7
 c008eb0:	bd80      	pop	{r7, pc}

0c008eb2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 c008eb2:	b580      	push	{r7, lr}
 c008eb4:	b086      	sub	sp, #24
 c008eb6:	af00      	add	r7, sp, #0
 c008eb8:	6078      	str	r0, [r7, #4]
 c008eba:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 c008ebc:	687b      	ldr	r3, [r7, #4]
 c008ebe:	681b      	ldr	r3, [r3, #0]
 c008ec0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 c008ec2:	687b      	ldr	r3, [r7, #4]
 c008ec4:	695b      	ldr	r3, [r3, #20]
 c008ec6:	3320      	adds	r3, #32
 c008ec8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 c008eca:	687b      	ldr	r3, [r7, #4]
 c008ecc:	69db      	ldr	r3, [r3, #28]
 c008ece:	2b00      	cmp	r3, #0
 c008ed0:	d003      	beq.n	c008eda <dir_next+0x28>
 c008ed2:	68bb      	ldr	r3, [r7, #8]
 c008ed4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 c008ed8:	d301      	bcc.n	c008ede <dir_next+0x2c>
 c008eda:	2304      	movs	r3, #4
 c008edc:	e0aa      	b.n	c009034 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 c008ede:	68bb      	ldr	r3, [r7, #8]
 c008ee0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c008ee4:	2b00      	cmp	r3, #0
 c008ee6:	f040 8098 	bne.w	c00901a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 c008eea:	687b      	ldr	r3, [r7, #4]
 c008eec:	69db      	ldr	r3, [r3, #28]
 c008eee:	1c5a      	adds	r2, r3, #1
 c008ef0:	687b      	ldr	r3, [r7, #4]
 c008ef2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 c008ef4:	687b      	ldr	r3, [r7, #4]
 c008ef6:	699b      	ldr	r3, [r3, #24]
 c008ef8:	2b00      	cmp	r3, #0
 c008efa:	d10b      	bne.n	c008f14 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 c008efc:	68bb      	ldr	r3, [r7, #8]
 c008efe:	095b      	lsrs	r3, r3, #5
 c008f00:	68fa      	ldr	r2, [r7, #12]
 c008f02:	8912      	ldrh	r2, [r2, #8]
 c008f04:	4293      	cmp	r3, r2
 c008f06:	f0c0 8088 	bcc.w	c00901a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 c008f0a:	687b      	ldr	r3, [r7, #4]
 c008f0c:	2200      	movs	r2, #0
 c008f0e:	61da      	str	r2, [r3, #28]
 c008f10:	2304      	movs	r3, #4
 c008f12:	e08f      	b.n	c009034 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 c008f14:	68bb      	ldr	r3, [r7, #8]
 c008f16:	0a5b      	lsrs	r3, r3, #9
 c008f18:	68fa      	ldr	r2, [r7, #12]
 c008f1a:	8952      	ldrh	r2, [r2, #10]
 c008f1c:	3a01      	subs	r2, #1
 c008f1e:	4013      	ands	r3, r2
 c008f20:	2b00      	cmp	r3, #0
 c008f22:	d17a      	bne.n	c00901a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 c008f24:	687a      	ldr	r2, [r7, #4]
 c008f26:	687b      	ldr	r3, [r7, #4]
 c008f28:	699b      	ldr	r3, [r3, #24]
 c008f2a:	4619      	mov	r1, r3
 c008f2c:	4610      	mov	r0, r2
 c008f2e:	f7ff fc80 	bl	c008832 <get_fat>
 c008f32:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 c008f34:	697b      	ldr	r3, [r7, #20]
 c008f36:	2b01      	cmp	r3, #1
 c008f38:	d801      	bhi.n	c008f3e <dir_next+0x8c>
 c008f3a:	2302      	movs	r3, #2
 c008f3c:	e07a      	b.n	c009034 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 c008f3e:	697b      	ldr	r3, [r7, #20]
 c008f40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 c008f44:	d101      	bne.n	c008f4a <dir_next+0x98>
 c008f46:	2301      	movs	r3, #1
 c008f48:	e074      	b.n	c009034 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 c008f4a:	68fb      	ldr	r3, [r7, #12]
 c008f4c:	699b      	ldr	r3, [r3, #24]
 c008f4e:	697a      	ldr	r2, [r7, #20]
 c008f50:	429a      	cmp	r2, r3
 c008f52:	d358      	bcc.n	c009006 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 c008f54:	683b      	ldr	r3, [r7, #0]
 c008f56:	2b00      	cmp	r3, #0
 c008f58:	d104      	bne.n	c008f64 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 c008f5a:	687b      	ldr	r3, [r7, #4]
 c008f5c:	2200      	movs	r2, #0
 c008f5e:	61da      	str	r2, [r3, #28]
 c008f60:	2304      	movs	r3, #4
 c008f62:	e067      	b.n	c009034 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 c008f64:	687a      	ldr	r2, [r7, #4]
 c008f66:	687b      	ldr	r3, [r7, #4]
 c008f68:	699b      	ldr	r3, [r3, #24]
 c008f6a:	4619      	mov	r1, r3
 c008f6c:	4610      	mov	r0, r2
 c008f6e:	f7ff fe59 	bl	c008c24 <create_chain>
 c008f72:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 c008f74:	697b      	ldr	r3, [r7, #20]
 c008f76:	2b00      	cmp	r3, #0
 c008f78:	d101      	bne.n	c008f7e <dir_next+0xcc>
 c008f7a:	2307      	movs	r3, #7
 c008f7c:	e05a      	b.n	c009034 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 c008f7e:	697b      	ldr	r3, [r7, #20]
 c008f80:	2b01      	cmp	r3, #1
 c008f82:	d101      	bne.n	c008f88 <dir_next+0xd6>
 c008f84:	2302      	movs	r3, #2
 c008f86:	e055      	b.n	c009034 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 c008f88:	697b      	ldr	r3, [r7, #20]
 c008f8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 c008f8e:	d101      	bne.n	c008f94 <dir_next+0xe2>
 c008f90:	2301      	movs	r3, #1
 c008f92:	e04f      	b.n	c009034 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 c008f94:	68f8      	ldr	r0, [r7, #12]
 c008f96:	f7ff fb4d 	bl	c008634 <sync_window>
 c008f9a:	4603      	mov	r3, r0
 c008f9c:	2b00      	cmp	r3, #0
 c008f9e:	d001      	beq.n	c008fa4 <dir_next+0xf2>
 c008fa0:	2301      	movs	r3, #1
 c008fa2:	e047      	b.n	c009034 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 c008fa4:	68fb      	ldr	r3, [r7, #12]
 c008fa6:	3334      	adds	r3, #52	; 0x34
 c008fa8:	f44f 7200 	mov.w	r2, #512	; 0x200
 c008fac:	2100      	movs	r1, #0
 c008fae:	4618      	mov	r0, r3
 c008fb0:	f7ff f977 	bl	c0082a2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 c008fb4:	2300      	movs	r3, #0
 c008fb6:	613b      	str	r3, [r7, #16]
 c008fb8:	6979      	ldr	r1, [r7, #20]
 c008fba:	68f8      	ldr	r0, [r7, #12]
 c008fbc:	f7ff fc1a 	bl	c0087f4 <clust2sect>
 c008fc0:	4602      	mov	r2, r0
 c008fc2:	68fb      	ldr	r3, [r7, #12]
 c008fc4:	631a      	str	r2, [r3, #48]	; 0x30
 c008fc6:	e012      	b.n	c008fee <dir_next+0x13c>
						fs->wflag = 1;
 c008fc8:	68fb      	ldr	r3, [r7, #12]
 c008fca:	2201      	movs	r2, #1
 c008fcc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 c008fce:	68f8      	ldr	r0, [r7, #12]
 c008fd0:	f7ff fb30 	bl	c008634 <sync_window>
 c008fd4:	4603      	mov	r3, r0
 c008fd6:	2b00      	cmp	r3, #0
 c008fd8:	d001      	beq.n	c008fde <dir_next+0x12c>
 c008fda:	2301      	movs	r3, #1
 c008fdc:	e02a      	b.n	c009034 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 c008fde:	693b      	ldr	r3, [r7, #16]
 c008fe0:	3301      	adds	r3, #1
 c008fe2:	613b      	str	r3, [r7, #16]
 c008fe4:	68fb      	ldr	r3, [r7, #12]
 c008fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c008fe8:	1c5a      	adds	r2, r3, #1
 c008fea:	68fb      	ldr	r3, [r7, #12]
 c008fec:	631a      	str	r2, [r3, #48]	; 0x30
 c008fee:	68fb      	ldr	r3, [r7, #12]
 c008ff0:	895b      	ldrh	r3, [r3, #10]
 c008ff2:	461a      	mov	r2, r3
 c008ff4:	693b      	ldr	r3, [r7, #16]
 c008ff6:	4293      	cmp	r3, r2
 c008ff8:	d3e6      	bcc.n	c008fc8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 c008ffa:	68fb      	ldr	r3, [r7, #12]
 c008ffc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 c008ffe:	693b      	ldr	r3, [r7, #16]
 c009000:	1ad2      	subs	r2, r2, r3
 c009002:	68fb      	ldr	r3, [r7, #12]
 c009004:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 c009006:	687b      	ldr	r3, [r7, #4]
 c009008:	697a      	ldr	r2, [r7, #20]
 c00900a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 c00900c:	6979      	ldr	r1, [r7, #20]
 c00900e:	68f8      	ldr	r0, [r7, #12]
 c009010:	f7ff fbf0 	bl	c0087f4 <clust2sect>
 c009014:	4602      	mov	r2, r0
 c009016:	687b      	ldr	r3, [r7, #4]
 c009018:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 c00901a:	687b      	ldr	r3, [r7, #4]
 c00901c:	68ba      	ldr	r2, [r7, #8]
 c00901e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 c009020:	68fb      	ldr	r3, [r7, #12]
 c009022:	f103 0234 	add.w	r2, r3, #52	; 0x34
 c009026:	68bb      	ldr	r3, [r7, #8]
 c009028:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c00902c:	441a      	add	r2, r3
 c00902e:	687b      	ldr	r3, [r7, #4]
 c009030:	621a      	str	r2, [r3, #32]

	return FR_OK;
 c009032:	2300      	movs	r3, #0
}
 c009034:	4618      	mov	r0, r3
 c009036:	3718      	adds	r7, #24
 c009038:	46bd      	mov	sp, r7
 c00903a:	bd80      	pop	{r7, pc}

0c00903c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 c00903c:	b580      	push	{r7, lr}
 c00903e:	b086      	sub	sp, #24
 c009040:	af00      	add	r7, sp, #0
 c009042:	6078      	str	r0, [r7, #4]
 c009044:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 c009046:	687b      	ldr	r3, [r7, #4]
 c009048:	681b      	ldr	r3, [r3, #0]
 c00904a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 c00904c:	2100      	movs	r1, #0
 c00904e:	6878      	ldr	r0, [r7, #4]
 c009050:	f7ff feb4 	bl	c008dbc <dir_sdi>
 c009054:	4603      	mov	r3, r0
 c009056:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 c009058:	7dfb      	ldrb	r3, [r7, #23]
 c00905a:	2b00      	cmp	r3, #0
 c00905c:	d12b      	bne.n	c0090b6 <dir_alloc+0x7a>
		n = 0;
 c00905e:	2300      	movs	r3, #0
 c009060:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 c009062:	687b      	ldr	r3, [r7, #4]
 c009064:	69db      	ldr	r3, [r3, #28]
 c009066:	4619      	mov	r1, r3
 c009068:	68f8      	ldr	r0, [r7, #12]
 c00906a:	f7ff fb27 	bl	c0086bc <move_window>
 c00906e:	4603      	mov	r3, r0
 c009070:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 c009072:	7dfb      	ldrb	r3, [r7, #23]
 c009074:	2b00      	cmp	r3, #0
 c009076:	d11d      	bne.n	c0090b4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 c009078:	687b      	ldr	r3, [r7, #4]
 c00907a:	6a1b      	ldr	r3, [r3, #32]
 c00907c:	781b      	ldrb	r3, [r3, #0]
 c00907e:	2be5      	cmp	r3, #229	; 0xe5
 c009080:	d004      	beq.n	c00908c <dir_alloc+0x50>
 c009082:	687b      	ldr	r3, [r7, #4]
 c009084:	6a1b      	ldr	r3, [r3, #32]
 c009086:	781b      	ldrb	r3, [r3, #0]
 c009088:	2b00      	cmp	r3, #0
 c00908a:	d107      	bne.n	c00909c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 c00908c:	693b      	ldr	r3, [r7, #16]
 c00908e:	3301      	adds	r3, #1
 c009090:	613b      	str	r3, [r7, #16]
 c009092:	693a      	ldr	r2, [r7, #16]
 c009094:	683b      	ldr	r3, [r7, #0]
 c009096:	429a      	cmp	r2, r3
 c009098:	d102      	bne.n	c0090a0 <dir_alloc+0x64>
 c00909a:	e00c      	b.n	c0090b6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 c00909c:	2300      	movs	r3, #0
 c00909e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 c0090a0:	2101      	movs	r1, #1
 c0090a2:	6878      	ldr	r0, [r7, #4]
 c0090a4:	f7ff ff05 	bl	c008eb2 <dir_next>
 c0090a8:	4603      	mov	r3, r0
 c0090aa:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 c0090ac:	7dfb      	ldrb	r3, [r7, #23]
 c0090ae:	2b00      	cmp	r3, #0
 c0090b0:	d0d7      	beq.n	c009062 <dir_alloc+0x26>
 c0090b2:	e000      	b.n	c0090b6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 c0090b4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 c0090b6:	7dfb      	ldrb	r3, [r7, #23]
 c0090b8:	2b04      	cmp	r3, #4
 c0090ba:	d101      	bne.n	c0090c0 <dir_alloc+0x84>
 c0090bc:	2307      	movs	r3, #7
 c0090be:	75fb      	strb	r3, [r7, #23]
	return res;
 c0090c0:	7dfb      	ldrb	r3, [r7, #23]
}
 c0090c2:	4618      	mov	r0, r3
 c0090c4:	3718      	adds	r7, #24
 c0090c6:	46bd      	mov	sp, r7
 c0090c8:	bd80      	pop	{r7, pc}

0c0090ca <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 c0090ca:	b580      	push	{r7, lr}
 c0090cc:	b084      	sub	sp, #16
 c0090ce:	af00      	add	r7, sp, #0
 c0090d0:	6078      	str	r0, [r7, #4]
 c0090d2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 c0090d4:	683b      	ldr	r3, [r7, #0]
 c0090d6:	331a      	adds	r3, #26
 c0090d8:	4618      	mov	r0, r3
 c0090da:	f7ff f83f 	bl	c00815c <ld_word>
 c0090de:	4603      	mov	r3, r0
 c0090e0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 c0090e2:	687b      	ldr	r3, [r7, #4]
 c0090e4:	781b      	ldrb	r3, [r3, #0]
 c0090e6:	2b03      	cmp	r3, #3
 c0090e8:	d109      	bne.n	c0090fe <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 c0090ea:	683b      	ldr	r3, [r7, #0]
 c0090ec:	3314      	adds	r3, #20
 c0090ee:	4618      	mov	r0, r3
 c0090f0:	f7ff f834 	bl	c00815c <ld_word>
 c0090f4:	4603      	mov	r3, r0
 c0090f6:	041b      	lsls	r3, r3, #16
 c0090f8:	68fa      	ldr	r2, [r7, #12]
 c0090fa:	4313      	orrs	r3, r2
 c0090fc:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 c0090fe:	68fb      	ldr	r3, [r7, #12]
}
 c009100:	4618      	mov	r0, r3
 c009102:	3710      	adds	r7, #16
 c009104:	46bd      	mov	sp, r7
 c009106:	bd80      	pop	{r7, pc}

0c009108 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 c009108:	b580      	push	{r7, lr}
 c00910a:	b084      	sub	sp, #16
 c00910c:	af00      	add	r7, sp, #0
 c00910e:	60f8      	str	r0, [r7, #12]
 c009110:	60b9      	str	r1, [r7, #8]
 c009112:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 c009114:	68bb      	ldr	r3, [r7, #8]
 c009116:	331a      	adds	r3, #26
 c009118:	687a      	ldr	r2, [r7, #4]
 c00911a:	b292      	uxth	r2, r2
 c00911c:	4611      	mov	r1, r2
 c00911e:	4618      	mov	r0, r3
 c009120:	f7ff f857 	bl	c0081d2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 c009124:	68fb      	ldr	r3, [r7, #12]
 c009126:	781b      	ldrb	r3, [r3, #0]
 c009128:	2b03      	cmp	r3, #3
 c00912a:	d109      	bne.n	c009140 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 c00912c:	68bb      	ldr	r3, [r7, #8]
 c00912e:	f103 0214 	add.w	r2, r3, #20
 c009132:	687b      	ldr	r3, [r7, #4]
 c009134:	0c1b      	lsrs	r3, r3, #16
 c009136:	b29b      	uxth	r3, r3
 c009138:	4619      	mov	r1, r3
 c00913a:	4610      	mov	r0, r2
 c00913c:	f7ff f849 	bl	c0081d2 <st_word>
	}
}
 c009140:	bf00      	nop
 c009142:	3710      	adds	r7, #16
 c009144:	46bd      	mov	sp, r7
 c009146:	bd80      	pop	{r7, pc}

0c009148 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 c009148:	b590      	push	{r4, r7, lr}
 c00914a:	b087      	sub	sp, #28
 c00914c:	af00      	add	r7, sp, #0
 c00914e:	6078      	str	r0, [r7, #4]
 c009150:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 c009152:	683b      	ldr	r3, [r7, #0]
 c009154:	331a      	adds	r3, #26
 c009156:	4618      	mov	r0, r3
 c009158:	f7ff f800 	bl	c00815c <ld_word>
 c00915c:	4603      	mov	r3, r0
 c00915e:	2b00      	cmp	r3, #0
 c009160:	d001      	beq.n	c009166 <cmp_lfn+0x1e>
 c009162:	2300      	movs	r3, #0
 c009164:	e059      	b.n	c00921a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 c009166:	683b      	ldr	r3, [r7, #0]
 c009168:	781b      	ldrb	r3, [r3, #0]
 c00916a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 c00916e:	1e5a      	subs	r2, r3, #1
 c009170:	4613      	mov	r3, r2
 c009172:	005b      	lsls	r3, r3, #1
 c009174:	4413      	add	r3, r2
 c009176:	009b      	lsls	r3, r3, #2
 c009178:	4413      	add	r3, r2
 c00917a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 c00917c:	2301      	movs	r3, #1
 c00917e:	81fb      	strh	r3, [r7, #14]
 c009180:	2300      	movs	r3, #0
 c009182:	613b      	str	r3, [r7, #16]
 c009184:	e033      	b.n	c0091ee <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 c009186:	4a27      	ldr	r2, [pc, #156]	; (c009224 <cmp_lfn+0xdc>)
 c009188:	693b      	ldr	r3, [r7, #16]
 c00918a:	4413      	add	r3, r2
 c00918c:	781b      	ldrb	r3, [r3, #0]
 c00918e:	461a      	mov	r2, r3
 c009190:	683b      	ldr	r3, [r7, #0]
 c009192:	4413      	add	r3, r2
 c009194:	4618      	mov	r0, r3
 c009196:	f7fe ffe1 	bl	c00815c <ld_word>
 c00919a:	4603      	mov	r3, r0
 c00919c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 c00919e:	89fb      	ldrh	r3, [r7, #14]
 c0091a0:	2b00      	cmp	r3, #0
 c0091a2:	d01a      	beq.n	c0091da <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 c0091a4:	697b      	ldr	r3, [r7, #20]
 c0091a6:	2bfe      	cmp	r3, #254	; 0xfe
 c0091a8:	d812      	bhi.n	c0091d0 <cmp_lfn+0x88>
 c0091aa:	89bb      	ldrh	r3, [r7, #12]
 c0091ac:	4618      	mov	r0, r3
 c0091ae:	f002 fa9b 	bl	c00b6e8 <ff_wtoupper>
 c0091b2:	4603      	mov	r3, r0
 c0091b4:	461c      	mov	r4, r3
 c0091b6:	697b      	ldr	r3, [r7, #20]
 c0091b8:	1c5a      	adds	r2, r3, #1
 c0091ba:	617a      	str	r2, [r7, #20]
 c0091bc:	005b      	lsls	r3, r3, #1
 c0091be:	687a      	ldr	r2, [r7, #4]
 c0091c0:	4413      	add	r3, r2
 c0091c2:	881b      	ldrh	r3, [r3, #0]
 c0091c4:	4618      	mov	r0, r3
 c0091c6:	f002 fa8f 	bl	c00b6e8 <ff_wtoupper>
 c0091ca:	4603      	mov	r3, r0
 c0091cc:	429c      	cmp	r4, r3
 c0091ce:	d001      	beq.n	c0091d4 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 c0091d0:	2300      	movs	r3, #0
 c0091d2:	e022      	b.n	c00921a <cmp_lfn+0xd2>
			}
			wc = uc;
 c0091d4:	89bb      	ldrh	r3, [r7, #12]
 c0091d6:	81fb      	strh	r3, [r7, #14]
 c0091d8:	e006      	b.n	c0091e8 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 c0091da:	89bb      	ldrh	r3, [r7, #12]
 c0091dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 c0091e0:	4293      	cmp	r3, r2
 c0091e2:	d001      	beq.n	c0091e8 <cmp_lfn+0xa0>
 c0091e4:	2300      	movs	r3, #0
 c0091e6:	e018      	b.n	c00921a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 c0091e8:	693b      	ldr	r3, [r7, #16]
 c0091ea:	3301      	adds	r3, #1
 c0091ec:	613b      	str	r3, [r7, #16]
 c0091ee:	693b      	ldr	r3, [r7, #16]
 c0091f0:	2b0c      	cmp	r3, #12
 c0091f2:	d9c8      	bls.n	c009186 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 c0091f4:	683b      	ldr	r3, [r7, #0]
 c0091f6:	781b      	ldrb	r3, [r3, #0]
 c0091f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c0091fc:	2b00      	cmp	r3, #0
 c0091fe:	d00b      	beq.n	c009218 <cmp_lfn+0xd0>
 c009200:	89fb      	ldrh	r3, [r7, #14]
 c009202:	2b00      	cmp	r3, #0
 c009204:	d008      	beq.n	c009218 <cmp_lfn+0xd0>
 c009206:	697b      	ldr	r3, [r7, #20]
 c009208:	005b      	lsls	r3, r3, #1
 c00920a:	687a      	ldr	r2, [r7, #4]
 c00920c:	4413      	add	r3, r2
 c00920e:	881b      	ldrh	r3, [r3, #0]
 c009210:	2b00      	cmp	r3, #0
 c009212:	d001      	beq.n	c009218 <cmp_lfn+0xd0>
 c009214:	2300      	movs	r3, #0
 c009216:	e000      	b.n	c00921a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 c009218:	2301      	movs	r3, #1
}
 c00921a:	4618      	mov	r0, r3
 c00921c:	371c      	adds	r7, #28
 c00921e:	46bd      	mov	sp, r7
 c009220:	bd90      	pop	{r4, r7, pc}
 c009222:	bf00      	nop
 c009224:	0c00bc60 	.word	0x0c00bc60

0c009228 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 c009228:	b580      	push	{r7, lr}
 c00922a:	b088      	sub	sp, #32
 c00922c:	af00      	add	r7, sp, #0
 c00922e:	60f8      	str	r0, [r7, #12]
 c009230:	60b9      	str	r1, [r7, #8]
 c009232:	4611      	mov	r1, r2
 c009234:	461a      	mov	r2, r3
 c009236:	460b      	mov	r3, r1
 c009238:	71fb      	strb	r3, [r7, #7]
 c00923a:	4613      	mov	r3, r2
 c00923c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 c00923e:	68bb      	ldr	r3, [r7, #8]
 c009240:	330d      	adds	r3, #13
 c009242:	79ba      	ldrb	r2, [r7, #6]
 c009244:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 c009246:	68bb      	ldr	r3, [r7, #8]
 c009248:	330b      	adds	r3, #11
 c00924a:	220f      	movs	r2, #15
 c00924c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 c00924e:	68bb      	ldr	r3, [r7, #8]
 c009250:	330c      	adds	r3, #12
 c009252:	2200      	movs	r2, #0
 c009254:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 c009256:	68bb      	ldr	r3, [r7, #8]
 c009258:	331a      	adds	r3, #26
 c00925a:	2100      	movs	r1, #0
 c00925c:	4618      	mov	r0, r3
 c00925e:	f7fe ffb8 	bl	c0081d2 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 c009262:	79fb      	ldrb	r3, [r7, #7]
 c009264:	1e5a      	subs	r2, r3, #1
 c009266:	4613      	mov	r3, r2
 c009268:	005b      	lsls	r3, r3, #1
 c00926a:	4413      	add	r3, r2
 c00926c:	009b      	lsls	r3, r3, #2
 c00926e:	4413      	add	r3, r2
 c009270:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 c009272:	2300      	movs	r3, #0
 c009274:	82fb      	strh	r3, [r7, #22]
 c009276:	2300      	movs	r3, #0
 c009278:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 c00927a:	8afb      	ldrh	r3, [r7, #22]
 c00927c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 c009280:	4293      	cmp	r3, r2
 c009282:	d007      	beq.n	c009294 <put_lfn+0x6c>
 c009284:	69fb      	ldr	r3, [r7, #28]
 c009286:	1c5a      	adds	r2, r3, #1
 c009288:	61fa      	str	r2, [r7, #28]
 c00928a:	005b      	lsls	r3, r3, #1
 c00928c:	68fa      	ldr	r2, [r7, #12]
 c00928e:	4413      	add	r3, r2
 c009290:	881b      	ldrh	r3, [r3, #0]
 c009292:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 c009294:	4a17      	ldr	r2, [pc, #92]	; (c0092f4 <put_lfn+0xcc>)
 c009296:	69bb      	ldr	r3, [r7, #24]
 c009298:	4413      	add	r3, r2
 c00929a:	781b      	ldrb	r3, [r3, #0]
 c00929c:	461a      	mov	r2, r3
 c00929e:	68bb      	ldr	r3, [r7, #8]
 c0092a0:	4413      	add	r3, r2
 c0092a2:	8afa      	ldrh	r2, [r7, #22]
 c0092a4:	4611      	mov	r1, r2
 c0092a6:	4618      	mov	r0, r3
 c0092a8:	f7fe ff93 	bl	c0081d2 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 c0092ac:	8afb      	ldrh	r3, [r7, #22]
 c0092ae:	2b00      	cmp	r3, #0
 c0092b0:	d102      	bne.n	c0092b8 <put_lfn+0x90>
 c0092b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 c0092b6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 c0092b8:	69bb      	ldr	r3, [r7, #24]
 c0092ba:	3301      	adds	r3, #1
 c0092bc:	61bb      	str	r3, [r7, #24]
 c0092be:	69bb      	ldr	r3, [r7, #24]
 c0092c0:	2b0c      	cmp	r3, #12
 c0092c2:	d9da      	bls.n	c00927a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 c0092c4:	8afb      	ldrh	r3, [r7, #22]
 c0092c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 c0092ca:	4293      	cmp	r3, r2
 c0092cc:	d006      	beq.n	c0092dc <put_lfn+0xb4>
 c0092ce:	69fb      	ldr	r3, [r7, #28]
 c0092d0:	005b      	lsls	r3, r3, #1
 c0092d2:	68fa      	ldr	r2, [r7, #12]
 c0092d4:	4413      	add	r3, r2
 c0092d6:	881b      	ldrh	r3, [r3, #0]
 c0092d8:	2b00      	cmp	r3, #0
 c0092da:	d103      	bne.n	c0092e4 <put_lfn+0xbc>
 c0092dc:	79fb      	ldrb	r3, [r7, #7]
 c0092de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 c0092e2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 c0092e4:	68bb      	ldr	r3, [r7, #8]
 c0092e6:	79fa      	ldrb	r2, [r7, #7]
 c0092e8:	701a      	strb	r2, [r3, #0]
}
 c0092ea:	bf00      	nop
 c0092ec:	3720      	adds	r7, #32
 c0092ee:	46bd      	mov	sp, r7
 c0092f0:	bd80      	pop	{r7, pc}
 c0092f2:	bf00      	nop
 c0092f4:	0c00bc60 	.word	0x0c00bc60

0c0092f8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 c0092f8:	b580      	push	{r7, lr}
 c0092fa:	b08c      	sub	sp, #48	; 0x30
 c0092fc:	af00      	add	r7, sp, #0
 c0092fe:	60f8      	str	r0, [r7, #12]
 c009300:	60b9      	str	r1, [r7, #8]
 c009302:	607a      	str	r2, [r7, #4]
 c009304:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 c009306:	220b      	movs	r2, #11
 c009308:	68b9      	ldr	r1, [r7, #8]
 c00930a:	68f8      	ldr	r0, [r7, #12]
 c00930c:	f7fe ffa8 	bl	c008260 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 c009310:	683b      	ldr	r3, [r7, #0]
 c009312:	2b05      	cmp	r3, #5
 c009314:	d92b      	bls.n	c00936e <gen_numname+0x76>
		sr = seq;
 c009316:	683b      	ldr	r3, [r7, #0]
 c009318:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 c00931a:	e022      	b.n	c009362 <gen_numname+0x6a>
			wc = *lfn++;
 c00931c:	687b      	ldr	r3, [r7, #4]
 c00931e:	1c9a      	adds	r2, r3, #2
 c009320:	607a      	str	r2, [r7, #4]
 c009322:	881b      	ldrh	r3, [r3, #0]
 c009324:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 c009326:	2300      	movs	r3, #0
 c009328:	62bb      	str	r3, [r7, #40]	; 0x28
 c00932a:	e017      	b.n	c00935c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 c00932c:	69fb      	ldr	r3, [r7, #28]
 c00932e:	005a      	lsls	r2, r3, #1
 c009330:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 c009332:	f003 0301 	and.w	r3, r3, #1
 c009336:	4413      	add	r3, r2
 c009338:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 c00933a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 c00933c:	085b      	lsrs	r3, r3, #1
 c00933e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 c009340:	69fb      	ldr	r3, [r7, #28]
 c009342:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 c009346:	2b00      	cmp	r3, #0
 c009348:	d005      	beq.n	c009356 <gen_numname+0x5e>
 c00934a:	69fb      	ldr	r3, [r7, #28]
 c00934c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 c009350:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 c009354:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 c009356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c009358:	3301      	adds	r3, #1
 c00935a:	62bb      	str	r3, [r7, #40]	; 0x28
 c00935c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c00935e:	2b0f      	cmp	r3, #15
 c009360:	d9e4      	bls.n	c00932c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 c009362:	687b      	ldr	r3, [r7, #4]
 c009364:	881b      	ldrh	r3, [r3, #0]
 c009366:	2b00      	cmp	r3, #0
 c009368:	d1d8      	bne.n	c00931c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 c00936a:	69fb      	ldr	r3, [r7, #28]
 c00936c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 c00936e:	2307      	movs	r3, #7
 c009370:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 c009372:	683b      	ldr	r3, [r7, #0]
 c009374:	b2db      	uxtb	r3, r3
 c009376:	f003 030f 	and.w	r3, r3, #15
 c00937a:	b2db      	uxtb	r3, r3
 c00937c:	3330      	adds	r3, #48	; 0x30
 c00937e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 c009382:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 c009386:	2b39      	cmp	r3, #57	; 0x39
 c009388:	d904      	bls.n	c009394 <gen_numname+0x9c>
 c00938a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 c00938e:	3307      	adds	r3, #7
 c009390:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 c009394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c009396:	1e5a      	subs	r2, r3, #1
 c009398:	62ba      	str	r2, [r7, #40]	; 0x28
 c00939a:	3330      	adds	r3, #48	; 0x30
 c00939c:	443b      	add	r3, r7
 c00939e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 c0093a2:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 c0093a6:	683b      	ldr	r3, [r7, #0]
 c0093a8:	091b      	lsrs	r3, r3, #4
 c0093aa:	603b      	str	r3, [r7, #0]
	} while (seq);
 c0093ac:	683b      	ldr	r3, [r7, #0]
 c0093ae:	2b00      	cmp	r3, #0
 c0093b0:	d1df      	bne.n	c009372 <gen_numname+0x7a>
	ns[i] = '~';
 c0093b2:	f107 0214 	add.w	r2, r7, #20
 c0093b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c0093b8:	4413      	add	r3, r2
 c0093ba:	227e      	movs	r2, #126	; 0x7e
 c0093bc:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 c0093be:	2300      	movs	r3, #0
 c0093c0:	627b      	str	r3, [r7, #36]	; 0x24
 c0093c2:	e002      	b.n	c0093ca <gen_numname+0xd2>
 c0093c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c0093c6:	3301      	adds	r3, #1
 c0093c8:	627b      	str	r3, [r7, #36]	; 0x24
 c0093ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 c0093cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c0093ce:	429a      	cmp	r2, r3
 c0093d0:	d205      	bcs.n	c0093de <gen_numname+0xe6>
 c0093d2:	68fa      	ldr	r2, [r7, #12]
 c0093d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c0093d6:	4413      	add	r3, r2
 c0093d8:	781b      	ldrb	r3, [r3, #0]
 c0093da:	2b20      	cmp	r3, #32
 c0093dc:	d1f2      	bne.n	c0093c4 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 c0093de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c0093e0:	2b07      	cmp	r3, #7
 c0093e2:	d807      	bhi.n	c0093f4 <gen_numname+0xfc>
 c0093e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c0093e6:	1c5a      	adds	r2, r3, #1
 c0093e8:	62ba      	str	r2, [r7, #40]	; 0x28
 c0093ea:	3330      	adds	r3, #48	; 0x30
 c0093ec:	443b      	add	r3, r7
 c0093ee:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 c0093f2:	e000      	b.n	c0093f6 <gen_numname+0xfe>
 c0093f4:	2120      	movs	r1, #32
 c0093f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c0093f8:	1c5a      	adds	r2, r3, #1
 c0093fa:	627a      	str	r2, [r7, #36]	; 0x24
 c0093fc:	68fa      	ldr	r2, [r7, #12]
 c0093fe:	4413      	add	r3, r2
 c009400:	460a      	mov	r2, r1
 c009402:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 c009404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c009406:	2b07      	cmp	r3, #7
 c009408:	d9e9      	bls.n	c0093de <gen_numname+0xe6>
}
 c00940a:	bf00      	nop
 c00940c:	bf00      	nop
 c00940e:	3730      	adds	r7, #48	; 0x30
 c009410:	46bd      	mov	sp, r7
 c009412:	bd80      	pop	{r7, pc}

0c009414 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 c009414:	b480      	push	{r7}
 c009416:	b085      	sub	sp, #20
 c009418:	af00      	add	r7, sp, #0
 c00941a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 c00941c:	2300      	movs	r3, #0
 c00941e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 c009420:	230b      	movs	r3, #11
 c009422:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 c009424:	7bfb      	ldrb	r3, [r7, #15]
 c009426:	b2da      	uxtb	r2, r3
 c009428:	0852      	lsrs	r2, r2, #1
 c00942a:	01db      	lsls	r3, r3, #7
 c00942c:	4313      	orrs	r3, r2
 c00942e:	b2da      	uxtb	r2, r3
 c009430:	687b      	ldr	r3, [r7, #4]
 c009432:	1c59      	adds	r1, r3, #1
 c009434:	6079      	str	r1, [r7, #4]
 c009436:	781b      	ldrb	r3, [r3, #0]
 c009438:	4413      	add	r3, r2
 c00943a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 c00943c:	68bb      	ldr	r3, [r7, #8]
 c00943e:	3b01      	subs	r3, #1
 c009440:	60bb      	str	r3, [r7, #8]
 c009442:	68bb      	ldr	r3, [r7, #8]
 c009444:	2b00      	cmp	r3, #0
 c009446:	d1ed      	bne.n	c009424 <sum_sfn+0x10>
	return sum;
 c009448:	7bfb      	ldrb	r3, [r7, #15]
}
 c00944a:	4618      	mov	r0, r3
 c00944c:	3714      	adds	r7, #20
 c00944e:	46bd      	mov	sp, r7
 c009450:	f85d 7b04 	ldr.w	r7, [sp], #4
 c009454:	4770      	bx	lr

0c009456 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 c009456:	b580      	push	{r7, lr}
 c009458:	b086      	sub	sp, #24
 c00945a:	af00      	add	r7, sp, #0
 c00945c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 c00945e:	687b      	ldr	r3, [r7, #4]
 c009460:	681b      	ldr	r3, [r3, #0]
 c009462:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 c009464:	2100      	movs	r1, #0
 c009466:	6878      	ldr	r0, [r7, #4]
 c009468:	f7ff fca8 	bl	c008dbc <dir_sdi>
 c00946c:	4603      	mov	r3, r0
 c00946e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 c009470:	7dfb      	ldrb	r3, [r7, #23]
 c009472:	2b00      	cmp	r3, #0
 c009474:	d001      	beq.n	c00947a <dir_find+0x24>
 c009476:	7dfb      	ldrb	r3, [r7, #23]
 c009478:	e0a9      	b.n	c0095ce <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 c00947a:	23ff      	movs	r3, #255	; 0xff
 c00947c:	753b      	strb	r3, [r7, #20]
 c00947e:	7d3b      	ldrb	r3, [r7, #20]
 c009480:	757b      	strb	r3, [r7, #21]
 c009482:	687b      	ldr	r3, [r7, #4]
 c009484:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 c009488:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 c00948a:	687b      	ldr	r3, [r7, #4]
 c00948c:	69db      	ldr	r3, [r3, #28]
 c00948e:	4619      	mov	r1, r3
 c009490:	6938      	ldr	r0, [r7, #16]
 c009492:	f7ff f913 	bl	c0086bc <move_window>
 c009496:	4603      	mov	r3, r0
 c009498:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 c00949a:	7dfb      	ldrb	r3, [r7, #23]
 c00949c:	2b00      	cmp	r3, #0
 c00949e:	f040 8090 	bne.w	c0095c2 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 c0094a2:	687b      	ldr	r3, [r7, #4]
 c0094a4:	6a1b      	ldr	r3, [r3, #32]
 c0094a6:	781b      	ldrb	r3, [r3, #0]
 c0094a8:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 c0094aa:	7dbb      	ldrb	r3, [r7, #22]
 c0094ac:	2b00      	cmp	r3, #0
 c0094ae:	d102      	bne.n	c0094b6 <dir_find+0x60>
 c0094b0:	2304      	movs	r3, #4
 c0094b2:	75fb      	strb	r3, [r7, #23]
 c0094b4:	e08a      	b.n	c0095cc <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 c0094b6:	687b      	ldr	r3, [r7, #4]
 c0094b8:	6a1b      	ldr	r3, [r3, #32]
 c0094ba:	330b      	adds	r3, #11
 c0094bc:	781b      	ldrb	r3, [r3, #0]
 c0094be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 c0094c2:	73fb      	strb	r3, [r7, #15]
 c0094c4:	687b      	ldr	r3, [r7, #4]
 c0094c6:	7bfa      	ldrb	r2, [r7, #15]
 c0094c8:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 c0094ca:	7dbb      	ldrb	r3, [r7, #22]
 c0094cc:	2be5      	cmp	r3, #229	; 0xe5
 c0094ce:	d007      	beq.n	c0094e0 <dir_find+0x8a>
 c0094d0:	7bfb      	ldrb	r3, [r7, #15]
 c0094d2:	f003 0308 	and.w	r3, r3, #8
 c0094d6:	2b00      	cmp	r3, #0
 c0094d8:	d009      	beq.n	c0094ee <dir_find+0x98>
 c0094da:	7bfb      	ldrb	r3, [r7, #15]
 c0094dc:	2b0f      	cmp	r3, #15
 c0094de:	d006      	beq.n	c0094ee <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 c0094e0:	23ff      	movs	r3, #255	; 0xff
 c0094e2:	757b      	strb	r3, [r7, #21]
 c0094e4:	687b      	ldr	r3, [r7, #4]
 c0094e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 c0094ea:	631a      	str	r2, [r3, #48]	; 0x30
 c0094ec:	e05e      	b.n	c0095ac <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 c0094ee:	7bfb      	ldrb	r3, [r7, #15]
 c0094f0:	2b0f      	cmp	r3, #15
 c0094f2:	d136      	bne.n	c009562 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 c0094f4:	687b      	ldr	r3, [r7, #4]
 c0094f6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 c0094fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c0094fe:	2b00      	cmp	r3, #0
 c009500:	d154      	bne.n	c0095ac <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 c009502:	7dbb      	ldrb	r3, [r7, #22]
 c009504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c009508:	2b00      	cmp	r3, #0
 c00950a:	d00d      	beq.n	c009528 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 c00950c:	687b      	ldr	r3, [r7, #4]
 c00950e:	6a1b      	ldr	r3, [r3, #32]
 c009510:	7b5b      	ldrb	r3, [r3, #13]
 c009512:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 c009514:	7dbb      	ldrb	r3, [r7, #22]
 c009516:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 c00951a:	75bb      	strb	r3, [r7, #22]
 c00951c:	7dbb      	ldrb	r3, [r7, #22]
 c00951e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 c009520:	687b      	ldr	r3, [r7, #4]
 c009522:	695a      	ldr	r2, [r3, #20]
 c009524:	687b      	ldr	r3, [r7, #4]
 c009526:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 c009528:	7dba      	ldrb	r2, [r7, #22]
 c00952a:	7d7b      	ldrb	r3, [r7, #21]
 c00952c:	429a      	cmp	r2, r3
 c00952e:	d115      	bne.n	c00955c <dir_find+0x106>
 c009530:	687b      	ldr	r3, [r7, #4]
 c009532:	6a1b      	ldr	r3, [r3, #32]
 c009534:	330d      	adds	r3, #13
 c009536:	781b      	ldrb	r3, [r3, #0]
 c009538:	7d3a      	ldrb	r2, [r7, #20]
 c00953a:	429a      	cmp	r2, r3
 c00953c:	d10e      	bne.n	c00955c <dir_find+0x106>
 c00953e:	693b      	ldr	r3, [r7, #16]
 c009540:	68da      	ldr	r2, [r3, #12]
 c009542:	687b      	ldr	r3, [r7, #4]
 c009544:	6a1b      	ldr	r3, [r3, #32]
 c009546:	4619      	mov	r1, r3
 c009548:	4610      	mov	r0, r2
 c00954a:	f7ff fdfd 	bl	c009148 <cmp_lfn>
 c00954e:	4603      	mov	r3, r0
 c009550:	2b00      	cmp	r3, #0
 c009552:	d003      	beq.n	c00955c <dir_find+0x106>
 c009554:	7d7b      	ldrb	r3, [r7, #21]
 c009556:	3b01      	subs	r3, #1
 c009558:	b2db      	uxtb	r3, r3
 c00955a:	e000      	b.n	c00955e <dir_find+0x108>
 c00955c:	23ff      	movs	r3, #255	; 0xff
 c00955e:	757b      	strb	r3, [r7, #21]
 c009560:	e024      	b.n	c0095ac <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 c009562:	7d7b      	ldrb	r3, [r7, #21]
 c009564:	2b00      	cmp	r3, #0
 c009566:	d109      	bne.n	c00957c <dir_find+0x126>
 c009568:	687b      	ldr	r3, [r7, #4]
 c00956a:	6a1b      	ldr	r3, [r3, #32]
 c00956c:	4618      	mov	r0, r3
 c00956e:	f7ff ff51 	bl	c009414 <sum_sfn>
 c009572:	4603      	mov	r3, r0
 c009574:	461a      	mov	r2, r3
 c009576:	7d3b      	ldrb	r3, [r7, #20]
 c009578:	4293      	cmp	r3, r2
 c00957a:	d024      	beq.n	c0095c6 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 c00957c:	687b      	ldr	r3, [r7, #4]
 c00957e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 c009582:	f003 0301 	and.w	r3, r3, #1
 c009586:	2b00      	cmp	r3, #0
 c009588:	d10a      	bne.n	c0095a0 <dir_find+0x14a>
 c00958a:	687b      	ldr	r3, [r7, #4]
 c00958c:	6a18      	ldr	r0, [r3, #32]
 c00958e:	687b      	ldr	r3, [r7, #4]
 c009590:	3324      	adds	r3, #36	; 0x24
 c009592:	220b      	movs	r2, #11
 c009594:	4619      	mov	r1, r3
 c009596:	f7fe fe9f 	bl	c0082d8 <mem_cmp>
 c00959a:	4603      	mov	r3, r0
 c00959c:	2b00      	cmp	r3, #0
 c00959e:	d014      	beq.n	c0095ca <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 c0095a0:	23ff      	movs	r3, #255	; 0xff
 c0095a2:	757b      	strb	r3, [r7, #21]
 c0095a4:	687b      	ldr	r3, [r7, #4]
 c0095a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 c0095aa:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 c0095ac:	2100      	movs	r1, #0
 c0095ae:	6878      	ldr	r0, [r7, #4]
 c0095b0:	f7ff fc7f 	bl	c008eb2 <dir_next>
 c0095b4:	4603      	mov	r3, r0
 c0095b6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 c0095b8:	7dfb      	ldrb	r3, [r7, #23]
 c0095ba:	2b00      	cmp	r3, #0
 c0095bc:	f43f af65 	beq.w	c00948a <dir_find+0x34>
 c0095c0:	e004      	b.n	c0095cc <dir_find+0x176>
		if (res != FR_OK) break;
 c0095c2:	bf00      	nop
 c0095c4:	e002      	b.n	c0095cc <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 c0095c6:	bf00      	nop
 c0095c8:	e000      	b.n	c0095cc <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 c0095ca:	bf00      	nop

	return res;
 c0095cc:	7dfb      	ldrb	r3, [r7, #23]
}
 c0095ce:	4618      	mov	r0, r3
 c0095d0:	3718      	adds	r7, #24
 c0095d2:	46bd      	mov	sp, r7
 c0095d4:	bd80      	pop	{r7, pc}
	...

0c0095d8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 c0095d8:	b580      	push	{r7, lr}
 c0095da:	b08c      	sub	sp, #48	; 0x30
 c0095dc:	af00      	add	r7, sp, #0
 c0095de:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 c0095e0:	687b      	ldr	r3, [r7, #4]
 c0095e2:	681b      	ldr	r3, [r3, #0]
 c0095e4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 c0095e6:	687b      	ldr	r3, [r7, #4]
 c0095e8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 c0095ec:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 c0095f0:	2b00      	cmp	r3, #0
 c0095f2:	d001      	beq.n	c0095f8 <dir_register+0x20>
 c0095f4:	2306      	movs	r3, #6
 c0095f6:	e0e0      	b.n	c0097ba <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 c0095f8:	2300      	movs	r3, #0
 c0095fa:	627b      	str	r3, [r7, #36]	; 0x24
 c0095fc:	e002      	b.n	c009604 <dir_register+0x2c>
 c0095fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c009600:	3301      	adds	r3, #1
 c009602:	627b      	str	r3, [r7, #36]	; 0x24
 c009604:	69fb      	ldr	r3, [r7, #28]
 c009606:	68da      	ldr	r2, [r3, #12]
 c009608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c00960a:	005b      	lsls	r3, r3, #1
 c00960c:	4413      	add	r3, r2
 c00960e:	881b      	ldrh	r3, [r3, #0]
 c009610:	2b00      	cmp	r3, #0
 c009612:	d1f4      	bne.n	c0095fe <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 c009614:	687b      	ldr	r3, [r7, #4]
 c009616:	f103 0124 	add.w	r1, r3, #36	; 0x24
 c00961a:	f107 030c 	add.w	r3, r7, #12
 c00961e:	220c      	movs	r2, #12
 c009620:	4618      	mov	r0, r3
 c009622:	f7fe fe1d 	bl	c008260 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 c009626:	7dfb      	ldrb	r3, [r7, #23]
 c009628:	f003 0301 	and.w	r3, r3, #1
 c00962c:	2b00      	cmp	r3, #0
 c00962e:	d032      	beq.n	c009696 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 c009630:	687b      	ldr	r3, [r7, #4]
 c009632:	2240      	movs	r2, #64	; 0x40
 c009634:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 c009638:	2301      	movs	r3, #1
 c00963a:	62bb      	str	r3, [r7, #40]	; 0x28
 c00963c:	e016      	b.n	c00966c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 c00963e:	687b      	ldr	r3, [r7, #4]
 c009640:	f103 0024 	add.w	r0, r3, #36	; 0x24
 c009644:	69fb      	ldr	r3, [r7, #28]
 c009646:	68da      	ldr	r2, [r3, #12]
 c009648:	f107 010c 	add.w	r1, r7, #12
 c00964c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c00964e:	f7ff fe53 	bl	c0092f8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 c009652:	6878      	ldr	r0, [r7, #4]
 c009654:	f7ff feff 	bl	c009456 <dir_find>
 c009658:	4603      	mov	r3, r0
 c00965a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 c00965e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 c009662:	2b00      	cmp	r3, #0
 c009664:	d106      	bne.n	c009674 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 c009666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c009668:	3301      	adds	r3, #1
 c00966a:	62bb      	str	r3, [r7, #40]	; 0x28
 c00966c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c00966e:	2b63      	cmp	r3, #99	; 0x63
 c009670:	d9e5      	bls.n	c00963e <dir_register+0x66>
 c009672:	e000      	b.n	c009676 <dir_register+0x9e>
			if (res != FR_OK) break;
 c009674:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 c009676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c009678:	2b64      	cmp	r3, #100	; 0x64
 c00967a:	d101      	bne.n	c009680 <dir_register+0xa8>
 c00967c:	2307      	movs	r3, #7
 c00967e:	e09c      	b.n	c0097ba <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 c009680:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 c009684:	2b04      	cmp	r3, #4
 c009686:	d002      	beq.n	c00968e <dir_register+0xb6>
 c009688:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 c00968c:	e095      	b.n	c0097ba <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 c00968e:	7dfa      	ldrb	r2, [r7, #23]
 c009690:	687b      	ldr	r3, [r7, #4]
 c009692:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 c009696:	7dfb      	ldrb	r3, [r7, #23]
 c009698:	f003 0302 	and.w	r3, r3, #2
 c00969c:	2b00      	cmp	r3, #0
 c00969e:	d007      	beq.n	c0096b0 <dir_register+0xd8>
 c0096a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c0096a2:	330c      	adds	r3, #12
 c0096a4:	4a47      	ldr	r2, [pc, #284]	; (c0097c4 <dir_register+0x1ec>)
 c0096a6:	fba2 2303 	umull	r2, r3, r2, r3
 c0096aa:	089b      	lsrs	r3, r3, #2
 c0096ac:	3301      	adds	r3, #1
 c0096ae:	e000      	b.n	c0096b2 <dir_register+0xda>
 c0096b0:	2301      	movs	r3, #1
 c0096b2:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 c0096b4:	6a39      	ldr	r1, [r7, #32]
 c0096b6:	6878      	ldr	r0, [r7, #4]
 c0096b8:	f7ff fcc0 	bl	c00903c <dir_alloc>
 c0096bc:	4603      	mov	r3, r0
 c0096be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 c0096c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 c0096c6:	2b00      	cmp	r3, #0
 c0096c8:	d148      	bne.n	c00975c <dir_register+0x184>
 c0096ca:	6a3b      	ldr	r3, [r7, #32]
 c0096cc:	3b01      	subs	r3, #1
 c0096ce:	623b      	str	r3, [r7, #32]
 c0096d0:	6a3b      	ldr	r3, [r7, #32]
 c0096d2:	2b00      	cmp	r3, #0
 c0096d4:	d042      	beq.n	c00975c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 c0096d6:	687b      	ldr	r3, [r7, #4]
 c0096d8:	695a      	ldr	r2, [r3, #20]
 c0096da:	6a3b      	ldr	r3, [r7, #32]
 c0096dc:	015b      	lsls	r3, r3, #5
 c0096de:	1ad3      	subs	r3, r2, r3
 c0096e0:	4619      	mov	r1, r3
 c0096e2:	6878      	ldr	r0, [r7, #4]
 c0096e4:	f7ff fb6a 	bl	c008dbc <dir_sdi>
 c0096e8:	4603      	mov	r3, r0
 c0096ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 c0096ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 c0096f2:	2b00      	cmp	r3, #0
 c0096f4:	d132      	bne.n	c00975c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 c0096f6:	687b      	ldr	r3, [r7, #4]
 c0096f8:	3324      	adds	r3, #36	; 0x24
 c0096fa:	4618      	mov	r0, r3
 c0096fc:	f7ff fe8a 	bl	c009414 <sum_sfn>
 c009700:	4603      	mov	r3, r0
 c009702:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 c009704:	687b      	ldr	r3, [r7, #4]
 c009706:	69db      	ldr	r3, [r3, #28]
 c009708:	4619      	mov	r1, r3
 c00970a:	69f8      	ldr	r0, [r7, #28]
 c00970c:	f7fe ffd6 	bl	c0086bc <move_window>
 c009710:	4603      	mov	r3, r0
 c009712:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 c009716:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 c00971a:	2b00      	cmp	r3, #0
 c00971c:	d11d      	bne.n	c00975a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 c00971e:	69fb      	ldr	r3, [r7, #28]
 c009720:	68d8      	ldr	r0, [r3, #12]
 c009722:	687b      	ldr	r3, [r7, #4]
 c009724:	6a19      	ldr	r1, [r3, #32]
 c009726:	6a3b      	ldr	r3, [r7, #32]
 c009728:	b2da      	uxtb	r2, r3
 c00972a:	7efb      	ldrb	r3, [r7, #27]
 c00972c:	f7ff fd7c 	bl	c009228 <put_lfn>
				fs->wflag = 1;
 c009730:	69fb      	ldr	r3, [r7, #28]
 c009732:	2201      	movs	r2, #1
 c009734:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 c009736:	2100      	movs	r1, #0
 c009738:	6878      	ldr	r0, [r7, #4]
 c00973a:	f7ff fbba 	bl	c008eb2 <dir_next>
 c00973e:	4603      	mov	r3, r0
 c009740:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 c009744:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 c009748:	2b00      	cmp	r3, #0
 c00974a:	d107      	bne.n	c00975c <dir_register+0x184>
 c00974c:	6a3b      	ldr	r3, [r7, #32]
 c00974e:	3b01      	subs	r3, #1
 c009750:	623b      	str	r3, [r7, #32]
 c009752:	6a3b      	ldr	r3, [r7, #32]
 c009754:	2b00      	cmp	r3, #0
 c009756:	d1d5      	bne.n	c009704 <dir_register+0x12c>
 c009758:	e000      	b.n	c00975c <dir_register+0x184>
				if (res != FR_OK) break;
 c00975a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 c00975c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 c009760:	2b00      	cmp	r3, #0
 c009762:	d128      	bne.n	c0097b6 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 c009764:	687b      	ldr	r3, [r7, #4]
 c009766:	69db      	ldr	r3, [r3, #28]
 c009768:	4619      	mov	r1, r3
 c00976a:	69f8      	ldr	r0, [r7, #28]
 c00976c:	f7fe ffa6 	bl	c0086bc <move_window>
 c009770:	4603      	mov	r3, r0
 c009772:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 c009776:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 c00977a:	2b00      	cmp	r3, #0
 c00977c:	d11b      	bne.n	c0097b6 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 c00977e:	687b      	ldr	r3, [r7, #4]
 c009780:	6a1b      	ldr	r3, [r3, #32]
 c009782:	2220      	movs	r2, #32
 c009784:	2100      	movs	r1, #0
 c009786:	4618      	mov	r0, r3
 c009788:	f7fe fd8b 	bl	c0082a2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 c00978c:	687b      	ldr	r3, [r7, #4]
 c00978e:	6a18      	ldr	r0, [r3, #32]
 c009790:	687b      	ldr	r3, [r7, #4]
 c009792:	3324      	adds	r3, #36	; 0x24
 c009794:	220b      	movs	r2, #11
 c009796:	4619      	mov	r1, r3
 c009798:	f7fe fd62 	bl	c008260 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 c00979c:	687b      	ldr	r3, [r7, #4]
 c00979e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 c0097a2:	687b      	ldr	r3, [r7, #4]
 c0097a4:	6a1b      	ldr	r3, [r3, #32]
 c0097a6:	330c      	adds	r3, #12
 c0097a8:	f002 0218 	and.w	r2, r2, #24
 c0097ac:	b2d2      	uxtb	r2, r2
 c0097ae:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 c0097b0:	69fb      	ldr	r3, [r7, #28]
 c0097b2:	2201      	movs	r2, #1
 c0097b4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 c0097b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 c0097ba:	4618      	mov	r0, r3
 c0097bc:	3730      	adds	r7, #48	; 0x30
 c0097be:	46bd      	mov	sp, r7
 c0097c0:	bd80      	pop	{r7, pc}
 c0097c2:	bf00      	nop
 c0097c4:	4ec4ec4f 	.word	0x4ec4ec4f

0c0097c8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 c0097c8:	b580      	push	{r7, lr}
 c0097ca:	b08a      	sub	sp, #40	; 0x28
 c0097cc:	af00      	add	r7, sp, #0
 c0097ce:	6078      	str	r0, [r7, #4]
 c0097d0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 c0097d2:	683b      	ldr	r3, [r7, #0]
 c0097d4:	681b      	ldr	r3, [r3, #0]
 c0097d6:	613b      	str	r3, [r7, #16]
 c0097d8:	687b      	ldr	r3, [r7, #4]
 c0097da:	681b      	ldr	r3, [r3, #0]
 c0097dc:	68db      	ldr	r3, [r3, #12]
 c0097de:	60fb      	str	r3, [r7, #12]
 c0097e0:	2300      	movs	r3, #0
 c0097e2:	617b      	str	r3, [r7, #20]
 c0097e4:	697b      	ldr	r3, [r7, #20]
 c0097e6:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 c0097e8:	69bb      	ldr	r3, [r7, #24]
 c0097ea:	1c5a      	adds	r2, r3, #1
 c0097ec:	61ba      	str	r2, [r7, #24]
 c0097ee:	693a      	ldr	r2, [r7, #16]
 c0097f0:	4413      	add	r3, r2
 c0097f2:	781b      	ldrb	r3, [r3, #0]
 c0097f4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 c0097f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 c0097f8:	2b1f      	cmp	r3, #31
 c0097fa:	d940      	bls.n	c00987e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 c0097fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 c0097fe:	2b2f      	cmp	r3, #47	; 0x2f
 c009800:	d006      	beq.n	c009810 <create_name+0x48>
 c009802:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 c009804:	2b5c      	cmp	r3, #92	; 0x5c
 c009806:	d110      	bne.n	c00982a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 c009808:	e002      	b.n	c009810 <create_name+0x48>
 c00980a:	69bb      	ldr	r3, [r7, #24]
 c00980c:	3301      	adds	r3, #1
 c00980e:	61bb      	str	r3, [r7, #24]
 c009810:	693a      	ldr	r2, [r7, #16]
 c009812:	69bb      	ldr	r3, [r7, #24]
 c009814:	4413      	add	r3, r2
 c009816:	781b      	ldrb	r3, [r3, #0]
 c009818:	2b2f      	cmp	r3, #47	; 0x2f
 c00981a:	d0f6      	beq.n	c00980a <create_name+0x42>
 c00981c:	693a      	ldr	r2, [r7, #16]
 c00981e:	69bb      	ldr	r3, [r7, #24]
 c009820:	4413      	add	r3, r2
 c009822:	781b      	ldrb	r3, [r3, #0]
 c009824:	2b5c      	cmp	r3, #92	; 0x5c
 c009826:	d0f0      	beq.n	c00980a <create_name+0x42>
			break;
 c009828:	e02a      	b.n	c009880 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 c00982a:	697b      	ldr	r3, [r7, #20]
 c00982c:	2bfe      	cmp	r3, #254	; 0xfe
 c00982e:	d901      	bls.n	c009834 <create_name+0x6c>
 c009830:	2306      	movs	r3, #6
 c009832:	e17d      	b.n	c009b30 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 c009834:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 c009836:	b2db      	uxtb	r3, r3
 c009838:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 c00983a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 c00983c:	2101      	movs	r1, #1
 c00983e:	4618      	mov	r0, r3
 c009840:	f001 ff16 	bl	c00b670 <ff_convert>
 c009844:	4603      	mov	r3, r0
 c009846:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 c009848:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 c00984a:	2b00      	cmp	r3, #0
 c00984c:	d101      	bne.n	c009852 <create_name+0x8a>
 c00984e:	2306      	movs	r3, #6
 c009850:	e16e      	b.n	c009b30 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 c009852:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 c009854:	2b7f      	cmp	r3, #127	; 0x7f
 c009856:	d809      	bhi.n	c00986c <create_name+0xa4>
 c009858:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 c00985a:	4619      	mov	r1, r3
 c00985c:	488d      	ldr	r0, [pc, #564]	; (c009a94 <create_name+0x2cc>)
 c00985e:	f7fe fd62 	bl	c008326 <chk_chr>
 c009862:	4603      	mov	r3, r0
 c009864:	2b00      	cmp	r3, #0
 c009866:	d001      	beq.n	c00986c <create_name+0xa4>
 c009868:	2306      	movs	r3, #6
 c00986a:	e161      	b.n	c009b30 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 c00986c:	697b      	ldr	r3, [r7, #20]
 c00986e:	1c5a      	adds	r2, r3, #1
 c009870:	617a      	str	r2, [r7, #20]
 c009872:	005b      	lsls	r3, r3, #1
 c009874:	68fa      	ldr	r2, [r7, #12]
 c009876:	4413      	add	r3, r2
 c009878:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 c00987a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 c00987c:	e7b4      	b.n	c0097e8 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 c00987e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 c009880:	693a      	ldr	r2, [r7, #16]
 c009882:	69bb      	ldr	r3, [r7, #24]
 c009884:	441a      	add	r2, r3
 c009886:	683b      	ldr	r3, [r7, #0]
 c009888:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 c00988a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 c00988c:	2b1f      	cmp	r3, #31
 c00988e:	d801      	bhi.n	c009894 <create_name+0xcc>
 c009890:	2304      	movs	r3, #4
 c009892:	e000      	b.n	c009896 <create_name+0xce>
 c009894:	2300      	movs	r3, #0
 c009896:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 c00989a:	e011      	b.n	c0098c0 <create_name+0xf8>
		w = lfn[di - 1];
 c00989c:	697b      	ldr	r3, [r7, #20]
 c00989e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 c0098a2:	3b01      	subs	r3, #1
 c0098a4:	005b      	lsls	r3, r3, #1
 c0098a6:	68fa      	ldr	r2, [r7, #12]
 c0098a8:	4413      	add	r3, r2
 c0098aa:	881b      	ldrh	r3, [r3, #0]
 c0098ac:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 c0098ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 c0098b0:	2b20      	cmp	r3, #32
 c0098b2:	d002      	beq.n	c0098ba <create_name+0xf2>
 c0098b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 c0098b6:	2b2e      	cmp	r3, #46	; 0x2e
 c0098b8:	d106      	bne.n	c0098c8 <create_name+0x100>
		di--;
 c0098ba:	697b      	ldr	r3, [r7, #20]
 c0098bc:	3b01      	subs	r3, #1
 c0098be:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 c0098c0:	697b      	ldr	r3, [r7, #20]
 c0098c2:	2b00      	cmp	r3, #0
 c0098c4:	d1ea      	bne.n	c00989c <create_name+0xd4>
 c0098c6:	e000      	b.n	c0098ca <create_name+0x102>
		if (w != ' ' && w != '.') break;
 c0098c8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 c0098ca:	697b      	ldr	r3, [r7, #20]
 c0098cc:	005b      	lsls	r3, r3, #1
 c0098ce:	68fa      	ldr	r2, [r7, #12]
 c0098d0:	4413      	add	r3, r2
 c0098d2:	2200      	movs	r2, #0
 c0098d4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 c0098d6:	697b      	ldr	r3, [r7, #20]
 c0098d8:	2b00      	cmp	r3, #0
 c0098da:	d101      	bne.n	c0098e0 <create_name+0x118>
 c0098dc:	2306      	movs	r3, #6
 c0098de:	e127      	b.n	c009b30 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 c0098e0:	687b      	ldr	r3, [r7, #4]
 c0098e2:	3324      	adds	r3, #36	; 0x24
 c0098e4:	220b      	movs	r2, #11
 c0098e6:	2120      	movs	r1, #32
 c0098e8:	4618      	mov	r0, r3
 c0098ea:	f7fe fcda 	bl	c0082a2 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 c0098ee:	2300      	movs	r3, #0
 c0098f0:	61bb      	str	r3, [r7, #24]
 c0098f2:	e002      	b.n	c0098fa <create_name+0x132>
 c0098f4:	69bb      	ldr	r3, [r7, #24]
 c0098f6:	3301      	adds	r3, #1
 c0098f8:	61bb      	str	r3, [r7, #24]
 c0098fa:	69bb      	ldr	r3, [r7, #24]
 c0098fc:	005b      	lsls	r3, r3, #1
 c0098fe:	68fa      	ldr	r2, [r7, #12]
 c009900:	4413      	add	r3, r2
 c009902:	881b      	ldrh	r3, [r3, #0]
 c009904:	2b20      	cmp	r3, #32
 c009906:	d0f5      	beq.n	c0098f4 <create_name+0x12c>
 c009908:	69bb      	ldr	r3, [r7, #24]
 c00990a:	005b      	lsls	r3, r3, #1
 c00990c:	68fa      	ldr	r2, [r7, #12]
 c00990e:	4413      	add	r3, r2
 c009910:	881b      	ldrh	r3, [r3, #0]
 c009912:	2b2e      	cmp	r3, #46	; 0x2e
 c009914:	d0ee      	beq.n	c0098f4 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 c009916:	69bb      	ldr	r3, [r7, #24]
 c009918:	2b00      	cmp	r3, #0
 c00991a:	d009      	beq.n	c009930 <create_name+0x168>
 c00991c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 c009920:	f043 0303 	orr.w	r3, r3, #3
 c009924:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 c009928:	e002      	b.n	c009930 <create_name+0x168>
 c00992a:	697b      	ldr	r3, [r7, #20]
 c00992c:	3b01      	subs	r3, #1
 c00992e:	617b      	str	r3, [r7, #20]
 c009930:	697b      	ldr	r3, [r7, #20]
 c009932:	2b00      	cmp	r3, #0
 c009934:	d009      	beq.n	c00994a <create_name+0x182>
 c009936:	697b      	ldr	r3, [r7, #20]
 c009938:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 c00993c:	3b01      	subs	r3, #1
 c00993e:	005b      	lsls	r3, r3, #1
 c009940:	68fa      	ldr	r2, [r7, #12]
 c009942:	4413      	add	r3, r2
 c009944:	881b      	ldrh	r3, [r3, #0]
 c009946:	2b2e      	cmp	r3, #46	; 0x2e
 c009948:	d1ef      	bne.n	c00992a <create_name+0x162>

	i = b = 0; ni = 8;
 c00994a:	2300      	movs	r3, #0
 c00994c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 c009950:	2300      	movs	r3, #0
 c009952:	623b      	str	r3, [r7, #32]
 c009954:	2308      	movs	r3, #8
 c009956:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 c009958:	69bb      	ldr	r3, [r7, #24]
 c00995a:	1c5a      	adds	r2, r3, #1
 c00995c:	61ba      	str	r2, [r7, #24]
 c00995e:	005b      	lsls	r3, r3, #1
 c009960:	68fa      	ldr	r2, [r7, #12]
 c009962:	4413      	add	r3, r2
 c009964:	881b      	ldrh	r3, [r3, #0]
 c009966:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 c009968:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 c00996a:	2b00      	cmp	r3, #0
 c00996c:	f000 8090 	beq.w	c009a90 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 c009970:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 c009972:	2b20      	cmp	r3, #32
 c009974:	d006      	beq.n	c009984 <create_name+0x1bc>
 c009976:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 c009978:	2b2e      	cmp	r3, #46	; 0x2e
 c00997a:	d10a      	bne.n	c009992 <create_name+0x1ca>
 c00997c:	69ba      	ldr	r2, [r7, #24]
 c00997e:	697b      	ldr	r3, [r7, #20]
 c009980:	429a      	cmp	r2, r3
 c009982:	d006      	beq.n	c009992 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 c009984:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 c009988:	f043 0303 	orr.w	r3, r3, #3
 c00998c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 c009990:	e07d      	b.n	c009a8e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 c009992:	6a3a      	ldr	r2, [r7, #32]
 c009994:	69fb      	ldr	r3, [r7, #28]
 c009996:	429a      	cmp	r2, r3
 c009998:	d203      	bcs.n	c0099a2 <create_name+0x1da>
 c00999a:	69ba      	ldr	r2, [r7, #24]
 c00999c:	697b      	ldr	r3, [r7, #20]
 c00999e:	429a      	cmp	r2, r3
 c0099a0:	d123      	bne.n	c0099ea <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 c0099a2:	69fb      	ldr	r3, [r7, #28]
 c0099a4:	2b0b      	cmp	r3, #11
 c0099a6:	d106      	bne.n	c0099b6 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 c0099a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 c0099ac:	f043 0303 	orr.w	r3, r3, #3
 c0099b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 c0099b4:	e075      	b.n	c009aa2 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 c0099b6:	69ba      	ldr	r2, [r7, #24]
 c0099b8:	697b      	ldr	r3, [r7, #20]
 c0099ba:	429a      	cmp	r2, r3
 c0099bc:	d005      	beq.n	c0099ca <create_name+0x202>
 c0099be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 c0099c2:	f043 0303 	orr.w	r3, r3, #3
 c0099c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 c0099ca:	69ba      	ldr	r2, [r7, #24]
 c0099cc:	697b      	ldr	r3, [r7, #20]
 c0099ce:	429a      	cmp	r2, r3
 c0099d0:	d866      	bhi.n	c009aa0 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 c0099d2:	697b      	ldr	r3, [r7, #20]
 c0099d4:	61bb      	str	r3, [r7, #24]
 c0099d6:	2308      	movs	r3, #8
 c0099d8:	623b      	str	r3, [r7, #32]
 c0099da:	230b      	movs	r3, #11
 c0099dc:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 c0099de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 c0099e2:	009b      	lsls	r3, r3, #2
 c0099e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 c0099e8:	e051      	b.n	c009a8e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 c0099ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 c0099ec:	2b7f      	cmp	r3, #127	; 0x7f
 c0099ee:	d914      	bls.n	c009a1a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 c0099f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 c0099f2:	2100      	movs	r1, #0
 c0099f4:	4618      	mov	r0, r3
 c0099f6:	f001 fe3b 	bl	c00b670 <ff_convert>
 c0099fa:	4603      	mov	r3, r0
 c0099fc:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 c0099fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 c009a00:	2b00      	cmp	r3, #0
 c009a02:	d004      	beq.n	c009a0e <create_name+0x246>
 c009a04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 c009a06:	3b80      	subs	r3, #128	; 0x80
 c009a08:	4a23      	ldr	r2, [pc, #140]	; (c009a98 <create_name+0x2d0>)
 c009a0a:	5cd3      	ldrb	r3, [r2, r3]
 c009a0c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 c009a0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 c009a12:	f043 0302 	orr.w	r3, r3, #2
 c009a16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 c009a1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 c009a1c:	2b00      	cmp	r3, #0
 c009a1e:	d007      	beq.n	c009a30 <create_name+0x268>
 c009a20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 c009a22:	4619      	mov	r1, r3
 c009a24:	481d      	ldr	r0, [pc, #116]	; (c009a9c <create_name+0x2d4>)
 c009a26:	f7fe fc7e 	bl	c008326 <chk_chr>
 c009a2a:	4603      	mov	r3, r0
 c009a2c:	2b00      	cmp	r3, #0
 c009a2e:	d008      	beq.n	c009a42 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 c009a30:	235f      	movs	r3, #95	; 0x5f
 c009a32:	84bb      	strh	r3, [r7, #36]	; 0x24
 c009a34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 c009a38:	f043 0303 	orr.w	r3, r3, #3
 c009a3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 c009a40:	e01b      	b.n	c009a7a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 c009a42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 c009a44:	2b40      	cmp	r3, #64	; 0x40
 c009a46:	d909      	bls.n	c009a5c <create_name+0x294>
 c009a48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 c009a4a:	2b5a      	cmp	r3, #90	; 0x5a
 c009a4c:	d806      	bhi.n	c009a5c <create_name+0x294>
					b |= 2;
 c009a4e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 c009a52:	f043 0302 	orr.w	r3, r3, #2
 c009a56:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 c009a5a:	e00e      	b.n	c009a7a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 c009a5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 c009a5e:	2b60      	cmp	r3, #96	; 0x60
 c009a60:	d90b      	bls.n	c009a7a <create_name+0x2b2>
 c009a62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 c009a64:	2b7a      	cmp	r3, #122	; 0x7a
 c009a66:	d808      	bhi.n	c009a7a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 c009a68:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 c009a6c:	f043 0301 	orr.w	r3, r3, #1
 c009a70:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 c009a74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 c009a76:	3b20      	subs	r3, #32
 c009a78:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 c009a7a:	6a3b      	ldr	r3, [r7, #32]
 c009a7c:	1c5a      	adds	r2, r3, #1
 c009a7e:	623a      	str	r2, [r7, #32]
 c009a80:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 c009a82:	b2d1      	uxtb	r1, r2
 c009a84:	687a      	ldr	r2, [r7, #4]
 c009a86:	4413      	add	r3, r2
 c009a88:	460a      	mov	r2, r1
 c009a8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 c009a8e:	e763      	b.n	c009958 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 c009a90:	bf00      	nop
 c009a92:	e006      	b.n	c009aa2 <create_name+0x2da>
 c009a94:	0c00bb2c 	.word	0x0c00bb2c
 c009a98:	0c00bbe0 	.word	0x0c00bbe0
 c009a9c:	0c00bb38 	.word	0x0c00bb38
			if (si > di) break;			/* No extension */
 c009aa0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 c009aa2:	687b      	ldr	r3, [r7, #4]
 c009aa4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 c009aa8:	2be5      	cmp	r3, #229	; 0xe5
 c009aaa:	d103      	bne.n	c009ab4 <create_name+0x2ec>
 c009aac:	687b      	ldr	r3, [r7, #4]
 c009aae:	2205      	movs	r2, #5
 c009ab0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 c009ab4:	69fb      	ldr	r3, [r7, #28]
 c009ab6:	2b08      	cmp	r3, #8
 c009ab8:	d104      	bne.n	c009ac4 <create_name+0x2fc>
 c009aba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 c009abe:	009b      	lsls	r3, r3, #2
 c009ac0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 c009ac4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 c009ac8:	f003 030c 	and.w	r3, r3, #12
 c009acc:	2b0c      	cmp	r3, #12
 c009ace:	d005      	beq.n	c009adc <create_name+0x314>
 c009ad0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 c009ad4:	f003 0303 	and.w	r3, r3, #3
 c009ad8:	2b03      	cmp	r3, #3
 c009ada:	d105      	bne.n	c009ae8 <create_name+0x320>
 c009adc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 c009ae0:	f043 0302 	orr.w	r3, r3, #2
 c009ae4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 c009ae8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 c009aec:	f003 0302 	and.w	r3, r3, #2
 c009af0:	2b00      	cmp	r3, #0
 c009af2:	d117      	bne.n	c009b24 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 c009af4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 c009af8:	f003 0303 	and.w	r3, r3, #3
 c009afc:	2b01      	cmp	r3, #1
 c009afe:	d105      	bne.n	c009b0c <create_name+0x344>
 c009b00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 c009b04:	f043 0310 	orr.w	r3, r3, #16
 c009b08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 c009b0c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 c009b10:	f003 030c 	and.w	r3, r3, #12
 c009b14:	2b04      	cmp	r3, #4
 c009b16:	d105      	bne.n	c009b24 <create_name+0x35c>
 c009b18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 c009b1c:	f043 0308 	orr.w	r3, r3, #8
 c009b20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 c009b24:	687b      	ldr	r3, [r7, #4]
 c009b26:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 c009b2a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 c009b2e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 c009b30:	4618      	mov	r0, r3
 c009b32:	3728      	adds	r7, #40	; 0x28
 c009b34:	46bd      	mov	sp, r7
 c009b36:	bd80      	pop	{r7, pc}

0c009b38 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 c009b38:	b580      	push	{r7, lr}
 c009b3a:	b086      	sub	sp, #24
 c009b3c:	af00      	add	r7, sp, #0
 c009b3e:	6078      	str	r0, [r7, #4]
 c009b40:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 c009b42:	687b      	ldr	r3, [r7, #4]
 c009b44:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 c009b46:	693b      	ldr	r3, [r7, #16]
 c009b48:	681b      	ldr	r3, [r3, #0]
 c009b4a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 c009b4c:	e002      	b.n	c009b54 <follow_path+0x1c>
 c009b4e:	683b      	ldr	r3, [r7, #0]
 c009b50:	3301      	adds	r3, #1
 c009b52:	603b      	str	r3, [r7, #0]
 c009b54:	683b      	ldr	r3, [r7, #0]
 c009b56:	781b      	ldrb	r3, [r3, #0]
 c009b58:	2b2f      	cmp	r3, #47	; 0x2f
 c009b5a:	d0f8      	beq.n	c009b4e <follow_path+0x16>
 c009b5c:	683b      	ldr	r3, [r7, #0]
 c009b5e:	781b      	ldrb	r3, [r3, #0]
 c009b60:	2b5c      	cmp	r3, #92	; 0x5c
 c009b62:	d0f4      	beq.n	c009b4e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 c009b64:	693b      	ldr	r3, [r7, #16]
 c009b66:	2200      	movs	r2, #0
 c009b68:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 c009b6a:	683b      	ldr	r3, [r7, #0]
 c009b6c:	781b      	ldrb	r3, [r3, #0]
 c009b6e:	2b1f      	cmp	r3, #31
 c009b70:	d80a      	bhi.n	c009b88 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 c009b72:	687b      	ldr	r3, [r7, #4]
 c009b74:	2280      	movs	r2, #128	; 0x80
 c009b76:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 c009b7a:	2100      	movs	r1, #0
 c009b7c:	6878      	ldr	r0, [r7, #4]
 c009b7e:	f7ff f91d 	bl	c008dbc <dir_sdi>
 c009b82:	4603      	mov	r3, r0
 c009b84:	75fb      	strb	r3, [r7, #23]
 c009b86:	e043      	b.n	c009c10 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 c009b88:	463b      	mov	r3, r7
 c009b8a:	4619      	mov	r1, r3
 c009b8c:	6878      	ldr	r0, [r7, #4]
 c009b8e:	f7ff fe1b 	bl	c0097c8 <create_name>
 c009b92:	4603      	mov	r3, r0
 c009b94:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 c009b96:	7dfb      	ldrb	r3, [r7, #23]
 c009b98:	2b00      	cmp	r3, #0
 c009b9a:	d134      	bne.n	c009c06 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 c009b9c:	6878      	ldr	r0, [r7, #4]
 c009b9e:	f7ff fc5a 	bl	c009456 <dir_find>
 c009ba2:	4603      	mov	r3, r0
 c009ba4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 c009ba6:	687b      	ldr	r3, [r7, #4]
 c009ba8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 c009bac:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 c009bae:	7dfb      	ldrb	r3, [r7, #23]
 c009bb0:	2b00      	cmp	r3, #0
 c009bb2:	d00a      	beq.n	c009bca <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 c009bb4:	7dfb      	ldrb	r3, [r7, #23]
 c009bb6:	2b04      	cmp	r3, #4
 c009bb8:	d127      	bne.n	c009c0a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 c009bba:	7afb      	ldrb	r3, [r7, #11]
 c009bbc:	f003 0304 	and.w	r3, r3, #4
 c009bc0:	2b00      	cmp	r3, #0
 c009bc2:	d122      	bne.n	c009c0a <follow_path+0xd2>
 c009bc4:	2305      	movs	r3, #5
 c009bc6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 c009bc8:	e01f      	b.n	c009c0a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 c009bca:	7afb      	ldrb	r3, [r7, #11]
 c009bcc:	f003 0304 	and.w	r3, r3, #4
 c009bd0:	2b00      	cmp	r3, #0
 c009bd2:	d11c      	bne.n	c009c0e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 c009bd4:	693b      	ldr	r3, [r7, #16]
 c009bd6:	799b      	ldrb	r3, [r3, #6]
 c009bd8:	f003 0310 	and.w	r3, r3, #16
 c009bdc:	2b00      	cmp	r3, #0
 c009bde:	d102      	bne.n	c009be6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 c009be0:	2305      	movs	r3, #5
 c009be2:	75fb      	strb	r3, [r7, #23]
 c009be4:	e014      	b.n	c009c10 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 c009be6:	68fb      	ldr	r3, [r7, #12]
 c009be8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 c009bec:	687b      	ldr	r3, [r7, #4]
 c009bee:	695b      	ldr	r3, [r3, #20]
 c009bf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c009bf4:	4413      	add	r3, r2
 c009bf6:	4619      	mov	r1, r3
 c009bf8:	68f8      	ldr	r0, [r7, #12]
 c009bfa:	f7ff fa66 	bl	c0090ca <ld_clust>
 c009bfe:	4602      	mov	r2, r0
 c009c00:	693b      	ldr	r3, [r7, #16]
 c009c02:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 c009c04:	e7c0      	b.n	c009b88 <follow_path+0x50>
			if (res != FR_OK) break;
 c009c06:	bf00      	nop
 c009c08:	e002      	b.n	c009c10 <follow_path+0xd8>
				break;
 c009c0a:	bf00      	nop
 c009c0c:	e000      	b.n	c009c10 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 c009c0e:	bf00      	nop
			}
		}
	}

	return res;
 c009c10:	7dfb      	ldrb	r3, [r7, #23]
}
 c009c12:	4618      	mov	r0, r3
 c009c14:	3718      	adds	r7, #24
 c009c16:	46bd      	mov	sp, r7
 c009c18:	bd80      	pop	{r7, pc}

0c009c1a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 c009c1a:	b480      	push	{r7}
 c009c1c:	b087      	sub	sp, #28
 c009c1e:	af00      	add	r7, sp, #0
 c009c20:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 c009c22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c009c26:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 c009c28:	687b      	ldr	r3, [r7, #4]
 c009c2a:	681b      	ldr	r3, [r3, #0]
 c009c2c:	2b00      	cmp	r3, #0
 c009c2e:	d031      	beq.n	c009c94 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 c009c30:	687b      	ldr	r3, [r7, #4]
 c009c32:	681b      	ldr	r3, [r3, #0]
 c009c34:	617b      	str	r3, [r7, #20]
 c009c36:	e002      	b.n	c009c3e <get_ldnumber+0x24>
 c009c38:	697b      	ldr	r3, [r7, #20]
 c009c3a:	3301      	adds	r3, #1
 c009c3c:	617b      	str	r3, [r7, #20]
 c009c3e:	697b      	ldr	r3, [r7, #20]
 c009c40:	781b      	ldrb	r3, [r3, #0]
 c009c42:	2b1f      	cmp	r3, #31
 c009c44:	d903      	bls.n	c009c4e <get_ldnumber+0x34>
 c009c46:	697b      	ldr	r3, [r7, #20]
 c009c48:	781b      	ldrb	r3, [r3, #0]
 c009c4a:	2b3a      	cmp	r3, #58	; 0x3a
 c009c4c:	d1f4      	bne.n	c009c38 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 c009c4e:	697b      	ldr	r3, [r7, #20]
 c009c50:	781b      	ldrb	r3, [r3, #0]
 c009c52:	2b3a      	cmp	r3, #58	; 0x3a
 c009c54:	d11c      	bne.n	c009c90 <get_ldnumber+0x76>
			tp = *path;
 c009c56:	687b      	ldr	r3, [r7, #4]
 c009c58:	681b      	ldr	r3, [r3, #0]
 c009c5a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 c009c5c:	68fb      	ldr	r3, [r7, #12]
 c009c5e:	1c5a      	adds	r2, r3, #1
 c009c60:	60fa      	str	r2, [r7, #12]
 c009c62:	781b      	ldrb	r3, [r3, #0]
 c009c64:	3b30      	subs	r3, #48	; 0x30
 c009c66:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 c009c68:	68bb      	ldr	r3, [r7, #8]
 c009c6a:	2b09      	cmp	r3, #9
 c009c6c:	d80e      	bhi.n	c009c8c <get_ldnumber+0x72>
 c009c6e:	68fa      	ldr	r2, [r7, #12]
 c009c70:	697b      	ldr	r3, [r7, #20]
 c009c72:	429a      	cmp	r2, r3
 c009c74:	d10a      	bne.n	c009c8c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 c009c76:	68bb      	ldr	r3, [r7, #8]
 c009c78:	2b00      	cmp	r3, #0
 c009c7a:	d107      	bne.n	c009c8c <get_ldnumber+0x72>
					vol = (int)i;
 c009c7c:	68bb      	ldr	r3, [r7, #8]
 c009c7e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 c009c80:	697b      	ldr	r3, [r7, #20]
 c009c82:	3301      	adds	r3, #1
 c009c84:	617b      	str	r3, [r7, #20]
 c009c86:	687b      	ldr	r3, [r7, #4]
 c009c88:	697a      	ldr	r2, [r7, #20]
 c009c8a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 c009c8c:	693b      	ldr	r3, [r7, #16]
 c009c8e:	e002      	b.n	c009c96 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 c009c90:	2300      	movs	r3, #0
 c009c92:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 c009c94:	693b      	ldr	r3, [r7, #16]
}
 c009c96:	4618      	mov	r0, r3
 c009c98:	371c      	adds	r7, #28
 c009c9a:	46bd      	mov	sp, r7
 c009c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c009ca0:	4770      	bx	lr
	...

0c009ca4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 c009ca4:	b580      	push	{r7, lr}
 c009ca6:	b082      	sub	sp, #8
 c009ca8:	af00      	add	r7, sp, #0
 c009caa:	6078      	str	r0, [r7, #4]
 c009cac:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 c009cae:	687b      	ldr	r3, [r7, #4]
 c009cb0:	2200      	movs	r2, #0
 c009cb2:	70da      	strb	r2, [r3, #3]
 c009cb4:	687b      	ldr	r3, [r7, #4]
 c009cb6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 c009cba:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 c009cbc:	6839      	ldr	r1, [r7, #0]
 c009cbe:	6878      	ldr	r0, [r7, #4]
 c009cc0:	f7fe fcfc 	bl	c0086bc <move_window>
 c009cc4:	4603      	mov	r3, r0
 c009cc6:	2b00      	cmp	r3, #0
 c009cc8:	d001      	beq.n	c009cce <check_fs+0x2a>
 c009cca:	2304      	movs	r3, #4
 c009ccc:	e038      	b.n	c009d40 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 c009cce:	687b      	ldr	r3, [r7, #4]
 c009cd0:	3334      	adds	r3, #52	; 0x34
 c009cd2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 c009cd6:	4618      	mov	r0, r3
 c009cd8:	f7fe fa40 	bl	c00815c <ld_word>
 c009cdc:	4603      	mov	r3, r0
 c009cde:	461a      	mov	r2, r3
 c009ce0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 c009ce4:	429a      	cmp	r2, r3
 c009ce6:	d001      	beq.n	c009cec <check_fs+0x48>
 c009ce8:	2303      	movs	r3, #3
 c009cea:	e029      	b.n	c009d40 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 c009cec:	687b      	ldr	r3, [r7, #4]
 c009cee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 c009cf2:	2be9      	cmp	r3, #233	; 0xe9
 c009cf4:	d009      	beq.n	c009d0a <check_fs+0x66>
 c009cf6:	687b      	ldr	r3, [r7, #4]
 c009cf8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 c009cfc:	2beb      	cmp	r3, #235	; 0xeb
 c009cfe:	d11e      	bne.n	c009d3e <check_fs+0x9a>
 c009d00:	687b      	ldr	r3, [r7, #4]
 c009d02:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 c009d06:	2b90      	cmp	r3, #144	; 0x90
 c009d08:	d119      	bne.n	c009d3e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 c009d0a:	687b      	ldr	r3, [r7, #4]
 c009d0c:	3334      	adds	r3, #52	; 0x34
 c009d0e:	3336      	adds	r3, #54	; 0x36
 c009d10:	4618      	mov	r0, r3
 c009d12:	f7fe fa3b 	bl	c00818c <ld_dword>
 c009d16:	4603      	mov	r3, r0
 c009d18:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 c009d1c:	4a0a      	ldr	r2, [pc, #40]	; (c009d48 <check_fs+0xa4>)
 c009d1e:	4293      	cmp	r3, r2
 c009d20:	d101      	bne.n	c009d26 <check_fs+0x82>
 c009d22:	2300      	movs	r3, #0
 c009d24:	e00c      	b.n	c009d40 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 c009d26:	687b      	ldr	r3, [r7, #4]
 c009d28:	3334      	adds	r3, #52	; 0x34
 c009d2a:	3352      	adds	r3, #82	; 0x52
 c009d2c:	4618      	mov	r0, r3
 c009d2e:	f7fe fa2d 	bl	c00818c <ld_dword>
 c009d32:	4603      	mov	r3, r0
 c009d34:	4a05      	ldr	r2, [pc, #20]	; (c009d4c <check_fs+0xa8>)
 c009d36:	4293      	cmp	r3, r2
 c009d38:	d101      	bne.n	c009d3e <check_fs+0x9a>
 c009d3a:	2300      	movs	r3, #0
 c009d3c:	e000      	b.n	c009d40 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 c009d3e:	2302      	movs	r3, #2
}
 c009d40:	4618      	mov	r0, r3
 c009d42:	3708      	adds	r7, #8
 c009d44:	46bd      	mov	sp, r7
 c009d46:	bd80      	pop	{r7, pc}
 c009d48:	00544146 	.word	0x00544146
 c009d4c:	33544146 	.word	0x33544146

0c009d50 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 c009d50:	b580      	push	{r7, lr}
 c009d52:	b096      	sub	sp, #88	; 0x58
 c009d54:	af00      	add	r7, sp, #0
 c009d56:	60f8      	str	r0, [r7, #12]
 c009d58:	60b9      	str	r1, [r7, #8]
 c009d5a:	4613      	mov	r3, r2
 c009d5c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 c009d5e:	68bb      	ldr	r3, [r7, #8]
 c009d60:	2200      	movs	r2, #0
 c009d62:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 c009d64:	68f8      	ldr	r0, [r7, #12]
 c009d66:	f7ff ff58 	bl	c009c1a <get_ldnumber>
 c009d6a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 c009d6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 c009d6e:	2b00      	cmp	r3, #0
 c009d70:	da01      	bge.n	c009d76 <find_volume+0x26>
 c009d72:	230b      	movs	r3, #11
 c009d74:	e22d      	b.n	c00a1d2 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 c009d76:	4aa1      	ldr	r2, [pc, #644]	; (c009ffc <find_volume+0x2ac>)
 c009d78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 c009d7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c009d7e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 c009d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c009d82:	2b00      	cmp	r3, #0
 c009d84:	d101      	bne.n	c009d8a <find_volume+0x3a>
 c009d86:	230c      	movs	r3, #12
 c009d88:	e223      	b.n	c00a1d2 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 c009d8a:	68bb      	ldr	r3, [r7, #8]
 c009d8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 c009d8e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 c009d90:	79fb      	ldrb	r3, [r7, #7]
 c009d92:	f023 0301 	bic.w	r3, r3, #1
 c009d96:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 c009d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c009d9a:	781b      	ldrb	r3, [r3, #0]
 c009d9c:	2b00      	cmp	r3, #0
 c009d9e:	d01a      	beq.n	c009dd6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 c009da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c009da2:	785b      	ldrb	r3, [r3, #1]
 c009da4:	4618      	mov	r0, r3
 c009da6:	f7fe f93b 	bl	c008020 <disk_status>
 c009daa:	4603      	mov	r3, r0
 c009dac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 c009db0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 c009db4:	f003 0301 	and.w	r3, r3, #1
 c009db8:	2b00      	cmp	r3, #0
 c009dba:	d10c      	bne.n	c009dd6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 c009dbc:	79fb      	ldrb	r3, [r7, #7]
 c009dbe:	2b00      	cmp	r3, #0
 c009dc0:	d007      	beq.n	c009dd2 <find_volume+0x82>
 c009dc2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 c009dc6:	f003 0304 	and.w	r3, r3, #4
 c009dca:	2b00      	cmp	r3, #0
 c009dcc:	d001      	beq.n	c009dd2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 c009dce:	230a      	movs	r3, #10
 c009dd0:	e1ff      	b.n	c00a1d2 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 c009dd2:	2300      	movs	r3, #0
 c009dd4:	e1fd      	b.n	c00a1d2 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 c009dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c009dd8:	2200      	movs	r2, #0
 c009dda:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 c009ddc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 c009dde:	b2da      	uxtb	r2, r3
 c009de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c009de2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 c009de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c009de6:	785b      	ldrb	r3, [r3, #1]
 c009de8:	4618      	mov	r0, r3
 c009dea:	f7fe f933 	bl	c008054 <disk_initialize>
 c009dee:	4603      	mov	r3, r0
 c009df0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 c009df4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 c009df8:	f003 0301 	and.w	r3, r3, #1
 c009dfc:	2b00      	cmp	r3, #0
 c009dfe:	d001      	beq.n	c009e04 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 c009e00:	2303      	movs	r3, #3
 c009e02:	e1e6      	b.n	c00a1d2 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 c009e04:	79fb      	ldrb	r3, [r7, #7]
 c009e06:	2b00      	cmp	r3, #0
 c009e08:	d007      	beq.n	c009e1a <find_volume+0xca>
 c009e0a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 c009e0e:	f003 0304 	and.w	r3, r3, #4
 c009e12:	2b00      	cmp	r3, #0
 c009e14:	d001      	beq.n	c009e1a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 c009e16:	230a      	movs	r3, #10
 c009e18:	e1db      	b.n	c00a1d2 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 c009e1a:	2300      	movs	r3, #0
 c009e1c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 c009e1e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 c009e20:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 c009e22:	f7ff ff3f 	bl	c009ca4 <check_fs>
 c009e26:	4603      	mov	r3, r0
 c009e28:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 c009e2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 c009e30:	2b02      	cmp	r3, #2
 c009e32:	d149      	bne.n	c009ec8 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 c009e34:	2300      	movs	r3, #0
 c009e36:	643b      	str	r3, [r7, #64]	; 0x40
 c009e38:	e01e      	b.n	c009e78 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 c009e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c009e3c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 c009e40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c009e42:	011b      	lsls	r3, r3, #4
 c009e44:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 c009e48:	4413      	add	r3, r2
 c009e4a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 c009e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c009e4e:	3304      	adds	r3, #4
 c009e50:	781b      	ldrb	r3, [r3, #0]
 c009e52:	2b00      	cmp	r3, #0
 c009e54:	d006      	beq.n	c009e64 <find_volume+0x114>
 c009e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c009e58:	3308      	adds	r3, #8
 c009e5a:	4618      	mov	r0, r3
 c009e5c:	f7fe f996 	bl	c00818c <ld_dword>
 c009e60:	4602      	mov	r2, r0
 c009e62:	e000      	b.n	c009e66 <find_volume+0x116>
 c009e64:	2200      	movs	r2, #0
 c009e66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c009e68:	009b      	lsls	r3, r3, #2
 c009e6a:	3358      	adds	r3, #88	; 0x58
 c009e6c:	443b      	add	r3, r7
 c009e6e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 c009e72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c009e74:	3301      	adds	r3, #1
 c009e76:	643b      	str	r3, [r7, #64]	; 0x40
 c009e78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c009e7a:	2b03      	cmp	r3, #3
 c009e7c:	d9dd      	bls.n	c009e3a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 c009e7e:	2300      	movs	r3, #0
 c009e80:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 c009e82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c009e84:	2b00      	cmp	r3, #0
 c009e86:	d002      	beq.n	c009e8e <find_volume+0x13e>
 c009e88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c009e8a:	3b01      	subs	r3, #1
 c009e8c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 c009e8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c009e90:	009b      	lsls	r3, r3, #2
 c009e92:	3358      	adds	r3, #88	; 0x58
 c009e94:	443b      	add	r3, r7
 c009e96:	f853 3c44 	ldr.w	r3, [r3, #-68]
 c009e9a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 c009e9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 c009e9e:	2b00      	cmp	r3, #0
 c009ea0:	d005      	beq.n	c009eae <find_volume+0x15e>
 c009ea2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 c009ea4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 c009ea6:	f7ff fefd 	bl	c009ca4 <check_fs>
 c009eaa:	4603      	mov	r3, r0
 c009eac:	e000      	b.n	c009eb0 <find_volume+0x160>
 c009eae:	2303      	movs	r3, #3
 c009eb0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 c009eb4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 c009eb8:	2b01      	cmp	r3, #1
 c009eba:	d905      	bls.n	c009ec8 <find_volume+0x178>
 c009ebc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c009ebe:	3301      	adds	r3, #1
 c009ec0:	643b      	str	r3, [r7, #64]	; 0x40
 c009ec2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c009ec4:	2b03      	cmp	r3, #3
 c009ec6:	d9e2      	bls.n	c009e8e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 c009ec8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 c009ecc:	2b04      	cmp	r3, #4
 c009ece:	d101      	bne.n	c009ed4 <find_volume+0x184>
 c009ed0:	2301      	movs	r3, #1
 c009ed2:	e17e      	b.n	c00a1d2 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 c009ed4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 c009ed8:	2b01      	cmp	r3, #1
 c009eda:	d901      	bls.n	c009ee0 <find_volume+0x190>
 c009edc:	230d      	movs	r3, #13
 c009ede:	e178      	b.n	c00a1d2 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 c009ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c009ee2:	3334      	adds	r3, #52	; 0x34
 c009ee4:	330b      	adds	r3, #11
 c009ee6:	4618      	mov	r0, r3
 c009ee8:	f7fe f938 	bl	c00815c <ld_word>
 c009eec:	4603      	mov	r3, r0
 c009eee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c009ef2:	d001      	beq.n	c009ef8 <find_volume+0x1a8>
 c009ef4:	230d      	movs	r3, #13
 c009ef6:	e16c      	b.n	c00a1d2 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 c009ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c009efa:	3334      	adds	r3, #52	; 0x34
 c009efc:	3316      	adds	r3, #22
 c009efe:	4618      	mov	r0, r3
 c009f00:	f7fe f92c 	bl	c00815c <ld_word>
 c009f04:	4603      	mov	r3, r0
 c009f06:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 c009f08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 c009f0a:	2b00      	cmp	r3, #0
 c009f0c:	d106      	bne.n	c009f1c <find_volume+0x1cc>
 c009f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c009f10:	3334      	adds	r3, #52	; 0x34
 c009f12:	3324      	adds	r3, #36	; 0x24
 c009f14:	4618      	mov	r0, r3
 c009f16:	f7fe f939 	bl	c00818c <ld_dword>
 c009f1a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 c009f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c009f1e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 c009f20:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 c009f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c009f24:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 c009f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c009f2a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 c009f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c009f2e:	789b      	ldrb	r3, [r3, #2]
 c009f30:	2b01      	cmp	r3, #1
 c009f32:	d005      	beq.n	c009f40 <find_volume+0x1f0>
 c009f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c009f36:	789b      	ldrb	r3, [r3, #2]
 c009f38:	2b02      	cmp	r3, #2
 c009f3a:	d001      	beq.n	c009f40 <find_volume+0x1f0>
 c009f3c:	230d      	movs	r3, #13
 c009f3e:	e148      	b.n	c00a1d2 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 c009f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c009f42:	789b      	ldrb	r3, [r3, #2]
 c009f44:	461a      	mov	r2, r3
 c009f46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 c009f48:	fb02 f303 	mul.w	r3, r2, r3
 c009f4c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 c009f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c009f50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 c009f54:	b29a      	uxth	r2, r3
 c009f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c009f58:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 c009f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c009f5c:	895b      	ldrh	r3, [r3, #10]
 c009f5e:	2b00      	cmp	r3, #0
 c009f60:	d008      	beq.n	c009f74 <find_volume+0x224>
 c009f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c009f64:	895b      	ldrh	r3, [r3, #10]
 c009f66:	461a      	mov	r2, r3
 c009f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c009f6a:	895b      	ldrh	r3, [r3, #10]
 c009f6c:	3b01      	subs	r3, #1
 c009f6e:	4013      	ands	r3, r2
 c009f70:	2b00      	cmp	r3, #0
 c009f72:	d001      	beq.n	c009f78 <find_volume+0x228>
 c009f74:	230d      	movs	r3, #13
 c009f76:	e12c      	b.n	c00a1d2 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 c009f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c009f7a:	3334      	adds	r3, #52	; 0x34
 c009f7c:	3311      	adds	r3, #17
 c009f7e:	4618      	mov	r0, r3
 c009f80:	f7fe f8ec 	bl	c00815c <ld_word>
 c009f84:	4603      	mov	r3, r0
 c009f86:	461a      	mov	r2, r3
 c009f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c009f8a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 c009f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c009f8e:	891b      	ldrh	r3, [r3, #8]
 c009f90:	f003 030f 	and.w	r3, r3, #15
 c009f94:	b29b      	uxth	r3, r3
 c009f96:	2b00      	cmp	r3, #0
 c009f98:	d001      	beq.n	c009f9e <find_volume+0x24e>
 c009f9a:	230d      	movs	r3, #13
 c009f9c:	e119      	b.n	c00a1d2 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 c009f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c009fa0:	3334      	adds	r3, #52	; 0x34
 c009fa2:	3313      	adds	r3, #19
 c009fa4:	4618      	mov	r0, r3
 c009fa6:	f7fe f8d9 	bl	c00815c <ld_word>
 c009faa:	4603      	mov	r3, r0
 c009fac:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 c009fae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 c009fb0:	2b00      	cmp	r3, #0
 c009fb2:	d106      	bne.n	c009fc2 <find_volume+0x272>
 c009fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c009fb6:	3334      	adds	r3, #52	; 0x34
 c009fb8:	3320      	adds	r3, #32
 c009fba:	4618      	mov	r0, r3
 c009fbc:	f7fe f8e6 	bl	c00818c <ld_dword>
 c009fc0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 c009fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c009fc4:	3334      	adds	r3, #52	; 0x34
 c009fc6:	330e      	adds	r3, #14
 c009fc8:	4618      	mov	r0, r3
 c009fca:	f7fe f8c7 	bl	c00815c <ld_word>
 c009fce:	4603      	mov	r3, r0
 c009fd0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 c009fd2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 c009fd4:	2b00      	cmp	r3, #0
 c009fd6:	d101      	bne.n	c009fdc <find_volume+0x28c>
 c009fd8:	230d      	movs	r3, #13
 c009fda:	e0fa      	b.n	c00a1d2 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 c009fdc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 c009fde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 c009fe0:	4413      	add	r3, r2
 c009fe2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 c009fe4:	8912      	ldrh	r2, [r2, #8]
 c009fe6:	0912      	lsrs	r2, r2, #4
 c009fe8:	b292      	uxth	r2, r2
 c009fea:	4413      	add	r3, r2
 c009fec:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 c009fee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 c009ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c009ff2:	429a      	cmp	r2, r3
 c009ff4:	d204      	bcs.n	c00a000 <find_volume+0x2b0>
 c009ff6:	230d      	movs	r3, #13
 c009ff8:	e0eb      	b.n	c00a1d2 <find_volume+0x482>
 c009ffa:	bf00      	nop
 c009ffc:	300007e4 	.word	0x300007e4
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 c00a000:	6cba      	ldr	r2, [r7, #72]	; 0x48
 c00a002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c00a004:	1ad3      	subs	r3, r2, r3
 c00a006:	6bba      	ldr	r2, [r7, #56]	; 0x38
 c00a008:	8952      	ldrh	r2, [r2, #10]
 c00a00a:	fbb3 f3f2 	udiv	r3, r3, r2
 c00a00e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 c00a010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c00a012:	2b00      	cmp	r3, #0
 c00a014:	d101      	bne.n	c00a01a <find_volume+0x2ca>
 c00a016:	230d      	movs	r3, #13
 c00a018:	e0db      	b.n	c00a1d2 <find_volume+0x482>
		fmt = FS_FAT32;
 c00a01a:	2303      	movs	r3, #3
 c00a01c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 c00a020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c00a022:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 c00a026:	4293      	cmp	r3, r2
 c00a028:	d802      	bhi.n	c00a030 <find_volume+0x2e0>
 c00a02a:	2302      	movs	r3, #2
 c00a02c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 c00a030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c00a032:	f640 72f5 	movw	r2, #4085	; 0xff5
 c00a036:	4293      	cmp	r3, r2
 c00a038:	d802      	bhi.n	c00a040 <find_volume+0x2f0>
 c00a03a:	2301      	movs	r3, #1
 c00a03c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 c00a040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c00a042:	1c9a      	adds	r2, r3, #2
 c00a044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c00a046:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 c00a048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c00a04a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 c00a04c:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 c00a04e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 c00a050:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 c00a052:	441a      	add	r2, r3
 c00a054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c00a056:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 c00a058:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 c00a05a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c00a05c:	441a      	add	r2, r3
 c00a05e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c00a060:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 c00a062:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 c00a066:	2b03      	cmp	r3, #3
 c00a068:	d11e      	bne.n	c00a0a8 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 c00a06a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c00a06c:	3334      	adds	r3, #52	; 0x34
 c00a06e:	332a      	adds	r3, #42	; 0x2a
 c00a070:	4618      	mov	r0, r3
 c00a072:	f7fe f873 	bl	c00815c <ld_word>
 c00a076:	4603      	mov	r3, r0
 c00a078:	2b00      	cmp	r3, #0
 c00a07a:	d001      	beq.n	c00a080 <find_volume+0x330>
 c00a07c:	230d      	movs	r3, #13
 c00a07e:	e0a8      	b.n	c00a1d2 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 c00a080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c00a082:	891b      	ldrh	r3, [r3, #8]
 c00a084:	2b00      	cmp	r3, #0
 c00a086:	d001      	beq.n	c00a08c <find_volume+0x33c>
 c00a088:	230d      	movs	r3, #13
 c00a08a:	e0a2      	b.n	c00a1d2 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 c00a08c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c00a08e:	3334      	adds	r3, #52	; 0x34
 c00a090:	332c      	adds	r3, #44	; 0x2c
 c00a092:	4618      	mov	r0, r3
 c00a094:	f7fe f87a 	bl	c00818c <ld_dword>
 c00a098:	4602      	mov	r2, r0
 c00a09a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c00a09c:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 c00a09e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c00a0a0:	699b      	ldr	r3, [r3, #24]
 c00a0a2:	009b      	lsls	r3, r3, #2
 c00a0a4:	647b      	str	r3, [r7, #68]	; 0x44
 c00a0a6:	e01f      	b.n	c00a0e8 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 c00a0a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c00a0aa:	891b      	ldrh	r3, [r3, #8]
 c00a0ac:	2b00      	cmp	r3, #0
 c00a0ae:	d101      	bne.n	c00a0b4 <find_volume+0x364>
 c00a0b0:	230d      	movs	r3, #13
 c00a0b2:	e08e      	b.n	c00a1d2 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 c00a0b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c00a0b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 c00a0b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 c00a0ba:	441a      	add	r2, r3
 c00a0bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c00a0be:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 c00a0c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 c00a0c4:	2b02      	cmp	r3, #2
 c00a0c6:	d103      	bne.n	c00a0d0 <find_volume+0x380>
 c00a0c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c00a0ca:	699b      	ldr	r3, [r3, #24]
 c00a0cc:	005b      	lsls	r3, r3, #1
 c00a0ce:	e00a      	b.n	c00a0e6 <find_volume+0x396>
 c00a0d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c00a0d2:	699a      	ldr	r2, [r3, #24]
 c00a0d4:	4613      	mov	r3, r2
 c00a0d6:	005b      	lsls	r3, r3, #1
 c00a0d8:	4413      	add	r3, r2
 c00a0da:	085a      	lsrs	r2, r3, #1
 c00a0dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c00a0de:	699b      	ldr	r3, [r3, #24]
 c00a0e0:	f003 0301 	and.w	r3, r3, #1
 c00a0e4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 c00a0e6:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 c00a0e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c00a0ea:	69da      	ldr	r2, [r3, #28]
 c00a0ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 c00a0ee:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 c00a0f2:	0a5b      	lsrs	r3, r3, #9
 c00a0f4:	429a      	cmp	r2, r3
 c00a0f6:	d201      	bcs.n	c00a0fc <find_volume+0x3ac>
 c00a0f8:	230d      	movs	r3, #13
 c00a0fa:	e06a      	b.n	c00a1d2 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 c00a0fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c00a0fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 c00a102:	615a      	str	r2, [r3, #20]
 c00a104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c00a106:	695a      	ldr	r2, [r3, #20]
 c00a108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c00a10a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 c00a10c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c00a10e:	2280      	movs	r2, #128	; 0x80
 c00a110:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 c00a112:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 c00a116:	2b03      	cmp	r3, #3
 c00a118:	d149      	bne.n	c00a1ae <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 c00a11a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c00a11c:	3334      	adds	r3, #52	; 0x34
 c00a11e:	3330      	adds	r3, #48	; 0x30
 c00a120:	4618      	mov	r0, r3
 c00a122:	f7fe f81b 	bl	c00815c <ld_word>
 c00a126:	4603      	mov	r3, r0
 c00a128:	2b01      	cmp	r3, #1
 c00a12a:	d140      	bne.n	c00a1ae <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 c00a12c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 c00a12e:	3301      	adds	r3, #1
 c00a130:	4619      	mov	r1, r3
 c00a132:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 c00a134:	f7fe fac2 	bl	c0086bc <move_window>
 c00a138:	4603      	mov	r3, r0
 c00a13a:	2b00      	cmp	r3, #0
 c00a13c:	d137      	bne.n	c00a1ae <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 c00a13e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c00a140:	2200      	movs	r2, #0
 c00a142:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 c00a144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c00a146:	3334      	adds	r3, #52	; 0x34
 c00a148:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 c00a14c:	4618      	mov	r0, r3
 c00a14e:	f7fe f805 	bl	c00815c <ld_word>
 c00a152:	4603      	mov	r3, r0
 c00a154:	461a      	mov	r2, r3
 c00a156:	f64a 2355 	movw	r3, #43605	; 0xaa55
 c00a15a:	429a      	cmp	r2, r3
 c00a15c:	d127      	bne.n	c00a1ae <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 c00a15e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c00a160:	3334      	adds	r3, #52	; 0x34
 c00a162:	4618      	mov	r0, r3
 c00a164:	f7fe f812 	bl	c00818c <ld_dword>
 c00a168:	4603      	mov	r3, r0
 c00a16a:	4a1c      	ldr	r2, [pc, #112]	; (c00a1dc <find_volume+0x48c>)
 c00a16c:	4293      	cmp	r3, r2
 c00a16e:	d11e      	bne.n	c00a1ae <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 c00a170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c00a172:	3334      	adds	r3, #52	; 0x34
 c00a174:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 c00a178:	4618      	mov	r0, r3
 c00a17a:	f7fe f807 	bl	c00818c <ld_dword>
 c00a17e:	4603      	mov	r3, r0
 c00a180:	4a17      	ldr	r2, [pc, #92]	; (c00a1e0 <find_volume+0x490>)
 c00a182:	4293      	cmp	r3, r2
 c00a184:	d113      	bne.n	c00a1ae <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 c00a186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c00a188:	3334      	adds	r3, #52	; 0x34
 c00a18a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 c00a18e:	4618      	mov	r0, r3
 c00a190:	f7fd fffc 	bl	c00818c <ld_dword>
 c00a194:	4602      	mov	r2, r0
 c00a196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c00a198:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 c00a19a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c00a19c:	3334      	adds	r3, #52	; 0x34
 c00a19e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 c00a1a2:	4618      	mov	r0, r3
 c00a1a4:	f7fd fff2 	bl	c00818c <ld_dword>
 c00a1a8:	4602      	mov	r2, r0
 c00a1aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c00a1ac:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 c00a1ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c00a1b0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 c00a1b4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 c00a1b6:	4b0b      	ldr	r3, [pc, #44]	; (c00a1e4 <find_volume+0x494>)
 c00a1b8:	881b      	ldrh	r3, [r3, #0]
 c00a1ba:	3301      	adds	r3, #1
 c00a1bc:	b29a      	uxth	r2, r3
 c00a1be:	4b09      	ldr	r3, [pc, #36]	; (c00a1e4 <find_volume+0x494>)
 c00a1c0:	801a      	strh	r2, [r3, #0]
 c00a1c2:	4b08      	ldr	r3, [pc, #32]	; (c00a1e4 <find_volume+0x494>)
 c00a1c4:	881a      	ldrh	r2, [r3, #0]
 c00a1c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c00a1c8:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 c00a1ca:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 c00a1cc:	f7fe fa0e 	bl	c0085ec <clear_lock>
#endif
	return FR_OK;
 c00a1d0:	2300      	movs	r3, #0
}
 c00a1d2:	4618      	mov	r0, r3
 c00a1d4:	3758      	adds	r7, #88	; 0x58
 c00a1d6:	46bd      	mov	sp, r7
 c00a1d8:	bd80      	pop	{r7, pc}
 c00a1da:	bf00      	nop
 c00a1dc:	41615252 	.word	0x41615252
 c00a1e0:	61417272 	.word	0x61417272
 c00a1e4:	300007e8 	.word	0x300007e8

0c00a1e8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 c00a1e8:	b580      	push	{r7, lr}
 c00a1ea:	b084      	sub	sp, #16
 c00a1ec:	af00      	add	r7, sp, #0
 c00a1ee:	6078      	str	r0, [r7, #4]
 c00a1f0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 c00a1f2:	2309      	movs	r3, #9
 c00a1f4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 c00a1f6:	687b      	ldr	r3, [r7, #4]
 c00a1f8:	2b00      	cmp	r3, #0
 c00a1fa:	d01c      	beq.n	c00a236 <validate+0x4e>
 c00a1fc:	687b      	ldr	r3, [r7, #4]
 c00a1fe:	681b      	ldr	r3, [r3, #0]
 c00a200:	2b00      	cmp	r3, #0
 c00a202:	d018      	beq.n	c00a236 <validate+0x4e>
 c00a204:	687b      	ldr	r3, [r7, #4]
 c00a206:	681b      	ldr	r3, [r3, #0]
 c00a208:	781b      	ldrb	r3, [r3, #0]
 c00a20a:	2b00      	cmp	r3, #0
 c00a20c:	d013      	beq.n	c00a236 <validate+0x4e>
 c00a20e:	687b      	ldr	r3, [r7, #4]
 c00a210:	889a      	ldrh	r2, [r3, #4]
 c00a212:	687b      	ldr	r3, [r7, #4]
 c00a214:	681b      	ldr	r3, [r3, #0]
 c00a216:	88db      	ldrh	r3, [r3, #6]
 c00a218:	429a      	cmp	r2, r3
 c00a21a:	d10c      	bne.n	c00a236 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 c00a21c:	687b      	ldr	r3, [r7, #4]
 c00a21e:	681b      	ldr	r3, [r3, #0]
 c00a220:	785b      	ldrb	r3, [r3, #1]
 c00a222:	4618      	mov	r0, r3
 c00a224:	f7fd fefc 	bl	c008020 <disk_status>
 c00a228:	4603      	mov	r3, r0
 c00a22a:	f003 0301 	and.w	r3, r3, #1
 c00a22e:	2b00      	cmp	r3, #0
 c00a230:	d101      	bne.n	c00a236 <validate+0x4e>
			res = FR_OK;
 c00a232:	2300      	movs	r3, #0
 c00a234:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 c00a236:	7bfb      	ldrb	r3, [r7, #15]
 c00a238:	2b00      	cmp	r3, #0
 c00a23a:	d102      	bne.n	c00a242 <validate+0x5a>
 c00a23c:	687b      	ldr	r3, [r7, #4]
 c00a23e:	681b      	ldr	r3, [r3, #0]
 c00a240:	e000      	b.n	c00a244 <validate+0x5c>
 c00a242:	2300      	movs	r3, #0
 c00a244:	683a      	ldr	r2, [r7, #0]
 c00a246:	6013      	str	r3, [r2, #0]
	return res;
 c00a248:	7bfb      	ldrb	r3, [r7, #15]
}
 c00a24a:	4618      	mov	r0, r3
 c00a24c:	3710      	adds	r7, #16
 c00a24e:	46bd      	mov	sp, r7
 c00a250:	bd80      	pop	{r7, pc}
	...

0c00a254 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 c00a254:	b580      	push	{r7, lr}
 c00a256:	b088      	sub	sp, #32
 c00a258:	af00      	add	r7, sp, #0
 c00a25a:	60f8      	str	r0, [r7, #12]
 c00a25c:	60b9      	str	r1, [r7, #8]
 c00a25e:	4613      	mov	r3, r2
 c00a260:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 c00a262:	68bb      	ldr	r3, [r7, #8]
 c00a264:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 c00a266:	f107 0310 	add.w	r3, r7, #16
 c00a26a:	4618      	mov	r0, r3
 c00a26c:	f7ff fcd5 	bl	c009c1a <get_ldnumber>
 c00a270:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 c00a272:	69fb      	ldr	r3, [r7, #28]
 c00a274:	2b00      	cmp	r3, #0
 c00a276:	da01      	bge.n	c00a27c <f_mount+0x28>
 c00a278:	230b      	movs	r3, #11
 c00a27a:	e02b      	b.n	c00a2d4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 c00a27c:	4a17      	ldr	r2, [pc, #92]	; (c00a2dc <f_mount+0x88>)
 c00a27e:	69fb      	ldr	r3, [r7, #28]
 c00a280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c00a284:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 c00a286:	69bb      	ldr	r3, [r7, #24]
 c00a288:	2b00      	cmp	r3, #0
 c00a28a:	d005      	beq.n	c00a298 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 c00a28c:	69b8      	ldr	r0, [r7, #24]
 c00a28e:	f7fe f9ad 	bl	c0085ec <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 c00a292:	69bb      	ldr	r3, [r7, #24]
 c00a294:	2200      	movs	r2, #0
 c00a296:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 c00a298:	68fb      	ldr	r3, [r7, #12]
 c00a29a:	2b00      	cmp	r3, #0
 c00a29c:	d002      	beq.n	c00a2a4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 c00a29e:	68fb      	ldr	r3, [r7, #12]
 c00a2a0:	2200      	movs	r2, #0
 c00a2a2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 c00a2a4:	68fa      	ldr	r2, [r7, #12]
 c00a2a6:	490d      	ldr	r1, [pc, #52]	; (c00a2dc <f_mount+0x88>)
 c00a2a8:	69fb      	ldr	r3, [r7, #28]
 c00a2aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 c00a2ae:	68fb      	ldr	r3, [r7, #12]
 c00a2b0:	2b00      	cmp	r3, #0
 c00a2b2:	d002      	beq.n	c00a2ba <f_mount+0x66>
 c00a2b4:	79fb      	ldrb	r3, [r7, #7]
 c00a2b6:	2b01      	cmp	r3, #1
 c00a2b8:	d001      	beq.n	c00a2be <f_mount+0x6a>
 c00a2ba:	2300      	movs	r3, #0
 c00a2bc:	e00a      	b.n	c00a2d4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 c00a2be:	f107 010c 	add.w	r1, r7, #12
 c00a2c2:	f107 0308 	add.w	r3, r7, #8
 c00a2c6:	2200      	movs	r2, #0
 c00a2c8:	4618      	mov	r0, r3
 c00a2ca:	f7ff fd41 	bl	c009d50 <find_volume>
 c00a2ce:	4603      	mov	r3, r0
 c00a2d0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 c00a2d2:	7dfb      	ldrb	r3, [r7, #23]
}
 c00a2d4:	4618      	mov	r0, r3
 c00a2d6:	3720      	adds	r7, #32
 c00a2d8:	46bd      	mov	sp, r7
 c00a2da:	bd80      	pop	{r7, pc}
 c00a2dc:	300007e4 	.word	0x300007e4

0c00a2e0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 c00a2e0:	b580      	push	{r7, lr}
 c00a2e2:	b09a      	sub	sp, #104	; 0x68
 c00a2e4:	af00      	add	r7, sp, #0
 c00a2e6:	60f8      	str	r0, [r7, #12]
 c00a2e8:	60b9      	str	r1, [r7, #8]
 c00a2ea:	4613      	mov	r3, r2
 c00a2ec:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 c00a2ee:	68fb      	ldr	r3, [r7, #12]
 c00a2f0:	2b00      	cmp	r3, #0
 c00a2f2:	d101      	bne.n	c00a2f8 <f_open+0x18>
 c00a2f4:	2309      	movs	r3, #9
 c00a2f6:	e1bd      	b.n	c00a674 <f_open+0x394>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 c00a2f8:	79fb      	ldrb	r3, [r7, #7]
 c00a2fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 c00a2fe:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 c00a300:	79fa      	ldrb	r2, [r7, #7]
 c00a302:	f107 0110 	add.w	r1, r7, #16
 c00a306:	f107 0308 	add.w	r3, r7, #8
 c00a30a:	4618      	mov	r0, r3
 c00a30c:	f7ff fd20 	bl	c009d50 <find_volume>
 c00a310:	4603      	mov	r3, r0
 c00a312:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 c00a316:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 c00a31a:	2b00      	cmp	r3, #0
 c00a31c:	f040 81a1 	bne.w	c00a662 <f_open+0x382>
		dj.obj.fs = fs;
 c00a320:	693b      	ldr	r3, [r7, #16]
 c00a322:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 c00a324:	f44f 7000 	mov.w	r0, #512	; 0x200
 c00a328:	f001 f98b 	bl	c00b642 <ff_memalloc>
 c00a32c:	65b8      	str	r0, [r7, #88]	; 0x58
 c00a32e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 c00a330:	2b00      	cmp	r3, #0
 c00a332:	d101      	bne.n	c00a338 <f_open+0x58>
 c00a334:	2311      	movs	r3, #17
 c00a336:	e19d      	b.n	c00a674 <f_open+0x394>
 c00a338:	693b      	ldr	r3, [r7, #16]
 c00a33a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 c00a33c:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 c00a33e:	68ba      	ldr	r2, [r7, #8]
 c00a340:	f107 0314 	add.w	r3, r7, #20
 c00a344:	4611      	mov	r1, r2
 c00a346:	4618      	mov	r0, r3
 c00a348:	f7ff fbf6 	bl	c009b38 <follow_path>
 c00a34c:	4603      	mov	r3, r0
 c00a34e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 c00a352:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 c00a356:	2b00      	cmp	r3, #0
 c00a358:	d11a      	bne.n	c00a390 <f_open+0xb0>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 c00a35a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 c00a35e:	b25b      	sxtb	r3, r3
 c00a360:	2b00      	cmp	r3, #0
 c00a362:	da03      	bge.n	c00a36c <f_open+0x8c>
				res = FR_INVALID_NAME;
 c00a364:	2306      	movs	r3, #6
 c00a366:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 c00a36a:	e011      	b.n	c00a390 <f_open+0xb0>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 c00a36c:	79fb      	ldrb	r3, [r7, #7]
 c00a36e:	f023 0301 	bic.w	r3, r3, #1
 c00a372:	2b00      	cmp	r3, #0
 c00a374:	bf14      	ite	ne
 c00a376:	2301      	movne	r3, #1
 c00a378:	2300      	moveq	r3, #0
 c00a37a:	b2db      	uxtb	r3, r3
 c00a37c:	461a      	mov	r2, r3
 c00a37e:	f107 0314 	add.w	r3, r7, #20
 c00a382:	4611      	mov	r1, r2
 c00a384:	4618      	mov	r0, r3
 c00a386:	f7fd ffe9 	bl	c00835c <chk_lock>
 c00a38a:	4603      	mov	r3, r0
 c00a38c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 c00a390:	79fb      	ldrb	r3, [r7, #7]
 c00a392:	f003 031c 	and.w	r3, r3, #28
 c00a396:	2b00      	cmp	r3, #0
 c00a398:	d07f      	beq.n	c00a49a <f_open+0x1ba>
			if (res != FR_OK) {					/* No file, create new */
 c00a39a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 c00a39e:	2b00      	cmp	r3, #0
 c00a3a0:	d017      	beq.n	c00a3d2 <f_open+0xf2>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 c00a3a2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 c00a3a6:	2b04      	cmp	r3, #4
 c00a3a8:	d10e      	bne.n	c00a3c8 <f_open+0xe8>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 c00a3aa:	f7fe f833 	bl	c008414 <enq_lock>
 c00a3ae:	4603      	mov	r3, r0
 c00a3b0:	2b00      	cmp	r3, #0
 c00a3b2:	d006      	beq.n	c00a3c2 <f_open+0xe2>
 c00a3b4:	f107 0314 	add.w	r3, r7, #20
 c00a3b8:	4618      	mov	r0, r3
 c00a3ba:	f7ff f90d 	bl	c0095d8 <dir_register>
 c00a3be:	4603      	mov	r3, r0
 c00a3c0:	e000      	b.n	c00a3c4 <f_open+0xe4>
 c00a3c2:	2312      	movs	r3, #18
 c00a3c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 c00a3c8:	79fb      	ldrb	r3, [r7, #7]
 c00a3ca:	f043 0308 	orr.w	r3, r3, #8
 c00a3ce:	71fb      	strb	r3, [r7, #7]
 c00a3d0:	e010      	b.n	c00a3f4 <f_open+0x114>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 c00a3d2:	7ebb      	ldrb	r3, [r7, #26]
 c00a3d4:	f003 0311 	and.w	r3, r3, #17
 c00a3d8:	2b00      	cmp	r3, #0
 c00a3da:	d003      	beq.n	c00a3e4 <f_open+0x104>
					res = FR_DENIED;
 c00a3dc:	2307      	movs	r3, #7
 c00a3de:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 c00a3e2:	e007      	b.n	c00a3f4 <f_open+0x114>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 c00a3e4:	79fb      	ldrb	r3, [r7, #7]
 c00a3e6:	f003 0304 	and.w	r3, r3, #4
 c00a3ea:	2b00      	cmp	r3, #0
 c00a3ec:	d002      	beq.n	c00a3f4 <f_open+0x114>
 c00a3ee:	2308      	movs	r3, #8
 c00a3f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 c00a3f4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 c00a3f8:	2b00      	cmp	r3, #0
 c00a3fa:	d168      	bne.n	c00a4ce <f_open+0x1ee>
 c00a3fc:	79fb      	ldrb	r3, [r7, #7]
 c00a3fe:	f003 0308 	and.w	r3, r3, #8
 c00a402:	2b00      	cmp	r3, #0
 c00a404:	d063      	beq.n	c00a4ce <f_open+0x1ee>
				dw = GET_FATTIME();
 c00a406:	f7fc fc7f 	bl	c006d08 <get_fattime>
 c00a40a:	6578      	str	r0, [r7, #84]	; 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 c00a40c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 c00a40e:	330e      	adds	r3, #14
 c00a410:	6d79      	ldr	r1, [r7, #84]	; 0x54
 c00a412:	4618      	mov	r0, r3
 c00a414:	f7fd fef8 	bl	c008208 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 c00a418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 c00a41a:	3316      	adds	r3, #22
 c00a41c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 c00a41e:	4618      	mov	r0, r3
 c00a420:	f7fd fef2 	bl	c008208 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 c00a424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 c00a426:	330b      	adds	r3, #11
 c00a428:	2220      	movs	r2, #32
 c00a42a:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 c00a42c:	693b      	ldr	r3, [r7, #16]
 c00a42e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 c00a430:	4611      	mov	r1, r2
 c00a432:	4618      	mov	r0, r3
 c00a434:	f7fe fe49 	bl	c0090ca <ld_clust>
 c00a438:	6538      	str	r0, [r7, #80]	; 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 c00a43a:	693b      	ldr	r3, [r7, #16]
 c00a43c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 c00a43e:	2200      	movs	r2, #0
 c00a440:	4618      	mov	r0, r3
 c00a442:	f7fe fe61 	bl	c009108 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 c00a446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 c00a448:	331c      	adds	r3, #28
 c00a44a:	2100      	movs	r1, #0
 c00a44c:	4618      	mov	r0, r3
 c00a44e:	f7fd fedb 	bl	c008208 <st_dword>
					fs->wflag = 1;
 c00a452:	693b      	ldr	r3, [r7, #16]
 c00a454:	2201      	movs	r2, #1
 c00a456:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 c00a458:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 c00a45a:	2b00      	cmp	r3, #0
 c00a45c:	d037      	beq.n	c00a4ce <f_open+0x1ee>
						dw = fs->winsect;
 c00a45e:	693b      	ldr	r3, [r7, #16]
 c00a460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c00a462:	657b      	str	r3, [r7, #84]	; 0x54
						res = remove_chain(&dj.obj, cl, 0);
 c00a464:	f107 0314 	add.w	r3, r7, #20
 c00a468:	2200      	movs	r2, #0
 c00a46a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 c00a46c:	4618      	mov	r0, r3
 c00a46e:	f7fe fb74 	bl	c008b5a <remove_chain>
 c00a472:	4603      	mov	r3, r0
 c00a474:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 c00a478:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 c00a47c:	2b00      	cmp	r3, #0
 c00a47e:	d126      	bne.n	c00a4ce <f_open+0x1ee>
							res = move_window(fs, dw);
 c00a480:	693b      	ldr	r3, [r7, #16]
 c00a482:	6d79      	ldr	r1, [r7, #84]	; 0x54
 c00a484:	4618      	mov	r0, r3
 c00a486:	f7fe f919 	bl	c0086bc <move_window>
 c00a48a:	4603      	mov	r3, r0
 c00a48c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 c00a490:	693b      	ldr	r3, [r7, #16]
 c00a492:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 c00a494:	3a01      	subs	r2, #1
 c00a496:	611a      	str	r2, [r3, #16]
 c00a498:	e019      	b.n	c00a4ce <f_open+0x1ee>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 c00a49a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 c00a49e:	2b00      	cmp	r3, #0
 c00a4a0:	d115      	bne.n	c00a4ce <f_open+0x1ee>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 c00a4a2:	7ebb      	ldrb	r3, [r7, #26]
 c00a4a4:	f003 0310 	and.w	r3, r3, #16
 c00a4a8:	2b00      	cmp	r3, #0
 c00a4aa:	d003      	beq.n	c00a4b4 <f_open+0x1d4>
					res = FR_NO_FILE;
 c00a4ac:	2304      	movs	r3, #4
 c00a4ae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 c00a4b2:	e00c      	b.n	c00a4ce <f_open+0x1ee>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 c00a4b4:	79fb      	ldrb	r3, [r7, #7]
 c00a4b6:	f003 0302 	and.w	r3, r3, #2
 c00a4ba:	2b00      	cmp	r3, #0
 c00a4bc:	d007      	beq.n	c00a4ce <f_open+0x1ee>
 c00a4be:	7ebb      	ldrb	r3, [r7, #26]
 c00a4c0:	f003 0301 	and.w	r3, r3, #1
 c00a4c4:	2b00      	cmp	r3, #0
 c00a4c6:	d002      	beq.n	c00a4ce <f_open+0x1ee>
						res = FR_DENIED;
 c00a4c8:	2307      	movs	r3, #7
 c00a4ca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 c00a4ce:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 c00a4d2:	2b00      	cmp	r3, #0
 c00a4d4:	d128      	bne.n	c00a528 <f_open+0x248>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 c00a4d6:	79fb      	ldrb	r3, [r7, #7]
 c00a4d8:	f003 0308 	and.w	r3, r3, #8
 c00a4dc:	2b00      	cmp	r3, #0
 c00a4de:	d003      	beq.n	c00a4e8 <f_open+0x208>
				mode |= FA_MODIFIED;
 c00a4e0:	79fb      	ldrb	r3, [r7, #7]
 c00a4e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 c00a4e6:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 c00a4e8:	693b      	ldr	r3, [r7, #16]
 c00a4ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 c00a4ec:	68fb      	ldr	r3, [r7, #12]
 c00a4ee:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 c00a4f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 c00a4f2:	68fb      	ldr	r3, [r7, #12]
 c00a4f4:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 c00a4f6:	79fb      	ldrb	r3, [r7, #7]
 c00a4f8:	f023 0301 	bic.w	r3, r3, #1
 c00a4fc:	2b00      	cmp	r3, #0
 c00a4fe:	bf14      	ite	ne
 c00a500:	2301      	movne	r3, #1
 c00a502:	2300      	moveq	r3, #0
 c00a504:	b2db      	uxtb	r3, r3
 c00a506:	461a      	mov	r2, r3
 c00a508:	f107 0314 	add.w	r3, r7, #20
 c00a50c:	4611      	mov	r1, r2
 c00a50e:	4618      	mov	r0, r3
 c00a510:	f7fd ffa2 	bl	c008458 <inc_lock>
 c00a514:	4602      	mov	r2, r0
 c00a516:	68fb      	ldr	r3, [r7, #12]
 c00a518:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 c00a51a:	68fb      	ldr	r3, [r7, #12]
 c00a51c:	691b      	ldr	r3, [r3, #16]
 c00a51e:	2b00      	cmp	r3, #0
 c00a520:	d102      	bne.n	c00a528 <f_open+0x248>
 c00a522:	2302      	movs	r3, #2
 c00a524:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 c00a528:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 c00a52c:	2b00      	cmp	r3, #0
 c00a52e:	f040 8095 	bne.w	c00a65c <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 c00a532:	693b      	ldr	r3, [r7, #16]
 c00a534:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 c00a536:	4611      	mov	r1, r2
 c00a538:	4618      	mov	r0, r3
 c00a53a:	f7fe fdc6 	bl	c0090ca <ld_clust>
 c00a53e:	4602      	mov	r2, r0
 c00a540:	68fb      	ldr	r3, [r7, #12]
 c00a542:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 c00a544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 c00a546:	331c      	adds	r3, #28
 c00a548:	4618      	mov	r0, r3
 c00a54a:	f7fd fe1f 	bl	c00818c <ld_dword>
 c00a54e:	4602      	mov	r2, r0
 c00a550:	68fb      	ldr	r3, [r7, #12]
 c00a552:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 c00a554:	68fb      	ldr	r3, [r7, #12]
 c00a556:	2200      	movs	r2, #0
 c00a558:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 c00a55a:	693a      	ldr	r2, [r7, #16]
 c00a55c:	68fb      	ldr	r3, [r7, #12]
 c00a55e:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 c00a560:	693b      	ldr	r3, [r7, #16]
 c00a562:	88da      	ldrh	r2, [r3, #6]
 c00a564:	68fb      	ldr	r3, [r7, #12]
 c00a566:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 c00a568:	68fb      	ldr	r3, [r7, #12]
 c00a56a:	79fa      	ldrb	r2, [r7, #7]
 c00a56c:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 c00a56e:	68fb      	ldr	r3, [r7, #12]
 c00a570:	2200      	movs	r2, #0
 c00a572:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 c00a574:	68fb      	ldr	r3, [r7, #12]
 c00a576:	2200      	movs	r2, #0
 c00a578:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 c00a57a:	68fb      	ldr	r3, [r7, #12]
 c00a57c:	2200      	movs	r2, #0
 c00a57e:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 c00a580:	68fb      	ldr	r3, [r7, #12]
 c00a582:	3330      	adds	r3, #48	; 0x30
 c00a584:	f44f 7200 	mov.w	r2, #512	; 0x200
 c00a588:	2100      	movs	r1, #0
 c00a58a:	4618      	mov	r0, r3
 c00a58c:	f7fd fe89 	bl	c0082a2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 c00a590:	79fb      	ldrb	r3, [r7, #7]
 c00a592:	f003 0320 	and.w	r3, r3, #32
 c00a596:	2b00      	cmp	r3, #0
 c00a598:	d060      	beq.n	c00a65c <f_open+0x37c>
 c00a59a:	68fb      	ldr	r3, [r7, #12]
 c00a59c:	68db      	ldr	r3, [r3, #12]
 c00a59e:	2b00      	cmp	r3, #0
 c00a5a0:	d05c      	beq.n	c00a65c <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 c00a5a2:	68fb      	ldr	r3, [r7, #12]
 c00a5a4:	68da      	ldr	r2, [r3, #12]
 c00a5a6:	68fb      	ldr	r3, [r7, #12]
 c00a5a8:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 c00a5aa:	693b      	ldr	r3, [r7, #16]
 c00a5ac:	895b      	ldrh	r3, [r3, #10]
 c00a5ae:	025b      	lsls	r3, r3, #9
 c00a5b0:	64fb      	str	r3, [r7, #76]	; 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 c00a5b2:	68fb      	ldr	r3, [r7, #12]
 c00a5b4:	689b      	ldr	r3, [r3, #8]
 c00a5b6:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 c00a5b8:	68fb      	ldr	r3, [r7, #12]
 c00a5ba:	68db      	ldr	r3, [r3, #12]
 c00a5bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 c00a5be:	e016      	b.n	c00a5ee <f_open+0x30e>
					clst = get_fat(&fp->obj, clst);
 c00a5c0:	68fb      	ldr	r3, [r7, #12]
 c00a5c2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 c00a5c4:	4618      	mov	r0, r3
 c00a5c6:	f7fe f934 	bl	c008832 <get_fat>
 c00a5ca:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 c00a5cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 c00a5ce:	2b01      	cmp	r3, #1
 c00a5d0:	d802      	bhi.n	c00a5d8 <f_open+0x2f8>
 c00a5d2:	2302      	movs	r3, #2
 c00a5d4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 c00a5d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 c00a5da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 c00a5de:	d102      	bne.n	c00a5e6 <f_open+0x306>
 c00a5e0:	2301      	movs	r3, #1
 c00a5e2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 c00a5e6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 c00a5e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 c00a5ea:	1ad3      	subs	r3, r2, r3
 c00a5ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 c00a5ee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 c00a5f2:	2b00      	cmp	r3, #0
 c00a5f4:	d103      	bne.n	c00a5fe <f_open+0x31e>
 c00a5f6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 c00a5f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 c00a5fa:	429a      	cmp	r2, r3
 c00a5fc:	d8e0      	bhi.n	c00a5c0 <f_open+0x2e0>
				}
				fp->clust = clst;
 c00a5fe:	68fb      	ldr	r3, [r7, #12]
 c00a600:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 c00a602:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 c00a604:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 c00a608:	2b00      	cmp	r3, #0
 c00a60a:	d127      	bne.n	c00a65c <f_open+0x37c>
 c00a60c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 c00a60e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c00a612:	2b00      	cmp	r3, #0
 c00a614:	d022      	beq.n	c00a65c <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 c00a616:	693b      	ldr	r3, [r7, #16]
 c00a618:	6e39      	ldr	r1, [r7, #96]	; 0x60
 c00a61a:	4618      	mov	r0, r3
 c00a61c:	f7fe f8ea 	bl	c0087f4 <clust2sect>
 c00a620:	64b8      	str	r0, [r7, #72]	; 0x48
 c00a622:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 c00a624:	2b00      	cmp	r3, #0
 c00a626:	d103      	bne.n	c00a630 <f_open+0x350>
						res = FR_INT_ERR;
 c00a628:	2302      	movs	r3, #2
 c00a62a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 c00a62e:	e015      	b.n	c00a65c <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 c00a630:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 c00a632:	0a5a      	lsrs	r2, r3, #9
 c00a634:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 c00a636:	441a      	add	r2, r3
 c00a638:	68fb      	ldr	r3, [r7, #12]
 c00a63a:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 c00a63c:	693b      	ldr	r3, [r7, #16]
 c00a63e:	7858      	ldrb	r0, [r3, #1]
 c00a640:	68fb      	ldr	r3, [r7, #12]
 c00a642:	f103 0130 	add.w	r1, r3, #48	; 0x30
 c00a646:	68fb      	ldr	r3, [r7, #12]
 c00a648:	6a1a      	ldr	r2, [r3, #32]
 c00a64a:	2301      	movs	r3, #1
 c00a64c:	f7fd fd28 	bl	c0080a0 <disk_read>
 c00a650:	4603      	mov	r3, r0
 c00a652:	2b00      	cmp	r3, #0
 c00a654:	d002      	beq.n	c00a65c <f_open+0x37c>
 c00a656:	2301      	movs	r3, #1
 c00a658:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 c00a65c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 c00a65e:	f000 fffc 	bl	c00b65a <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 c00a662:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 c00a666:	2b00      	cmp	r3, #0
 c00a668:	d002      	beq.n	c00a670 <f_open+0x390>
 c00a66a:	68fb      	ldr	r3, [r7, #12]
 c00a66c:	2200      	movs	r2, #0
 c00a66e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 c00a670:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 c00a674:	4618      	mov	r0, r3
 c00a676:	3768      	adds	r7, #104	; 0x68
 c00a678:	46bd      	mov	sp, r7
 c00a67a:	bd80      	pop	{r7, pc}

0c00a67c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 c00a67c:	b580      	push	{r7, lr}
 c00a67e:	b08e      	sub	sp, #56	; 0x38
 c00a680:	af00      	add	r7, sp, #0
 c00a682:	60f8      	str	r0, [r7, #12]
 c00a684:	60b9      	str	r1, [r7, #8]
 c00a686:	607a      	str	r2, [r7, #4]
 c00a688:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 c00a68a:	68bb      	ldr	r3, [r7, #8]
 c00a68c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 c00a68e:	683b      	ldr	r3, [r7, #0]
 c00a690:	2200      	movs	r2, #0
 c00a692:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 c00a694:	68fb      	ldr	r3, [r7, #12]
 c00a696:	f107 0214 	add.w	r2, r7, #20
 c00a69a:	4611      	mov	r1, r2
 c00a69c:	4618      	mov	r0, r3
 c00a69e:	f7ff fda3 	bl	c00a1e8 <validate>
 c00a6a2:	4603      	mov	r3, r0
 c00a6a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 c00a6a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 c00a6ac:	2b00      	cmp	r3, #0
 c00a6ae:	d107      	bne.n	c00a6c0 <f_read+0x44>
 c00a6b0:	68fb      	ldr	r3, [r7, #12]
 c00a6b2:	7d5b      	ldrb	r3, [r3, #21]
 c00a6b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 c00a6b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 c00a6bc:	2b00      	cmp	r3, #0
 c00a6be:	d002      	beq.n	c00a6c6 <f_read+0x4a>
 c00a6c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 c00a6c4:	e115      	b.n	c00a8f2 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 c00a6c6:	68fb      	ldr	r3, [r7, #12]
 c00a6c8:	7d1b      	ldrb	r3, [r3, #20]
 c00a6ca:	f003 0301 	and.w	r3, r3, #1
 c00a6ce:	2b00      	cmp	r3, #0
 c00a6d0:	d101      	bne.n	c00a6d6 <f_read+0x5a>
 c00a6d2:	2307      	movs	r3, #7
 c00a6d4:	e10d      	b.n	c00a8f2 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 c00a6d6:	68fb      	ldr	r3, [r7, #12]
 c00a6d8:	68da      	ldr	r2, [r3, #12]
 c00a6da:	68fb      	ldr	r3, [r7, #12]
 c00a6dc:	699b      	ldr	r3, [r3, #24]
 c00a6de:	1ad3      	subs	r3, r2, r3
 c00a6e0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 c00a6e2:	687a      	ldr	r2, [r7, #4]
 c00a6e4:	6a3b      	ldr	r3, [r7, #32]
 c00a6e6:	429a      	cmp	r2, r3
 c00a6e8:	f240 80fe 	bls.w	c00a8e8 <f_read+0x26c>
 c00a6ec:	6a3b      	ldr	r3, [r7, #32]
 c00a6ee:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 c00a6f0:	e0fa      	b.n	c00a8e8 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 c00a6f2:	68fb      	ldr	r3, [r7, #12]
 c00a6f4:	699b      	ldr	r3, [r3, #24]
 c00a6f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c00a6fa:	2b00      	cmp	r3, #0
 c00a6fc:	f040 80c6 	bne.w	c00a88c <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 c00a700:	68fb      	ldr	r3, [r7, #12]
 c00a702:	699b      	ldr	r3, [r3, #24]
 c00a704:	0a5b      	lsrs	r3, r3, #9
 c00a706:	697a      	ldr	r2, [r7, #20]
 c00a708:	8952      	ldrh	r2, [r2, #10]
 c00a70a:	3a01      	subs	r2, #1
 c00a70c:	4013      	ands	r3, r2
 c00a70e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 c00a710:	69fb      	ldr	r3, [r7, #28]
 c00a712:	2b00      	cmp	r3, #0
 c00a714:	d12f      	bne.n	c00a776 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 c00a716:	68fb      	ldr	r3, [r7, #12]
 c00a718:	699b      	ldr	r3, [r3, #24]
 c00a71a:	2b00      	cmp	r3, #0
 c00a71c:	d103      	bne.n	c00a726 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 c00a71e:	68fb      	ldr	r3, [r7, #12]
 c00a720:	689b      	ldr	r3, [r3, #8]
 c00a722:	633b      	str	r3, [r7, #48]	; 0x30
 c00a724:	e013      	b.n	c00a74e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 c00a726:	68fb      	ldr	r3, [r7, #12]
 c00a728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c00a72a:	2b00      	cmp	r3, #0
 c00a72c:	d007      	beq.n	c00a73e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 c00a72e:	68fb      	ldr	r3, [r7, #12]
 c00a730:	699b      	ldr	r3, [r3, #24]
 c00a732:	4619      	mov	r1, r3
 c00a734:	68f8      	ldr	r0, [r7, #12]
 c00a736:	f7fe fb0d 	bl	c008d54 <clmt_clust>
 c00a73a:	6338      	str	r0, [r7, #48]	; 0x30
 c00a73c:	e007      	b.n	c00a74e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 c00a73e:	68fa      	ldr	r2, [r7, #12]
 c00a740:	68fb      	ldr	r3, [r7, #12]
 c00a742:	69db      	ldr	r3, [r3, #28]
 c00a744:	4619      	mov	r1, r3
 c00a746:	4610      	mov	r0, r2
 c00a748:	f7fe f873 	bl	c008832 <get_fat>
 c00a74c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 c00a74e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c00a750:	2b01      	cmp	r3, #1
 c00a752:	d804      	bhi.n	c00a75e <f_read+0xe2>
 c00a754:	68fb      	ldr	r3, [r7, #12]
 c00a756:	2202      	movs	r2, #2
 c00a758:	755a      	strb	r2, [r3, #21]
 c00a75a:	2302      	movs	r3, #2
 c00a75c:	e0c9      	b.n	c00a8f2 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 c00a75e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c00a760:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 c00a764:	d104      	bne.n	c00a770 <f_read+0xf4>
 c00a766:	68fb      	ldr	r3, [r7, #12]
 c00a768:	2201      	movs	r2, #1
 c00a76a:	755a      	strb	r2, [r3, #21]
 c00a76c:	2301      	movs	r3, #1
 c00a76e:	e0c0      	b.n	c00a8f2 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 c00a770:	68fb      	ldr	r3, [r7, #12]
 c00a772:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 c00a774:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 c00a776:	697a      	ldr	r2, [r7, #20]
 c00a778:	68fb      	ldr	r3, [r7, #12]
 c00a77a:	69db      	ldr	r3, [r3, #28]
 c00a77c:	4619      	mov	r1, r3
 c00a77e:	4610      	mov	r0, r2
 c00a780:	f7fe f838 	bl	c0087f4 <clust2sect>
 c00a784:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 c00a786:	69bb      	ldr	r3, [r7, #24]
 c00a788:	2b00      	cmp	r3, #0
 c00a78a:	d104      	bne.n	c00a796 <f_read+0x11a>
 c00a78c:	68fb      	ldr	r3, [r7, #12]
 c00a78e:	2202      	movs	r2, #2
 c00a790:	755a      	strb	r2, [r3, #21]
 c00a792:	2302      	movs	r3, #2
 c00a794:	e0ad      	b.n	c00a8f2 <f_read+0x276>
			sect += csect;
 c00a796:	69ba      	ldr	r2, [r7, #24]
 c00a798:	69fb      	ldr	r3, [r7, #28]
 c00a79a:	4413      	add	r3, r2
 c00a79c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 c00a79e:	687b      	ldr	r3, [r7, #4]
 c00a7a0:	0a5b      	lsrs	r3, r3, #9
 c00a7a2:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 c00a7a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c00a7a6:	2b00      	cmp	r3, #0
 c00a7a8:	d039      	beq.n	c00a81e <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 c00a7aa:	69fa      	ldr	r2, [r7, #28]
 c00a7ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c00a7ae:	4413      	add	r3, r2
 c00a7b0:	697a      	ldr	r2, [r7, #20]
 c00a7b2:	8952      	ldrh	r2, [r2, #10]
 c00a7b4:	4293      	cmp	r3, r2
 c00a7b6:	d905      	bls.n	c00a7c4 <f_read+0x148>
					cc = fs->csize - csect;
 c00a7b8:	697b      	ldr	r3, [r7, #20]
 c00a7ba:	895b      	ldrh	r3, [r3, #10]
 c00a7bc:	461a      	mov	r2, r3
 c00a7be:	69fb      	ldr	r3, [r7, #28]
 c00a7c0:	1ad3      	subs	r3, r2, r3
 c00a7c2:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 c00a7c4:	697b      	ldr	r3, [r7, #20]
 c00a7c6:	7858      	ldrb	r0, [r3, #1]
 c00a7c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c00a7ca:	69ba      	ldr	r2, [r7, #24]
 c00a7cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 c00a7ce:	f7fd fc67 	bl	c0080a0 <disk_read>
 c00a7d2:	4603      	mov	r3, r0
 c00a7d4:	2b00      	cmp	r3, #0
 c00a7d6:	d004      	beq.n	c00a7e2 <f_read+0x166>
 c00a7d8:	68fb      	ldr	r3, [r7, #12]
 c00a7da:	2201      	movs	r2, #1
 c00a7dc:	755a      	strb	r2, [r3, #21]
 c00a7de:	2301      	movs	r3, #1
 c00a7e0:	e087      	b.n	c00a8f2 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 c00a7e2:	68fb      	ldr	r3, [r7, #12]
 c00a7e4:	7d1b      	ldrb	r3, [r3, #20]
 c00a7e6:	b25b      	sxtb	r3, r3
 c00a7e8:	2b00      	cmp	r3, #0
 c00a7ea:	da14      	bge.n	c00a816 <f_read+0x19a>
 c00a7ec:	68fb      	ldr	r3, [r7, #12]
 c00a7ee:	6a1a      	ldr	r2, [r3, #32]
 c00a7f0:	69bb      	ldr	r3, [r7, #24]
 c00a7f2:	1ad3      	subs	r3, r2, r3
 c00a7f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 c00a7f6:	429a      	cmp	r2, r3
 c00a7f8:	d90d      	bls.n	c00a816 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 c00a7fa:	68fb      	ldr	r3, [r7, #12]
 c00a7fc:	6a1a      	ldr	r2, [r3, #32]
 c00a7fe:	69bb      	ldr	r3, [r7, #24]
 c00a800:	1ad3      	subs	r3, r2, r3
 c00a802:	025b      	lsls	r3, r3, #9
 c00a804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 c00a806:	18d0      	adds	r0, r2, r3
 c00a808:	68fb      	ldr	r3, [r7, #12]
 c00a80a:	3330      	adds	r3, #48	; 0x30
 c00a80c:	f44f 7200 	mov.w	r2, #512	; 0x200
 c00a810:	4619      	mov	r1, r3
 c00a812:	f7fd fd25 	bl	c008260 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 c00a816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c00a818:	025b      	lsls	r3, r3, #9
 c00a81a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 c00a81c:	e050      	b.n	c00a8c0 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 c00a81e:	68fb      	ldr	r3, [r7, #12]
 c00a820:	6a1b      	ldr	r3, [r3, #32]
 c00a822:	69ba      	ldr	r2, [r7, #24]
 c00a824:	429a      	cmp	r2, r3
 c00a826:	d02e      	beq.n	c00a886 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 c00a828:	68fb      	ldr	r3, [r7, #12]
 c00a82a:	7d1b      	ldrb	r3, [r3, #20]
 c00a82c:	b25b      	sxtb	r3, r3
 c00a82e:	2b00      	cmp	r3, #0
 c00a830:	da18      	bge.n	c00a864 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 c00a832:	697b      	ldr	r3, [r7, #20]
 c00a834:	7858      	ldrb	r0, [r3, #1]
 c00a836:	68fb      	ldr	r3, [r7, #12]
 c00a838:	f103 0130 	add.w	r1, r3, #48	; 0x30
 c00a83c:	68fb      	ldr	r3, [r7, #12]
 c00a83e:	6a1a      	ldr	r2, [r3, #32]
 c00a840:	2301      	movs	r3, #1
 c00a842:	f7fd fc4d 	bl	c0080e0 <disk_write>
 c00a846:	4603      	mov	r3, r0
 c00a848:	2b00      	cmp	r3, #0
 c00a84a:	d004      	beq.n	c00a856 <f_read+0x1da>
 c00a84c:	68fb      	ldr	r3, [r7, #12]
 c00a84e:	2201      	movs	r2, #1
 c00a850:	755a      	strb	r2, [r3, #21]
 c00a852:	2301      	movs	r3, #1
 c00a854:	e04d      	b.n	c00a8f2 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 c00a856:	68fb      	ldr	r3, [r7, #12]
 c00a858:	7d1b      	ldrb	r3, [r3, #20]
 c00a85a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 c00a85e:	b2da      	uxtb	r2, r3
 c00a860:	68fb      	ldr	r3, [r7, #12]
 c00a862:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 c00a864:	697b      	ldr	r3, [r7, #20]
 c00a866:	7858      	ldrb	r0, [r3, #1]
 c00a868:	68fb      	ldr	r3, [r7, #12]
 c00a86a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 c00a86e:	2301      	movs	r3, #1
 c00a870:	69ba      	ldr	r2, [r7, #24]
 c00a872:	f7fd fc15 	bl	c0080a0 <disk_read>
 c00a876:	4603      	mov	r3, r0
 c00a878:	2b00      	cmp	r3, #0
 c00a87a:	d004      	beq.n	c00a886 <f_read+0x20a>
 c00a87c:	68fb      	ldr	r3, [r7, #12]
 c00a87e:	2201      	movs	r2, #1
 c00a880:	755a      	strb	r2, [r3, #21]
 c00a882:	2301      	movs	r3, #1
 c00a884:	e035      	b.n	c00a8f2 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 c00a886:	68fb      	ldr	r3, [r7, #12]
 c00a888:	69ba      	ldr	r2, [r7, #24]
 c00a88a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 c00a88c:	68fb      	ldr	r3, [r7, #12]
 c00a88e:	699b      	ldr	r3, [r3, #24]
 c00a890:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c00a894:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 c00a898:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 c00a89a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 c00a89c:	687b      	ldr	r3, [r7, #4]
 c00a89e:	429a      	cmp	r2, r3
 c00a8a0:	d901      	bls.n	c00a8a6 <f_read+0x22a>
 c00a8a2:	687b      	ldr	r3, [r7, #4]
 c00a8a4:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 c00a8a6:	68fb      	ldr	r3, [r7, #12]
 c00a8a8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 c00a8ac:	68fb      	ldr	r3, [r7, #12]
 c00a8ae:	699b      	ldr	r3, [r3, #24]
 c00a8b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c00a8b4:	4413      	add	r3, r2
 c00a8b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 c00a8b8:	4619      	mov	r1, r3
 c00a8ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 c00a8bc:	f7fd fcd0 	bl	c008260 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 c00a8c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 c00a8c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c00a8c4:	4413      	add	r3, r2
 c00a8c6:	627b      	str	r3, [r7, #36]	; 0x24
 c00a8c8:	68fb      	ldr	r3, [r7, #12]
 c00a8ca:	699a      	ldr	r2, [r3, #24]
 c00a8cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c00a8ce:	441a      	add	r2, r3
 c00a8d0:	68fb      	ldr	r3, [r7, #12]
 c00a8d2:	619a      	str	r2, [r3, #24]
 c00a8d4:	683b      	ldr	r3, [r7, #0]
 c00a8d6:	681a      	ldr	r2, [r3, #0]
 c00a8d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c00a8da:	441a      	add	r2, r3
 c00a8dc:	683b      	ldr	r3, [r7, #0]
 c00a8de:	601a      	str	r2, [r3, #0]
 c00a8e0:	687a      	ldr	r2, [r7, #4]
 c00a8e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c00a8e4:	1ad3      	subs	r3, r2, r3
 c00a8e6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 c00a8e8:	687b      	ldr	r3, [r7, #4]
 c00a8ea:	2b00      	cmp	r3, #0
 c00a8ec:	f47f af01 	bne.w	c00a6f2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 c00a8f0:	2300      	movs	r3, #0
}
 c00a8f2:	4618      	mov	r0, r3
 c00a8f4:	3738      	adds	r7, #56	; 0x38
 c00a8f6:	46bd      	mov	sp, r7
 c00a8f8:	bd80      	pop	{r7, pc}

0c00a8fa <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 c00a8fa:	b580      	push	{r7, lr}
 c00a8fc:	b08c      	sub	sp, #48	; 0x30
 c00a8fe:	af00      	add	r7, sp, #0
 c00a900:	60f8      	str	r0, [r7, #12]
 c00a902:	60b9      	str	r1, [r7, #8]
 c00a904:	607a      	str	r2, [r7, #4]
 c00a906:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 c00a908:	68bb      	ldr	r3, [r7, #8]
 c00a90a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 c00a90c:	683b      	ldr	r3, [r7, #0]
 c00a90e:	2200      	movs	r2, #0
 c00a910:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 c00a912:	68fb      	ldr	r3, [r7, #12]
 c00a914:	f107 0210 	add.w	r2, r7, #16
 c00a918:	4611      	mov	r1, r2
 c00a91a:	4618      	mov	r0, r3
 c00a91c:	f7ff fc64 	bl	c00a1e8 <validate>
 c00a920:	4603      	mov	r3, r0
 c00a922:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 c00a926:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 c00a92a:	2b00      	cmp	r3, #0
 c00a92c:	d107      	bne.n	c00a93e <f_write+0x44>
 c00a92e:	68fb      	ldr	r3, [r7, #12]
 c00a930:	7d5b      	ldrb	r3, [r3, #21]
 c00a932:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 c00a936:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 c00a93a:	2b00      	cmp	r3, #0
 c00a93c:	d002      	beq.n	c00a944 <f_write+0x4a>
 c00a93e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 c00a942:	e14b      	b.n	c00abdc <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 c00a944:	68fb      	ldr	r3, [r7, #12]
 c00a946:	7d1b      	ldrb	r3, [r3, #20]
 c00a948:	f003 0302 	and.w	r3, r3, #2
 c00a94c:	2b00      	cmp	r3, #0
 c00a94e:	d101      	bne.n	c00a954 <f_write+0x5a>
 c00a950:	2307      	movs	r3, #7
 c00a952:	e143      	b.n	c00abdc <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 c00a954:	68fb      	ldr	r3, [r7, #12]
 c00a956:	699a      	ldr	r2, [r3, #24]
 c00a958:	687b      	ldr	r3, [r7, #4]
 c00a95a:	441a      	add	r2, r3
 c00a95c:	68fb      	ldr	r3, [r7, #12]
 c00a95e:	699b      	ldr	r3, [r3, #24]
 c00a960:	429a      	cmp	r2, r3
 c00a962:	f080 812d 	bcs.w	c00abc0 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 c00a966:	68fb      	ldr	r3, [r7, #12]
 c00a968:	699b      	ldr	r3, [r3, #24]
 c00a96a:	43db      	mvns	r3, r3
 c00a96c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 c00a96e:	e127      	b.n	c00abc0 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 c00a970:	68fb      	ldr	r3, [r7, #12]
 c00a972:	699b      	ldr	r3, [r3, #24]
 c00a974:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c00a978:	2b00      	cmp	r3, #0
 c00a97a:	f040 80e3 	bne.w	c00ab44 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 c00a97e:	68fb      	ldr	r3, [r7, #12]
 c00a980:	699b      	ldr	r3, [r3, #24]
 c00a982:	0a5b      	lsrs	r3, r3, #9
 c00a984:	693a      	ldr	r2, [r7, #16]
 c00a986:	8952      	ldrh	r2, [r2, #10]
 c00a988:	3a01      	subs	r2, #1
 c00a98a:	4013      	ands	r3, r2
 c00a98c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 c00a98e:	69bb      	ldr	r3, [r7, #24]
 c00a990:	2b00      	cmp	r3, #0
 c00a992:	d143      	bne.n	c00aa1c <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 c00a994:	68fb      	ldr	r3, [r7, #12]
 c00a996:	699b      	ldr	r3, [r3, #24]
 c00a998:	2b00      	cmp	r3, #0
 c00a99a:	d10c      	bne.n	c00a9b6 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 c00a99c:	68fb      	ldr	r3, [r7, #12]
 c00a99e:	689b      	ldr	r3, [r3, #8]
 c00a9a0:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 c00a9a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c00a9a4:	2b00      	cmp	r3, #0
 c00a9a6:	d11a      	bne.n	c00a9de <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 c00a9a8:	68fb      	ldr	r3, [r7, #12]
 c00a9aa:	2100      	movs	r1, #0
 c00a9ac:	4618      	mov	r0, r3
 c00a9ae:	f7fe f939 	bl	c008c24 <create_chain>
 c00a9b2:	62b8      	str	r0, [r7, #40]	; 0x28
 c00a9b4:	e013      	b.n	c00a9de <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 c00a9b6:	68fb      	ldr	r3, [r7, #12]
 c00a9b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c00a9ba:	2b00      	cmp	r3, #0
 c00a9bc:	d007      	beq.n	c00a9ce <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 c00a9be:	68fb      	ldr	r3, [r7, #12]
 c00a9c0:	699b      	ldr	r3, [r3, #24]
 c00a9c2:	4619      	mov	r1, r3
 c00a9c4:	68f8      	ldr	r0, [r7, #12]
 c00a9c6:	f7fe f9c5 	bl	c008d54 <clmt_clust>
 c00a9ca:	62b8      	str	r0, [r7, #40]	; 0x28
 c00a9cc:	e007      	b.n	c00a9de <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 c00a9ce:	68fa      	ldr	r2, [r7, #12]
 c00a9d0:	68fb      	ldr	r3, [r7, #12]
 c00a9d2:	69db      	ldr	r3, [r3, #28]
 c00a9d4:	4619      	mov	r1, r3
 c00a9d6:	4610      	mov	r0, r2
 c00a9d8:	f7fe f924 	bl	c008c24 <create_chain>
 c00a9dc:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 c00a9de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c00a9e0:	2b00      	cmp	r3, #0
 c00a9e2:	f000 80f2 	beq.w	c00abca <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 c00a9e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c00a9e8:	2b01      	cmp	r3, #1
 c00a9ea:	d104      	bne.n	c00a9f6 <f_write+0xfc>
 c00a9ec:	68fb      	ldr	r3, [r7, #12]
 c00a9ee:	2202      	movs	r2, #2
 c00a9f0:	755a      	strb	r2, [r3, #21]
 c00a9f2:	2302      	movs	r3, #2
 c00a9f4:	e0f2      	b.n	c00abdc <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 c00a9f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c00a9f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 c00a9fc:	d104      	bne.n	c00aa08 <f_write+0x10e>
 c00a9fe:	68fb      	ldr	r3, [r7, #12]
 c00aa00:	2201      	movs	r2, #1
 c00aa02:	755a      	strb	r2, [r3, #21]
 c00aa04:	2301      	movs	r3, #1
 c00aa06:	e0e9      	b.n	c00abdc <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 c00aa08:	68fb      	ldr	r3, [r7, #12]
 c00aa0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 c00aa0c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 c00aa0e:	68fb      	ldr	r3, [r7, #12]
 c00aa10:	689b      	ldr	r3, [r3, #8]
 c00aa12:	2b00      	cmp	r3, #0
 c00aa14:	d102      	bne.n	c00aa1c <f_write+0x122>
 c00aa16:	68fb      	ldr	r3, [r7, #12]
 c00aa18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 c00aa1a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 c00aa1c:	68fb      	ldr	r3, [r7, #12]
 c00aa1e:	7d1b      	ldrb	r3, [r3, #20]
 c00aa20:	b25b      	sxtb	r3, r3
 c00aa22:	2b00      	cmp	r3, #0
 c00aa24:	da18      	bge.n	c00aa58 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 c00aa26:	693b      	ldr	r3, [r7, #16]
 c00aa28:	7858      	ldrb	r0, [r3, #1]
 c00aa2a:	68fb      	ldr	r3, [r7, #12]
 c00aa2c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 c00aa30:	68fb      	ldr	r3, [r7, #12]
 c00aa32:	6a1a      	ldr	r2, [r3, #32]
 c00aa34:	2301      	movs	r3, #1
 c00aa36:	f7fd fb53 	bl	c0080e0 <disk_write>
 c00aa3a:	4603      	mov	r3, r0
 c00aa3c:	2b00      	cmp	r3, #0
 c00aa3e:	d004      	beq.n	c00aa4a <f_write+0x150>
 c00aa40:	68fb      	ldr	r3, [r7, #12]
 c00aa42:	2201      	movs	r2, #1
 c00aa44:	755a      	strb	r2, [r3, #21]
 c00aa46:	2301      	movs	r3, #1
 c00aa48:	e0c8      	b.n	c00abdc <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 c00aa4a:	68fb      	ldr	r3, [r7, #12]
 c00aa4c:	7d1b      	ldrb	r3, [r3, #20]
 c00aa4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 c00aa52:	b2da      	uxtb	r2, r3
 c00aa54:	68fb      	ldr	r3, [r7, #12]
 c00aa56:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 c00aa58:	693a      	ldr	r2, [r7, #16]
 c00aa5a:	68fb      	ldr	r3, [r7, #12]
 c00aa5c:	69db      	ldr	r3, [r3, #28]
 c00aa5e:	4619      	mov	r1, r3
 c00aa60:	4610      	mov	r0, r2
 c00aa62:	f7fd fec7 	bl	c0087f4 <clust2sect>
 c00aa66:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 c00aa68:	697b      	ldr	r3, [r7, #20]
 c00aa6a:	2b00      	cmp	r3, #0
 c00aa6c:	d104      	bne.n	c00aa78 <f_write+0x17e>
 c00aa6e:	68fb      	ldr	r3, [r7, #12]
 c00aa70:	2202      	movs	r2, #2
 c00aa72:	755a      	strb	r2, [r3, #21]
 c00aa74:	2302      	movs	r3, #2
 c00aa76:	e0b1      	b.n	c00abdc <f_write+0x2e2>
			sect += csect;
 c00aa78:	697a      	ldr	r2, [r7, #20]
 c00aa7a:	69bb      	ldr	r3, [r7, #24]
 c00aa7c:	4413      	add	r3, r2
 c00aa7e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 c00aa80:	687b      	ldr	r3, [r7, #4]
 c00aa82:	0a5b      	lsrs	r3, r3, #9
 c00aa84:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 c00aa86:	6a3b      	ldr	r3, [r7, #32]
 c00aa88:	2b00      	cmp	r3, #0
 c00aa8a:	d03c      	beq.n	c00ab06 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 c00aa8c:	69ba      	ldr	r2, [r7, #24]
 c00aa8e:	6a3b      	ldr	r3, [r7, #32]
 c00aa90:	4413      	add	r3, r2
 c00aa92:	693a      	ldr	r2, [r7, #16]
 c00aa94:	8952      	ldrh	r2, [r2, #10]
 c00aa96:	4293      	cmp	r3, r2
 c00aa98:	d905      	bls.n	c00aaa6 <f_write+0x1ac>
					cc = fs->csize - csect;
 c00aa9a:	693b      	ldr	r3, [r7, #16]
 c00aa9c:	895b      	ldrh	r3, [r3, #10]
 c00aa9e:	461a      	mov	r2, r3
 c00aaa0:	69bb      	ldr	r3, [r7, #24]
 c00aaa2:	1ad3      	subs	r3, r2, r3
 c00aaa4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 c00aaa6:	693b      	ldr	r3, [r7, #16]
 c00aaa8:	7858      	ldrb	r0, [r3, #1]
 c00aaaa:	6a3b      	ldr	r3, [r7, #32]
 c00aaac:	697a      	ldr	r2, [r7, #20]
 c00aaae:	69f9      	ldr	r1, [r7, #28]
 c00aab0:	f7fd fb16 	bl	c0080e0 <disk_write>
 c00aab4:	4603      	mov	r3, r0
 c00aab6:	2b00      	cmp	r3, #0
 c00aab8:	d004      	beq.n	c00aac4 <f_write+0x1ca>
 c00aaba:	68fb      	ldr	r3, [r7, #12]
 c00aabc:	2201      	movs	r2, #1
 c00aabe:	755a      	strb	r2, [r3, #21]
 c00aac0:	2301      	movs	r3, #1
 c00aac2:	e08b      	b.n	c00abdc <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 c00aac4:	68fb      	ldr	r3, [r7, #12]
 c00aac6:	6a1a      	ldr	r2, [r3, #32]
 c00aac8:	697b      	ldr	r3, [r7, #20]
 c00aaca:	1ad3      	subs	r3, r2, r3
 c00aacc:	6a3a      	ldr	r2, [r7, #32]
 c00aace:	429a      	cmp	r2, r3
 c00aad0:	d915      	bls.n	c00aafe <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 c00aad2:	68fb      	ldr	r3, [r7, #12]
 c00aad4:	f103 0030 	add.w	r0, r3, #48	; 0x30
 c00aad8:	68fb      	ldr	r3, [r7, #12]
 c00aada:	6a1a      	ldr	r2, [r3, #32]
 c00aadc:	697b      	ldr	r3, [r7, #20]
 c00aade:	1ad3      	subs	r3, r2, r3
 c00aae0:	025b      	lsls	r3, r3, #9
 c00aae2:	69fa      	ldr	r2, [r7, #28]
 c00aae4:	4413      	add	r3, r2
 c00aae6:	f44f 7200 	mov.w	r2, #512	; 0x200
 c00aaea:	4619      	mov	r1, r3
 c00aaec:	f7fd fbb8 	bl	c008260 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 c00aaf0:	68fb      	ldr	r3, [r7, #12]
 c00aaf2:	7d1b      	ldrb	r3, [r3, #20]
 c00aaf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 c00aaf8:	b2da      	uxtb	r2, r3
 c00aafa:	68fb      	ldr	r3, [r7, #12]
 c00aafc:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 c00aafe:	6a3b      	ldr	r3, [r7, #32]
 c00ab00:	025b      	lsls	r3, r3, #9
 c00ab02:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 c00ab04:	e03f      	b.n	c00ab86 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 c00ab06:	68fb      	ldr	r3, [r7, #12]
 c00ab08:	6a1b      	ldr	r3, [r3, #32]
 c00ab0a:	697a      	ldr	r2, [r7, #20]
 c00ab0c:	429a      	cmp	r2, r3
 c00ab0e:	d016      	beq.n	c00ab3e <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 c00ab10:	68fb      	ldr	r3, [r7, #12]
 c00ab12:	699a      	ldr	r2, [r3, #24]
 c00ab14:	68fb      	ldr	r3, [r7, #12]
 c00ab16:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 c00ab18:	429a      	cmp	r2, r3
 c00ab1a:	d210      	bcs.n	c00ab3e <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 c00ab1c:	693b      	ldr	r3, [r7, #16]
 c00ab1e:	7858      	ldrb	r0, [r3, #1]
 c00ab20:	68fb      	ldr	r3, [r7, #12]
 c00ab22:	f103 0130 	add.w	r1, r3, #48	; 0x30
 c00ab26:	2301      	movs	r3, #1
 c00ab28:	697a      	ldr	r2, [r7, #20]
 c00ab2a:	f7fd fab9 	bl	c0080a0 <disk_read>
 c00ab2e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 c00ab30:	2b00      	cmp	r3, #0
 c00ab32:	d004      	beq.n	c00ab3e <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 c00ab34:	68fb      	ldr	r3, [r7, #12]
 c00ab36:	2201      	movs	r2, #1
 c00ab38:	755a      	strb	r2, [r3, #21]
 c00ab3a:	2301      	movs	r3, #1
 c00ab3c:	e04e      	b.n	c00abdc <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 c00ab3e:	68fb      	ldr	r3, [r7, #12]
 c00ab40:	697a      	ldr	r2, [r7, #20]
 c00ab42:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 c00ab44:	68fb      	ldr	r3, [r7, #12]
 c00ab46:	699b      	ldr	r3, [r3, #24]
 c00ab48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c00ab4c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 c00ab50:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 c00ab52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 c00ab54:	687b      	ldr	r3, [r7, #4]
 c00ab56:	429a      	cmp	r2, r3
 c00ab58:	d901      	bls.n	c00ab5e <f_write+0x264>
 c00ab5a:	687b      	ldr	r3, [r7, #4]
 c00ab5c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 c00ab5e:	68fb      	ldr	r3, [r7, #12]
 c00ab60:	f103 0230 	add.w	r2, r3, #48	; 0x30
 c00ab64:	68fb      	ldr	r3, [r7, #12]
 c00ab66:	699b      	ldr	r3, [r3, #24]
 c00ab68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c00ab6c:	4413      	add	r3, r2
 c00ab6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 c00ab70:	69f9      	ldr	r1, [r7, #28]
 c00ab72:	4618      	mov	r0, r3
 c00ab74:	f7fd fb74 	bl	c008260 <mem_cpy>
		fp->flag |= FA_DIRTY;
 c00ab78:	68fb      	ldr	r3, [r7, #12]
 c00ab7a:	7d1b      	ldrb	r3, [r3, #20]
 c00ab7c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 c00ab80:	b2da      	uxtb	r2, r3
 c00ab82:	68fb      	ldr	r3, [r7, #12]
 c00ab84:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 c00ab86:	69fa      	ldr	r2, [r7, #28]
 c00ab88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c00ab8a:	4413      	add	r3, r2
 c00ab8c:	61fb      	str	r3, [r7, #28]
 c00ab8e:	68fb      	ldr	r3, [r7, #12]
 c00ab90:	699a      	ldr	r2, [r3, #24]
 c00ab92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c00ab94:	441a      	add	r2, r3
 c00ab96:	68fb      	ldr	r3, [r7, #12]
 c00ab98:	619a      	str	r2, [r3, #24]
 c00ab9a:	68fb      	ldr	r3, [r7, #12]
 c00ab9c:	68da      	ldr	r2, [r3, #12]
 c00ab9e:	68fb      	ldr	r3, [r7, #12]
 c00aba0:	699b      	ldr	r3, [r3, #24]
 c00aba2:	429a      	cmp	r2, r3
 c00aba4:	bf38      	it	cc
 c00aba6:	461a      	movcc	r2, r3
 c00aba8:	68fb      	ldr	r3, [r7, #12]
 c00abaa:	60da      	str	r2, [r3, #12]
 c00abac:	683b      	ldr	r3, [r7, #0]
 c00abae:	681a      	ldr	r2, [r3, #0]
 c00abb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c00abb2:	441a      	add	r2, r3
 c00abb4:	683b      	ldr	r3, [r7, #0]
 c00abb6:	601a      	str	r2, [r3, #0]
 c00abb8:	687a      	ldr	r2, [r7, #4]
 c00abba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c00abbc:	1ad3      	subs	r3, r2, r3
 c00abbe:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 c00abc0:	687b      	ldr	r3, [r7, #4]
 c00abc2:	2b00      	cmp	r3, #0
 c00abc4:	f47f aed4 	bne.w	c00a970 <f_write+0x76>
 c00abc8:	e000      	b.n	c00abcc <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 c00abca:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 c00abcc:	68fb      	ldr	r3, [r7, #12]
 c00abce:	7d1b      	ldrb	r3, [r3, #20]
 c00abd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 c00abd4:	b2da      	uxtb	r2, r3
 c00abd6:	68fb      	ldr	r3, [r7, #12]
 c00abd8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 c00abda:	2300      	movs	r3, #0
}
 c00abdc:	4618      	mov	r0, r3
 c00abde:	3730      	adds	r7, #48	; 0x30
 c00abe0:	46bd      	mov	sp, r7
 c00abe2:	bd80      	pop	{r7, pc}

0c00abe4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 c00abe4:	b580      	push	{r7, lr}
 c00abe6:	b086      	sub	sp, #24
 c00abe8:	af00      	add	r7, sp, #0
 c00abea:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 c00abec:	687b      	ldr	r3, [r7, #4]
 c00abee:	f107 0208 	add.w	r2, r7, #8
 c00abf2:	4611      	mov	r1, r2
 c00abf4:	4618      	mov	r0, r3
 c00abf6:	f7ff faf7 	bl	c00a1e8 <validate>
 c00abfa:	4603      	mov	r3, r0
 c00abfc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 c00abfe:	7dfb      	ldrb	r3, [r7, #23]
 c00ac00:	2b00      	cmp	r3, #0
 c00ac02:	d168      	bne.n	c00acd6 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 c00ac04:	687b      	ldr	r3, [r7, #4]
 c00ac06:	7d1b      	ldrb	r3, [r3, #20]
 c00ac08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c00ac0c:	2b00      	cmp	r3, #0
 c00ac0e:	d062      	beq.n	c00acd6 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 c00ac10:	687b      	ldr	r3, [r7, #4]
 c00ac12:	7d1b      	ldrb	r3, [r3, #20]
 c00ac14:	b25b      	sxtb	r3, r3
 c00ac16:	2b00      	cmp	r3, #0
 c00ac18:	da15      	bge.n	c00ac46 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 c00ac1a:	68bb      	ldr	r3, [r7, #8]
 c00ac1c:	7858      	ldrb	r0, [r3, #1]
 c00ac1e:	687b      	ldr	r3, [r7, #4]
 c00ac20:	f103 0130 	add.w	r1, r3, #48	; 0x30
 c00ac24:	687b      	ldr	r3, [r7, #4]
 c00ac26:	6a1a      	ldr	r2, [r3, #32]
 c00ac28:	2301      	movs	r3, #1
 c00ac2a:	f7fd fa59 	bl	c0080e0 <disk_write>
 c00ac2e:	4603      	mov	r3, r0
 c00ac30:	2b00      	cmp	r3, #0
 c00ac32:	d001      	beq.n	c00ac38 <f_sync+0x54>
 c00ac34:	2301      	movs	r3, #1
 c00ac36:	e04f      	b.n	c00acd8 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 c00ac38:	687b      	ldr	r3, [r7, #4]
 c00ac3a:	7d1b      	ldrb	r3, [r3, #20]
 c00ac3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 c00ac40:	b2da      	uxtb	r2, r3
 c00ac42:	687b      	ldr	r3, [r7, #4]
 c00ac44:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 c00ac46:	f7fc f85f 	bl	c006d08 <get_fattime>
 c00ac4a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 c00ac4c:	68ba      	ldr	r2, [r7, #8]
 c00ac4e:	687b      	ldr	r3, [r7, #4]
 c00ac50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c00ac52:	4619      	mov	r1, r3
 c00ac54:	4610      	mov	r0, r2
 c00ac56:	f7fd fd31 	bl	c0086bc <move_window>
 c00ac5a:	4603      	mov	r3, r0
 c00ac5c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 c00ac5e:	7dfb      	ldrb	r3, [r7, #23]
 c00ac60:	2b00      	cmp	r3, #0
 c00ac62:	d138      	bne.n	c00acd6 <f_sync+0xf2>
					dir = fp->dir_ptr;
 c00ac64:	687b      	ldr	r3, [r7, #4]
 c00ac66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c00ac68:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 c00ac6a:	68fb      	ldr	r3, [r7, #12]
 c00ac6c:	330b      	adds	r3, #11
 c00ac6e:	781a      	ldrb	r2, [r3, #0]
 c00ac70:	68fb      	ldr	r3, [r7, #12]
 c00ac72:	330b      	adds	r3, #11
 c00ac74:	f042 0220 	orr.w	r2, r2, #32
 c00ac78:	b2d2      	uxtb	r2, r2
 c00ac7a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 c00ac7c:	687b      	ldr	r3, [r7, #4]
 c00ac7e:	6818      	ldr	r0, [r3, #0]
 c00ac80:	687b      	ldr	r3, [r7, #4]
 c00ac82:	689b      	ldr	r3, [r3, #8]
 c00ac84:	461a      	mov	r2, r3
 c00ac86:	68f9      	ldr	r1, [r7, #12]
 c00ac88:	f7fe fa3e 	bl	c009108 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 c00ac8c:	68fb      	ldr	r3, [r7, #12]
 c00ac8e:	f103 021c 	add.w	r2, r3, #28
 c00ac92:	687b      	ldr	r3, [r7, #4]
 c00ac94:	68db      	ldr	r3, [r3, #12]
 c00ac96:	4619      	mov	r1, r3
 c00ac98:	4610      	mov	r0, r2
 c00ac9a:	f7fd fab5 	bl	c008208 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 c00ac9e:	68fb      	ldr	r3, [r7, #12]
 c00aca0:	3316      	adds	r3, #22
 c00aca2:	6939      	ldr	r1, [r7, #16]
 c00aca4:	4618      	mov	r0, r3
 c00aca6:	f7fd faaf 	bl	c008208 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 c00acaa:	68fb      	ldr	r3, [r7, #12]
 c00acac:	3312      	adds	r3, #18
 c00acae:	2100      	movs	r1, #0
 c00acb0:	4618      	mov	r0, r3
 c00acb2:	f7fd fa8e 	bl	c0081d2 <st_word>
					fs->wflag = 1;
 c00acb6:	68bb      	ldr	r3, [r7, #8]
 c00acb8:	2201      	movs	r2, #1
 c00acba:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 c00acbc:	68bb      	ldr	r3, [r7, #8]
 c00acbe:	4618      	mov	r0, r3
 c00acc0:	f7fd fd2a 	bl	c008718 <sync_fs>
 c00acc4:	4603      	mov	r3, r0
 c00acc6:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 c00acc8:	687b      	ldr	r3, [r7, #4]
 c00acca:	7d1b      	ldrb	r3, [r3, #20]
 c00accc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 c00acd0:	b2da      	uxtb	r2, r3
 c00acd2:	687b      	ldr	r3, [r7, #4]
 c00acd4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 c00acd6:	7dfb      	ldrb	r3, [r7, #23]
}
 c00acd8:	4618      	mov	r0, r3
 c00acda:	3718      	adds	r7, #24
 c00acdc:	46bd      	mov	sp, r7
 c00acde:	bd80      	pop	{r7, pc}

0c00ace0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 c00ace0:	b580      	push	{r7, lr}
 c00ace2:	b084      	sub	sp, #16
 c00ace4:	af00      	add	r7, sp, #0
 c00ace6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 c00ace8:	6878      	ldr	r0, [r7, #4]
 c00acea:	f7ff ff7b 	bl	c00abe4 <f_sync>
 c00acee:	4603      	mov	r3, r0
 c00acf0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 c00acf2:	7bfb      	ldrb	r3, [r7, #15]
 c00acf4:	2b00      	cmp	r3, #0
 c00acf6:	d118      	bne.n	c00ad2a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 c00acf8:	687b      	ldr	r3, [r7, #4]
 c00acfa:	f107 0208 	add.w	r2, r7, #8
 c00acfe:	4611      	mov	r1, r2
 c00ad00:	4618      	mov	r0, r3
 c00ad02:	f7ff fa71 	bl	c00a1e8 <validate>
 c00ad06:	4603      	mov	r3, r0
 c00ad08:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 c00ad0a:	7bfb      	ldrb	r3, [r7, #15]
 c00ad0c:	2b00      	cmp	r3, #0
 c00ad0e:	d10c      	bne.n	c00ad2a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 c00ad10:	687b      	ldr	r3, [r7, #4]
 c00ad12:	691b      	ldr	r3, [r3, #16]
 c00ad14:	4618      	mov	r0, r3
 c00ad16:	f7fd fc2d 	bl	c008574 <dec_lock>
 c00ad1a:	4603      	mov	r3, r0
 c00ad1c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 c00ad1e:	7bfb      	ldrb	r3, [r7, #15]
 c00ad20:	2b00      	cmp	r3, #0
 c00ad22:	d102      	bne.n	c00ad2a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 c00ad24:	687b      	ldr	r3, [r7, #4]
 c00ad26:	2200      	movs	r2, #0
 c00ad28:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 c00ad2a:	7bfb      	ldrb	r3, [r7, #15]
}
 c00ad2c:	4618      	mov	r0, r3
 c00ad2e:	3710      	adds	r7, #16
 c00ad30:	46bd      	mov	sp, r7
 c00ad32:	bd80      	pop	{r7, pc}

0c00ad34 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 c00ad34:	b590      	push	{r4, r7, lr}
 c00ad36:	b09d      	sub	sp, #116	; 0x74
 c00ad38:	af00      	add	r7, sp, #0
 c00ad3a:	60f8      	str	r0, [r7, #12]
 c00ad3c:	607a      	str	r2, [r7, #4]
 c00ad3e:	603b      	str	r3, [r7, #0]
 c00ad40:	460b      	mov	r3, r1
 c00ad42:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 c00ad44:	2301      	movs	r3, #1
 c00ad46:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 c00ad48:	f44f 7300 	mov.w	r3, #512	; 0x200
 c00ad4c:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 c00ad4e:	f107 030c 	add.w	r3, r7, #12
 c00ad52:	4618      	mov	r0, r3
 c00ad54:	f7fe ff61 	bl	c009c1a <get_ldnumber>
 c00ad58:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 c00ad5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 c00ad5c:	2b00      	cmp	r3, #0
 c00ad5e:	da02      	bge.n	c00ad66 <f_mkfs+0x32>
 c00ad60:	230b      	movs	r3, #11
 c00ad62:	f000 bc0d 	b.w	c00b580 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 c00ad66:	4a94      	ldr	r2, [pc, #592]	; (c00afb8 <f_mkfs+0x284>)
 c00ad68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 c00ad6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c00ad6e:	2b00      	cmp	r3, #0
 c00ad70:	d005      	beq.n	c00ad7e <f_mkfs+0x4a>
 c00ad72:	4a91      	ldr	r2, [pc, #580]	; (c00afb8 <f_mkfs+0x284>)
 c00ad74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 c00ad76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c00ad7a:	2200      	movs	r2, #0
 c00ad7c:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 c00ad7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 c00ad80:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 c00ad84:	2300      	movs	r3, #0
 c00ad86:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 c00ad8a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 c00ad8e:	4618      	mov	r0, r3
 c00ad90:	f7fd f960 	bl	c008054 <disk_initialize>
 c00ad94:	4603      	mov	r3, r0
 c00ad96:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 c00ad9a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 c00ad9e:	f003 0301 	and.w	r3, r3, #1
 c00ada2:	2b00      	cmp	r3, #0
 c00ada4:	d001      	beq.n	c00adaa <f_mkfs+0x76>
 c00ada6:	2303      	movs	r3, #3
 c00ada8:	e3ea      	b.n	c00b580 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 c00adaa:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 c00adae:	f003 0304 	and.w	r3, r3, #4
 c00adb2:	2b00      	cmp	r3, #0
 c00adb4:	d001      	beq.n	c00adba <f_mkfs+0x86>
 c00adb6:	230a      	movs	r3, #10
 c00adb8:	e3e2      	b.n	c00b580 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 c00adba:	f107 0214 	add.w	r2, r7, #20
 c00adbe:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 c00adc2:	2103      	movs	r1, #3
 c00adc4:	4618      	mov	r0, r3
 c00adc6:	f7fd f9ab 	bl	c008120 <disk_ioctl>
 c00adca:	4603      	mov	r3, r0
 c00adcc:	2b00      	cmp	r3, #0
 c00adce:	d10c      	bne.n	c00adea <f_mkfs+0xb6>
 c00add0:	697b      	ldr	r3, [r7, #20]
 c00add2:	2b00      	cmp	r3, #0
 c00add4:	d009      	beq.n	c00adea <f_mkfs+0xb6>
 c00add6:	697b      	ldr	r3, [r7, #20]
 c00add8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c00addc:	d805      	bhi.n	c00adea <f_mkfs+0xb6>
 c00adde:	697b      	ldr	r3, [r7, #20]
 c00ade0:	1e5a      	subs	r2, r3, #1
 c00ade2:	697b      	ldr	r3, [r7, #20]
 c00ade4:	4013      	ands	r3, r2
 c00ade6:	2b00      	cmp	r3, #0
 c00ade8:	d001      	beq.n	c00adee <f_mkfs+0xba>
 c00adea:	2301      	movs	r3, #1
 c00adec:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 c00adee:	f44f 7300 	mov.w	r3, #512	; 0x200
 c00adf2:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 c00adf4:	687b      	ldr	r3, [r7, #4]
 c00adf6:	2b00      	cmp	r3, #0
 c00adf8:	d003      	beq.n	c00ae02 <f_mkfs+0xce>
 c00adfa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 c00adfc:	687a      	ldr	r2, [r7, #4]
 c00adfe:	429a      	cmp	r2, r3
 c00ae00:	d309      	bcc.n	c00ae16 <f_mkfs+0xe2>
 c00ae02:	687b      	ldr	r3, [r7, #4]
 c00ae04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 c00ae08:	d805      	bhi.n	c00ae16 <f_mkfs+0xe2>
 c00ae0a:	687b      	ldr	r3, [r7, #4]
 c00ae0c:	1e5a      	subs	r2, r3, #1
 c00ae0e:	687b      	ldr	r3, [r7, #4]
 c00ae10:	4013      	ands	r3, r2
 c00ae12:	2b00      	cmp	r3, #0
 c00ae14:	d001      	beq.n	c00ae1a <f_mkfs+0xe6>
 c00ae16:	2313      	movs	r3, #19
 c00ae18:	e3b2      	b.n	c00b580 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 c00ae1a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 c00ae1c:	687a      	ldr	r2, [r7, #4]
 c00ae1e:	fbb2 f3f3 	udiv	r3, r2, r3
 c00ae22:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 c00ae24:	683b      	ldr	r3, [r7, #0]
 c00ae26:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 c00ae28:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 c00ae2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 c00ae2e:	fbb2 f3f3 	udiv	r3, r2, r3
 c00ae32:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 c00ae34:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 c00ae36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c00ae38:	fb02 f303 	mul.w	r3, r2, r3
 c00ae3c:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 c00ae3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c00ae40:	2b00      	cmp	r3, #0
 c00ae42:	d101      	bne.n	c00ae48 <f_mkfs+0x114>
 c00ae44:	230e      	movs	r3, #14
 c00ae46:	e39b      	b.n	c00b580 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 c00ae48:	f107 0210 	add.w	r2, r7, #16
 c00ae4c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 c00ae50:	2101      	movs	r1, #1
 c00ae52:	4618      	mov	r0, r3
 c00ae54:	f7fd f964 	bl	c008120 <disk_ioctl>
 c00ae58:	4603      	mov	r3, r0
 c00ae5a:	2b00      	cmp	r3, #0
 c00ae5c:	d001      	beq.n	c00ae62 <f_mkfs+0x12e>
 c00ae5e:	2301      	movs	r3, #1
 c00ae60:	e38e      	b.n	c00b580 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 c00ae62:	7afb      	ldrb	r3, [r7, #11]
 c00ae64:	f003 0308 	and.w	r3, r3, #8
 c00ae68:	2b00      	cmp	r3, #0
 c00ae6a:	d001      	beq.n	c00ae70 <f_mkfs+0x13c>
 c00ae6c:	2300      	movs	r3, #0
 c00ae6e:	e000      	b.n	c00ae72 <f_mkfs+0x13e>
 c00ae70:	233f      	movs	r3, #63	; 0x3f
 c00ae72:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 c00ae74:	693b      	ldr	r3, [r7, #16]
 c00ae76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 c00ae78:	429a      	cmp	r2, r3
 c00ae7a:	d901      	bls.n	c00ae80 <f_mkfs+0x14c>
 c00ae7c:	230e      	movs	r3, #14
 c00ae7e:	e37f      	b.n	c00b580 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 c00ae80:	693a      	ldr	r2, [r7, #16]
 c00ae82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c00ae84:	1ad3      	subs	r3, r2, r3
 c00ae86:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 c00ae88:	693b      	ldr	r3, [r7, #16]
 c00ae8a:	2b7f      	cmp	r3, #127	; 0x7f
 c00ae8c:	d801      	bhi.n	c00ae92 <f_mkfs+0x15e>
 c00ae8e:	230e      	movs	r3, #14
 c00ae90:	e376      	b.n	c00b580 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 c00ae92:	687b      	ldr	r3, [r7, #4]
 c00ae94:	2b80      	cmp	r3, #128	; 0x80
 c00ae96:	d901      	bls.n	c00ae9c <f_mkfs+0x168>
 c00ae98:	2313      	movs	r3, #19
 c00ae9a:	e371      	b.n	c00b580 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 c00ae9c:	7afb      	ldrb	r3, [r7, #11]
 c00ae9e:	f003 0302 	and.w	r3, r3, #2
 c00aea2:	2b00      	cmp	r3, #0
 c00aea4:	d00d      	beq.n	c00aec2 <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 c00aea6:	7afb      	ldrb	r3, [r7, #11]
 c00aea8:	f003 0307 	and.w	r3, r3, #7
 c00aeac:	2b02      	cmp	r3, #2
 c00aeae:	d004      	beq.n	c00aeba <f_mkfs+0x186>
 c00aeb0:	7afb      	ldrb	r3, [r7, #11]
 c00aeb2:	f003 0301 	and.w	r3, r3, #1
 c00aeb6:	2b00      	cmp	r3, #0
 c00aeb8:	d103      	bne.n	c00aec2 <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 c00aeba:	2303      	movs	r3, #3
 c00aebc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 c00aec0:	e009      	b.n	c00aed6 <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 c00aec2:	7afb      	ldrb	r3, [r7, #11]
 c00aec4:	f003 0301 	and.w	r3, r3, #1
 c00aec8:	2b00      	cmp	r3, #0
 c00aeca:	d101      	bne.n	c00aed0 <f_mkfs+0x19c>
 c00aecc:	2313      	movs	r3, #19
 c00aece:	e357      	b.n	c00b580 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 c00aed0:	2302      	movs	r3, #2
 c00aed2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 c00aed6:	687b      	ldr	r3, [r7, #4]
 c00aed8:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 c00aeda:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 c00aede:	2b03      	cmp	r3, #3
 c00aee0:	d13c      	bne.n	c00af5c <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 c00aee2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 c00aee4:	2b00      	cmp	r3, #0
 c00aee6:	d11b      	bne.n	c00af20 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 c00aee8:	693b      	ldr	r3, [r7, #16]
 c00aeea:	0c5b      	lsrs	r3, r3, #17
 c00aeec:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 c00aeee:	2300      	movs	r3, #0
 c00aef0:	64bb      	str	r3, [r7, #72]	; 0x48
 c00aef2:	2301      	movs	r3, #1
 c00aef4:	653b      	str	r3, [r7, #80]	; 0x50
 c00aef6:	e005      	b.n	c00af04 <f_mkfs+0x1d0>
 c00aef8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 c00aefa:	3301      	adds	r3, #1
 c00aefc:	64bb      	str	r3, [r7, #72]	; 0x48
 c00aefe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 c00af00:	005b      	lsls	r3, r3, #1
 c00af02:	653b      	str	r3, [r7, #80]	; 0x50
 c00af04:	4a2d      	ldr	r2, [pc, #180]	; (c00afbc <f_mkfs+0x288>)
 c00af06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 c00af08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 c00af0c:	2b00      	cmp	r3, #0
 c00af0e:	d007      	beq.n	c00af20 <f_mkfs+0x1ec>
 c00af10:	4a2a      	ldr	r2, [pc, #168]	; (c00afbc <f_mkfs+0x288>)
 c00af12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 c00af14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 c00af18:	461a      	mov	r2, r3
 c00af1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 c00af1c:	4293      	cmp	r3, r2
 c00af1e:	d2eb      	bcs.n	c00aef8 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 c00af20:	693a      	ldr	r2, [r7, #16]
 c00af22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 c00af24:	fbb2 f3f3 	udiv	r3, r2, r3
 c00af28:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 c00af2a:	6a3b      	ldr	r3, [r7, #32]
 c00af2c:	3302      	adds	r3, #2
 c00af2e:	009a      	lsls	r2, r3, #2
 c00af30:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 c00af32:	4413      	add	r3, r2
 c00af34:	1e5a      	subs	r2, r3, #1
 c00af36:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 c00af38:	fbb2 f3f3 	udiv	r3, r2, r3
 c00af3c:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 c00af3e:	2320      	movs	r3, #32
 c00af40:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 c00af42:	2300      	movs	r3, #0
 c00af44:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 c00af46:	6a3b      	ldr	r3, [r7, #32]
 c00af48:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 c00af4c:	4293      	cmp	r3, r2
 c00af4e:	d903      	bls.n	c00af58 <f_mkfs+0x224>
 c00af50:	6a3b      	ldr	r3, [r7, #32]
 c00af52:	4a1b      	ldr	r2, [pc, #108]	; (c00afc0 <f_mkfs+0x28c>)
 c00af54:	4293      	cmp	r3, r2
 c00af56:	d952      	bls.n	c00affe <f_mkfs+0x2ca>
 c00af58:	230e      	movs	r3, #14
 c00af5a:	e311      	b.n	c00b580 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 c00af5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 c00af5e:	2b00      	cmp	r3, #0
 c00af60:	d11b      	bne.n	c00af9a <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 c00af62:	693b      	ldr	r3, [r7, #16]
 c00af64:	0b1b      	lsrs	r3, r3, #12
 c00af66:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 c00af68:	2300      	movs	r3, #0
 c00af6a:	64bb      	str	r3, [r7, #72]	; 0x48
 c00af6c:	2301      	movs	r3, #1
 c00af6e:	653b      	str	r3, [r7, #80]	; 0x50
 c00af70:	e005      	b.n	c00af7e <f_mkfs+0x24a>
 c00af72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 c00af74:	3301      	adds	r3, #1
 c00af76:	64bb      	str	r3, [r7, #72]	; 0x48
 c00af78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 c00af7a:	005b      	lsls	r3, r3, #1
 c00af7c:	653b      	str	r3, [r7, #80]	; 0x50
 c00af7e:	4a11      	ldr	r2, [pc, #68]	; (c00afc4 <f_mkfs+0x290>)
 c00af80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 c00af82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 c00af86:	2b00      	cmp	r3, #0
 c00af88:	d007      	beq.n	c00af9a <f_mkfs+0x266>
 c00af8a:	4a0e      	ldr	r2, [pc, #56]	; (c00afc4 <f_mkfs+0x290>)
 c00af8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 c00af8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 c00af92:	461a      	mov	r2, r3
 c00af94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 c00af96:	4293      	cmp	r3, r2
 c00af98:	d2eb      	bcs.n	c00af72 <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 c00af9a:	693a      	ldr	r2, [r7, #16]
 c00af9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 c00af9e:	fbb2 f3f3 	udiv	r3, r2, r3
 c00afa2:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 c00afa4:	6a3b      	ldr	r3, [r7, #32]
 c00afa6:	f640 72f5 	movw	r2, #4085	; 0xff5
 c00afaa:	4293      	cmp	r3, r2
 c00afac:	d90c      	bls.n	c00afc8 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 c00afae:	6a3b      	ldr	r3, [r7, #32]
 c00afb0:	3302      	adds	r3, #2
 c00afb2:	005b      	lsls	r3, r3, #1
 c00afb4:	65fb      	str	r3, [r7, #92]	; 0x5c
 c00afb6:	e012      	b.n	c00afde <f_mkfs+0x2aa>
 c00afb8:	300007e4 	.word	0x300007e4
 c00afbc:	0c00bc70 	.word	0x0c00bc70
 c00afc0:	0ffffff5 	.word	0x0ffffff5
 c00afc4:	0c00bc80 	.word	0x0c00bc80
				} else {
					fmt = FS_FAT12;
 c00afc8:	2301      	movs	r3, #1
 c00afca:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 c00afce:	6a3a      	ldr	r2, [r7, #32]
 c00afd0:	4613      	mov	r3, r2
 c00afd2:	005b      	lsls	r3, r3, #1
 c00afd4:	4413      	add	r3, r2
 c00afd6:	3301      	adds	r3, #1
 c00afd8:	085b      	lsrs	r3, r3, #1
 c00afda:	3303      	adds	r3, #3
 c00afdc:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 c00afde:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 c00afe0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 c00afe2:	4413      	add	r3, r2
 c00afe4:	1e5a      	subs	r2, r3, #1
 c00afe6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 c00afe8:	fbb2 f3f3 	udiv	r3, r2, r3
 c00afec:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 c00afee:	2301      	movs	r3, #1
 c00aff0:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 c00aff2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c00aff4:	015a      	lsls	r2, r3, #5
 c00aff6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 c00aff8:	fbb2 f3f3 	udiv	r3, r2, r3
 c00affc:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 c00affe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 c00b000:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 c00b002:	4413      	add	r3, r2
 c00b004:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 c00b006:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 c00b008:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 c00b00a:	fb03 f202 	mul.w	r2, r3, r2
 c00b00e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 c00b010:	4413      	add	r3, r2
 c00b012:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 c00b014:	4413      	add	r3, r2
 c00b016:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 c00b018:	697a      	ldr	r2, [r7, #20]
 c00b01a:	69fb      	ldr	r3, [r7, #28]
 c00b01c:	4413      	add	r3, r2
 c00b01e:	1e5a      	subs	r2, r3, #1
 c00b020:	697b      	ldr	r3, [r7, #20]
 c00b022:	425b      	negs	r3, r3
 c00b024:	401a      	ands	r2, r3
 c00b026:	69fb      	ldr	r3, [r7, #28]
 c00b028:	1ad3      	subs	r3, r2, r3
 c00b02a:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 c00b02c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 c00b030:	2b03      	cmp	r3, #3
 c00b032:	d108      	bne.n	c00b046 <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 c00b034:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 c00b036:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 c00b038:	4413      	add	r3, r2
 c00b03a:	657b      	str	r3, [r7, #84]	; 0x54
 c00b03c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 c00b03e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 c00b040:	4413      	add	r3, r2
 c00b042:	65bb      	str	r3, [r7, #88]	; 0x58
 c00b044:	e006      	b.n	c00b054 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 c00b046:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 c00b048:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 c00b04a:	fbb2 f3f3 	udiv	r3, r2, r3
 c00b04e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 c00b050:	4413      	add	r3, r2
 c00b052:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 c00b054:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 c00b056:	011a      	lsls	r2, r3, #4
 c00b058:	69fb      	ldr	r3, [r7, #28]
 c00b05a:	441a      	add	r2, r3
 c00b05c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c00b05e:	1ad2      	subs	r2, r2, r3
 c00b060:	693b      	ldr	r3, [r7, #16]
 c00b062:	429a      	cmp	r2, r3
 c00b064:	d901      	bls.n	c00b06a <f_mkfs+0x336>
 c00b066:	230e      	movs	r3, #14
 c00b068:	e28a      	b.n	c00b580 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 c00b06a:	693a      	ldr	r2, [r7, #16]
 c00b06c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 c00b06e:	1ad2      	subs	r2, r2, r3
 c00b070:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 c00b072:	6c79      	ldr	r1, [r7, #68]	; 0x44
 c00b074:	fb01 f303 	mul.w	r3, r1, r3
 c00b078:	1ad2      	subs	r2, r2, r3
 c00b07a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c00b07c:	1ad2      	subs	r2, r2, r3
 c00b07e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 c00b080:	fbb2 f3f3 	udiv	r3, r2, r3
 c00b084:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 c00b086:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 c00b08a:	2b03      	cmp	r3, #3
 c00b08c:	d10f      	bne.n	c00b0ae <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 c00b08e:	6a3b      	ldr	r3, [r7, #32]
 c00b090:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 c00b094:	4293      	cmp	r3, r2
 c00b096:	d80a      	bhi.n	c00b0ae <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 c00b098:	687b      	ldr	r3, [r7, #4]
 c00b09a:	2b00      	cmp	r3, #0
 c00b09c:	d105      	bne.n	c00b0aa <f_mkfs+0x376>
 c00b09e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 c00b0a0:	085b      	lsrs	r3, r3, #1
 c00b0a2:	607b      	str	r3, [r7, #4]
 c00b0a4:	687b      	ldr	r3, [r7, #4]
 c00b0a6:	2b00      	cmp	r3, #0
 c00b0a8:	d144      	bne.n	c00b134 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 c00b0aa:	230e      	movs	r3, #14
 c00b0ac:	e268      	b.n	c00b580 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 c00b0ae:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 c00b0b2:	2b02      	cmp	r3, #2
 c00b0b4:	d133      	bne.n	c00b11e <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 c00b0b6:	6a3b      	ldr	r3, [r7, #32]
 c00b0b8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 c00b0bc:	4293      	cmp	r3, r2
 c00b0be:	d91e      	bls.n	c00b0fe <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 c00b0c0:	687b      	ldr	r3, [r7, #4]
 c00b0c2:	2b00      	cmp	r3, #0
 c00b0c4:	d107      	bne.n	c00b0d6 <f_mkfs+0x3a2>
 c00b0c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 c00b0c8:	005b      	lsls	r3, r3, #1
 c00b0ca:	2b40      	cmp	r3, #64	; 0x40
 c00b0cc:	d803      	bhi.n	c00b0d6 <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 c00b0ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 c00b0d0:	005b      	lsls	r3, r3, #1
 c00b0d2:	607b      	str	r3, [r7, #4]
 c00b0d4:	e033      	b.n	c00b13e <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 c00b0d6:	7afb      	ldrb	r3, [r7, #11]
 c00b0d8:	f003 0302 	and.w	r3, r3, #2
 c00b0dc:	2b00      	cmp	r3, #0
 c00b0de:	d003      	beq.n	c00b0e8 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 c00b0e0:	2303      	movs	r3, #3
 c00b0e2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 c00b0e6:	e02a      	b.n	c00b13e <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 c00b0e8:	687b      	ldr	r3, [r7, #4]
 c00b0ea:	2b00      	cmp	r3, #0
 c00b0ec:	d105      	bne.n	c00b0fa <f_mkfs+0x3c6>
 c00b0ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 c00b0f0:	005b      	lsls	r3, r3, #1
 c00b0f2:	607b      	str	r3, [r7, #4]
 c00b0f4:	687b      	ldr	r3, [r7, #4]
 c00b0f6:	2b80      	cmp	r3, #128	; 0x80
 c00b0f8:	d91e      	bls.n	c00b138 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 c00b0fa:	230e      	movs	r3, #14
 c00b0fc:	e240      	b.n	c00b580 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 c00b0fe:	6a3b      	ldr	r3, [r7, #32]
 c00b100:	f640 72f5 	movw	r2, #4085	; 0xff5
 c00b104:	4293      	cmp	r3, r2
 c00b106:	d80a      	bhi.n	c00b11e <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 c00b108:	687b      	ldr	r3, [r7, #4]
 c00b10a:	2b00      	cmp	r3, #0
 c00b10c:	d105      	bne.n	c00b11a <f_mkfs+0x3e6>
 c00b10e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 c00b110:	005b      	lsls	r3, r3, #1
 c00b112:	607b      	str	r3, [r7, #4]
 c00b114:	687b      	ldr	r3, [r7, #4]
 c00b116:	2b80      	cmp	r3, #128	; 0x80
 c00b118:	d910      	bls.n	c00b13c <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 c00b11a:	230e      	movs	r3, #14
 c00b11c:	e230      	b.n	c00b580 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 c00b11e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 c00b122:	2b01      	cmp	r3, #1
 c00b124:	d10c      	bne.n	c00b140 <f_mkfs+0x40c>
 c00b126:	6a3b      	ldr	r3, [r7, #32]
 c00b128:	f640 72f5 	movw	r2, #4085	; 0xff5
 c00b12c:	4293      	cmp	r3, r2
 c00b12e:	d907      	bls.n	c00b140 <f_mkfs+0x40c>
 c00b130:	230e      	movs	r3, #14
 c00b132:	e225      	b.n	c00b580 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 c00b134:	bf00      	nop
 c00b136:	e6ce      	b.n	c00aed6 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 c00b138:	bf00      	nop
 c00b13a:	e6cc      	b.n	c00aed6 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 c00b13c:	bf00      	nop
			pau = au;
 c00b13e:	e6ca      	b.n	c00aed6 <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 c00b140:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 c00b142:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 c00b144:	461a      	mov	r2, r3
 c00b146:	2100      	movs	r1, #0
 c00b148:	6b38      	ldr	r0, [r7, #48]	; 0x30
 c00b14a:	f7fd f8aa 	bl	c0082a2 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 c00b14e:	220b      	movs	r2, #11
 c00b150:	49b2      	ldr	r1, [pc, #712]	; (c00b41c <f_mkfs+0x6e8>)
 c00b152:	6b38      	ldr	r0, [r7, #48]	; 0x30
 c00b154:	f7fd f884 	bl	c008260 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 c00b158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c00b15a:	330b      	adds	r3, #11
 c00b15c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 c00b15e:	4611      	mov	r1, r2
 c00b160:	4618      	mov	r0, r3
 c00b162:	f7fd f836 	bl	c0081d2 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 c00b166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c00b168:	330d      	adds	r3, #13
 c00b16a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 c00b16c:	b2d2      	uxtb	r2, r2
 c00b16e:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 c00b170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c00b172:	330e      	adds	r3, #14
 c00b174:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 c00b176:	b292      	uxth	r2, r2
 c00b178:	4611      	mov	r1, r2
 c00b17a:	4618      	mov	r0, r3
 c00b17c:	f7fd f829 	bl	c0081d2 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 c00b180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c00b182:	3310      	adds	r3, #16
 c00b184:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 c00b186:	b2d2      	uxtb	r2, r2
 c00b188:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 c00b18a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c00b18c:	f103 0211 	add.w	r2, r3, #17
 c00b190:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 c00b194:	2b03      	cmp	r3, #3
 c00b196:	d002      	beq.n	c00b19e <f_mkfs+0x46a>
 c00b198:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c00b19a:	b29b      	uxth	r3, r3
 c00b19c:	e000      	b.n	c00b1a0 <f_mkfs+0x46c>
 c00b19e:	2300      	movs	r3, #0
 c00b1a0:	4619      	mov	r1, r3
 c00b1a2:	4610      	mov	r0, r2
 c00b1a4:	f7fd f815 	bl	c0081d2 <st_word>
		if (sz_vol < 0x10000) {
 c00b1a8:	693b      	ldr	r3, [r7, #16]
 c00b1aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 c00b1ae:	d208      	bcs.n	c00b1c2 <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 c00b1b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c00b1b2:	3313      	adds	r3, #19
 c00b1b4:	693a      	ldr	r2, [r7, #16]
 c00b1b6:	b292      	uxth	r2, r2
 c00b1b8:	4611      	mov	r1, r2
 c00b1ba:	4618      	mov	r0, r3
 c00b1bc:	f7fd f809 	bl	c0081d2 <st_word>
 c00b1c0:	e006      	b.n	c00b1d0 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 c00b1c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c00b1c4:	3320      	adds	r3, #32
 c00b1c6:	693a      	ldr	r2, [r7, #16]
 c00b1c8:	4611      	mov	r1, r2
 c00b1ca:	4618      	mov	r0, r3
 c00b1cc:	f7fd f81c 	bl	c008208 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 c00b1d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c00b1d2:	3315      	adds	r3, #21
 c00b1d4:	22f8      	movs	r2, #248	; 0xf8
 c00b1d6:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 c00b1d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c00b1da:	3318      	adds	r3, #24
 c00b1dc:	213f      	movs	r1, #63	; 0x3f
 c00b1de:	4618      	mov	r0, r3
 c00b1e0:	f7fc fff7 	bl	c0081d2 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 c00b1e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c00b1e6:	331a      	adds	r3, #26
 c00b1e8:	21ff      	movs	r1, #255	; 0xff
 c00b1ea:	4618      	mov	r0, r3
 c00b1ec:	f7fc fff1 	bl	c0081d2 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 c00b1f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c00b1f2:	331c      	adds	r3, #28
 c00b1f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 c00b1f6:	4618      	mov	r0, r3
 c00b1f8:	f7fd f806 	bl	c008208 <st_dword>
		if (fmt == FS_FAT32) {
 c00b1fc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 c00b200:	2b03      	cmp	r3, #3
 c00b202:	d131      	bne.n	c00b268 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 c00b204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c00b206:	f103 0443 	add.w	r4, r3, #67	; 0x43
 c00b20a:	f7fb fd7d 	bl	c006d08 <get_fattime>
 c00b20e:	4603      	mov	r3, r0
 c00b210:	4619      	mov	r1, r3
 c00b212:	4620      	mov	r0, r4
 c00b214:	f7fc fff8 	bl	c008208 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 c00b218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c00b21a:	3324      	adds	r3, #36	; 0x24
 c00b21c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 c00b21e:	4618      	mov	r0, r3
 c00b220:	f7fc fff2 	bl	c008208 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 c00b224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c00b226:	332c      	adds	r3, #44	; 0x2c
 c00b228:	2102      	movs	r1, #2
 c00b22a:	4618      	mov	r0, r3
 c00b22c:	f7fc ffec 	bl	c008208 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 c00b230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c00b232:	3330      	adds	r3, #48	; 0x30
 c00b234:	2101      	movs	r1, #1
 c00b236:	4618      	mov	r0, r3
 c00b238:	f7fc ffcb 	bl	c0081d2 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 c00b23c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c00b23e:	3332      	adds	r3, #50	; 0x32
 c00b240:	2106      	movs	r1, #6
 c00b242:	4618      	mov	r0, r3
 c00b244:	f7fc ffc5 	bl	c0081d2 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 c00b248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c00b24a:	3340      	adds	r3, #64	; 0x40
 c00b24c:	2280      	movs	r2, #128	; 0x80
 c00b24e:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 c00b250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c00b252:	3342      	adds	r3, #66	; 0x42
 c00b254:	2229      	movs	r2, #41	; 0x29
 c00b256:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 c00b258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c00b25a:	3347      	adds	r3, #71	; 0x47
 c00b25c:	2213      	movs	r2, #19
 c00b25e:	4970      	ldr	r1, [pc, #448]	; (c00b420 <f_mkfs+0x6ec>)
 c00b260:	4618      	mov	r0, r3
 c00b262:	f7fc fffd 	bl	c008260 <mem_cpy>
 c00b266:	e020      	b.n	c00b2aa <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 c00b268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c00b26a:	f103 0427 	add.w	r4, r3, #39	; 0x27
 c00b26e:	f7fb fd4b 	bl	c006d08 <get_fattime>
 c00b272:	4603      	mov	r3, r0
 c00b274:	4619      	mov	r1, r3
 c00b276:	4620      	mov	r0, r4
 c00b278:	f7fc ffc6 	bl	c008208 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 c00b27c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c00b27e:	3316      	adds	r3, #22
 c00b280:	6eba      	ldr	r2, [r7, #104]	; 0x68
 c00b282:	b292      	uxth	r2, r2
 c00b284:	4611      	mov	r1, r2
 c00b286:	4618      	mov	r0, r3
 c00b288:	f7fc ffa3 	bl	c0081d2 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 c00b28c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c00b28e:	3324      	adds	r3, #36	; 0x24
 c00b290:	2280      	movs	r2, #128	; 0x80
 c00b292:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 c00b294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c00b296:	3326      	adds	r3, #38	; 0x26
 c00b298:	2229      	movs	r2, #41	; 0x29
 c00b29a:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 c00b29c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c00b29e:	332b      	adds	r3, #43	; 0x2b
 c00b2a0:	2213      	movs	r2, #19
 c00b2a2:	4960      	ldr	r1, [pc, #384]	; (c00b424 <f_mkfs+0x6f0>)
 c00b2a4:	4618      	mov	r0, r3
 c00b2a6:	f7fc ffdb 	bl	c008260 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 c00b2aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c00b2ac:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 c00b2b0:	f64a 2155 	movw	r1, #43605	; 0xaa55
 c00b2b4:	4618      	mov	r0, r3
 c00b2b6:	f7fc ff8c 	bl	c0081d2 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 c00b2ba:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 c00b2be:	2301      	movs	r3, #1
 c00b2c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 c00b2c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 c00b2c4:	f7fc ff0c 	bl	c0080e0 <disk_write>
 c00b2c8:	4603      	mov	r3, r0
 c00b2ca:	2b00      	cmp	r3, #0
 c00b2cc:	d001      	beq.n	c00b2d2 <f_mkfs+0x59e>
 c00b2ce:	2301      	movs	r3, #1
 c00b2d0:	e156      	b.n	c00b580 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 c00b2d2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 c00b2d6:	2b03      	cmp	r3, #3
 c00b2d8:	d140      	bne.n	c00b35c <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 c00b2da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c00b2dc:	1d9a      	adds	r2, r3, #6
 c00b2de:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 c00b2e2:	2301      	movs	r3, #1
 c00b2e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 c00b2e6:	f7fc fefb 	bl	c0080e0 <disk_write>
			mem_set(buf, 0, ss);
 c00b2ea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 c00b2ec:	461a      	mov	r2, r3
 c00b2ee:	2100      	movs	r1, #0
 c00b2f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 c00b2f2:	f7fc ffd6 	bl	c0082a2 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 c00b2f6:	494c      	ldr	r1, [pc, #304]	; (c00b428 <f_mkfs+0x6f4>)
 c00b2f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 c00b2fa:	f7fc ff85 	bl	c008208 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 c00b2fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c00b300:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 c00b304:	4949      	ldr	r1, [pc, #292]	; (c00b42c <f_mkfs+0x6f8>)
 c00b306:	4618      	mov	r0, r3
 c00b308:	f7fc ff7e 	bl	c008208 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 c00b30c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c00b30e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 c00b312:	6a3b      	ldr	r3, [r7, #32]
 c00b314:	3b01      	subs	r3, #1
 c00b316:	4619      	mov	r1, r3
 c00b318:	4610      	mov	r0, r2
 c00b31a:	f7fc ff75 	bl	c008208 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 c00b31e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c00b320:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 c00b324:	2102      	movs	r1, #2
 c00b326:	4618      	mov	r0, r3
 c00b328:	f7fc ff6e 	bl	c008208 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 c00b32c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c00b32e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 c00b332:	f64a 2155 	movw	r1, #43605	; 0xaa55
 c00b336:	4618      	mov	r0, r3
 c00b338:	f7fc ff4b 	bl	c0081d2 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 c00b33c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c00b33e:	1dda      	adds	r2, r3, #7
 c00b340:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 c00b344:	2301      	movs	r3, #1
 c00b346:	6b39      	ldr	r1, [r7, #48]	; 0x30
 c00b348:	f7fc feca 	bl	c0080e0 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 c00b34c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c00b34e:	1c5a      	adds	r2, r3, #1
 c00b350:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 c00b354:	2301      	movs	r3, #1
 c00b356:	6b39      	ldr	r1, [r7, #48]	; 0x30
 c00b358:	f7fc fec2 	bl	c0080e0 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 c00b35c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 c00b35e:	2100      	movs	r1, #0
 c00b360:	6b38      	ldr	r0, [r7, #48]	; 0x30
 c00b362:	f7fc ff9e 	bl	c0082a2 <mem_set>
		sect = b_fat;		/* FAT start sector */
 c00b366:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 c00b368:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 c00b36a:	2300      	movs	r3, #0
 c00b36c:	64bb      	str	r3, [r7, #72]	; 0x48
 c00b36e:	e04b      	b.n	c00b408 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 c00b370:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 c00b374:	2b03      	cmp	r3, #3
 c00b376:	d113      	bne.n	c00b3a0 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 c00b378:	f06f 0107 	mvn.w	r1, #7
 c00b37c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 c00b37e:	f7fc ff43 	bl	c008208 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 c00b382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c00b384:	3304      	adds	r3, #4
 c00b386:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 c00b38a:	4618      	mov	r0, r3
 c00b38c:	f7fc ff3c 	bl	c008208 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 c00b390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c00b392:	3308      	adds	r3, #8
 c00b394:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 c00b398:	4618      	mov	r0, r3
 c00b39a:	f7fc ff35 	bl	c008208 <st_dword>
 c00b39e:	e00b      	b.n	c00b3b8 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 c00b3a0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 c00b3a4:	2b01      	cmp	r3, #1
 c00b3a6:	d101      	bne.n	c00b3ac <f_mkfs+0x678>
 c00b3a8:	4b21      	ldr	r3, [pc, #132]	; (c00b430 <f_mkfs+0x6fc>)
 c00b3aa:	e001      	b.n	c00b3b0 <f_mkfs+0x67c>
 c00b3ac:	f06f 0307 	mvn.w	r3, #7
 c00b3b0:	4619      	mov	r1, r3
 c00b3b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 c00b3b4:	f7fc ff28 	bl	c008208 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 c00b3b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 c00b3ba:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 c00b3bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 c00b3be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c00b3c0:	4293      	cmp	r3, r2
 c00b3c2:	bf28      	it	cs
 c00b3c4:	4613      	movcs	r3, r2
 c00b3c6:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 c00b3c8:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 c00b3cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 c00b3ce:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 c00b3d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 c00b3d2:	f7fc fe85 	bl	c0080e0 <disk_write>
 c00b3d6:	4603      	mov	r3, r0
 c00b3d8:	2b00      	cmp	r3, #0
 c00b3da:	d001      	beq.n	c00b3e0 <f_mkfs+0x6ac>
 c00b3dc:	2301      	movs	r3, #1
 c00b3de:	e0cf      	b.n	c00b580 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 c00b3e0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 c00b3e2:	461a      	mov	r2, r3
 c00b3e4:	2100      	movs	r1, #0
 c00b3e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 c00b3e8:	f7fc ff5b 	bl	c0082a2 <mem_set>
				sect += n; nsect -= n;
 c00b3ec:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 c00b3ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 c00b3f0:	4413      	add	r3, r2
 c00b3f2:	667b      	str	r3, [r7, #100]	; 0x64
 c00b3f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 c00b3f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 c00b3f8:	1ad3      	subs	r3, r2, r3
 c00b3fa:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 c00b3fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 c00b3fe:	2b00      	cmp	r3, #0
 c00b400:	d1dc      	bne.n	c00b3bc <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 c00b402:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 c00b404:	3301      	adds	r3, #1
 c00b406:	64bb      	str	r3, [r7, #72]	; 0x48
 c00b408:	6cba      	ldr	r2, [r7, #72]	; 0x48
 c00b40a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 c00b40c:	429a      	cmp	r2, r3
 c00b40e:	d3af      	bcc.n	c00b370 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 c00b410:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 c00b414:	2b03      	cmp	r3, #3
 c00b416:	d10d      	bne.n	c00b434 <f_mkfs+0x700>
 c00b418:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 c00b41a:	e00c      	b.n	c00b436 <f_mkfs+0x702>
 c00b41c:	0c00bb40 	.word	0x0c00bb40
 c00b420:	0c00bb4c 	.word	0x0c00bb4c
 c00b424:	0c00bb60 	.word	0x0c00bb60
 c00b428:	41615252 	.word	0x41615252
 c00b42c:	61417272 	.word	0x61417272
 c00b430:	00fffff8 	.word	0x00fffff8
 c00b434:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c00b436:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 c00b438:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 c00b43a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c00b43c:	4293      	cmp	r3, r2
 c00b43e:	bf28      	it	cs
 c00b440:	4613      	movcs	r3, r2
 c00b442:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 c00b444:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 c00b448:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 c00b44a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 c00b44c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 c00b44e:	f7fc fe47 	bl	c0080e0 <disk_write>
 c00b452:	4603      	mov	r3, r0
 c00b454:	2b00      	cmp	r3, #0
 c00b456:	d001      	beq.n	c00b45c <f_mkfs+0x728>
 c00b458:	2301      	movs	r3, #1
 c00b45a:	e091      	b.n	c00b580 <f_mkfs+0x84c>
			sect += n; nsect -= n;
 c00b45c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 c00b45e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 c00b460:	4413      	add	r3, r2
 c00b462:	667b      	str	r3, [r7, #100]	; 0x64
 c00b464:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 c00b466:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 c00b468:	1ad3      	subs	r3, r2, r3
 c00b46a:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 c00b46c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 c00b46e:	2b00      	cmp	r3, #0
 c00b470:	d1e2      	bne.n	c00b438 <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 c00b472:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 c00b476:	2b03      	cmp	r3, #3
 c00b478:	d103      	bne.n	c00b482 <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 c00b47a:	230c      	movs	r3, #12
 c00b47c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 c00b480:	e010      	b.n	c00b4a4 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 c00b482:	693b      	ldr	r3, [r7, #16]
 c00b484:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 c00b488:	d303      	bcc.n	c00b492 <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 c00b48a:	2306      	movs	r3, #6
 c00b48c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 c00b490:	e008      	b.n	c00b4a4 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 c00b492:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 c00b496:	2b02      	cmp	r3, #2
 c00b498:	d101      	bne.n	c00b49e <f_mkfs+0x76a>
 c00b49a:	2304      	movs	r3, #4
 c00b49c:	e000      	b.n	c00b4a0 <f_mkfs+0x76c>
 c00b49e:	2301      	movs	r3, #1
 c00b4a0:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 c00b4a4:	7afb      	ldrb	r3, [r7, #11]
 c00b4a6:	f003 0308 	and.w	r3, r3, #8
 c00b4aa:	2b00      	cmp	r3, #0
 c00b4ac:	d15b      	bne.n	c00b566 <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 c00b4ae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 c00b4b0:	461a      	mov	r2, r3
 c00b4b2:	2100      	movs	r1, #0
 c00b4b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 c00b4b6:	f7fc fef4 	bl	c0082a2 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 c00b4ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c00b4bc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 c00b4c0:	f64a 2155 	movw	r1, #43605	; 0xaa55
 c00b4c4:	4618      	mov	r0, r3
 c00b4c6:	f7fc fe84 	bl	c0081d2 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 c00b4ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c00b4cc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 c00b4d0:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 c00b4d2:	69bb      	ldr	r3, [r7, #24]
 c00b4d4:	2200      	movs	r2, #0
 c00b4d6:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 c00b4d8:	69bb      	ldr	r3, [r7, #24]
 c00b4da:	3301      	adds	r3, #1
 c00b4dc:	2201      	movs	r2, #1
 c00b4de:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 c00b4e0:	69bb      	ldr	r3, [r7, #24]
 c00b4e2:	3302      	adds	r3, #2
 c00b4e4:	2201      	movs	r2, #1
 c00b4e6:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 c00b4e8:	69bb      	ldr	r3, [r7, #24]
 c00b4ea:	3303      	adds	r3, #3
 c00b4ec:	2200      	movs	r2, #0
 c00b4ee:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 c00b4f0:	69bb      	ldr	r3, [r7, #24]
 c00b4f2:	3304      	adds	r3, #4
 c00b4f4:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 c00b4f8:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 c00b4fa:	693a      	ldr	r2, [r7, #16]
 c00b4fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c00b4fe:	441a      	add	r2, r3
 c00b500:	4b21      	ldr	r3, [pc, #132]	; (c00b588 <f_mkfs+0x854>)
 c00b502:	fba3 1302 	umull	r1, r3, r3, r2
 c00b506:	1ad2      	subs	r2, r2, r3
 c00b508:	0852      	lsrs	r2, r2, #1
 c00b50a:	4413      	add	r3, r2
 c00b50c:	0b5b      	lsrs	r3, r3, #13
 c00b50e:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 c00b510:	69bb      	ldr	r3, [r7, #24]
 c00b512:	3305      	adds	r3, #5
 c00b514:	22fe      	movs	r2, #254	; 0xfe
 c00b516:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 c00b518:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 c00b51a:	089b      	lsrs	r3, r3, #2
 c00b51c:	b2da      	uxtb	r2, r3
 c00b51e:	69bb      	ldr	r3, [r7, #24]
 c00b520:	3306      	adds	r3, #6
 c00b522:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 c00b526:	b2d2      	uxtb	r2, r2
 c00b528:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 c00b52a:	69bb      	ldr	r3, [r7, #24]
 c00b52c:	3307      	adds	r3, #7
 c00b52e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 c00b530:	b2d2      	uxtb	r2, r2
 c00b532:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 c00b534:	69bb      	ldr	r3, [r7, #24]
 c00b536:	3308      	adds	r3, #8
 c00b538:	6a79      	ldr	r1, [r7, #36]	; 0x24
 c00b53a:	4618      	mov	r0, r3
 c00b53c:	f7fc fe64 	bl	c008208 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 c00b540:	69bb      	ldr	r3, [r7, #24]
 c00b542:	330c      	adds	r3, #12
 c00b544:	693a      	ldr	r2, [r7, #16]
 c00b546:	4611      	mov	r1, r2
 c00b548:	4618      	mov	r0, r3
 c00b54a:	f7fc fe5d 	bl	c008208 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 c00b54e:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 c00b552:	2301      	movs	r3, #1
 c00b554:	2200      	movs	r2, #0
 c00b556:	6b39      	ldr	r1, [r7, #48]	; 0x30
 c00b558:	f7fc fdc2 	bl	c0080e0 <disk_write>
 c00b55c:	4603      	mov	r3, r0
 c00b55e:	2b00      	cmp	r3, #0
 c00b560:	d001      	beq.n	c00b566 <f_mkfs+0x832>
 c00b562:	2301      	movs	r3, #1
 c00b564:	e00c      	b.n	c00b580 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 c00b566:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 c00b56a:	2200      	movs	r2, #0
 c00b56c:	2100      	movs	r1, #0
 c00b56e:	4618      	mov	r0, r3
 c00b570:	f7fc fdd6 	bl	c008120 <disk_ioctl>
 c00b574:	4603      	mov	r3, r0
 c00b576:	2b00      	cmp	r3, #0
 c00b578:	d001      	beq.n	c00b57e <f_mkfs+0x84a>
 c00b57a:	2301      	movs	r3, #1
 c00b57c:	e000      	b.n	c00b580 <f_mkfs+0x84c>

	return FR_OK;
 c00b57e:	2300      	movs	r3, #0
}
 c00b580:	4618      	mov	r0, r3
 c00b582:	3774      	adds	r7, #116	; 0x74
 c00b584:	46bd      	mov	sp, r7
 c00b586:	bd90      	pop	{r4, r7, pc}
 c00b588:	0515565b 	.word	0x0515565b

0c00b58c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 c00b58c:	b480      	push	{r7}
 c00b58e:	b087      	sub	sp, #28
 c00b590:	af00      	add	r7, sp, #0
 c00b592:	60f8      	str	r0, [r7, #12]
 c00b594:	60b9      	str	r1, [r7, #8]
 c00b596:	4613      	mov	r3, r2
 c00b598:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 c00b59a:	2301      	movs	r3, #1
 c00b59c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 c00b59e:	2300      	movs	r3, #0
 c00b5a0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 c00b5a2:	4b1f      	ldr	r3, [pc, #124]	; (c00b620 <FATFS_LinkDriverEx+0x94>)
 c00b5a4:	7a5b      	ldrb	r3, [r3, #9]
 c00b5a6:	b2db      	uxtb	r3, r3
 c00b5a8:	2b00      	cmp	r3, #0
 c00b5aa:	d131      	bne.n	c00b610 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 c00b5ac:	4b1c      	ldr	r3, [pc, #112]	; (c00b620 <FATFS_LinkDriverEx+0x94>)
 c00b5ae:	7a5b      	ldrb	r3, [r3, #9]
 c00b5b0:	b2db      	uxtb	r3, r3
 c00b5b2:	461a      	mov	r2, r3
 c00b5b4:	4b1a      	ldr	r3, [pc, #104]	; (c00b620 <FATFS_LinkDriverEx+0x94>)
 c00b5b6:	2100      	movs	r1, #0
 c00b5b8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 c00b5ba:	4b19      	ldr	r3, [pc, #100]	; (c00b620 <FATFS_LinkDriverEx+0x94>)
 c00b5bc:	7a5b      	ldrb	r3, [r3, #9]
 c00b5be:	b2db      	uxtb	r3, r3
 c00b5c0:	4a17      	ldr	r2, [pc, #92]	; (c00b620 <FATFS_LinkDriverEx+0x94>)
 c00b5c2:	009b      	lsls	r3, r3, #2
 c00b5c4:	4413      	add	r3, r2
 c00b5c6:	68fa      	ldr	r2, [r7, #12]
 c00b5c8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 c00b5ca:	4b15      	ldr	r3, [pc, #84]	; (c00b620 <FATFS_LinkDriverEx+0x94>)
 c00b5cc:	7a5b      	ldrb	r3, [r3, #9]
 c00b5ce:	b2db      	uxtb	r3, r3
 c00b5d0:	461a      	mov	r2, r3
 c00b5d2:	4b13      	ldr	r3, [pc, #76]	; (c00b620 <FATFS_LinkDriverEx+0x94>)
 c00b5d4:	4413      	add	r3, r2
 c00b5d6:	79fa      	ldrb	r2, [r7, #7]
 c00b5d8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 c00b5da:	4b11      	ldr	r3, [pc, #68]	; (c00b620 <FATFS_LinkDriverEx+0x94>)
 c00b5dc:	7a5b      	ldrb	r3, [r3, #9]
 c00b5de:	b2db      	uxtb	r3, r3
 c00b5e0:	1c5a      	adds	r2, r3, #1
 c00b5e2:	b2d1      	uxtb	r1, r2
 c00b5e4:	4a0e      	ldr	r2, [pc, #56]	; (c00b620 <FATFS_LinkDriverEx+0x94>)
 c00b5e6:	7251      	strb	r1, [r2, #9]
 c00b5e8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 c00b5ea:	7dbb      	ldrb	r3, [r7, #22]
 c00b5ec:	3330      	adds	r3, #48	; 0x30
 c00b5ee:	b2da      	uxtb	r2, r3
 c00b5f0:	68bb      	ldr	r3, [r7, #8]
 c00b5f2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 c00b5f4:	68bb      	ldr	r3, [r7, #8]
 c00b5f6:	3301      	adds	r3, #1
 c00b5f8:	223a      	movs	r2, #58	; 0x3a
 c00b5fa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 c00b5fc:	68bb      	ldr	r3, [r7, #8]
 c00b5fe:	3302      	adds	r3, #2
 c00b600:	222f      	movs	r2, #47	; 0x2f
 c00b602:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 c00b604:	68bb      	ldr	r3, [r7, #8]
 c00b606:	3303      	adds	r3, #3
 c00b608:	2200      	movs	r2, #0
 c00b60a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 c00b60c:	2300      	movs	r3, #0
 c00b60e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 c00b610:	7dfb      	ldrb	r3, [r7, #23]
}
 c00b612:	4618      	mov	r0, r3
 c00b614:	371c      	adds	r7, #28
 c00b616:	46bd      	mov	sp, r7
 c00b618:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00b61c:	4770      	bx	lr
 c00b61e:	bf00      	nop
 c00b620:	3000080c 	.word	0x3000080c

0c00b624 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 c00b624:	b580      	push	{r7, lr}
 c00b626:	b082      	sub	sp, #8
 c00b628:	af00      	add	r7, sp, #0
 c00b62a:	6078      	str	r0, [r7, #4]
 c00b62c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 c00b62e:	2200      	movs	r2, #0
 c00b630:	6839      	ldr	r1, [r7, #0]
 c00b632:	6878      	ldr	r0, [r7, #4]
 c00b634:	f7ff ffaa 	bl	c00b58c <FATFS_LinkDriverEx>
 c00b638:	4603      	mov	r3, r0
}
 c00b63a:	4618      	mov	r0, r3
 c00b63c:	3708      	adds	r7, #8
 c00b63e:	46bd      	mov	sp, r7
 c00b640:	bd80      	pop	{r7, pc}

0c00b642 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 c00b642:	b580      	push	{r7, lr}
 c00b644:	b082      	sub	sp, #8
 c00b646:	af00      	add	r7, sp, #0
 c00b648:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 c00b64a:	6878      	ldr	r0, [r7, #4]
 c00b64c:	f000 f900 	bl	c00b850 <malloc>
 c00b650:	4603      	mov	r3, r0
}
 c00b652:	4618      	mov	r0, r3
 c00b654:	3708      	adds	r7, #8
 c00b656:	46bd      	mov	sp, r7
 c00b658:	bd80      	pop	{r7, pc}

0c00b65a <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 c00b65a:	b580      	push	{r7, lr}
 c00b65c:	b082      	sub	sp, #8
 c00b65e:	af00      	add	r7, sp, #0
 c00b660:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 c00b662:	6878      	ldr	r0, [r7, #4]
 c00b664:	f000 f8fc 	bl	c00b860 <free>
}
 c00b668:	bf00      	nop
 c00b66a:	3708      	adds	r7, #8
 c00b66c:	46bd      	mov	sp, r7
 c00b66e:	bd80      	pop	{r7, pc}

0c00b670 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 c00b670:	b480      	push	{r7}
 c00b672:	b085      	sub	sp, #20
 c00b674:	af00      	add	r7, sp, #0
 c00b676:	4603      	mov	r3, r0
 c00b678:	6039      	str	r1, [r7, #0]
 c00b67a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 c00b67c:	88fb      	ldrh	r3, [r7, #6]
 c00b67e:	2b7f      	cmp	r3, #127	; 0x7f
 c00b680:	d802      	bhi.n	c00b688 <ff_convert+0x18>
		c = chr;
 c00b682:	88fb      	ldrh	r3, [r7, #6]
 c00b684:	81fb      	strh	r3, [r7, #14]
 c00b686:	e025      	b.n	c00b6d4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 c00b688:	683b      	ldr	r3, [r7, #0]
 c00b68a:	2b00      	cmp	r3, #0
 c00b68c:	d00b      	beq.n	c00b6a6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 c00b68e:	88fb      	ldrh	r3, [r7, #6]
 c00b690:	2bff      	cmp	r3, #255	; 0xff
 c00b692:	d805      	bhi.n	c00b6a0 <ff_convert+0x30>
 c00b694:	88fb      	ldrh	r3, [r7, #6]
 c00b696:	3b80      	subs	r3, #128	; 0x80
 c00b698:	4a12      	ldr	r2, [pc, #72]	; (c00b6e4 <ff_convert+0x74>)
 c00b69a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 c00b69e:	e000      	b.n	c00b6a2 <ff_convert+0x32>
 c00b6a0:	2300      	movs	r3, #0
 c00b6a2:	81fb      	strh	r3, [r7, #14]
 c00b6a4:	e016      	b.n	c00b6d4 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 c00b6a6:	2300      	movs	r3, #0
 c00b6a8:	81fb      	strh	r3, [r7, #14]
 c00b6aa:	e009      	b.n	c00b6c0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 c00b6ac:	89fb      	ldrh	r3, [r7, #14]
 c00b6ae:	4a0d      	ldr	r2, [pc, #52]	; (c00b6e4 <ff_convert+0x74>)
 c00b6b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 c00b6b4:	88fa      	ldrh	r2, [r7, #6]
 c00b6b6:	429a      	cmp	r2, r3
 c00b6b8:	d006      	beq.n	c00b6c8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 c00b6ba:	89fb      	ldrh	r3, [r7, #14]
 c00b6bc:	3301      	adds	r3, #1
 c00b6be:	81fb      	strh	r3, [r7, #14]
 c00b6c0:	89fb      	ldrh	r3, [r7, #14]
 c00b6c2:	2b7f      	cmp	r3, #127	; 0x7f
 c00b6c4:	d9f2      	bls.n	c00b6ac <ff_convert+0x3c>
 c00b6c6:	e000      	b.n	c00b6ca <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 c00b6c8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 c00b6ca:	89fb      	ldrh	r3, [r7, #14]
 c00b6cc:	3380      	adds	r3, #128	; 0x80
 c00b6ce:	b29b      	uxth	r3, r3
 c00b6d0:	b2db      	uxtb	r3, r3
 c00b6d2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 c00b6d4:	89fb      	ldrh	r3, [r7, #14]
}
 c00b6d6:	4618      	mov	r0, r3
 c00b6d8:	3714      	adds	r7, #20
 c00b6da:	46bd      	mov	sp, r7
 c00b6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00b6e0:	4770      	bx	lr
 c00b6e2:	bf00      	nop
 c00b6e4:	0c00bc90 	.word	0x0c00bc90

0c00b6e8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 c00b6e8:	b480      	push	{r7}
 c00b6ea:	b087      	sub	sp, #28
 c00b6ec:	af00      	add	r7, sp, #0
 c00b6ee:	4603      	mov	r3, r0
 c00b6f0:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 c00b6f2:	88fb      	ldrh	r3, [r7, #6]
 c00b6f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 c00b6f8:	d201      	bcs.n	c00b6fe <ff_wtoupper+0x16>
 c00b6fa:	4b3e      	ldr	r3, [pc, #248]	; (c00b7f4 <ff_wtoupper+0x10c>)
 c00b6fc:	e000      	b.n	c00b700 <ff_wtoupper+0x18>
 c00b6fe:	4b3e      	ldr	r3, [pc, #248]	; (c00b7f8 <ff_wtoupper+0x110>)
 c00b700:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 c00b702:	697b      	ldr	r3, [r7, #20]
 c00b704:	1c9a      	adds	r2, r3, #2
 c00b706:	617a      	str	r2, [r7, #20]
 c00b708:	881b      	ldrh	r3, [r3, #0]
 c00b70a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 c00b70c:	8a7b      	ldrh	r3, [r7, #18]
 c00b70e:	2b00      	cmp	r3, #0
 c00b710:	d068      	beq.n	c00b7e4 <ff_wtoupper+0xfc>
 c00b712:	88fa      	ldrh	r2, [r7, #6]
 c00b714:	8a7b      	ldrh	r3, [r7, #18]
 c00b716:	429a      	cmp	r2, r3
 c00b718:	d364      	bcc.n	c00b7e4 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 c00b71a:	697b      	ldr	r3, [r7, #20]
 c00b71c:	1c9a      	adds	r2, r3, #2
 c00b71e:	617a      	str	r2, [r7, #20]
 c00b720:	881b      	ldrh	r3, [r3, #0]
 c00b722:	823b      	strh	r3, [r7, #16]
 c00b724:	8a3b      	ldrh	r3, [r7, #16]
 c00b726:	0a1b      	lsrs	r3, r3, #8
 c00b728:	81fb      	strh	r3, [r7, #14]
 c00b72a:	8a3b      	ldrh	r3, [r7, #16]
 c00b72c:	b2db      	uxtb	r3, r3
 c00b72e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 c00b730:	88fa      	ldrh	r2, [r7, #6]
 c00b732:	8a79      	ldrh	r1, [r7, #18]
 c00b734:	8a3b      	ldrh	r3, [r7, #16]
 c00b736:	440b      	add	r3, r1
 c00b738:	429a      	cmp	r2, r3
 c00b73a:	da49      	bge.n	c00b7d0 <ff_wtoupper+0xe8>
			switch (cmd) {
 c00b73c:	89fb      	ldrh	r3, [r7, #14]
 c00b73e:	2b08      	cmp	r3, #8
 c00b740:	d84f      	bhi.n	c00b7e2 <ff_wtoupper+0xfa>
 c00b742:	a201      	add	r2, pc, #4	; (adr r2, c00b748 <ff_wtoupper+0x60>)
 c00b744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c00b748:	0c00b76d 	.word	0x0c00b76d
 c00b74c:	0c00b77f 	.word	0x0c00b77f
 c00b750:	0c00b795 	.word	0x0c00b795
 c00b754:	0c00b79d 	.word	0x0c00b79d
 c00b758:	0c00b7a5 	.word	0x0c00b7a5
 c00b75c:	0c00b7ad 	.word	0x0c00b7ad
 c00b760:	0c00b7b5 	.word	0x0c00b7b5
 c00b764:	0c00b7bd 	.word	0x0c00b7bd
 c00b768:	0c00b7c5 	.word	0x0c00b7c5
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 c00b76c:	88fa      	ldrh	r2, [r7, #6]
 c00b76e:	8a7b      	ldrh	r3, [r7, #18]
 c00b770:	1ad3      	subs	r3, r2, r3
 c00b772:	005b      	lsls	r3, r3, #1
 c00b774:	697a      	ldr	r2, [r7, #20]
 c00b776:	4413      	add	r3, r2
 c00b778:	881b      	ldrh	r3, [r3, #0]
 c00b77a:	80fb      	strh	r3, [r7, #6]
 c00b77c:	e027      	b.n	c00b7ce <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 c00b77e:	88fa      	ldrh	r2, [r7, #6]
 c00b780:	8a7b      	ldrh	r3, [r7, #18]
 c00b782:	1ad3      	subs	r3, r2, r3
 c00b784:	b29b      	uxth	r3, r3
 c00b786:	f003 0301 	and.w	r3, r3, #1
 c00b78a:	b29b      	uxth	r3, r3
 c00b78c:	88fa      	ldrh	r2, [r7, #6]
 c00b78e:	1ad3      	subs	r3, r2, r3
 c00b790:	80fb      	strh	r3, [r7, #6]
 c00b792:	e01c      	b.n	c00b7ce <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 c00b794:	88fb      	ldrh	r3, [r7, #6]
 c00b796:	3b10      	subs	r3, #16
 c00b798:	80fb      	strh	r3, [r7, #6]
 c00b79a:	e018      	b.n	c00b7ce <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 c00b79c:	88fb      	ldrh	r3, [r7, #6]
 c00b79e:	3b20      	subs	r3, #32
 c00b7a0:	80fb      	strh	r3, [r7, #6]
 c00b7a2:	e014      	b.n	c00b7ce <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 c00b7a4:	88fb      	ldrh	r3, [r7, #6]
 c00b7a6:	3b30      	subs	r3, #48	; 0x30
 c00b7a8:	80fb      	strh	r3, [r7, #6]
 c00b7aa:	e010      	b.n	c00b7ce <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 c00b7ac:	88fb      	ldrh	r3, [r7, #6]
 c00b7ae:	3b1a      	subs	r3, #26
 c00b7b0:	80fb      	strh	r3, [r7, #6]
 c00b7b2:	e00c      	b.n	c00b7ce <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 c00b7b4:	88fb      	ldrh	r3, [r7, #6]
 c00b7b6:	3308      	adds	r3, #8
 c00b7b8:	80fb      	strh	r3, [r7, #6]
 c00b7ba:	e008      	b.n	c00b7ce <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 c00b7bc:	88fb      	ldrh	r3, [r7, #6]
 c00b7be:	3b50      	subs	r3, #80	; 0x50
 c00b7c0:	80fb      	strh	r3, [r7, #6]
 c00b7c2:	e004      	b.n	c00b7ce <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 c00b7c4:	88fb      	ldrh	r3, [r7, #6]
 c00b7c6:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 c00b7ca:	80fb      	strh	r3, [r7, #6]
 c00b7cc:	bf00      	nop
			}
			break;
 c00b7ce:	e008      	b.n	c00b7e2 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 c00b7d0:	89fb      	ldrh	r3, [r7, #14]
 c00b7d2:	2b00      	cmp	r3, #0
 c00b7d4:	d195      	bne.n	c00b702 <ff_wtoupper+0x1a>
 c00b7d6:	8a3b      	ldrh	r3, [r7, #16]
 c00b7d8:	005b      	lsls	r3, r3, #1
 c00b7da:	697a      	ldr	r2, [r7, #20]
 c00b7dc:	4413      	add	r3, r2
 c00b7de:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 c00b7e0:	e78f      	b.n	c00b702 <ff_wtoupper+0x1a>
			break;
 c00b7e2:	bf00      	nop
	}

	return chr;
 c00b7e4:	88fb      	ldrh	r3, [r7, #6]
}
 c00b7e6:	4618      	mov	r0, r3
 c00b7e8:	371c      	adds	r7, #28
 c00b7ea:	46bd      	mov	sp, r7
 c00b7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00b7f0:	4770      	bx	lr
 c00b7f2:	bf00      	nop
 c00b7f4:	0c00bd90 	.word	0x0c00bd90
 c00b7f8:	0c00bf84 	.word	0x0c00bf84

0c00b7fc <__errno>:
 c00b7fc:	4b01      	ldr	r3, [pc, #4]	; (c00b804 <__errno+0x8>)
 c00b7fe:	6818      	ldr	r0, [r3, #0]
 c00b800:	4770      	bx	lr
 c00b802:	bf00      	nop
 c00b804:	30000014 	.word	0x30000014

0c00b808 <__libc_init_array>:
 c00b808:	b570      	push	{r4, r5, r6, lr}
 c00b80a:	4d0d      	ldr	r5, [pc, #52]	; (c00b840 <__libc_init_array+0x38>)
 c00b80c:	2600      	movs	r6, #0
 c00b80e:	4c0d      	ldr	r4, [pc, #52]	; (c00b844 <__libc_init_array+0x3c>)
 c00b810:	1b64      	subs	r4, r4, r5
 c00b812:	10a4      	asrs	r4, r4, #2
 c00b814:	42a6      	cmp	r6, r4
 c00b816:	d109      	bne.n	c00b82c <__libc_init_array+0x24>
 c00b818:	4d0b      	ldr	r5, [pc, #44]	; (c00b848 <__libc_init_array+0x40>)
 c00b81a:	2600      	movs	r6, #0
 c00b81c:	4c0b      	ldr	r4, [pc, #44]	; (c00b84c <__libc_init_array+0x44>)
 c00b81e:	f000 f93b 	bl	c00ba98 <_init>
 c00b822:	1b64      	subs	r4, r4, r5
 c00b824:	10a4      	asrs	r4, r4, #2
 c00b826:	42a6      	cmp	r6, r4
 c00b828:	d105      	bne.n	c00b836 <__libc_init_array+0x2e>
 c00b82a:	bd70      	pop	{r4, r5, r6, pc}
 c00b82c:	f855 3b04 	ldr.w	r3, [r5], #4
 c00b830:	3601      	adds	r6, #1
 c00b832:	4798      	blx	r3
 c00b834:	e7ee      	b.n	c00b814 <__libc_init_array+0xc>
 c00b836:	f855 3b04 	ldr.w	r3, [r5], #4
 c00b83a:	3601      	adds	r6, #1
 c00b83c:	4798      	blx	r3
 c00b83e:	e7f2      	b.n	c00b826 <__libc_init_array+0x1e>
 c00b840:	0c00c040 	.word	0x0c00c040
 c00b844:	0c00c040 	.word	0x0c00c040
 c00b848:	0c00c040 	.word	0x0c00c040
 c00b84c:	0c00c044 	.word	0x0c00c044

0c00b850 <malloc>:
 c00b850:	4b02      	ldr	r3, [pc, #8]	; (c00b85c <malloc+0xc>)
 c00b852:	4601      	mov	r1, r0
 c00b854:	6818      	ldr	r0, [r3, #0]
 c00b856:	f000 b88d 	b.w	c00b974 <_malloc_r>
 c00b85a:	bf00      	nop
 c00b85c:	30000014 	.word	0x30000014

0c00b860 <free>:
 c00b860:	4b02      	ldr	r3, [pc, #8]	; (c00b86c <free+0xc>)
 c00b862:	4601      	mov	r1, r0
 c00b864:	6818      	ldr	r0, [r3, #0]
 c00b866:	f000 b819 	b.w	c00b89c <_free_r>
 c00b86a:	bf00      	nop
 c00b86c:	30000014 	.word	0x30000014

0c00b870 <memcpy>:
 c00b870:	440a      	add	r2, r1
 c00b872:	1e43      	subs	r3, r0, #1
 c00b874:	4291      	cmp	r1, r2
 c00b876:	d100      	bne.n	c00b87a <memcpy+0xa>
 c00b878:	4770      	bx	lr
 c00b87a:	b510      	push	{r4, lr}
 c00b87c:	f811 4b01 	ldrb.w	r4, [r1], #1
 c00b880:	4291      	cmp	r1, r2
 c00b882:	f803 4f01 	strb.w	r4, [r3, #1]!
 c00b886:	d1f9      	bne.n	c00b87c <memcpy+0xc>
 c00b888:	bd10      	pop	{r4, pc}

0c00b88a <memset>:
 c00b88a:	4402      	add	r2, r0
 c00b88c:	4603      	mov	r3, r0
 c00b88e:	4293      	cmp	r3, r2
 c00b890:	d100      	bne.n	c00b894 <memset+0xa>
 c00b892:	4770      	bx	lr
 c00b894:	f803 1b01 	strb.w	r1, [r3], #1
 c00b898:	e7f9      	b.n	c00b88e <memset+0x4>
	...

0c00b89c <_free_r>:
 c00b89c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 c00b89e:	2900      	cmp	r1, #0
 c00b8a0:	d043      	beq.n	c00b92a <_free_r+0x8e>
 c00b8a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 c00b8a6:	1f0c      	subs	r4, r1, #4
 c00b8a8:	9001      	str	r0, [sp, #4]
 c00b8aa:	2b00      	cmp	r3, #0
 c00b8ac:	bfb8      	it	lt
 c00b8ae:	18e4      	addlt	r4, r4, r3
 c00b8b0:	f000 f8e4 	bl	c00ba7c <__malloc_lock>
 c00b8b4:	4a1e      	ldr	r2, [pc, #120]	; (c00b930 <_free_r+0x94>)
 c00b8b6:	9801      	ldr	r0, [sp, #4]
 c00b8b8:	6813      	ldr	r3, [r2, #0]
 c00b8ba:	b933      	cbnz	r3, c00b8ca <_free_r+0x2e>
 c00b8bc:	6063      	str	r3, [r4, #4]
 c00b8be:	6014      	str	r4, [r2, #0]
 c00b8c0:	b003      	add	sp, #12
 c00b8c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 c00b8c6:	f000 b8df 	b.w	c00ba88 <__malloc_unlock>
 c00b8ca:	42a3      	cmp	r3, r4
 c00b8cc:	d908      	bls.n	c00b8e0 <_free_r+0x44>
 c00b8ce:	6825      	ldr	r5, [r4, #0]
 c00b8d0:	1961      	adds	r1, r4, r5
 c00b8d2:	428b      	cmp	r3, r1
 c00b8d4:	bf01      	itttt	eq
 c00b8d6:	6819      	ldreq	r1, [r3, #0]
 c00b8d8:	685b      	ldreq	r3, [r3, #4]
 c00b8da:	1949      	addeq	r1, r1, r5
 c00b8dc:	6021      	streq	r1, [r4, #0]
 c00b8de:	e7ed      	b.n	c00b8bc <_free_r+0x20>
 c00b8e0:	461a      	mov	r2, r3
 c00b8e2:	685b      	ldr	r3, [r3, #4]
 c00b8e4:	b10b      	cbz	r3, c00b8ea <_free_r+0x4e>
 c00b8e6:	42a3      	cmp	r3, r4
 c00b8e8:	d9fa      	bls.n	c00b8e0 <_free_r+0x44>
 c00b8ea:	6811      	ldr	r1, [r2, #0]
 c00b8ec:	1855      	adds	r5, r2, r1
 c00b8ee:	42a5      	cmp	r5, r4
 c00b8f0:	d10b      	bne.n	c00b90a <_free_r+0x6e>
 c00b8f2:	6824      	ldr	r4, [r4, #0]
 c00b8f4:	4421      	add	r1, r4
 c00b8f6:	1854      	adds	r4, r2, r1
 c00b8f8:	6011      	str	r1, [r2, #0]
 c00b8fa:	42a3      	cmp	r3, r4
 c00b8fc:	d1e0      	bne.n	c00b8c0 <_free_r+0x24>
 c00b8fe:	681c      	ldr	r4, [r3, #0]
 c00b900:	685b      	ldr	r3, [r3, #4]
 c00b902:	4421      	add	r1, r4
 c00b904:	6053      	str	r3, [r2, #4]
 c00b906:	6011      	str	r1, [r2, #0]
 c00b908:	e7da      	b.n	c00b8c0 <_free_r+0x24>
 c00b90a:	d902      	bls.n	c00b912 <_free_r+0x76>
 c00b90c:	230c      	movs	r3, #12
 c00b90e:	6003      	str	r3, [r0, #0]
 c00b910:	e7d6      	b.n	c00b8c0 <_free_r+0x24>
 c00b912:	6825      	ldr	r5, [r4, #0]
 c00b914:	1961      	adds	r1, r4, r5
 c00b916:	428b      	cmp	r3, r1
 c00b918:	bf02      	ittt	eq
 c00b91a:	6819      	ldreq	r1, [r3, #0]
 c00b91c:	685b      	ldreq	r3, [r3, #4]
 c00b91e:	1949      	addeq	r1, r1, r5
 c00b920:	6063      	str	r3, [r4, #4]
 c00b922:	bf08      	it	eq
 c00b924:	6021      	streq	r1, [r4, #0]
 c00b926:	6054      	str	r4, [r2, #4]
 c00b928:	e7ca      	b.n	c00b8c0 <_free_r+0x24>
 c00b92a:	b003      	add	sp, #12
 c00b92c:	bd30      	pop	{r4, r5, pc}
 c00b92e:	bf00      	nop
 c00b930:	30000818 	.word	0x30000818

0c00b934 <sbrk_aligned>:
 c00b934:	b570      	push	{r4, r5, r6, lr}
 c00b936:	4e0e      	ldr	r6, [pc, #56]	; (c00b970 <sbrk_aligned+0x3c>)
 c00b938:	460c      	mov	r4, r1
 c00b93a:	4605      	mov	r5, r0
 c00b93c:	6831      	ldr	r1, [r6, #0]
 c00b93e:	b911      	cbnz	r1, c00b946 <sbrk_aligned+0x12>
 c00b940:	f000 f88c 	bl	c00ba5c <_sbrk_r>
 c00b944:	6030      	str	r0, [r6, #0]
 c00b946:	4621      	mov	r1, r4
 c00b948:	4628      	mov	r0, r5
 c00b94a:	f000 f887 	bl	c00ba5c <_sbrk_r>
 c00b94e:	1c43      	adds	r3, r0, #1
 c00b950:	d00a      	beq.n	c00b968 <sbrk_aligned+0x34>
 c00b952:	1cc4      	adds	r4, r0, #3
 c00b954:	f024 0403 	bic.w	r4, r4, #3
 c00b958:	42a0      	cmp	r0, r4
 c00b95a:	d007      	beq.n	c00b96c <sbrk_aligned+0x38>
 c00b95c:	1a21      	subs	r1, r4, r0
 c00b95e:	4628      	mov	r0, r5
 c00b960:	f000 f87c 	bl	c00ba5c <_sbrk_r>
 c00b964:	3001      	adds	r0, #1
 c00b966:	d101      	bne.n	c00b96c <sbrk_aligned+0x38>
 c00b968:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 c00b96c:	4620      	mov	r0, r4
 c00b96e:	bd70      	pop	{r4, r5, r6, pc}
 c00b970:	3000081c 	.word	0x3000081c

0c00b974 <_malloc_r>:
 c00b974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c00b978:	1ccd      	adds	r5, r1, #3
 c00b97a:	4607      	mov	r7, r0
 c00b97c:	f025 0503 	bic.w	r5, r5, #3
 c00b980:	3508      	adds	r5, #8
 c00b982:	2d0c      	cmp	r5, #12
 c00b984:	bf38      	it	cc
 c00b986:	250c      	movcc	r5, #12
 c00b988:	2d00      	cmp	r5, #0
 c00b98a:	db01      	blt.n	c00b990 <_malloc_r+0x1c>
 c00b98c:	42a9      	cmp	r1, r5
 c00b98e:	d905      	bls.n	c00b99c <_malloc_r+0x28>
 c00b990:	230c      	movs	r3, #12
 c00b992:	2600      	movs	r6, #0
 c00b994:	603b      	str	r3, [r7, #0]
 c00b996:	4630      	mov	r0, r6
 c00b998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 c00b99c:	4e2e      	ldr	r6, [pc, #184]	; (c00ba58 <_malloc_r+0xe4>)
 c00b99e:	f000 f86d 	bl	c00ba7c <__malloc_lock>
 c00b9a2:	6833      	ldr	r3, [r6, #0]
 c00b9a4:	461c      	mov	r4, r3
 c00b9a6:	bb34      	cbnz	r4, c00b9f6 <_malloc_r+0x82>
 c00b9a8:	4629      	mov	r1, r5
 c00b9aa:	4638      	mov	r0, r7
 c00b9ac:	f7ff ffc2 	bl	c00b934 <sbrk_aligned>
 c00b9b0:	1c43      	adds	r3, r0, #1
 c00b9b2:	4604      	mov	r4, r0
 c00b9b4:	d14d      	bne.n	c00ba52 <_malloc_r+0xde>
 c00b9b6:	6834      	ldr	r4, [r6, #0]
 c00b9b8:	4626      	mov	r6, r4
 c00b9ba:	2e00      	cmp	r6, #0
 c00b9bc:	d140      	bne.n	c00ba40 <_malloc_r+0xcc>
 c00b9be:	6823      	ldr	r3, [r4, #0]
 c00b9c0:	4631      	mov	r1, r6
 c00b9c2:	4638      	mov	r0, r7
 c00b9c4:	eb04 0803 	add.w	r8, r4, r3
 c00b9c8:	f000 f848 	bl	c00ba5c <_sbrk_r>
 c00b9cc:	4580      	cmp	r8, r0
 c00b9ce:	d13a      	bne.n	c00ba46 <_malloc_r+0xd2>
 c00b9d0:	6821      	ldr	r1, [r4, #0]
 c00b9d2:	3503      	adds	r5, #3
 c00b9d4:	4638      	mov	r0, r7
 c00b9d6:	1a6d      	subs	r5, r5, r1
 c00b9d8:	f025 0503 	bic.w	r5, r5, #3
 c00b9dc:	3508      	adds	r5, #8
 c00b9de:	2d0c      	cmp	r5, #12
 c00b9e0:	bf38      	it	cc
 c00b9e2:	250c      	movcc	r5, #12
 c00b9e4:	4629      	mov	r1, r5
 c00b9e6:	f7ff ffa5 	bl	c00b934 <sbrk_aligned>
 c00b9ea:	3001      	adds	r0, #1
 c00b9ec:	d02b      	beq.n	c00ba46 <_malloc_r+0xd2>
 c00b9ee:	6823      	ldr	r3, [r4, #0]
 c00b9f0:	442b      	add	r3, r5
 c00b9f2:	6023      	str	r3, [r4, #0]
 c00b9f4:	e00e      	b.n	c00ba14 <_malloc_r+0xa0>
 c00b9f6:	6822      	ldr	r2, [r4, #0]
 c00b9f8:	1b52      	subs	r2, r2, r5
 c00b9fa:	d41e      	bmi.n	c00ba3a <_malloc_r+0xc6>
 c00b9fc:	2a0b      	cmp	r2, #11
 c00b9fe:	d916      	bls.n	c00ba2e <_malloc_r+0xba>
 c00ba00:	1961      	adds	r1, r4, r5
 c00ba02:	42a3      	cmp	r3, r4
 c00ba04:	6025      	str	r5, [r4, #0]
 c00ba06:	bf18      	it	ne
 c00ba08:	6059      	strne	r1, [r3, #4]
 c00ba0a:	6863      	ldr	r3, [r4, #4]
 c00ba0c:	bf08      	it	eq
 c00ba0e:	6031      	streq	r1, [r6, #0]
 c00ba10:	5162      	str	r2, [r4, r5]
 c00ba12:	604b      	str	r3, [r1, #4]
 c00ba14:	f104 060b 	add.w	r6, r4, #11
 c00ba18:	4638      	mov	r0, r7
 c00ba1a:	f000 f835 	bl	c00ba88 <__malloc_unlock>
 c00ba1e:	1d23      	adds	r3, r4, #4
 c00ba20:	f026 0607 	bic.w	r6, r6, #7
 c00ba24:	1af2      	subs	r2, r6, r3
 c00ba26:	d0b6      	beq.n	c00b996 <_malloc_r+0x22>
 c00ba28:	1b9b      	subs	r3, r3, r6
 c00ba2a:	50a3      	str	r3, [r4, r2]
 c00ba2c:	e7b3      	b.n	c00b996 <_malloc_r+0x22>
 c00ba2e:	6862      	ldr	r2, [r4, #4]
 c00ba30:	42a3      	cmp	r3, r4
 c00ba32:	bf0c      	ite	eq
 c00ba34:	6032      	streq	r2, [r6, #0]
 c00ba36:	605a      	strne	r2, [r3, #4]
 c00ba38:	e7ec      	b.n	c00ba14 <_malloc_r+0xa0>
 c00ba3a:	4623      	mov	r3, r4
 c00ba3c:	6864      	ldr	r4, [r4, #4]
 c00ba3e:	e7b2      	b.n	c00b9a6 <_malloc_r+0x32>
 c00ba40:	4634      	mov	r4, r6
 c00ba42:	6876      	ldr	r6, [r6, #4]
 c00ba44:	e7b9      	b.n	c00b9ba <_malloc_r+0x46>
 c00ba46:	230c      	movs	r3, #12
 c00ba48:	4638      	mov	r0, r7
 c00ba4a:	603b      	str	r3, [r7, #0]
 c00ba4c:	f000 f81c 	bl	c00ba88 <__malloc_unlock>
 c00ba50:	e7a1      	b.n	c00b996 <_malloc_r+0x22>
 c00ba52:	6025      	str	r5, [r4, #0]
 c00ba54:	e7de      	b.n	c00ba14 <_malloc_r+0xa0>
 c00ba56:	bf00      	nop
 c00ba58:	30000818 	.word	0x30000818

0c00ba5c <_sbrk_r>:
 c00ba5c:	b538      	push	{r3, r4, r5, lr}
 c00ba5e:	2300      	movs	r3, #0
 c00ba60:	4d05      	ldr	r5, [pc, #20]	; (c00ba78 <_sbrk_r+0x1c>)
 c00ba62:	4604      	mov	r4, r0
 c00ba64:	4608      	mov	r0, r1
 c00ba66:	602b      	str	r3, [r5, #0]
 c00ba68:	f7fc faa4 	bl	c007fb4 <_sbrk>
 c00ba6c:	1c43      	adds	r3, r0, #1
 c00ba6e:	d102      	bne.n	c00ba76 <_sbrk_r+0x1a>
 c00ba70:	682b      	ldr	r3, [r5, #0]
 c00ba72:	b103      	cbz	r3, c00ba76 <_sbrk_r+0x1a>
 c00ba74:	6023      	str	r3, [r4, #0]
 c00ba76:	bd38      	pop	{r3, r4, r5, pc}
 c00ba78:	30000820 	.word	0x30000820

0c00ba7c <__malloc_lock>:
 c00ba7c:	4801      	ldr	r0, [pc, #4]	; (c00ba84 <__malloc_lock+0x8>)
 c00ba7e:	f000 b809 	b.w	c00ba94 <__retarget_lock_acquire_recursive>
 c00ba82:	bf00      	nop
 c00ba84:	30000824 	.word	0x30000824

0c00ba88 <__malloc_unlock>:
 c00ba88:	4801      	ldr	r0, [pc, #4]	; (c00ba90 <__malloc_unlock+0x8>)
 c00ba8a:	f000 b804 	b.w	c00ba96 <__retarget_lock_release_recursive>
 c00ba8e:	bf00      	nop
 c00ba90:	30000824 	.word	0x30000824

0c00ba94 <__retarget_lock_acquire_recursive>:
 c00ba94:	4770      	bx	lr

0c00ba96 <__retarget_lock_release_recursive>:
 c00ba96:	4770      	bx	lr

0c00ba98 <_init>:
 c00ba98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c00ba9a:	bf00      	nop
 c00ba9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c00ba9e:	bc08      	pop	{r3}
 c00baa0:	469e      	mov	lr, r3
 c00baa2:	4770      	bx	lr

0c00baa4 <_fini>:
 c00baa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c00baa6:	bf00      	nop
 c00baa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c00baaa:	bc08      	pop	{r3}
 c00baac:	469e      	mov	lr, r3
 c00baae:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

0c03e000 <SECURE_SystemCoreClockUpdate>:
 c03e000:	e97f e97f 	sg
 c03e004:	f7c2 bc98 	b.w	c000938 <__acle_se_SECURE_SystemCoreClockUpdate>

0c03e008 <SECURE_SD_WriteBlocks>:
 c03e008:	e97f e97f 	sg
 c03e00c:	f7c9 be52 	b.w	c007cb4 <__acle_se_SECURE_SD_WriteBlocks>

0c03e010 <SECURE_SD_GetCardState>:
 c03e010:	e97f e97f 	sg
 c03e014:	f7c9 bd86 	b.w	c007b24 <__acle_se_SECURE_SD_GetCardState>

0c03e018 <SECURE_SD_ReadBlocks>:
 c03e018:	e97f e97f 	sg
 c03e01c:	f7c9 be04 	b.w	c007c28 <__acle_se_SECURE_SD_ReadBlocks>

0c03e020 <SECURE_SD_GetCardInfo>:
 c03e020:	e97f e97f 	sg
 c03e024:	f7c9 bdbe 	b.w	c007ba4 <__acle_se_SECURE_SD_GetCardInfo>

0c03e028 <SECURE_RegisterCallback>:
 c03e028:	e97f e97f 	sg
 c03e02c:	f7c9 bcd8 	b.w	c0079e0 <__acle_se_SECURE_RegisterCallback>

0c03e030 <SECURE_SD_Init>:
 c03e030:	e97f e97f 	sg
 c03e034:	f7c9 bd36 	b.w	c007aa4 <__acle_se_SECURE_SD_Init>

0c03e038 <jump_secure>:
 c03e038:	e97f e97f 	sg
 c03e03c:	f7c9 b84c 	b.w	c0070d8 <__acle_se_jump_secure>

0c03e040 <Normal_entry>:
 c03e040:	e97f e97f 	sg
 c03e044:	f7c9 bafa 	b.w	c00763c <__acle_se_Normal_entry>

0c03e048 <SECURE_SD_IsDetected>:
 c03e048:	e97f e97f 	sg
 c03e04c:	f7c9 be78 	b.w	c007d40 <__acle_se_SECURE_SD_IsDetected>
	...
