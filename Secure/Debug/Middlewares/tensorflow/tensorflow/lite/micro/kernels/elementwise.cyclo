std_abs.h:75:3:constexpr float std::abs(float)	1
elementwise.cc:366:37:static float tflite::ops::micro::elementwise::{anonymous}::SquareEval(TfLiteContext*, TfLiteNode*)::<lambda(float)>::_FUN(float)	1
cmath:425:3:constexpr float std::sin(float)	1
cmath:184:3:constexpr float std::cos(float)	1
cmath:338:3:constexpr float std::log(float)	1
cmath:463:3:constexpr float std::sqrt(float)	1
elementwise.cc:351:26:static float tflite::ops::micro::elementwise::{anonymous}::RsqrtEval(TfLiteContext*, TfLiteNode*)::<lambda(float)>::_FUN(float)	1
elementwise.cc:286:14:TfLiteStatus tflite::ops::micro::elementwise::{anonymous}::validate_input_func(TfLiteContext*, TfLiteNode*, T) [with T = signed char]	2
elementwise.cc:82:14:TfLiteStatus tflite::ops::micro::elementwise::{anonymous}::GenericPrepare(TfLiteContext*, TfLiteNode*) [with bool (* <anonymous>)(TfLiteType) = tflite::ops::micro::elementwise::{anonymous}::IsLogicalSupportedType]	9
elementwise.cc:106:14:TfLiteStatus tflite::ops::micro::elementwise::{anonymous}::PrepareAbsRsqrt(TfLiteContext*, TfLiteNode*) [with bool (* <anonymous>)(TfLiteType) = tflite::ops::micro::elementwise::{anonymous}::IsAbsSupportedType; int op_nameid = 0]	26
elementwise.cc:82:14:TfLiteStatus tflite::ops::micro::elementwise::{anonymous}::GenericPrepare(TfLiteContext*, TfLiteNode*) [with bool (* <anonymous>)(TfLiteType) = tflite::ops::micro::elementwise::{anonymous}::IsNumericSupportedType]	9
elementwise.cc:106:14:TfLiteStatus tflite::ops::micro::elementwise::{anonymous}::PrepareAbsRsqrt(TfLiteContext*, TfLiteNode*) [with bool (* <anonymous>)(TfLiteType) = tflite::ops::micro::elementwise::{anonymous}::IsRsqrtSupportedType; int op_nameid = 1]	25
fixedpoint.h:329:21:IntegerType gemmlowp::SaturatingRoundingDoublingHighMul(IntegerType, IntegerType) [with IntegerType = long int]	4
op_macros.h:24:13:void AbortImpl()	1
elementwise.cc:230:7:void* tflite::ops::micro::elementwise::{anonymous}::ElementWiseAbsRsqrtInit(TfLiteContext*, const char*, size_t)	1
elementwise.cc:199:21:TfLiteStatus tflite::ops::micro::elementwise::{anonymous}::EvalImpl(TfLiteContext*, TfLiteNode*, T (*)(T), TfLiteStatus (*)(T), TfLiteType) [with T = float]	3
elementwise.cc:217:21:TfLiteStatus tflite::ops::micro::elementwise::{anonymous}::EvalNumeric(TfLiteContext*, TfLiteNode*, float (*)(float))	1
elementwise.cc:329:14:TfLiteStatus tflite::ops::micro::elementwise::{anonymous}::SinEval(TfLiteContext*, TfLiteNode*)	1
elementwise.cc:333:14:TfLiteStatus tflite::ops::micro::elementwise::{anonymous}::CosEval(TfLiteContext*, TfLiteNode*)	1
elementwise.cc:337:14:TfLiteStatus tflite::ops::micro::elementwise::{anonymous}::LogEval(TfLiteContext*, TfLiteNode*)	1
elementwise.cc:341:14:TfLiteStatus tflite::ops::micro::elementwise::{anonymous}::SqrtEval(TfLiteContext*, TfLiteNode*)	1
elementwise.cc:365:14:TfLiteStatus tflite::ops::micro::elementwise::{anonymous}::SquareEval(TfLiteContext*, TfLiteNode*)	1
elementwise.cc:369:14:TfLiteStatus tflite::ops::micro::elementwise::{anonymous}::LogicalNotEval(TfLiteContext*, TfLiteNode*)	3
elementwise.cc:172:21:TfLiteStatus tflite::ops::micro::elementwise::{anonymous}::EvalImplQuantized(TfLiteContext*, TfLiteNode*, T (*)(TfLiteContext*, TfLiteNode*, T), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*, T), TfLiteType) [with T = signed char]	5
elementwise.cc:345:14:TfLiteStatus tflite::ops::micro::elementwise::{anonymous}::RsqrtEval(TfLiteContext*, TfLiteNode*)	3
elementwise.cc:376:20:TfLiteRegistration tflite::ops::micro::Register_ABS()	1
elementwise.cc:384:20:TfLiteRegistration tflite::ops::micro::Register_SIN()	1
elementwise.cc:390:20:TfLiteRegistration tflite::ops::micro::Register_COS()	1
elementwise.cc:396:20:TfLiteRegistration tflite::ops::micro::Register_LOG()	1
elementwise.cc:402:20:TfLiteRegistration tflite::ops::micro::Register_SQRT()	1
elementwise.cc:408:20:TfLiteRegistration tflite::ops::micro::Register_RSQRT()	1
elementwise.cc:416:20:TfLiteRegistration tflite::ops::micro::Register_SQUARE()	1
elementwise.cc:422:20:TfLiteRegistration tflite::ops::micro::Register_LOGICAL_NOT()	1
fixedpoint.h:357:20:IntegerType gemmlowp::RoundingDivideByPOT(IntegerType, int) [with IntegerType = long int]	1
common.h:253:16:int32_t tflite::MultiplyByQuantizedMultiplier(int32_t, int32_t, int)	2
elementwise.cc:295:14:TfLiteStatus tflite::ops::micro::elementwise::{anonymous}::AbsEval(TfLiteContext*, TfLiteNode*)	13
elementwise.cc:237:10:T tflite::ops::micro::elementwise::{anonymous}::AbsEvalQuantized(TfLiteContext*, TfLiteNode*, T) [with T = signed char]	6
common.h:830:13:void tflite::GetInvSqrtQuantizedMultiplierExp(int32_t, int, int32_t*, int*)	12
elementwise.cc:259:10:T tflite::ops::micro::elementwise::{anonymous}::RsqrtEvalQuantized(TfLiteContext*, TfLiteNode*, T) [with T = signed char]	4
